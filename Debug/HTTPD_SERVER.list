
HTTPD_SERVER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  90000000  90000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000117ac  900001d0  900001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004308  9001197c  9001197c  0002197c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  90015c84  90015c84  000301e0  2**0
                  CONTENTS
  4 .ARM          00000008  90015c84  90015c84  00025c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  90015c8c  90015c8c  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  90015c8c  90015c8c  00025c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  90015c90  90015c90  00025c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  90015c94  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000a0  90015d34  000300a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000140  90015dd4  00030140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000a82c  200001e0  90015e74  000301e0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000aa0c  90015e74  0003aa0c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001b3e2  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004ef5  00000000  00000000  0004b5f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001368  00000000  00000000  000504e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001298  00000000  00000000  00051850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00033231  00000000  00000000  00052ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00022c3b  00000000  00000000  00085d19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fecda  00000000  00000000  000a8954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001a762e  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000057a8  00000000  00000000  001a7680  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

900001d0 <__do_global_dtors_aux>:
900001d0:	b510      	push	{r4, lr}
900001d2:	4c05      	ldr	r4, [pc, #20]	; (900001e8 <__do_global_dtors_aux+0x18>)
900001d4:	7823      	ldrb	r3, [r4, #0]
900001d6:	b933      	cbnz	r3, 900001e6 <__do_global_dtors_aux+0x16>
900001d8:	4b04      	ldr	r3, [pc, #16]	; (900001ec <__do_global_dtors_aux+0x1c>)
900001da:	b113      	cbz	r3, 900001e2 <__do_global_dtors_aux+0x12>
900001dc:	4804      	ldr	r0, [pc, #16]	; (900001f0 <__do_global_dtors_aux+0x20>)
900001de:	f3af 8000 	nop.w
900001e2:	2301      	movs	r3, #1
900001e4:	7023      	strb	r3, [r4, #0]
900001e6:	bd10      	pop	{r4, pc}
900001e8:	200001e0 	.word	0x200001e0
900001ec:	00000000 	.word	0x00000000
900001f0:	90011964 	.word	0x90011964

900001f4 <frame_dummy>:
900001f4:	b508      	push	{r3, lr}
900001f6:	4b03      	ldr	r3, [pc, #12]	; (90000204 <frame_dummy+0x10>)
900001f8:	b11b      	cbz	r3, 90000202 <frame_dummy+0xe>
900001fa:	4903      	ldr	r1, [pc, #12]	; (90000208 <frame_dummy+0x14>)
900001fc:	4803      	ldr	r0, [pc, #12]	; (9000020c <frame_dummy+0x18>)
900001fe:	f3af 8000 	nop.w
90000202:	bd08      	pop	{r3, pc}
90000204:	00000000 	.word	0x00000000
90000208:	200001e4 	.word	0x200001e4
9000020c:	90011964 	.word	0x90011964

90000210 <strcmp>:
90000210:	f810 2b01 	ldrb.w	r2, [r0], #1
90000214:	f811 3b01 	ldrb.w	r3, [r1], #1
90000218:	2a01      	cmp	r2, #1
9000021a:	bf28      	it	cs
9000021c:	429a      	cmpcs	r2, r3
9000021e:	d0f7      	beq.n	90000210 <strcmp>
90000220:	1ad0      	subs	r0, r2, r3
90000222:	4770      	bx	lr

90000224 <strlen>:
90000224:	4603      	mov	r3, r0
90000226:	f813 2b01 	ldrb.w	r2, [r3], #1
9000022a:	2a00      	cmp	r2, #0
9000022c:	d1fb      	bne.n	90000226 <strlen+0x2>
9000022e:	1a18      	subs	r0, r3, r0
90000230:	3801      	subs	r0, #1
90000232:	4770      	bx	lr
	...

90000240 <memchr>:
90000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
90000244:	2a10      	cmp	r2, #16
90000246:	db2b      	blt.n	900002a0 <memchr+0x60>
90000248:	f010 0f07 	tst.w	r0, #7
9000024c:	d008      	beq.n	90000260 <memchr+0x20>
9000024e:	f810 3b01 	ldrb.w	r3, [r0], #1
90000252:	3a01      	subs	r2, #1
90000254:	428b      	cmp	r3, r1
90000256:	d02d      	beq.n	900002b4 <memchr+0x74>
90000258:	f010 0f07 	tst.w	r0, #7
9000025c:	b342      	cbz	r2, 900002b0 <memchr+0x70>
9000025e:	d1f6      	bne.n	9000024e <memchr+0xe>
90000260:	b4f0      	push	{r4, r5, r6, r7}
90000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
90000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
9000026a:	f022 0407 	bic.w	r4, r2, #7
9000026e:	f07f 0700 	mvns.w	r7, #0
90000272:	2300      	movs	r3, #0
90000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
90000278:	3c08      	subs	r4, #8
9000027a:	ea85 0501 	eor.w	r5, r5, r1
9000027e:	ea86 0601 	eor.w	r6, r6, r1
90000282:	fa85 f547 	uadd8	r5, r5, r7
90000286:	faa3 f587 	sel	r5, r3, r7
9000028a:	fa86 f647 	uadd8	r6, r6, r7
9000028e:	faa5 f687 	sel	r6, r5, r7
90000292:	b98e      	cbnz	r6, 900002b8 <memchr+0x78>
90000294:	d1ee      	bne.n	90000274 <memchr+0x34>
90000296:	bcf0      	pop	{r4, r5, r6, r7}
90000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
9000029c:	f002 0207 	and.w	r2, r2, #7
900002a0:	b132      	cbz	r2, 900002b0 <memchr+0x70>
900002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
900002a6:	3a01      	subs	r2, #1
900002a8:	ea83 0301 	eor.w	r3, r3, r1
900002ac:	b113      	cbz	r3, 900002b4 <memchr+0x74>
900002ae:	d1f8      	bne.n	900002a2 <memchr+0x62>
900002b0:	2000      	movs	r0, #0
900002b2:	4770      	bx	lr
900002b4:	3801      	subs	r0, #1
900002b6:	4770      	bx	lr
900002b8:	2d00      	cmp	r5, #0
900002ba:	bf06      	itte	eq
900002bc:	4635      	moveq	r5, r6
900002be:	3803      	subeq	r0, #3
900002c0:	3807      	subne	r0, #7
900002c2:	f015 0f01 	tst.w	r5, #1
900002c6:	d107      	bne.n	900002d8 <memchr+0x98>
900002c8:	3001      	adds	r0, #1
900002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
900002ce:	bf02      	ittt	eq
900002d0:	3001      	addeq	r0, #1
900002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
900002d6:	3001      	addeq	r0, #1
900002d8:	bcf0      	pop	{r4, r5, r6, r7}
900002da:	3801      	subs	r0, #1
900002dc:	4770      	bx	lr
900002de:	bf00      	nop

900002e0 <__aeabi_uldivmod>:
900002e0:	b953      	cbnz	r3, 900002f8 <__aeabi_uldivmod+0x18>
900002e2:	b94a      	cbnz	r2, 900002f8 <__aeabi_uldivmod+0x18>
900002e4:	2900      	cmp	r1, #0
900002e6:	bf08      	it	eq
900002e8:	2800      	cmpeq	r0, #0
900002ea:	bf1c      	itt	ne
900002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
900002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
900002f4:	f000 b974 	b.w	900005e0 <__aeabi_idiv0>
900002f8:	f1ad 0c08 	sub.w	ip, sp, #8
900002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
90000300:	f000 f806 	bl	90000310 <__udivmoddi4>
90000304:	f8dd e004 	ldr.w	lr, [sp, #4]
90000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
9000030c:	b004      	add	sp, #16
9000030e:	4770      	bx	lr

90000310 <__udivmoddi4>:
90000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90000314:	9d08      	ldr	r5, [sp, #32]
90000316:	4604      	mov	r4, r0
90000318:	468e      	mov	lr, r1
9000031a:	2b00      	cmp	r3, #0
9000031c:	d14d      	bne.n	900003ba <__udivmoddi4+0xaa>
9000031e:	428a      	cmp	r2, r1
90000320:	4694      	mov	ip, r2
90000322:	d969      	bls.n	900003f8 <__udivmoddi4+0xe8>
90000324:	fab2 f282 	clz	r2, r2
90000328:	b152      	cbz	r2, 90000340 <__udivmoddi4+0x30>
9000032a:	fa01 f302 	lsl.w	r3, r1, r2
9000032e:	f1c2 0120 	rsb	r1, r2, #32
90000332:	fa20 f101 	lsr.w	r1, r0, r1
90000336:	fa0c fc02 	lsl.w	ip, ip, r2
9000033a:	ea41 0e03 	orr.w	lr, r1, r3
9000033e:	4094      	lsls	r4, r2
90000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
90000344:	0c21      	lsrs	r1, r4, #16
90000346:	fbbe f6f8 	udiv	r6, lr, r8
9000034a:	fa1f f78c 	uxth.w	r7, ip
9000034e:	fb08 e316 	mls	r3, r8, r6, lr
90000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
90000356:	fb06 f107 	mul.w	r1, r6, r7
9000035a:	4299      	cmp	r1, r3
9000035c:	d90a      	bls.n	90000374 <__udivmoddi4+0x64>
9000035e:	eb1c 0303 	adds.w	r3, ip, r3
90000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
90000366:	f080 811f 	bcs.w	900005a8 <__udivmoddi4+0x298>
9000036a:	4299      	cmp	r1, r3
9000036c:	f240 811c 	bls.w	900005a8 <__udivmoddi4+0x298>
90000370:	3e02      	subs	r6, #2
90000372:	4463      	add	r3, ip
90000374:	1a5b      	subs	r3, r3, r1
90000376:	b2a4      	uxth	r4, r4
90000378:	fbb3 f0f8 	udiv	r0, r3, r8
9000037c:	fb08 3310 	mls	r3, r8, r0, r3
90000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
90000384:	fb00 f707 	mul.w	r7, r0, r7
90000388:	42a7      	cmp	r7, r4
9000038a:	d90a      	bls.n	900003a2 <__udivmoddi4+0x92>
9000038c:	eb1c 0404 	adds.w	r4, ip, r4
90000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
90000394:	f080 810a 	bcs.w	900005ac <__udivmoddi4+0x29c>
90000398:	42a7      	cmp	r7, r4
9000039a:	f240 8107 	bls.w	900005ac <__udivmoddi4+0x29c>
9000039e:	4464      	add	r4, ip
900003a0:	3802      	subs	r0, #2
900003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
900003a6:	1be4      	subs	r4, r4, r7
900003a8:	2600      	movs	r6, #0
900003aa:	b11d      	cbz	r5, 900003b4 <__udivmoddi4+0xa4>
900003ac:	40d4      	lsrs	r4, r2
900003ae:	2300      	movs	r3, #0
900003b0:	e9c5 4300 	strd	r4, r3, [r5]
900003b4:	4631      	mov	r1, r6
900003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900003ba:	428b      	cmp	r3, r1
900003bc:	d909      	bls.n	900003d2 <__udivmoddi4+0xc2>
900003be:	2d00      	cmp	r5, #0
900003c0:	f000 80ef 	beq.w	900005a2 <__udivmoddi4+0x292>
900003c4:	2600      	movs	r6, #0
900003c6:	e9c5 0100 	strd	r0, r1, [r5]
900003ca:	4630      	mov	r0, r6
900003cc:	4631      	mov	r1, r6
900003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900003d2:	fab3 f683 	clz	r6, r3
900003d6:	2e00      	cmp	r6, #0
900003d8:	d14a      	bne.n	90000470 <__udivmoddi4+0x160>
900003da:	428b      	cmp	r3, r1
900003dc:	d302      	bcc.n	900003e4 <__udivmoddi4+0xd4>
900003de:	4282      	cmp	r2, r0
900003e0:	f200 80f9 	bhi.w	900005d6 <__udivmoddi4+0x2c6>
900003e4:	1a84      	subs	r4, r0, r2
900003e6:	eb61 0303 	sbc.w	r3, r1, r3
900003ea:	2001      	movs	r0, #1
900003ec:	469e      	mov	lr, r3
900003ee:	2d00      	cmp	r5, #0
900003f0:	d0e0      	beq.n	900003b4 <__udivmoddi4+0xa4>
900003f2:	e9c5 4e00 	strd	r4, lr, [r5]
900003f6:	e7dd      	b.n	900003b4 <__udivmoddi4+0xa4>
900003f8:	b902      	cbnz	r2, 900003fc <__udivmoddi4+0xec>
900003fa:	deff      	udf	#255	; 0xff
900003fc:	fab2 f282 	clz	r2, r2
90000400:	2a00      	cmp	r2, #0
90000402:	f040 8092 	bne.w	9000052a <__udivmoddi4+0x21a>
90000406:	eba1 010c 	sub.w	r1, r1, ip
9000040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
9000040e:	fa1f fe8c 	uxth.w	lr, ip
90000412:	2601      	movs	r6, #1
90000414:	0c20      	lsrs	r0, r4, #16
90000416:	fbb1 f3f7 	udiv	r3, r1, r7
9000041a:	fb07 1113 	mls	r1, r7, r3, r1
9000041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
90000422:	fb0e f003 	mul.w	r0, lr, r3
90000426:	4288      	cmp	r0, r1
90000428:	d908      	bls.n	9000043c <__udivmoddi4+0x12c>
9000042a:	eb1c 0101 	adds.w	r1, ip, r1
9000042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
90000432:	d202      	bcs.n	9000043a <__udivmoddi4+0x12a>
90000434:	4288      	cmp	r0, r1
90000436:	f200 80cb 	bhi.w	900005d0 <__udivmoddi4+0x2c0>
9000043a:	4643      	mov	r3, r8
9000043c:	1a09      	subs	r1, r1, r0
9000043e:	b2a4      	uxth	r4, r4
90000440:	fbb1 f0f7 	udiv	r0, r1, r7
90000444:	fb07 1110 	mls	r1, r7, r0, r1
90000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
9000044c:	fb0e fe00 	mul.w	lr, lr, r0
90000450:	45a6      	cmp	lr, r4
90000452:	d908      	bls.n	90000466 <__udivmoddi4+0x156>
90000454:	eb1c 0404 	adds.w	r4, ip, r4
90000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
9000045c:	d202      	bcs.n	90000464 <__udivmoddi4+0x154>
9000045e:	45a6      	cmp	lr, r4
90000460:	f200 80bb 	bhi.w	900005da <__udivmoddi4+0x2ca>
90000464:	4608      	mov	r0, r1
90000466:	eba4 040e 	sub.w	r4, r4, lr
9000046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
9000046e:	e79c      	b.n	900003aa <__udivmoddi4+0x9a>
90000470:	f1c6 0720 	rsb	r7, r6, #32
90000474:	40b3      	lsls	r3, r6
90000476:	fa22 fc07 	lsr.w	ip, r2, r7
9000047a:	ea4c 0c03 	orr.w	ip, ip, r3
9000047e:	fa20 f407 	lsr.w	r4, r0, r7
90000482:	fa01 f306 	lsl.w	r3, r1, r6
90000486:	431c      	orrs	r4, r3
90000488:	40f9      	lsrs	r1, r7
9000048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
9000048e:	fa00 f306 	lsl.w	r3, r0, r6
90000492:	fbb1 f8f9 	udiv	r8, r1, r9
90000496:	0c20      	lsrs	r0, r4, #16
90000498:	fa1f fe8c 	uxth.w	lr, ip
9000049c:	fb09 1118 	mls	r1, r9, r8, r1
900004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
900004a4:	fb08 f00e 	mul.w	r0, r8, lr
900004a8:	4288      	cmp	r0, r1
900004aa:	fa02 f206 	lsl.w	r2, r2, r6
900004ae:	d90b      	bls.n	900004c8 <__udivmoddi4+0x1b8>
900004b0:	eb1c 0101 	adds.w	r1, ip, r1
900004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
900004b8:	f080 8088 	bcs.w	900005cc <__udivmoddi4+0x2bc>
900004bc:	4288      	cmp	r0, r1
900004be:	f240 8085 	bls.w	900005cc <__udivmoddi4+0x2bc>
900004c2:	f1a8 0802 	sub.w	r8, r8, #2
900004c6:	4461      	add	r1, ip
900004c8:	1a09      	subs	r1, r1, r0
900004ca:	b2a4      	uxth	r4, r4
900004cc:	fbb1 f0f9 	udiv	r0, r1, r9
900004d0:	fb09 1110 	mls	r1, r9, r0, r1
900004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
900004d8:	fb00 fe0e 	mul.w	lr, r0, lr
900004dc:	458e      	cmp	lr, r1
900004de:	d908      	bls.n	900004f2 <__udivmoddi4+0x1e2>
900004e0:	eb1c 0101 	adds.w	r1, ip, r1
900004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
900004e8:	d26c      	bcs.n	900005c4 <__udivmoddi4+0x2b4>
900004ea:	458e      	cmp	lr, r1
900004ec:	d96a      	bls.n	900005c4 <__udivmoddi4+0x2b4>
900004ee:	3802      	subs	r0, #2
900004f0:	4461      	add	r1, ip
900004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
900004f6:	fba0 9402 	umull	r9, r4, r0, r2
900004fa:	eba1 010e 	sub.w	r1, r1, lr
900004fe:	42a1      	cmp	r1, r4
90000500:	46c8      	mov	r8, r9
90000502:	46a6      	mov	lr, r4
90000504:	d356      	bcc.n	900005b4 <__udivmoddi4+0x2a4>
90000506:	d053      	beq.n	900005b0 <__udivmoddi4+0x2a0>
90000508:	b15d      	cbz	r5, 90000522 <__udivmoddi4+0x212>
9000050a:	ebb3 0208 	subs.w	r2, r3, r8
9000050e:	eb61 010e 	sbc.w	r1, r1, lr
90000512:	fa01 f707 	lsl.w	r7, r1, r7
90000516:	fa22 f306 	lsr.w	r3, r2, r6
9000051a:	40f1      	lsrs	r1, r6
9000051c:	431f      	orrs	r7, r3
9000051e:	e9c5 7100 	strd	r7, r1, [r5]
90000522:	2600      	movs	r6, #0
90000524:	4631      	mov	r1, r6
90000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000052a:	f1c2 0320 	rsb	r3, r2, #32
9000052e:	40d8      	lsrs	r0, r3
90000530:	fa0c fc02 	lsl.w	ip, ip, r2
90000534:	fa21 f303 	lsr.w	r3, r1, r3
90000538:	4091      	lsls	r1, r2
9000053a:	4301      	orrs	r1, r0
9000053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
90000540:	fa1f fe8c 	uxth.w	lr, ip
90000544:	fbb3 f0f7 	udiv	r0, r3, r7
90000548:	fb07 3610 	mls	r6, r7, r0, r3
9000054c:	0c0b      	lsrs	r3, r1, #16
9000054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
90000552:	fb00 f60e 	mul.w	r6, r0, lr
90000556:	429e      	cmp	r6, r3
90000558:	fa04 f402 	lsl.w	r4, r4, r2
9000055c:	d908      	bls.n	90000570 <__udivmoddi4+0x260>
9000055e:	eb1c 0303 	adds.w	r3, ip, r3
90000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
90000566:	d22f      	bcs.n	900005c8 <__udivmoddi4+0x2b8>
90000568:	429e      	cmp	r6, r3
9000056a:	d92d      	bls.n	900005c8 <__udivmoddi4+0x2b8>
9000056c:	3802      	subs	r0, #2
9000056e:	4463      	add	r3, ip
90000570:	1b9b      	subs	r3, r3, r6
90000572:	b289      	uxth	r1, r1
90000574:	fbb3 f6f7 	udiv	r6, r3, r7
90000578:	fb07 3316 	mls	r3, r7, r6, r3
9000057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
90000580:	fb06 f30e 	mul.w	r3, r6, lr
90000584:	428b      	cmp	r3, r1
90000586:	d908      	bls.n	9000059a <__udivmoddi4+0x28a>
90000588:	eb1c 0101 	adds.w	r1, ip, r1
9000058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
90000590:	d216      	bcs.n	900005c0 <__udivmoddi4+0x2b0>
90000592:	428b      	cmp	r3, r1
90000594:	d914      	bls.n	900005c0 <__udivmoddi4+0x2b0>
90000596:	3e02      	subs	r6, #2
90000598:	4461      	add	r1, ip
9000059a:	1ac9      	subs	r1, r1, r3
9000059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
900005a0:	e738      	b.n	90000414 <__udivmoddi4+0x104>
900005a2:	462e      	mov	r6, r5
900005a4:	4628      	mov	r0, r5
900005a6:	e705      	b.n	900003b4 <__udivmoddi4+0xa4>
900005a8:	4606      	mov	r6, r0
900005aa:	e6e3      	b.n	90000374 <__udivmoddi4+0x64>
900005ac:	4618      	mov	r0, r3
900005ae:	e6f8      	b.n	900003a2 <__udivmoddi4+0x92>
900005b0:	454b      	cmp	r3, r9
900005b2:	d2a9      	bcs.n	90000508 <__udivmoddi4+0x1f8>
900005b4:	ebb9 0802 	subs.w	r8, r9, r2
900005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
900005bc:	3801      	subs	r0, #1
900005be:	e7a3      	b.n	90000508 <__udivmoddi4+0x1f8>
900005c0:	4646      	mov	r6, r8
900005c2:	e7ea      	b.n	9000059a <__udivmoddi4+0x28a>
900005c4:	4620      	mov	r0, r4
900005c6:	e794      	b.n	900004f2 <__udivmoddi4+0x1e2>
900005c8:	4640      	mov	r0, r8
900005ca:	e7d1      	b.n	90000570 <__udivmoddi4+0x260>
900005cc:	46d0      	mov	r8, sl
900005ce:	e77b      	b.n	900004c8 <__udivmoddi4+0x1b8>
900005d0:	3b02      	subs	r3, #2
900005d2:	4461      	add	r1, ip
900005d4:	e732      	b.n	9000043c <__udivmoddi4+0x12c>
900005d6:	4630      	mov	r0, r6
900005d8:	e709      	b.n	900003ee <__udivmoddi4+0xde>
900005da:	4464      	add	r4, ip
900005dc:	3802      	subs	r0, #2
900005de:	e742      	b.n	90000466 <__udivmoddi4+0x156>

900005e0 <__aeabi_idiv0>:
900005e0:	4770      	bx	lr
900005e2:	bf00      	nop

900005e4 <ssi_handler>:
/* we will use character "x", "y","z" as tag for SSI */
char const* TAGCHAR[]={"x", "y", "z"};
char const** TAGS=TAGCHAR;

uint16_t ssi_handler (int iIndex, char *pcInsert, int iInsertLen)
{
900005e4:	b580      	push	{r7, lr}
900005e6:	b084      	sub	sp, #16
900005e8:	af00      	add	r7, sp, #0
900005ea:	60f8      	str	r0, [r7, #12]
900005ec:	60b9      	str	r1, [r7, #8]
900005ee:	607a      	str	r2, [r7, #4]
	switch (iIndex) {
900005f0:	68fb      	ldr	r3, [r7, #12]
900005f2:	2b02      	cmp	r3, #2
900005f4:	d02d      	beq.n	90000652 <ssi_handler+0x6e>
900005f6:	68fb      	ldr	r3, [r7, #12]
900005f8:	2b02      	cmp	r3, #2
900005fa:	dc3c      	bgt.n	90000676 <ssi_handler+0x92>
900005fc:	68fb      	ldr	r3, [r7, #12]
900005fe:	2b00      	cmp	r3, #0
90000600:	d003      	beq.n	9000060a <ssi_handler+0x26>
90000602:	68fb      	ldr	r3, [r7, #12]
90000604:	2b01      	cmp	r3, #1
90000606:	d012      	beq.n	9000062e <ssi_handler+0x4a>
			indx+=1;
			sprintf(pcInsert, "%d", indx);
			return strlen(pcInsert);
			break;
		default :
			break;
90000608:	e035      	b.n	90000676 <ssi_handler+0x92>
			indx+=1;
9000060a:	4b1e      	ldr	r3, [pc, #120]	; (90000684 <ssi_handler+0xa0>)
9000060c:	681b      	ldr	r3, [r3, #0]
9000060e:	3301      	adds	r3, #1
90000610:	4a1c      	ldr	r2, [pc, #112]	; (90000684 <ssi_handler+0xa0>)
90000612:	6013      	str	r3, [r2, #0]
			sprintf(pcInsert, "%d", indx);
90000614:	4b1b      	ldr	r3, [pc, #108]	; (90000684 <ssi_handler+0xa0>)
90000616:	681b      	ldr	r3, [r3, #0]
90000618:	461a      	mov	r2, r3
9000061a:	491b      	ldr	r1, [pc, #108]	; (90000688 <ssi_handler+0xa4>)
9000061c:	68b8      	ldr	r0, [r7, #8]
9000061e:	f00f ffbb 	bl	90010598 <siprintf>
			return strlen(pcInsert);
90000622:	68b8      	ldr	r0, [r7, #8]
90000624:	f7ff fdfe 	bl	90000224 <strlen>
90000628:	4603      	mov	r3, r0
9000062a:	b29b      	uxth	r3, r3
9000062c:	e025      	b.n	9000067a <ssi_handler+0x96>
			indx+=1;
9000062e:	4b15      	ldr	r3, [pc, #84]	; (90000684 <ssi_handler+0xa0>)
90000630:	681b      	ldr	r3, [r3, #0]
90000632:	3301      	adds	r3, #1
90000634:	4a13      	ldr	r2, [pc, #76]	; (90000684 <ssi_handler+0xa0>)
90000636:	6013      	str	r3, [r2, #0]
			sprintf(pcInsert, "%d", indx);
90000638:	4b12      	ldr	r3, [pc, #72]	; (90000684 <ssi_handler+0xa0>)
9000063a:	681b      	ldr	r3, [r3, #0]
9000063c:	461a      	mov	r2, r3
9000063e:	4912      	ldr	r1, [pc, #72]	; (90000688 <ssi_handler+0xa4>)
90000640:	68b8      	ldr	r0, [r7, #8]
90000642:	f00f ffa9 	bl	90010598 <siprintf>
			return strlen(pcInsert);
90000646:	68b8      	ldr	r0, [r7, #8]
90000648:	f7ff fdec 	bl	90000224 <strlen>
9000064c:	4603      	mov	r3, r0
9000064e:	b29b      	uxth	r3, r3
90000650:	e013      	b.n	9000067a <ssi_handler+0x96>
			indx+=1;
90000652:	4b0c      	ldr	r3, [pc, #48]	; (90000684 <ssi_handler+0xa0>)
90000654:	681b      	ldr	r3, [r3, #0]
90000656:	3301      	adds	r3, #1
90000658:	4a0a      	ldr	r2, [pc, #40]	; (90000684 <ssi_handler+0xa0>)
9000065a:	6013      	str	r3, [r2, #0]
			sprintf(pcInsert, "%d", indx);
9000065c:	4b09      	ldr	r3, [pc, #36]	; (90000684 <ssi_handler+0xa0>)
9000065e:	681b      	ldr	r3, [r3, #0]
90000660:	461a      	mov	r2, r3
90000662:	4909      	ldr	r1, [pc, #36]	; (90000688 <ssi_handler+0xa4>)
90000664:	68b8      	ldr	r0, [r7, #8]
90000666:	f00f ff97 	bl	90010598 <siprintf>
			return strlen(pcInsert);
9000066a:	68b8      	ldr	r0, [r7, #8]
9000066c:	f7ff fdda 	bl	90000224 <strlen>
90000670:	4603      	mov	r3, r0
90000672:	b29b      	uxth	r3, r3
90000674:	e001      	b.n	9000067a <ssi_handler+0x96>
			break;
90000676:	bf00      	nop
	}

	return 0;
90000678:	2300      	movs	r3, #0
}
9000067a:	4618      	mov	r0, r3
9000067c:	3710      	adds	r7, #16
9000067e:	46bd      	mov	sp, r7
90000680:	bd80      	pop	{r7, pc}
90000682:	bf00      	nop
90000684:	200001fc 	.word	0x200001fc
90000688:	90011988 	.word	0x90011988

9000068c <CGIForm_Handler>:

tCGI CGI_TAB[2];


const char *CGIForm_Handler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
9000068c:	b580      	push	{r7, lr}
9000068e:	b086      	sub	sp, #24
90000690:	af00      	add	r7, sp, #0
90000692:	60f8      	str	r0, [r7, #12]
90000694:	60b9      	str	r1, [r7, #8]
90000696:	607a      	str	r2, [r7, #4]
90000698:	603b      	str	r3, [r7, #0]
	if (iIndex == 0)
9000069a:	68fb      	ldr	r3, [r7, #12]
9000069c:	2b00      	cmp	r3, #0
9000069e:	d145      	bne.n	9000072c <CGIForm_Handler+0xa0>
	{
		for (int i=0; i<iNumParams; i++)
900006a0:	2300      	movs	r3, #0
900006a2:	617b      	str	r3, [r7, #20]
900006a4:	e03e      	b.n	90000724 <CGIForm_Handler+0x98>
		{
			if (strcmp(pcParam[i], "fname") == 0)  // if the fname string is found
900006a6:	697b      	ldr	r3, [r7, #20]
900006a8:	009b      	lsls	r3, r3, #2
900006aa:	687a      	ldr	r2, [r7, #4]
900006ac:	4413      	add	r3, r2
900006ae:	681b      	ldr	r3, [r3, #0]
900006b0:	4921      	ldr	r1, [pc, #132]	; (90000738 <CGIForm_Handler+0xac>)
900006b2:	4618      	mov	r0, r3
900006b4:	f7ff fdac 	bl	90000210 <strcmp>
900006b8:	4603      	mov	r3, r0
900006ba:	2b00      	cmp	r3, #0
900006bc:	d10e      	bne.n	900006dc <CGIForm_Handler+0x50>
			{
				memset(name, '\0', 30);
900006be:	221e      	movs	r2, #30
900006c0:	2100      	movs	r1, #0
900006c2:	481e      	ldr	r0, [pc, #120]	; (9000073c <CGIForm_Handler+0xb0>)
900006c4:	f00f ff0a 	bl	900104dc <memset>
				strcpy(name, pcValue[i]);
900006c8:	697b      	ldr	r3, [r7, #20]
900006ca:	009b      	lsls	r3, r3, #2
900006cc:	683a      	ldr	r2, [r7, #0]
900006ce:	4413      	add	r3, r2
900006d0:	681b      	ldr	r3, [r3, #0]
900006d2:	4619      	mov	r1, r3
900006d4:	4819      	ldr	r0, [pc, #100]	; (9000073c <CGIForm_Handler+0xb0>)
900006d6:	f00f ff9b 	bl	90010610 <strcpy>
900006da:	e020      	b.n	9000071e <CGIForm_Handler+0x92>
			}

			else if (strcmp(pcParam[i], "lname") == 0)  // if the fname string is found
900006dc:	697b      	ldr	r3, [r7, #20]
900006de:	009b      	lsls	r3, r3, #2
900006e0:	687a      	ldr	r2, [r7, #4]
900006e2:	4413      	add	r3, r2
900006e4:	681b      	ldr	r3, [r3, #0]
900006e6:	4916      	ldr	r1, [pc, #88]	; (90000740 <CGIForm_Handler+0xb4>)
900006e8:	4618      	mov	r0, r3
900006ea:	f7ff fd91 	bl	90000210 <strcmp>
900006ee:	4603      	mov	r3, r0
900006f0:	2b00      	cmp	r3, #0
900006f2:	d114      	bne.n	9000071e <CGIForm_Handler+0x92>
			{
				strcat(name, " ");
900006f4:	4811      	ldr	r0, [pc, #68]	; (9000073c <CGIForm_Handler+0xb0>)
900006f6:	f7ff fd95 	bl	90000224 <strlen>
900006fa:	4603      	mov	r3, r0
900006fc:	461a      	mov	r2, r3
900006fe:	4b0f      	ldr	r3, [pc, #60]	; (9000073c <CGIForm_Handler+0xb0>)
90000700:	4413      	add	r3, r2
90000702:	4910      	ldr	r1, [pc, #64]	; (90000744 <CGIForm_Handler+0xb8>)
90000704:	461a      	mov	r2, r3
90000706:	460b      	mov	r3, r1
90000708:	881b      	ldrh	r3, [r3, #0]
9000070a:	8013      	strh	r3, [r2, #0]
				strcat(name, pcValue[i]);
9000070c:	697b      	ldr	r3, [r7, #20]
9000070e:	009b      	lsls	r3, r3, #2
90000710:	683a      	ldr	r2, [r7, #0]
90000712:	4413      	add	r3, r2
90000714:	681b      	ldr	r3, [r3, #0]
90000716:	4619      	mov	r1, r3
90000718:	4808      	ldr	r0, [pc, #32]	; (9000073c <CGIForm_Handler+0xb0>)
9000071a:	f00f ff5d 	bl	900105d8 <strcat>
		for (int i=0; i<iNumParams; i++)
9000071e:	697b      	ldr	r3, [r7, #20]
90000720:	3301      	adds	r3, #1
90000722:	617b      	str	r3, [r7, #20]
90000724:	697a      	ldr	r2, [r7, #20]
90000726:	68bb      	ldr	r3, [r7, #8]
90000728:	429a      	cmp	r2, r3
9000072a:	dbbc      	blt.n	900006a6 <CGIForm_Handler+0x1a>
			}
		}
	}

	return "/cgiform.html";
9000072c:	4b06      	ldr	r3, [pc, #24]	; (90000748 <CGIForm_Handler+0xbc>)
}
9000072e:	4618      	mov	r0, r3
90000730:	3718      	adds	r7, #24
90000732:	46bd      	mov	sp, r7
90000734:	bd80      	pop	{r7, pc}
90000736:	bf00      	nop
90000738:	900119a4 	.word	0x900119a4
9000073c:	20000200 	.word	0x20000200
90000740:	900119ac 	.word	0x900119ac
90000744:	900119b4 	.word	0x900119b4
90000748:	900119b8 	.word	0x900119b8

9000074c <CGILED_Handler>:


const char *CGILED_Handler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
9000074c:	b580      	push	{r7, lr}
9000074e:	b086      	sub	sp, #24
90000750:	af00      	add	r7, sp, #0
90000752:	60f8      	str	r0, [r7, #12]
90000754:	60b9      	str	r1, [r7, #8]
90000756:	607a      	str	r2, [r7, #4]
90000758:	603b      	str	r3, [r7, #0]
	if (iIndex == 1)
9000075a:	68fb      	ldr	r3, [r7, #12]
9000075c:	2b01      	cmp	r3, #1
9000075e:	d145      	bne.n	900007ec <CGILED_Handler+0xa0>
	{
		for (int i=0; i<iNumParams; i++)
90000760:	2300      	movs	r3, #0
90000762:	617b      	str	r3, [r7, #20]
90000764:	e03e      	b.n	900007e4 <CGILED_Handler+0x98>
		{
			if (strcmp(pcParam[i], "fname") == 0)  // if the fname string is found
90000766:	697b      	ldr	r3, [r7, #20]
90000768:	009b      	lsls	r3, r3, #2
9000076a:	687a      	ldr	r2, [r7, #4]
9000076c:	4413      	add	r3, r2
9000076e:	681b      	ldr	r3, [r3, #0]
90000770:	4921      	ldr	r1, [pc, #132]	; (900007f8 <CGILED_Handler+0xac>)
90000772:	4618      	mov	r0, r3
90000774:	f7ff fd4c 	bl	90000210 <strcmp>
90000778:	4603      	mov	r3, r0
9000077a:	2b00      	cmp	r3, #0
9000077c:	d10e      	bne.n	9000079c <CGILED_Handler+0x50>
			{
				memset(name, '\0', 30);
9000077e:	221e      	movs	r2, #30
90000780:	2100      	movs	r1, #0
90000782:	481e      	ldr	r0, [pc, #120]	; (900007fc <CGILED_Handler+0xb0>)
90000784:	f00f feaa 	bl	900104dc <memset>
				strcpy(name, pcValue[i]);
90000788:	697b      	ldr	r3, [r7, #20]
9000078a:	009b      	lsls	r3, r3, #2
9000078c:	683a      	ldr	r2, [r7, #0]
9000078e:	4413      	add	r3, r2
90000790:	681b      	ldr	r3, [r3, #0]
90000792:	4619      	mov	r1, r3
90000794:	4819      	ldr	r0, [pc, #100]	; (900007fc <CGILED_Handler+0xb0>)
90000796:	f00f ff3b 	bl	90010610 <strcpy>
9000079a:	e020      	b.n	900007de <CGILED_Handler+0x92>
			}

			else if (strcmp(pcParam[i], "lname") == 0)  // if the fname string is found
9000079c:	697b      	ldr	r3, [r7, #20]
9000079e:	009b      	lsls	r3, r3, #2
900007a0:	687a      	ldr	r2, [r7, #4]
900007a2:	4413      	add	r3, r2
900007a4:	681b      	ldr	r3, [r3, #0]
900007a6:	4916      	ldr	r1, [pc, #88]	; (90000800 <CGILED_Handler+0xb4>)
900007a8:	4618      	mov	r0, r3
900007aa:	f7ff fd31 	bl	90000210 <strcmp>
900007ae:	4603      	mov	r3, r0
900007b0:	2b00      	cmp	r3, #0
900007b2:	d114      	bne.n	900007de <CGILED_Handler+0x92>
			{
				strcat(name, " ");
900007b4:	4811      	ldr	r0, [pc, #68]	; (900007fc <CGILED_Handler+0xb0>)
900007b6:	f7ff fd35 	bl	90000224 <strlen>
900007ba:	4603      	mov	r3, r0
900007bc:	461a      	mov	r2, r3
900007be:	4b0f      	ldr	r3, [pc, #60]	; (900007fc <CGILED_Handler+0xb0>)
900007c0:	4413      	add	r3, r2
900007c2:	4910      	ldr	r1, [pc, #64]	; (90000804 <CGILED_Handler+0xb8>)
900007c4:	461a      	mov	r2, r3
900007c6:	460b      	mov	r3, r1
900007c8:	881b      	ldrh	r3, [r3, #0]
900007ca:	8013      	strh	r3, [r2, #0]
				strcat(name, pcValue[i]);
900007cc:	697b      	ldr	r3, [r7, #20]
900007ce:	009b      	lsls	r3, r3, #2
900007d0:	683a      	ldr	r2, [r7, #0]
900007d2:	4413      	add	r3, r2
900007d4:	681b      	ldr	r3, [r3, #0]
900007d6:	4619      	mov	r1, r3
900007d8:	4808      	ldr	r0, [pc, #32]	; (900007fc <CGILED_Handler+0xb0>)
900007da:	f00f fefd 	bl	900105d8 <strcat>
		for (int i=0; i<iNumParams; i++)
900007de:	697b      	ldr	r3, [r7, #20]
900007e0:	3301      	adds	r3, #1
900007e2:	617b      	str	r3, [r7, #20]
900007e4:	697a      	ldr	r2, [r7, #20]
900007e6:	68bb      	ldr	r3, [r7, #8]
900007e8:	429a      	cmp	r2, r3
900007ea:	dbbc      	blt.n	90000766 <CGILED_Handler+0x1a>
			}
		}
	}

	return "/cgiled.html";
900007ec:	4b06      	ldr	r3, [pc, #24]	; (90000808 <CGILED_Handler+0xbc>)
}
900007ee:	4618      	mov	r0, r3
900007f0:	3718      	adds	r7, #24
900007f2:	46bd      	mov	sp, r7
900007f4:	bd80      	pop	{r7, pc}
900007f6:	bf00      	nop
900007f8:	900119a4 	.word	0x900119a4
900007fc:	20000200 	.word	0x20000200
90000800:	900119ac 	.word	0x900119ac
90000804:	900119b4 	.word	0x900119b4
90000808:	900119c8 	.word	0x900119c8

9000080c <http_server_init>:

void http_server_init (void)
{
9000080c:	b580      	push	{r7, lr}
9000080e:	af00      	add	r7, sp, #0
	httpd_init();
90000810:	f005 f8fc 	bl	90005a0c <httpd_init>

	http_set_ssi_handler(ssi_handler, (char const**) TAGS, 3);
90000814:	4b0c      	ldr	r3, [pc, #48]	; (90000848 <http_server_init+0x3c>)
90000816:	681b      	ldr	r3, [r3, #0]
90000818:	2203      	movs	r2, #3
9000081a:	4619      	mov	r1, r3
9000081c:	480b      	ldr	r0, [pc, #44]	; (9000084c <http_server_init+0x40>)
9000081e:	f005 f915 	bl	90005a4c <http_set_ssi_handler>

	CGI_TAB[0] = FORM_CGI;
90000822:	4b0b      	ldr	r3, [pc, #44]	; (90000850 <http_server_init+0x44>)
90000824:	4a0b      	ldr	r2, [pc, #44]	; (90000854 <http_server_init+0x48>)
90000826:	e892 0003 	ldmia.w	r2, {r0, r1}
9000082a:	e883 0003 	stmia.w	r3, {r0, r1}
	CGI_TAB[1] = LED_CGI;
9000082e:	4b08      	ldr	r3, [pc, #32]	; (90000850 <http_server_init+0x44>)
90000830:	4a09      	ldr	r2, [pc, #36]	; (90000858 <http_server_init+0x4c>)
90000832:	3308      	adds	r3, #8
90000834:	e892 0003 	ldmia.w	r2, {r0, r1}
90000838:	e883 0003 	stmia.w	r3, {r0, r1}

//	http_set_cgi_handlers (&FORM_CGI, 1);
	http_set_cgi_handlers (CGI_TAB, 2);
9000083c:	2102      	movs	r1, #2
9000083e:	4804      	ldr	r0, [pc, #16]	; (90000850 <http_server_init+0x44>)
90000840:	f005 f946 	bl	90005ad0 <http_set_cgi_handlers>
}
90000844:	bf00      	nop
90000846:	bd80      	pop	{r7, pc}
90000848:	2000000c 	.word	0x2000000c
9000084c:	900005e5 	.word	0x900005e5
90000850:	20000220 	.word	0x20000220
90000854:	900146d0 	.word	0x900146d0
90000858:	900146d8 	.word	0x900146d8

9000085c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
9000085c:	b480      	push	{r7}
9000085e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
90000860:	f3bf 8f4f 	dsb	sy
}
90000864:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90000866:	f3bf 8f6f 	isb	sy
}
9000086a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
9000086c:	4b0d      	ldr	r3, [pc, #52]	; (900008a4 <SCB_EnableICache+0x48>)
9000086e:	2200      	movs	r2, #0
90000870:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
90000874:	f3bf 8f4f 	dsb	sy
}
90000878:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
9000087a:	f3bf 8f6f 	isb	sy
}
9000087e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
90000880:	4b08      	ldr	r3, [pc, #32]	; (900008a4 <SCB_EnableICache+0x48>)
90000882:	695b      	ldr	r3, [r3, #20]
90000884:	4a07      	ldr	r2, [pc, #28]	; (900008a4 <SCB_EnableICache+0x48>)
90000886:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
9000088a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
9000088c:	f3bf 8f4f 	dsb	sy
}
90000890:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90000892:	f3bf 8f6f 	isb	sy
}
90000896:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
90000898:	bf00      	nop
9000089a:	46bd      	mov	sp, r7
9000089c:	f85d 7b04 	ldr.w	r7, [sp], #4
900008a0:	4770      	bx	lr
900008a2:	bf00      	nop
900008a4:	e000ed00 	.word	0xe000ed00

900008a8 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
900008a8:	b480      	push	{r7}
900008aa:	b085      	sub	sp, #20
900008ac:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
900008ae:	4b1f      	ldr	r3, [pc, #124]	; (9000092c <SCB_EnableDCache+0x84>)
900008b0:	2200      	movs	r2, #0
900008b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
900008b6:	f3bf 8f4f 	dsb	sy
}
900008ba:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
900008bc:	4b1b      	ldr	r3, [pc, #108]	; (9000092c <SCB_EnableDCache+0x84>)
900008be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
900008c2:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
900008c4:	687b      	ldr	r3, [r7, #4]
900008c6:	0b5b      	lsrs	r3, r3, #13
900008c8:	f3c3 030e 	ubfx	r3, r3, #0, #15
900008cc:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
900008ce:	687b      	ldr	r3, [r7, #4]
900008d0:	08db      	lsrs	r3, r3, #3
900008d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
900008d6:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
900008d8:	68fb      	ldr	r3, [r7, #12]
900008da:	015a      	lsls	r2, r3, #5
900008dc:	f643 73e0 	movw	r3, #16352	; 0x3fe0
900008e0:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
900008e2:	68ba      	ldr	r2, [r7, #8]
900008e4:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
900008e6:	4911      	ldr	r1, [pc, #68]	; (9000092c <SCB_EnableDCache+0x84>)
900008e8:	4313      	orrs	r3, r2
900008ea:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
900008ee:	68bb      	ldr	r3, [r7, #8]
900008f0:	1e5a      	subs	r2, r3, #1
900008f2:	60ba      	str	r2, [r7, #8]
900008f4:	2b00      	cmp	r3, #0
900008f6:	d1ef      	bne.n	900008d8 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
900008f8:	68fb      	ldr	r3, [r7, #12]
900008fa:	1e5a      	subs	r2, r3, #1
900008fc:	60fa      	str	r2, [r7, #12]
900008fe:	2b00      	cmp	r3, #0
90000900:	d1e5      	bne.n	900008ce <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
90000902:	f3bf 8f4f 	dsb	sy
}
90000906:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
90000908:	4b08      	ldr	r3, [pc, #32]	; (9000092c <SCB_EnableDCache+0x84>)
9000090a:	695b      	ldr	r3, [r3, #20]
9000090c:	4a07      	ldr	r2, [pc, #28]	; (9000092c <SCB_EnableDCache+0x84>)
9000090e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90000912:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
90000914:	f3bf 8f4f 	dsb	sy
}
90000918:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
9000091a:	f3bf 8f6f 	isb	sy
}
9000091e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
90000920:	bf00      	nop
90000922:	3714      	adds	r7, #20
90000924:	46bd      	mov	sp, r7
90000926:	f85d 7b04 	ldr.w	r7, [sp], #4
9000092a:	4770      	bx	lr
9000092c:	e000ed00 	.word	0xe000ed00

90000930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
90000930:	b580      	push	{r7, lr}
90000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
90000934:	f7ff ff92 	bl	9000085c <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
90000938:	f7ff ffb6 	bl	900008a8 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
9000093c:	f000 ffa4 	bl	90001888 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
90000940:	f000 f80e 	bl	90000960 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
90000944:	f000 f87a 	bl	90000a3c <MX_GPIO_Init>
  MX_LWIP_Init();
90000948:	f003 f870 	bl	90003a2c <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */

  http_server_init();
9000094c:	f7ff ff5e 	bl	9000080c <http_server_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  ethernetif_input(&gnetif);
90000950:	4802      	ldr	r0, [pc, #8]	; (9000095c <main+0x2c>)
90000952:	f003 fb07 	bl	90003f64 <ethernetif_input>
	  sys_check_timeouts();
90000956:	f00d f8a3 	bl	9000daa0 <sys_check_timeouts>
	  ethernetif_input(&gnetif);
9000095a:	e7f9      	b.n	90000950 <main+0x20>
9000095c:	20000238 	.word	0x20000238

90000960 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
90000960:	b580      	push	{r7, lr}
90000962:	b094      	sub	sp, #80	; 0x50
90000964:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
90000966:	f107 0320 	add.w	r3, r7, #32
9000096a:	2230      	movs	r2, #48	; 0x30
9000096c:	2100      	movs	r1, #0
9000096e:	4618      	mov	r0, r3
90000970:	f00f fdb4 	bl	900104dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
90000974:	f107 030c 	add.w	r3, r7, #12
90000978:	2200      	movs	r2, #0
9000097a:	601a      	str	r2, [r3, #0]
9000097c:	605a      	str	r2, [r3, #4]
9000097e:	609a      	str	r2, [r3, #8]
90000980:	60da      	str	r2, [r3, #12]
90000982:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
90000984:	4b2b      	ldr	r3, [pc, #172]	; (90000a34 <SystemClock_Config+0xd4>)
90000986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90000988:	4a2a      	ldr	r2, [pc, #168]	; (90000a34 <SystemClock_Config+0xd4>)
9000098a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
9000098e:	6413      	str	r3, [r2, #64]	; 0x40
90000990:	4b28      	ldr	r3, [pc, #160]	; (90000a34 <SystemClock_Config+0xd4>)
90000992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90000994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
90000998:	60bb      	str	r3, [r7, #8]
9000099a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
9000099c:	4b26      	ldr	r3, [pc, #152]	; (90000a38 <SystemClock_Config+0xd8>)
9000099e:	681b      	ldr	r3, [r3, #0]
900009a0:	4a25      	ldr	r2, [pc, #148]	; (90000a38 <SystemClock_Config+0xd8>)
900009a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
900009a6:	6013      	str	r3, [r2, #0]
900009a8:	4b23      	ldr	r3, [pc, #140]	; (90000a38 <SystemClock_Config+0xd8>)
900009aa:	681b      	ldr	r3, [r3, #0]
900009ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
900009b0:	607b      	str	r3, [r7, #4]
900009b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
900009b4:	2301      	movs	r3, #1
900009b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
900009b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
900009bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
900009be:	2302      	movs	r3, #2
900009c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
900009c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
900009c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
900009c8:	2319      	movs	r3, #25
900009ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
900009cc:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
900009d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
900009d2:	2302      	movs	r3, #2
900009d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
900009d6:	2302      	movs	r3, #2
900009d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
900009da:	f107 0320 	add.w	r3, r7, #32
900009de:	4618      	mov	r0, r3
900009e0:	f002 fbc2 	bl	90003168 <HAL_RCC_OscConfig>
900009e4:	4603      	mov	r3, r0
900009e6:	2b00      	cmp	r3, #0
900009e8:	d001      	beq.n	900009ee <SystemClock_Config+0x8e>
  {
    Error_Handler();
900009ea:	f000 fc8b 	bl	90001304 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
900009ee:	f002 fb6b 	bl	900030c8 <HAL_PWREx_EnableOverDrive>
900009f2:	4603      	mov	r3, r0
900009f4:	2b00      	cmp	r3, #0
900009f6:	d001      	beq.n	900009fc <SystemClock_Config+0x9c>
  {
    Error_Handler();
900009f8:	f000 fc84 	bl	90001304 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
900009fc:	230f      	movs	r3, #15
900009fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
90000a00:	2302      	movs	r3, #2
90000a02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
90000a04:	2300      	movs	r3, #0
90000a06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
90000a08:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
90000a0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
90000a0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
90000a12:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
90000a14:	f107 030c 	add.w	r3, r7, #12
90000a18:	2107      	movs	r1, #7
90000a1a:	4618      	mov	r0, r3
90000a1c:	f002 fe48 	bl	900036b0 <HAL_RCC_ClockConfig>
90000a20:	4603      	mov	r3, r0
90000a22:	2b00      	cmp	r3, #0
90000a24:	d001      	beq.n	90000a2a <SystemClock_Config+0xca>
  {
    Error_Handler();
90000a26:	f000 fc6d 	bl	90001304 <Error_Handler>
  }
}
90000a2a:	bf00      	nop
90000a2c:	3750      	adds	r7, #80	; 0x50
90000a2e:	46bd      	mov	sp, r7
90000a30:	bd80      	pop	{r7, pc}
90000a32:	bf00      	nop
90000a34:	40023800 	.word	0x40023800
90000a38:	40007000 	.word	0x40007000

90000a3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
90000a3c:	b580      	push	{r7, lr}
90000a3e:	b090      	sub	sp, #64	; 0x40
90000a40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90000a42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000a46:	2200      	movs	r2, #0
90000a48:	601a      	str	r2, [r3, #0]
90000a4a:	605a      	str	r2, [r3, #4]
90000a4c:	609a      	str	r2, [r3, #8]
90000a4e:	60da      	str	r2, [r3, #12]
90000a50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
90000a52:	4bad      	ldr	r3, [pc, #692]	; (90000d08 <MX_GPIO_Init+0x2cc>)
90000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000a56:	4aac      	ldr	r2, [pc, #688]	; (90000d08 <MX_GPIO_Init+0x2cc>)
90000a58:	f043 0310 	orr.w	r3, r3, #16
90000a5c:	6313      	str	r3, [r2, #48]	; 0x30
90000a5e:	4baa      	ldr	r3, [pc, #680]	; (90000d08 <MX_GPIO_Init+0x2cc>)
90000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000a62:	f003 0310 	and.w	r3, r3, #16
90000a66:	62bb      	str	r3, [r7, #40]	; 0x28
90000a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
90000a6a:	4ba7      	ldr	r3, [pc, #668]	; (90000d08 <MX_GPIO_Init+0x2cc>)
90000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000a6e:	4aa6      	ldr	r2, [pc, #664]	; (90000d08 <MX_GPIO_Init+0x2cc>)
90000a70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90000a74:	6313      	str	r3, [r2, #48]	; 0x30
90000a76:	4ba4      	ldr	r3, [pc, #656]	; (90000d08 <MX_GPIO_Init+0x2cc>)
90000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
90000a7e:	627b      	str	r3, [r7, #36]	; 0x24
90000a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
90000a82:	4ba1      	ldr	r3, [pc, #644]	; (90000d08 <MX_GPIO_Init+0x2cc>)
90000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000a86:	4aa0      	ldr	r2, [pc, #640]	; (90000d08 <MX_GPIO_Init+0x2cc>)
90000a88:	f043 0302 	orr.w	r3, r3, #2
90000a8c:	6313      	str	r3, [r2, #48]	; 0x30
90000a8e:	4b9e      	ldr	r3, [pc, #632]	; (90000d08 <MX_GPIO_Init+0x2cc>)
90000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000a92:	f003 0302 	and.w	r3, r3, #2
90000a96:	623b      	str	r3, [r7, #32]
90000a98:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
90000a9a:	4b9b      	ldr	r3, [pc, #620]	; (90000d08 <MX_GPIO_Init+0x2cc>)
90000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000a9e:	4a9a      	ldr	r2, [pc, #616]	; (90000d08 <MX_GPIO_Init+0x2cc>)
90000aa0:	f043 0308 	orr.w	r3, r3, #8
90000aa4:	6313      	str	r3, [r2, #48]	; 0x30
90000aa6:	4b98      	ldr	r3, [pc, #608]	; (90000d08 <MX_GPIO_Init+0x2cc>)
90000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000aaa:	f003 0308 	and.w	r3, r3, #8
90000aae:	61fb      	str	r3, [r7, #28]
90000ab0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
90000ab2:	4b95      	ldr	r3, [pc, #596]	; (90000d08 <MX_GPIO_Init+0x2cc>)
90000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000ab6:	4a94      	ldr	r2, [pc, #592]	; (90000d08 <MX_GPIO_Init+0x2cc>)
90000ab8:	f043 0304 	orr.w	r3, r3, #4
90000abc:	6313      	str	r3, [r2, #48]	; 0x30
90000abe:	4b92      	ldr	r3, [pc, #584]	; (90000d08 <MX_GPIO_Init+0x2cc>)
90000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000ac2:	f003 0304 	and.w	r3, r3, #4
90000ac6:	61bb      	str	r3, [r7, #24]
90000ac8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
90000aca:	4b8f      	ldr	r3, [pc, #572]	; (90000d08 <MX_GPIO_Init+0x2cc>)
90000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000ace:	4a8e      	ldr	r2, [pc, #568]	; (90000d08 <MX_GPIO_Init+0x2cc>)
90000ad0:	f043 0301 	orr.w	r3, r3, #1
90000ad4:	6313      	str	r3, [r2, #48]	; 0x30
90000ad6:	4b8c      	ldr	r3, [pc, #560]	; (90000d08 <MX_GPIO_Init+0x2cc>)
90000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000ada:	f003 0301 	and.w	r3, r3, #1
90000ade:	617b      	str	r3, [r7, #20]
90000ae0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
90000ae2:	4b89      	ldr	r3, [pc, #548]	; (90000d08 <MX_GPIO_Init+0x2cc>)
90000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000ae6:	4a88      	ldr	r2, [pc, #544]	; (90000d08 <MX_GPIO_Init+0x2cc>)
90000ae8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
90000aec:	6313      	str	r3, [r2, #48]	; 0x30
90000aee:	4b86      	ldr	r3, [pc, #536]	; (90000d08 <MX_GPIO_Init+0x2cc>)
90000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000af2:	f403 7300 	and.w	r3, r3, #512	; 0x200
90000af6:	613b      	str	r3, [r7, #16]
90000af8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
90000afa:	4b83      	ldr	r3, [pc, #524]	; (90000d08 <MX_GPIO_Init+0x2cc>)
90000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000afe:	4a82      	ldr	r2, [pc, #520]	; (90000d08 <MX_GPIO_Init+0x2cc>)
90000b00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90000b04:	6313      	str	r3, [r2, #48]	; 0x30
90000b06:	4b80      	ldr	r3, [pc, #512]	; (90000d08 <MX_GPIO_Init+0x2cc>)
90000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
90000b0e:	60fb      	str	r3, [r7, #12]
90000b10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
90000b12:	4b7d      	ldr	r3, [pc, #500]	; (90000d08 <MX_GPIO_Init+0x2cc>)
90000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000b16:	4a7c      	ldr	r2, [pc, #496]	; (90000d08 <MX_GPIO_Init+0x2cc>)
90000b18:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
90000b1c:	6313      	str	r3, [r2, #48]	; 0x30
90000b1e:	4b7a      	ldr	r3, [pc, #488]	; (90000d08 <MX_GPIO_Init+0x2cc>)
90000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000b22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
90000b26:	60bb      	str	r3, [r7, #8]
90000b28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
90000b2a:	4b77      	ldr	r3, [pc, #476]	; (90000d08 <MX_GPIO_Init+0x2cc>)
90000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000b2e:	4a76      	ldr	r2, [pc, #472]	; (90000d08 <MX_GPIO_Init+0x2cc>)
90000b30:	f043 0320 	orr.w	r3, r3, #32
90000b34:	6313      	str	r3, [r2, #48]	; 0x30
90000b36:	4b74      	ldr	r3, [pc, #464]	; (90000d08 <MX_GPIO_Init+0x2cc>)
90000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000b3a:	f003 0320 	and.w	r3, r3, #32
90000b3e:	607b      	str	r3, [r7, #4]
90000b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
90000b42:	4b71      	ldr	r3, [pc, #452]	; (90000d08 <MX_GPIO_Init+0x2cc>)
90000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000b46:	4a70      	ldr	r2, [pc, #448]	; (90000d08 <MX_GPIO_Init+0x2cc>)
90000b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90000b4c:	6313      	str	r3, [r2, #48]	; 0x30
90000b4e:	4b6e      	ldr	r3, [pc, #440]	; (90000d08 <MX_GPIO_Init+0x2cc>)
90000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
90000b56:	603b      	str	r3, [r7, #0]
90000b58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
90000b5a:	2201      	movs	r2, #1
90000b5c:	2120      	movs	r1, #32
90000b5e:	486b      	ldr	r0, [pc, #428]	; (90000d0c <MX_GPIO_Init+0x2d0>)
90000b60:	f002 fa98 	bl	90003094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
90000b64:	2200      	movs	r2, #0
90000b66:	f241 010c 	movw	r1, #4108	; 0x100c
90000b6a:	4869      	ldr	r0, [pc, #420]	; (90000d10 <MX_GPIO_Init+0x2d4>)
90000b6c:	f002 fa92 	bl	90003094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
90000b70:	2200      	movs	r2, #0
90000b72:	2108      	movs	r1, #8
90000b74:	4867      	ldr	r0, [pc, #412]	; (90000d14 <MX_GPIO_Init+0x2d8>)
90000b76:	f002 fa8d 	bl	90003094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
90000b7a:	2200      	movs	r2, #0
90000b7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
90000b80:	4865      	ldr	r0, [pc, #404]	; (90000d18 <MX_GPIO_Init+0x2dc>)
90000b82:	f002 fa87 	bl	90003094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
90000b86:	2200      	movs	r2, #0
90000b88:	21c8      	movs	r1, #200	; 0xc8
90000b8a:	4864      	ldr	r0, [pc, #400]	; (90000d1c <MX_GPIO_Init+0x2e0>)
90000b8c:	f002 fa82 	bl	90003094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
90000b90:	2310      	movs	r3, #16
90000b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000b94:	2302      	movs	r3, #2
90000b96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000b98:	2300      	movs	r3, #0
90000b9a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000b9c:	2300      	movs	r3, #0
90000b9e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
90000ba0:	230e      	movs	r3, #14
90000ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
90000ba4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000ba8:	4619      	mov	r1, r3
90000baa:	485d      	ldr	r0, [pc, #372]	; (90000d20 <MX_GPIO_Init+0x2e4>)
90000bac:	f002 f8c6 	bl	90002d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
90000bb0:	2308      	movs	r3, #8
90000bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
90000bb4:	2300      	movs	r3, #0
90000bb6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000bb8:	2300      	movs	r3, #0
90000bba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
90000bbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000bc0:	4619      	mov	r1, r3
90000bc2:	4857      	ldr	r0, [pc, #348]	; (90000d20 <MX_GPIO_Init+0x2e4>)
90000bc4:	f002 f8ba 	bl	90002d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
90000bc8:	2304      	movs	r3, #4
90000bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000bcc:	2302      	movs	r3, #2
90000bce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000bd0:	2300      	movs	r3, #0
90000bd2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000bd4:	2303      	movs	r3, #3
90000bd6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
90000bd8:	2309      	movs	r3, #9
90000bda:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
90000bdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000be0:	4619      	mov	r1, r3
90000be2:	484f      	ldr	r0, [pc, #316]	; (90000d20 <MX_GPIO_Init+0x2e4>)
90000be4:	f002 f8aa 	bl	90002d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
90000be8:	f64f 7383 	movw	r3, #65411	; 0xff83
90000bec:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000bee:	2302      	movs	r3, #2
90000bf0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000bf2:	2300      	movs	r3, #0
90000bf4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000bf6:	2303      	movs	r3, #3
90000bf8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90000bfa:	230c      	movs	r3, #12
90000bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
90000bfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000c02:	4619      	mov	r1, r3
90000c04:	4846      	ldr	r0, [pc, #280]	; (90000d20 <MX_GPIO_Init+0x2e4>)
90000c06:	f002 f899 	bl	90002d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
90000c0a:	f44f 7340 	mov.w	r3, #768	; 0x300
90000c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
90000c10:	2312      	movs	r3, #18
90000c12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000c14:	2300      	movs	r3, #0
90000c16:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000c18:	2300      	movs	r3, #0
90000c1a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
90000c1c:	2304      	movs	r3, #4
90000c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90000c20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000c24:	4619      	mov	r1, r3
90000c26:	483f      	ldr	r0, [pc, #252]	; (90000d24 <MX_GPIO_Init+0x2e8>)
90000c28:	f002 f888 	bl	90002d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
90000c2c:	f643 4323 	movw	r3, #15395	; 0x3c23
90000c30:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000c32:	2302      	movs	r3, #2
90000c34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000c36:	2300      	movs	r3, #0
90000c38:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000c3a:	2303      	movs	r3, #3
90000c3c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
90000c3e:	230a      	movs	r3, #10
90000c40:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90000c42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000c46:	4619      	mov	r1, r3
90000c48:	4836      	ldr	r0, [pc, #216]	; (90000d24 <MX_GPIO_Init+0x2e8>)
90000c4a:	f002 f877 	bl	90002d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
90000c4e:	2310      	movs	r3, #16
90000c50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000c52:	2302      	movs	r3, #2
90000c54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000c56:	2300      	movs	r3, #0
90000c58:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000c5a:	2300      	movs	r3, #0
90000c5c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
90000c5e:	2302      	movs	r3, #2
90000c60:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
90000c62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000c66:	4619      	mov	r1, r3
90000c68:	482e      	ldr	r0, [pc, #184]	; (90000d24 <MX_GPIO_Init+0x2e8>)
90000c6a:	f002 f867 	bl	90002d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
90000c6e:	2380      	movs	r3, #128	; 0x80
90000c70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000c72:	2302      	movs	r3, #2
90000c74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000c76:	2300      	movs	r3, #0
90000c78:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000c7a:	2300      	movs	r3, #0
90000c7c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
90000c7e:	2308      	movs	r3, #8
90000c80:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
90000c82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000c86:	4619      	mov	r1, r3
90000c88:	4820      	ldr	r0, [pc, #128]	; (90000d0c <MX_GPIO_Init+0x2d0>)
90000c8a:	f002 f857 	bl	90002d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
90000c8e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
90000c92:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000c94:	2302      	movs	r3, #2
90000c96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000c98:	2300      	movs	r3, #0
90000c9a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000c9c:	2303      	movs	r3, #3
90000c9e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
90000ca0:	230c      	movs	r3, #12
90000ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
90000ca4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000ca8:	4619      	mov	r1, r3
90000caa:	481f      	ldr	r0, [pc, #124]	; (90000d28 <MX_GPIO_Init+0x2ec>)
90000cac:	f002 f846 	bl	90002d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
90000cb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
90000cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000cb6:	2302      	movs	r3, #2
90000cb8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000cba:	2300      	movs	r3, #0
90000cbc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000cbe:	2300      	movs	r3, #0
90000cc0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
90000cc2:	2301      	movs	r3, #1
90000cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
90000cc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000cca:	4619      	mov	r1, r3
90000ccc:	4817      	ldr	r0, [pc, #92]	; (90000d2c <MX_GPIO_Init+0x2f0>)
90000cce:	f002 f835 	bl	90002d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
90000cd2:	2360      	movs	r3, #96	; 0x60
90000cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000cd6:	2302      	movs	r3, #2
90000cd8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000cda:	2300      	movs	r3, #0
90000cdc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000cde:	2300      	movs	r3, #0
90000ce0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
90000ce2:	230d      	movs	r3, #13
90000ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
90000ce6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000cea:	4619      	mov	r1, r3
90000cec:	480c      	ldr	r0, [pc, #48]	; (90000d20 <MX_GPIO_Init+0x2e4>)
90000cee:	f002 f825 	bl	90002d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
90000cf2:	2380      	movs	r3, #128	; 0x80
90000cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000cf6:	2302      	movs	r3, #2
90000cf8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000cfa:	2300      	movs	r3, #0
90000cfc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000cfe:	2300      	movs	r3, #0
90000d00:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
90000d02:	2307      	movs	r3, #7
90000d04:	63fb      	str	r3, [r7, #60]	; 0x3c
90000d06:	e013      	b.n	90000d30 <MX_GPIO_Init+0x2f4>
90000d08:	40023800 	.word	0x40023800
90000d0c:	40020c00 	.word	0x40020c00
90000d10:	40022000 	.word	0x40022000
90000d14:	40022800 	.word	0x40022800
90000d18:	40021c00 	.word	0x40021c00
90000d1c:	40021800 	.word	0x40021800
90000d20:	40021000 	.word	0x40021000
90000d24:	40020400 	.word	0x40020400
90000d28:	40020800 	.word	0x40020800
90000d2c:	40020000 	.word	0x40020000
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
90000d30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000d34:	4619      	mov	r1, r3
90000d36:	48bc      	ldr	r0, [pc, #752]	; (90001028 <MX_GPIO_Init+0x5ec>)
90000d38:	f002 f800 	bl	90002d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
90000d3c:	2340      	movs	r3, #64	; 0x40
90000d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000d40:	2302      	movs	r3, #2
90000d42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000d44:	2300      	movs	r3, #0
90000d46:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000d48:	2303      	movs	r3, #3
90000d4a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
90000d4c:	230a      	movs	r3, #10
90000d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
90000d50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000d54:	4619      	mov	r1, r3
90000d56:	48b4      	ldr	r0, [pc, #720]	; (90001028 <MX_GPIO_Init+0x5ec>)
90000d58:	f001 fff0 	bl	90002d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
90000d5c:	f248 1333 	movw	r3, #33075	; 0x8133
90000d60:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000d62:	2302      	movs	r3, #2
90000d64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000d66:	2300      	movs	r3, #0
90000d68:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000d6a:	2303      	movs	r3, #3
90000d6c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90000d6e:	230c      	movs	r3, #12
90000d70:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
90000d72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000d76:	4619      	mov	r1, r3
90000d78:	48ac      	ldr	r0, [pc, #688]	; (9000102c <MX_GPIO_Init+0x5f0>)
90000d7a:	f001 ffdf 	bl	90002d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
90000d7e:	f64e 73ff 	movw	r3, #61439	; 0xefff
90000d82:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000d84:	2302      	movs	r3, #2
90000d86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000d88:	2300      	movs	r3, #0
90000d8a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000d8c:	2300      	movs	r3, #0
90000d8e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
90000d90:	230e      	movs	r3, #14
90000d92:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
90000d94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000d98:	4619      	mov	r1, r3
90000d9a:	48a5      	ldr	r0, [pc, #660]	; (90001030 <MX_GPIO_Init+0x5f4>)
90000d9c:	f001 ffce 	bl	90002d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
90000da0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
90000da4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
90000da6:	2300      	movs	r3, #0
90000da8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000daa:	2300      	movs	r3, #0
90000dac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
90000dae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000db2:	4619      	mov	r1, r3
90000db4:	489e      	ldr	r0, [pc, #632]	; (90001030 <MX_GPIO_Init+0x5f4>)
90000db6:	f001 ffc1 	bl	90002d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
90000dba:	2340      	movs	r3, #64	; 0x40
90000dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
90000dbe:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
90000dc2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000dc4:	2300      	movs	r3, #0
90000dc6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
90000dc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000dcc:	4619      	mov	r1, r3
90000dce:	4899      	ldr	r0, [pc, #612]	; (90001034 <MX_GPIO_Init+0x5f8>)
90000dd0:	f001 ffb4 	bl	90002d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
90000dd4:	f24c 7303 	movw	r3, #50947	; 0xc703
90000dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000dda:	2302      	movs	r3, #2
90000ddc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000dde:	2300      	movs	r3, #0
90000de0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000de2:	2303      	movs	r3, #3
90000de4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90000de6:	230c      	movs	r3, #12
90000de8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
90000dea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000dee:	4619      	mov	r1, r3
90000df0:	4890      	ldr	r0, [pc, #576]	; (90001034 <MX_GPIO_Init+0x5f8>)
90000df2:	f001 ffa3 	bl	90002d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
90000df6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
90000dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000dfc:	2302      	movs	r3, #2
90000dfe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000e00:	2300      	movs	r3, #0
90000e02:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000e04:	2303      	movs	r3, #3
90000e06:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
90000e08:	230a      	movs	r3, #10
90000e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
90000e0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000e10:	4619      	mov	r1, r3
90000e12:	4889      	ldr	r0, [pc, #548]	; (90001038 <MX_GPIO_Init+0x5fc>)
90000e14:	f001 ff92 	bl	90002d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
90000e18:	23f0      	movs	r3, #240	; 0xf0
90000e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000e1c:	2302      	movs	r3, #2
90000e1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000e20:	2300      	movs	r3, #0
90000e22:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000e24:	2300      	movs	r3, #0
90000e26:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
90000e28:	230a      	movs	r3, #10
90000e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
90000e2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000e30:	4619      	mov	r1, r3
90000e32:	4882      	ldr	r0, [pc, #520]	; (9000103c <MX_GPIO_Init+0x600>)
90000e34:	f001 ff82 	bl	90002d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
90000e38:	23f7      	movs	r3, #247	; 0xf7
90000e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000e3c:	2302      	movs	r3, #2
90000e3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000e40:	2300      	movs	r3, #0
90000e42:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000e44:	2300      	movs	r3, #0
90000e46:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
90000e48:	230e      	movs	r3, #14
90000e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
90000e4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000e50:	4619      	mov	r1, r3
90000e52:	487b      	ldr	r0, [pc, #492]	; (90001040 <MX_GPIO_Init+0x604>)
90000e54:	f001 ff72 	bl	90002d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
90000e58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
90000e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000e5e:	2302      	movs	r3, #2
90000e60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000e62:	2300      	movs	r3, #0
90000e64:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000e66:	2300      	movs	r3, #0
90000e68:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
90000e6a:	2309      	movs	r3, #9
90000e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
90000e6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000e72:	4619      	mov	r1, r3
90000e74:	486d      	ldr	r0, [pc, #436]	; (9000102c <MX_GPIO_Init+0x5f0>)
90000e76:	f001 ff61 	bl	90002d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
90000e7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
90000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000e80:	2302      	movs	r3, #2
90000e82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000e84:	2300      	movs	r3, #0
90000e86:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000e88:	2300      	movs	r3, #0
90000e8a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
90000e8c:	230a      	movs	r3, #10
90000e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
90000e90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000e94:	4619      	mov	r1, r3
90000e96:	4865      	ldr	r0, [pc, #404]	; (9000102c <MX_GPIO_Init+0x5f0>)
90000e98:	f001 ff50 	bl	90002d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
90000e9c:	2320      	movs	r3, #32
90000e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
90000ea0:	2301      	movs	r3, #1
90000ea2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000ea4:	2300      	movs	r3, #0
90000ea6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000ea8:	2300      	movs	r3, #0
90000eaa:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
90000eac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000eb0:	4619      	mov	r1, r3
90000eb2:	4860      	ldr	r0, [pc, #384]	; (90001034 <MX_GPIO_Init+0x5f8>)
90000eb4:	f001 ff42 	bl	90002d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
90000eb8:	2308      	movs	r3, #8
90000eba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000ebc:	2302      	movs	r3, #2
90000ebe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000ec0:	2300      	movs	r3, #0
90000ec2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000ec4:	2300      	movs	r3, #0
90000ec6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
90000ec8:	230d      	movs	r3, #13
90000eca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
90000ecc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000ed0:	4619      	mov	r1, r3
90000ed2:	4858      	ldr	r0, [pc, #352]	; (90001034 <MX_GPIO_Init+0x5f8>)
90000ed4:	f001 ff32 	bl	90002d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
90000ed8:	f241 030c 	movw	r3, #4108	; 0x100c
90000edc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
90000ede:	2301      	movs	r3, #1
90000ee0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000ee2:	2300      	movs	r3, #0
90000ee4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000ee6:	2300      	movs	r3, #0
90000ee8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
90000eea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000eee:	4619      	mov	r1, r3
90000ef0:	4852      	ldr	r0, [pc, #328]	; (9000103c <MX_GPIO_Init+0x600>)
90000ef2:	f001 ff23 	bl	90002d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
90000ef6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
90000efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
90000efc:	2300      	movs	r3, #0
90000efe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000f00:	2300      	movs	r3, #0
90000f02:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
90000f04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000f08:	4619      	mov	r1, r3
90000f0a:	484e      	ldr	r0, [pc, #312]	; (90001044 <MX_GPIO_Init+0x608>)
90000f0c:	f001 ff16 	bl	90002d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
90000f10:	f64f 033f 	movw	r3, #63551	; 0xf83f
90000f14:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000f16:	2302      	movs	r3, #2
90000f18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000f1a:	2300      	movs	r3, #0
90000f1c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000f1e:	2303      	movs	r3, #3
90000f20:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90000f22:	230c      	movs	r3, #12
90000f24:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
90000f26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000f2a:	4619      	mov	r1, r3
90000f2c:	4846      	ldr	r0, [pc, #280]	; (90001048 <MX_GPIO_Init+0x60c>)
90000f2e:	f001 ff05 	bl	90002d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
90000f32:	f44f 4346 	mov.w	r3, #50688	; 0xc600
90000f36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000f38:	2302      	movs	r3, #2
90000f3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000f3c:	2300      	movs	r3, #0
90000f3e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000f40:	2300      	movs	r3, #0
90000f42:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
90000f44:	230e      	movs	r3, #14
90000f46:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
90000f48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000f4c:	4619      	mov	r1, r3
90000f4e:	483b      	ldr	r0, [pc, #236]	; (9000103c <MX_GPIO_Init+0x600>)
90000f50:	f001 fef4 	bl	90002d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
90000f54:	2308      	movs	r3, #8
90000f56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
90000f58:	2301      	movs	r3, #1
90000f5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000f5c:	2300      	movs	r3, #0
90000f5e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000f60:	2300      	movs	r3, #0
90000f62:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
90000f64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000f68:	4619      	mov	r1, r3
90000f6a:	4835      	ldr	r0, [pc, #212]	; (90001040 <MX_GPIO_Init+0x604>)
90000f6c:	f001 fee6 	bl	90002d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
90000f70:	f44f 7300 	mov.w	r3, #512	; 0x200
90000f74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000f76:	2302      	movs	r3, #2
90000f78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000f7a:	2300      	movs	r3, #0
90000f7c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000f7e:	2300      	movs	r3, #0
90000f80:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
90000f82:	230d      	movs	r3, #13
90000f84:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
90000f86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000f8a:	4619      	mov	r1, r3
90000f8c:	4827      	ldr	r0, [pc, #156]	; (9000102c <MX_GPIO_Init+0x5f0>)
90000f8e:	f001 fed5 	bl	90002d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
90000f92:	2310      	movs	r3, #16
90000f94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
90000f96:	2300      	movs	r3, #0
90000f98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000f9a:	2300      	movs	r3, #0
90000f9c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
90000f9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000fa2:	4619      	mov	r1, r3
90000fa4:	4823      	ldr	r0, [pc, #140]	; (90001034 <MX_GPIO_Init+0x5f8>)
90000fa6:	f001 fec9 	bl	90002d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
90000faa:	2304      	movs	r3, #4
90000fac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000fae:	2302      	movs	r3, #2
90000fb0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000fb2:	2300      	movs	r3, #0
90000fb4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000fb6:	2303      	movs	r3, #3
90000fb8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
90000fba:	230c      	movs	r3, #12
90000fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
90000fbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000fc2:	4619      	mov	r1, r3
90000fc4:	481b      	ldr	r0, [pc, #108]	; (90001034 <MX_GPIO_Init+0x5f8>)
90000fc6:	f001 feb9 	bl	90002d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
90000fca:	f248 0304 	movw	r3, #32772	; 0x8004
90000fce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
90000fd0:	2300      	movs	r3, #0
90000fd2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000fd4:	2300      	movs	r3, #0
90000fd6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90000fd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000fdc:	4619      	mov	r1, r3
90000fde:	481b      	ldr	r0, [pc, #108]	; (9000104c <MX_GPIO_Init+0x610>)
90000fe0:	f001 feac 	bl	90002d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
90000fe4:	2302      	movs	r3, #2
90000fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000fe8:	2302      	movs	r3, #2
90000fea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000fec:	2300      	movs	r3, #0
90000fee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000ff0:	2300      	movs	r3, #0
90000ff2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
90000ff4:	2305      	movs	r3, #5
90000ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
90000ff8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000ffc:	4619      	mov	r1, r3
90000ffe:	480f      	ldr	r0, [pc, #60]	; (9000103c <MX_GPIO_Init+0x600>)
90001000:	f001 fe9c 	bl	90002d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
90001004:	f44f 5300 	mov.w	r3, #8192	; 0x2000
90001008:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
9000100a:	2301      	movs	r3, #1
9000100c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
9000100e:	2300      	movs	r3, #0
90001010:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90001012:	2300      	movs	r3, #0
90001014:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
90001016:	f107 032c 	add.w	r3, r7, #44	; 0x2c
9000101a:	4619      	mov	r1, r3
9000101c:	480b      	ldr	r0, [pc, #44]	; (9000104c <MX_GPIO_Init+0x610>)
9000101e:	f001 fe8d 	bl	90002d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
90001022:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
90001026:	e013      	b.n	90001050 <MX_GPIO_Init+0x614>
90001028:	40020400 	.word	0x40020400
9000102c:	40021800 	.word	0x40021800
90001030:	40022400 	.word	0x40022400
90001034:	40020c00 	.word	0x40020c00
90001038:	40020000 	.word	0x40020000
9000103c:	40022000 	.word	0x40022000
90001040:	40022800 	.word	0x40022800
90001044:	40020800 	.word	0x40020800
90001048:	40021400 	.word	0x40021400
9000104c:	40021c00 	.word	0x40021c00
90001050:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90001052:	2302      	movs	r3, #2
90001054:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90001056:	2300      	movs	r3, #0
90001058:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
9000105a:	2300      	movs	r3, #0
9000105c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
9000105e:	230d      	movs	r3, #13
90001060:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90001062:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90001066:	4619      	mov	r1, r3
90001068:	489e      	ldr	r0, [pc, #632]	; (900012e4 <MX_GPIO_Init+0x8a8>)
9000106a:	f001 fe67 	bl	90002d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
9000106e:	2301      	movs	r3, #1
90001070:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90001072:	2302      	movs	r3, #2
90001074:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90001076:	2300      	movs	r3, #0
90001078:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
9000107a:	2300      	movs	r3, #0
9000107c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
9000107e:	2302      	movs	r3, #2
90001080:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
90001082:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90001086:	4619      	mov	r1, r3
90001088:	4897      	ldr	r0, [pc, #604]	; (900012e8 <MX_GPIO_Init+0x8ac>)
9000108a:	f001 fe57 	bl	90002d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
9000108e:	f44f 7300 	mov.w	r3, #512	; 0x200
90001092:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90001094:	2302      	movs	r3, #2
90001096:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90001098:	2300      	movs	r3, #0
9000109a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
9000109c:	2300      	movs	r3, #0
9000109e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
900010a0:	2307      	movs	r3, #7
900010a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
900010a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
900010a8:	4619      	mov	r1, r3
900010aa:	4890      	ldr	r0, [pc, #576]	; (900012ec <MX_GPIO_Init+0x8b0>)
900010ac:	f001 fe46 	bl	90002d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
900010b0:	f44f 7380 	mov.w	r3, #256	; 0x100
900010b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
900010b6:	2302      	movs	r3, #2
900010b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
900010ba:	2300      	movs	r3, #0
900010bc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
900010be:	2300      	movs	r3, #0
900010c0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
900010c2:	2301      	movs	r3, #1
900010c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
900010c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
900010ca:	4619      	mov	r1, r3
900010cc:	4887      	ldr	r0, [pc, #540]	; (900012ec <MX_GPIO_Init+0x8b0>)
900010ce:	f001 fe35 	bl	90002d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
900010d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
900010d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
900010d8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
900010dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
900010de:	2300      	movs	r3, #0
900010e0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
900010e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
900010e6:	4619      	mov	r1, r3
900010e8:	487f      	ldr	r0, [pc, #508]	; (900012e8 <MX_GPIO_Init+0x8ac>)
900010ea:	f001 fe27 	bl	90002d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
900010ee:	23c0      	movs	r3, #192	; 0xc0
900010f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
900010f2:	2302      	movs	r3, #2
900010f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
900010f6:	2300      	movs	r3, #0
900010f8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
900010fa:	2303      	movs	r3, #3
900010fc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
900010fe:	2308      	movs	r3, #8
90001100:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
90001102:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90001106:	4619      	mov	r1, r3
90001108:	4879      	ldr	r0, [pc, #484]	; (900012f0 <MX_GPIO_Init+0x8b4>)
9000110a:	f001 fe17 	bl	90002d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
9000110e:	2310      	movs	r3, #16
90001110:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90001112:	2302      	movs	r3, #2
90001114:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90001116:	2300      	movs	r3, #0
90001118:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
9000111a:	2303      	movs	r3, #3
9000111c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
9000111e:	230a      	movs	r3, #10
90001120:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
90001122:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90001126:	4619      	mov	r1, r3
90001128:	486e      	ldr	r0, [pc, #440]	; (900012e4 <MX_GPIO_Init+0x8a8>)
9000112a:	f001 fe07 	bl	90002d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
9000112e:	2328      	movs	r3, #40	; 0x28
90001130:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90001132:	2302      	movs	r3, #2
90001134:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90001136:	2300      	movs	r3, #0
90001138:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
9000113a:	2303      	movs	r3, #3
9000113c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
9000113e:	230c      	movs	r3, #12
90001140:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90001142:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90001146:	4619      	mov	r1, r3
90001148:	4866      	ldr	r0, [pc, #408]	; (900012e4 <MX_GPIO_Init+0x8a8>)
9000114a:	f001 fdf7 	bl	90002d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
9000114e:	23c8      	movs	r3, #200	; 0xc8
90001150:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
90001152:	2301      	movs	r3, #1
90001154:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90001156:	2300      	movs	r3, #0
90001158:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
9000115a:	2300      	movs	r3, #0
9000115c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
9000115e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90001162:	4619      	mov	r1, r3
90001164:	4863      	ldr	r0, [pc, #396]	; (900012f4 <MX_GPIO_Init+0x8b8>)
90001166:	f001 fde9 	bl	90002d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
9000116a:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
9000116e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
90001170:	2303      	movs	r3, #3
90001172:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90001174:	2300      	movs	r3, #0
90001176:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
90001178:	f107 032c 	add.w	r3, r7, #44	; 0x2c
9000117c:	4619      	mov	r1, r3
9000117e:	485e      	ldr	r0, [pc, #376]	; (900012f8 <MX_GPIO_Init+0x8bc>)
90001180:	f001 fddc 	bl	90002d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
90001184:	2308      	movs	r3, #8
90001186:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90001188:	2302      	movs	r3, #2
9000118a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
9000118c:	2300      	movs	r3, #0
9000118e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90001190:	2303      	movs	r3, #3
90001192:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90001194:	230c      	movs	r3, #12
90001196:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
90001198:	f107 032c 	add.w	r3, r7, #44	; 0x2c
9000119c:	4619      	mov	r1, r3
9000119e:	4854      	ldr	r0, [pc, #336]	; (900012f0 <MX_GPIO_Init+0x8b4>)
900011a0:	f001 fdcc 	bl	90002d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
900011a4:	2305      	movs	r3, #5
900011a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
900011a8:	2302      	movs	r3, #2
900011aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
900011ac:	2300      	movs	r3, #0
900011ae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
900011b0:	2303      	movs	r3, #3
900011b2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
900011b4:	230a      	movs	r3, #10
900011b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
900011b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
900011bc:	4619      	mov	r1, r3
900011be:	484c      	ldr	r0, [pc, #304]	; (900012f0 <MX_GPIO_Init+0x8b4>)
900011c0:	f001 fdbc 	bl	90002d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
900011c4:	2304      	movs	r3, #4
900011c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
900011c8:	2302      	movs	r3, #2
900011ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
900011cc:	2300      	movs	r3, #0
900011ce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
900011d0:	2303      	movs	r3, #3
900011d2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
900011d4:	2309      	movs	r3, #9
900011d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
900011d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
900011dc:	4619      	mov	r1, r3
900011de:	4847      	ldr	r0, [pc, #284]	; (900012fc <MX_GPIO_Init+0x8c0>)
900011e0:	f001 fdac 	bl	90002d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
900011e4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
900011e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
900011ea:	2302      	movs	r3, #2
900011ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
900011ee:	2300      	movs	r3, #0
900011f0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
900011f2:	2303      	movs	r3, #3
900011f4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
900011f6:	2309      	movs	r3, #9
900011f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
900011fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
900011fe:	4619      	mov	r1, r3
90001200:	483f      	ldr	r0, [pc, #252]	; (90001300 <MX_GPIO_Init+0x8c4>)
90001202:	f001 fd9b 	bl	90002d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
90001206:	2304      	movs	r3, #4
90001208:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
9000120a:	2300      	movs	r3, #0
9000120c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
9000120e:	2300      	movs	r3, #0
90001210:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
90001212:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90001216:	4619      	mov	r1, r3
90001218:	4836      	ldr	r0, [pc, #216]	; (900012f4 <MX_GPIO_Init+0x8b8>)
9000121a:	f001 fd8f 	bl	90002d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
9000121e:	2301      	movs	r3, #1
90001220:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
90001222:	2303      	movs	r3, #3
90001224:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90001226:	2300      	movs	r3, #0
90001228:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
9000122a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
9000122e:	4619      	mov	r1, r3
90001230:	482e      	ldr	r0, [pc, #184]	; (900012ec <MX_GPIO_Init+0x8b0>)
90001232:	f001 fd83 	bl	90002d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
90001236:	2350      	movs	r3, #80	; 0x50
90001238:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000123a:	2302      	movs	r3, #2
9000123c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
9000123e:	2300      	movs	r3, #0
90001240:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90001242:	2300      	movs	r3, #0
90001244:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
90001246:	230d      	movs	r3, #13
90001248:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
9000124a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
9000124e:	4619      	mov	r1, r3
90001250:	4826      	ldr	r0, [pc, #152]	; (900012ec <MX_GPIO_Init+0x8b0>)
90001252:	f001 fd73 	bl	90002d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
90001256:	f44f 73c0 	mov.w	r3, #384	; 0x180
9000125a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
9000125c:	2312      	movs	r3, #18
9000125e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90001260:	2300      	movs	r3, #0
90001262:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90001264:	2303      	movs	r3, #3
90001266:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
90001268:	2304      	movs	r3, #4
9000126a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
9000126c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90001270:	4619      	mov	r1, r3
90001272:	481c      	ldr	r0, [pc, #112]	; (900012e4 <MX_GPIO_Init+0x8a8>)
90001274:	f001 fd62 	bl	90002d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
90001278:	2328      	movs	r3, #40	; 0x28
9000127a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000127c:	2302      	movs	r3, #2
9000127e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90001280:	2300      	movs	r3, #0
90001282:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90001284:	2303      	movs	r3, #3
90001286:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
90001288:	230a      	movs	r3, #10
9000128a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
9000128c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90001290:	4619      	mov	r1, r3
90001292:	4816      	ldr	r0, [pc, #88]	; (900012ec <MX_GPIO_Init+0x8b0>)
90001294:	f001 fd52 	bl	90002d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
90001298:	2340      	movs	r3, #64	; 0x40
9000129a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000129c:	2302      	movs	r3, #2
9000129e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
900012a0:	2300      	movs	r3, #0
900012a2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
900012a4:	2300      	movs	r3, #0
900012a6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
900012a8:	2309      	movs	r3, #9
900012aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
900012ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
900012b0:	4619      	mov	r1, r3
900012b2:	480c      	ldr	r0, [pc, #48]	; (900012e4 <MX_GPIO_Init+0x8a8>)
900012b4:	f001 fd42 	bl	90002d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
900012b8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
900012bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
900012be:	2302      	movs	r3, #2
900012c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
900012c2:	2300      	movs	r3, #0
900012c4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
900012c6:	2300      	movs	r3, #0
900012c8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
900012ca:	2305      	movs	r3, #5
900012cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
900012ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
900012d2:	4619      	mov	r1, r3
900012d4:	4809      	ldr	r0, [pc, #36]	; (900012fc <MX_GPIO_Init+0x8c0>)
900012d6:	f001 fd31 	bl	90002d3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
900012da:	bf00      	nop
900012dc:	3740      	adds	r7, #64	; 0x40
900012de:	46bd      	mov	sp, r7
900012e0:	bd80      	pop	{r7, pc}
900012e2:	bf00      	nop
900012e4:	40021c00 	.word	0x40021c00
900012e8:	40022000 	.word	0x40022000
900012ec:	40020000 	.word	0x40020000
900012f0:	40020800 	.word	0x40020800
900012f4:	40021800 	.word	0x40021800
900012f8:	40021400 	.word	0x40021400
900012fc:	40020400 	.word	0x40020400
90001300:	40020c00 	.word	0x40020c00

90001304 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
90001304:	b480      	push	{r7}
90001306:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
90001308:	b672      	cpsid	i
}
9000130a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
9000130c:	e7fe      	b.n	9000130c <Error_Handler+0x8>
	...

90001310 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
90001310:	b480      	push	{r7}
90001312:	b083      	sub	sp, #12
90001314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
90001316:	4b0f      	ldr	r3, [pc, #60]	; (90001354 <HAL_MspInit+0x44>)
90001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000131a:	4a0e      	ldr	r2, [pc, #56]	; (90001354 <HAL_MspInit+0x44>)
9000131c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
90001320:	6413      	str	r3, [r2, #64]	; 0x40
90001322:	4b0c      	ldr	r3, [pc, #48]	; (90001354 <HAL_MspInit+0x44>)
90001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90001326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
9000132a:	607b      	str	r3, [r7, #4]
9000132c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
9000132e:	4b09      	ldr	r3, [pc, #36]	; (90001354 <HAL_MspInit+0x44>)
90001330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90001332:	4a08      	ldr	r2, [pc, #32]	; (90001354 <HAL_MspInit+0x44>)
90001334:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
90001338:	6453      	str	r3, [r2, #68]	; 0x44
9000133a:	4b06      	ldr	r3, [pc, #24]	; (90001354 <HAL_MspInit+0x44>)
9000133c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
9000133e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
90001342:	603b      	str	r3, [r7, #0]
90001344:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
90001346:	bf00      	nop
90001348:	370c      	adds	r7, #12
9000134a:	46bd      	mov	sp, r7
9000134c:	f85d 7b04 	ldr.w	r7, [sp], #4
90001350:	4770      	bx	lr
90001352:	bf00      	nop
90001354:	40023800 	.word	0x40023800

90001358 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
90001358:	b480      	push	{r7}
9000135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
9000135c:	e7fe      	b.n	9000135c <NMI_Handler+0x4>

9000135e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
9000135e:	b480      	push	{r7}
90001360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
90001362:	e7fe      	b.n	90001362 <HardFault_Handler+0x4>

90001364 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
90001364:	b480      	push	{r7}
90001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
90001368:	e7fe      	b.n	90001368 <MemManage_Handler+0x4>

9000136a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
9000136a:	b480      	push	{r7}
9000136c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
9000136e:	e7fe      	b.n	9000136e <BusFault_Handler+0x4>

90001370 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
90001370:	b480      	push	{r7}
90001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
90001374:	e7fe      	b.n	90001374 <UsageFault_Handler+0x4>

90001376 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
90001376:	b480      	push	{r7}
90001378:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
9000137a:	bf00      	nop
9000137c:	46bd      	mov	sp, r7
9000137e:	f85d 7b04 	ldr.w	r7, [sp], #4
90001382:	4770      	bx	lr

90001384 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
90001384:	b480      	push	{r7}
90001386:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
90001388:	bf00      	nop
9000138a:	46bd      	mov	sp, r7
9000138c:	f85d 7b04 	ldr.w	r7, [sp], #4
90001390:	4770      	bx	lr

90001392 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
90001392:	b480      	push	{r7}
90001394:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
90001396:	bf00      	nop
90001398:	46bd      	mov	sp, r7
9000139a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000139e:	4770      	bx	lr

900013a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
900013a0:	b580      	push	{r7, lr}
900013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
900013a4:	f000 faae 	bl	90001904 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
900013a8:	bf00      	nop
900013aa:	bd80      	pop	{r7, pc}

900013ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
900013ac:	b480      	push	{r7}
900013ae:	af00      	add	r7, sp, #0
	return 1;
900013b0:	2301      	movs	r3, #1
}
900013b2:	4618      	mov	r0, r3
900013b4:	46bd      	mov	sp, r7
900013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
900013ba:	4770      	bx	lr

900013bc <_kill>:

int _kill(int pid, int sig)
{
900013bc:	b480      	push	{r7}
900013be:	b083      	sub	sp, #12
900013c0:	af00      	add	r7, sp, #0
900013c2:	6078      	str	r0, [r7, #4]
900013c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
900013c6:	4b05      	ldr	r3, [pc, #20]	; (900013dc <_kill+0x20>)
900013c8:	2216      	movs	r2, #22
900013ca:	601a      	str	r2, [r3, #0]
	return -1;
900013cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
900013d0:	4618      	mov	r0, r3
900013d2:	370c      	adds	r7, #12
900013d4:	46bd      	mov	sp, r7
900013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
900013da:	4770      	bx	lr
900013dc:	2000a9fc 	.word	0x2000a9fc

900013e0 <_exit>:

void _exit (int status)
{
900013e0:	b580      	push	{r7, lr}
900013e2:	b082      	sub	sp, #8
900013e4:	af00      	add	r7, sp, #0
900013e6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
900013e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
900013ec:	6878      	ldr	r0, [r7, #4]
900013ee:	f7ff ffe5 	bl	900013bc <_kill>
	while (1) {}		/* Make sure we hang here */
900013f2:	e7fe      	b.n	900013f2 <_exit+0x12>

900013f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
900013f4:	b580      	push	{r7, lr}
900013f6:	b086      	sub	sp, #24
900013f8:	af00      	add	r7, sp, #0
900013fa:	60f8      	str	r0, [r7, #12]
900013fc:	60b9      	str	r1, [r7, #8]
900013fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
90001400:	2300      	movs	r3, #0
90001402:	617b      	str	r3, [r7, #20]
90001404:	e00a      	b.n	9000141c <_read+0x28>
	{
		*ptr++ = __io_getchar();
90001406:	f3af 8000 	nop.w
9000140a:	4601      	mov	r1, r0
9000140c:	68bb      	ldr	r3, [r7, #8]
9000140e:	1c5a      	adds	r2, r3, #1
90001410:	60ba      	str	r2, [r7, #8]
90001412:	b2ca      	uxtb	r2, r1
90001414:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
90001416:	697b      	ldr	r3, [r7, #20]
90001418:	3301      	adds	r3, #1
9000141a:	617b      	str	r3, [r7, #20]
9000141c:	697a      	ldr	r2, [r7, #20]
9000141e:	687b      	ldr	r3, [r7, #4]
90001420:	429a      	cmp	r2, r3
90001422:	dbf0      	blt.n	90001406 <_read+0x12>
	}

return len;
90001424:	687b      	ldr	r3, [r7, #4]
}
90001426:	4618      	mov	r0, r3
90001428:	3718      	adds	r7, #24
9000142a:	46bd      	mov	sp, r7
9000142c:	bd80      	pop	{r7, pc}

9000142e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
9000142e:	b580      	push	{r7, lr}
90001430:	b086      	sub	sp, #24
90001432:	af00      	add	r7, sp, #0
90001434:	60f8      	str	r0, [r7, #12]
90001436:	60b9      	str	r1, [r7, #8]
90001438:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
9000143a:	2300      	movs	r3, #0
9000143c:	617b      	str	r3, [r7, #20]
9000143e:	e009      	b.n	90001454 <_write+0x26>
	{
		__io_putchar(*ptr++);
90001440:	68bb      	ldr	r3, [r7, #8]
90001442:	1c5a      	adds	r2, r3, #1
90001444:	60ba      	str	r2, [r7, #8]
90001446:	781b      	ldrb	r3, [r3, #0]
90001448:	4618      	mov	r0, r3
9000144a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
9000144e:	697b      	ldr	r3, [r7, #20]
90001450:	3301      	adds	r3, #1
90001452:	617b      	str	r3, [r7, #20]
90001454:	697a      	ldr	r2, [r7, #20]
90001456:	687b      	ldr	r3, [r7, #4]
90001458:	429a      	cmp	r2, r3
9000145a:	dbf1      	blt.n	90001440 <_write+0x12>
	}
	return len;
9000145c:	687b      	ldr	r3, [r7, #4]
}
9000145e:	4618      	mov	r0, r3
90001460:	3718      	adds	r7, #24
90001462:	46bd      	mov	sp, r7
90001464:	bd80      	pop	{r7, pc}

90001466 <_close>:

int _close(int file)
{
90001466:	b480      	push	{r7}
90001468:	b083      	sub	sp, #12
9000146a:	af00      	add	r7, sp, #0
9000146c:	6078      	str	r0, [r7, #4]
	return -1;
9000146e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
90001472:	4618      	mov	r0, r3
90001474:	370c      	adds	r7, #12
90001476:	46bd      	mov	sp, r7
90001478:	f85d 7b04 	ldr.w	r7, [sp], #4
9000147c:	4770      	bx	lr

9000147e <_fstat>:


int _fstat(int file, struct stat *st)
{
9000147e:	b480      	push	{r7}
90001480:	b083      	sub	sp, #12
90001482:	af00      	add	r7, sp, #0
90001484:	6078      	str	r0, [r7, #4]
90001486:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
90001488:	683b      	ldr	r3, [r7, #0]
9000148a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
9000148e:	605a      	str	r2, [r3, #4]
	return 0;
90001490:	2300      	movs	r3, #0
}
90001492:	4618      	mov	r0, r3
90001494:	370c      	adds	r7, #12
90001496:	46bd      	mov	sp, r7
90001498:	f85d 7b04 	ldr.w	r7, [sp], #4
9000149c:	4770      	bx	lr

9000149e <_isatty>:

int _isatty(int file)
{
9000149e:	b480      	push	{r7}
900014a0:	b083      	sub	sp, #12
900014a2:	af00      	add	r7, sp, #0
900014a4:	6078      	str	r0, [r7, #4]
	return 1;
900014a6:	2301      	movs	r3, #1
}
900014a8:	4618      	mov	r0, r3
900014aa:	370c      	adds	r7, #12
900014ac:	46bd      	mov	sp, r7
900014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
900014b2:	4770      	bx	lr

900014b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
900014b4:	b480      	push	{r7}
900014b6:	b085      	sub	sp, #20
900014b8:	af00      	add	r7, sp, #0
900014ba:	60f8      	str	r0, [r7, #12]
900014bc:	60b9      	str	r1, [r7, #8]
900014be:	607a      	str	r2, [r7, #4]
	return 0;
900014c0:	2300      	movs	r3, #0
}
900014c2:	4618      	mov	r0, r3
900014c4:	3714      	adds	r7, #20
900014c6:	46bd      	mov	sp, r7
900014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
900014cc:	4770      	bx	lr
	...

900014d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
900014d0:	b480      	push	{r7}
900014d2:	b087      	sub	sp, #28
900014d4:	af00      	add	r7, sp, #0
900014d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
900014d8:	4a14      	ldr	r2, [pc, #80]	; (9000152c <_sbrk+0x5c>)
900014da:	4b15      	ldr	r3, [pc, #84]	; (90001530 <_sbrk+0x60>)
900014dc:	1ad3      	subs	r3, r2, r3
900014de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
900014e0:	697b      	ldr	r3, [r7, #20]
900014e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
900014e4:	4b13      	ldr	r3, [pc, #76]	; (90001534 <_sbrk+0x64>)
900014e6:	681b      	ldr	r3, [r3, #0]
900014e8:	2b00      	cmp	r3, #0
900014ea:	d102      	bne.n	900014f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
900014ec:	4b11      	ldr	r3, [pc, #68]	; (90001534 <_sbrk+0x64>)
900014ee:	4a12      	ldr	r2, [pc, #72]	; (90001538 <_sbrk+0x68>)
900014f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
900014f2:	4b10      	ldr	r3, [pc, #64]	; (90001534 <_sbrk+0x64>)
900014f4:	681a      	ldr	r2, [r3, #0]
900014f6:	687b      	ldr	r3, [r7, #4]
900014f8:	4413      	add	r3, r2
900014fa:	693a      	ldr	r2, [r7, #16]
900014fc:	429a      	cmp	r2, r3
900014fe:	d205      	bcs.n	9000150c <_sbrk+0x3c>
  {
    errno = ENOMEM;
90001500:	4b0e      	ldr	r3, [pc, #56]	; (9000153c <_sbrk+0x6c>)
90001502:	220c      	movs	r2, #12
90001504:	601a      	str	r2, [r3, #0]
    return (void *)-1;
90001506:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000150a:	e009      	b.n	90001520 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
9000150c:	4b09      	ldr	r3, [pc, #36]	; (90001534 <_sbrk+0x64>)
9000150e:	681b      	ldr	r3, [r3, #0]
90001510:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
90001512:	4b08      	ldr	r3, [pc, #32]	; (90001534 <_sbrk+0x64>)
90001514:	681a      	ldr	r2, [r3, #0]
90001516:	687b      	ldr	r3, [r7, #4]
90001518:	4413      	add	r3, r2
9000151a:	4a06      	ldr	r2, [pc, #24]	; (90001534 <_sbrk+0x64>)
9000151c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
9000151e:	68fb      	ldr	r3, [r7, #12]
}
90001520:	4618      	mov	r0, r3
90001522:	371c      	adds	r7, #28
90001524:	46bd      	mov	sp, r7
90001526:	f85d 7b04 	ldr.w	r7, [sp], #4
9000152a:	4770      	bx	lr
9000152c:	20050000 	.word	0x20050000
90001530:	00000400 	.word	0x00000400
90001534:	20000230 	.word	0x20000230
90001538:	2000aa10 	.word	0x2000aa10
9000153c:	2000a9fc 	.word	0x2000a9fc

90001540 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
90001540:	b480      	push	{r7}
90001542:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
90001544:	4b09      	ldr	r3, [pc, #36]	; (9000156c <SystemInit+0x2c>)
90001546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
9000154a:	4a08      	ldr	r2, [pc, #32]	; (9000156c <SystemInit+0x2c>)
9000154c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
90001550:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  RCC->CFGR = 0;
90001554:	4b06      	ldr	r3, [pc, #24]	; (90001570 <SystemInit+0x30>)
90001556:	2200      	movs	r2, #0
90001558:	609a      	str	r2, [r3, #8]
  SCB->VTOR = QSPI_BASE;
9000155a:	4b04      	ldr	r3, [pc, #16]	; (9000156c <SystemInit+0x2c>)
9000155c:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
90001560:	609a      	str	r2, [r3, #8]

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
90001562:	bf00      	nop
90001564:	46bd      	mov	sp, r7
90001566:	f85d 7b04 	ldr.w	r7, [sp], #4
9000156a:	4770      	bx	lr
9000156c:	e000ed00 	.word	0xe000ed00
90001570:	40023800 	.word	0x40023800

90001574 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
90001574:	f8df d034 	ldr.w	sp, [pc, #52]	; 900015ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
90001578:	480d      	ldr	r0, [pc, #52]	; (900015b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
9000157a:	490e      	ldr	r1, [pc, #56]	; (900015b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
9000157c:	4a0e      	ldr	r2, [pc, #56]	; (900015b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
9000157e:	2300      	movs	r3, #0
  b LoopCopyDataInit
90001580:	e002      	b.n	90001588 <LoopCopyDataInit>

90001582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
90001582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
90001584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
90001586:	3304      	adds	r3, #4

90001588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
90001588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
9000158a:	428c      	cmp	r4, r1
  bcc CopyDataInit
9000158c:	d3f9      	bcc.n	90001582 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
9000158e:	4a0b      	ldr	r2, [pc, #44]	; (900015bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
90001590:	4c0b      	ldr	r4, [pc, #44]	; (900015c0 <LoopFillZerobss+0x26>)
  movs r3, #0
90001592:	2300      	movs	r3, #0
  b LoopFillZerobss
90001594:	e001      	b.n	9000159a <LoopFillZerobss>

90001596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
90001596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
90001598:	3204      	adds	r2, #4

9000159a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
9000159a:	42a2      	cmp	r2, r4
  bcc FillZerobss
9000159c:	d3fb      	bcc.n	90001596 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
9000159e:	f7ff ffcf 	bl	90001540 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
900015a2:	f00e ff3f 	bl	90010424 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
900015a6:	f7ff f9c3 	bl	90000930 <main>
  bx  lr    
900015aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
900015ac:	20050000 	.word	0x20050000
  ldr r0, =_sdata
900015b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
900015b4:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
900015b8:	90015c94 	.word	0x90015c94
  ldr r2, =_sbss
900015bc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
900015c0:	2000aa0c 	.word	0x2000aa0c

900015c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
900015c4:	e7fe      	b.n	900015c4 <ADC_IRQHandler>

900015c6 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
900015c6:	b480      	push	{r7}
900015c8:	b083      	sub	sp, #12
900015ca:	af00      	add	r7, sp, #0
900015cc:	6078      	str	r0, [r7, #4]
900015ce:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
900015d0:	687b      	ldr	r3, [r7, #4]
900015d2:	2b00      	cmp	r3, #0
900015d4:	d00b      	beq.n	900015ee <LAN8742_RegisterBusIO+0x28>
900015d6:	683b      	ldr	r3, [r7, #0]
900015d8:	68db      	ldr	r3, [r3, #12]
900015da:	2b00      	cmp	r3, #0
900015dc:	d007      	beq.n	900015ee <LAN8742_RegisterBusIO+0x28>
900015de:	683b      	ldr	r3, [r7, #0]
900015e0:	689b      	ldr	r3, [r3, #8]
900015e2:	2b00      	cmp	r3, #0
900015e4:	d003      	beq.n	900015ee <LAN8742_RegisterBusIO+0x28>
900015e6:	683b      	ldr	r3, [r7, #0]
900015e8:	691b      	ldr	r3, [r3, #16]
900015ea:	2b00      	cmp	r3, #0
900015ec:	d102      	bne.n	900015f4 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
900015ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
900015f2:	e014      	b.n	9000161e <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
900015f4:	683b      	ldr	r3, [r7, #0]
900015f6:	681a      	ldr	r2, [r3, #0]
900015f8:	687b      	ldr	r3, [r7, #4]
900015fa:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
900015fc:	683b      	ldr	r3, [r7, #0]
900015fe:	685a      	ldr	r2, [r3, #4]
90001600:	687b      	ldr	r3, [r7, #4]
90001602:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
90001604:	683b      	ldr	r3, [r7, #0]
90001606:	68da      	ldr	r2, [r3, #12]
90001608:	687b      	ldr	r3, [r7, #4]
9000160a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
9000160c:	683b      	ldr	r3, [r7, #0]
9000160e:	689a      	ldr	r2, [r3, #8]
90001610:	687b      	ldr	r3, [r7, #4]
90001612:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
90001614:	683b      	ldr	r3, [r7, #0]
90001616:	691a      	ldr	r2, [r3, #16]
90001618:	687b      	ldr	r3, [r7, #4]
9000161a:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
9000161c:	2300      	movs	r3, #0
}
9000161e:	4618      	mov	r0, r3
90001620:	370c      	adds	r7, #12
90001622:	46bd      	mov	sp, r7
90001624:	f85d 7b04 	ldr.w	r7, [sp], #4
90001628:	4770      	bx	lr

9000162a <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
9000162a:	b580      	push	{r7, lr}
9000162c:	b086      	sub	sp, #24
9000162e:	af00      	add	r7, sp, #0
90001630:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
90001632:	2300      	movs	r3, #0
90001634:	60fb      	str	r3, [r7, #12]
90001636:	2300      	movs	r3, #0
90001638:	60bb      	str	r3, [r7, #8]
9000163a:	2300      	movs	r3, #0
9000163c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
9000163e:	2300      	movs	r3, #0
90001640:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
90001642:	687b      	ldr	r3, [r7, #4]
90001644:	685b      	ldr	r3, [r3, #4]
90001646:	2b00      	cmp	r3, #0
90001648:	d17c      	bne.n	90001744 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
9000164a:	687b      	ldr	r3, [r7, #4]
9000164c:	689b      	ldr	r3, [r3, #8]
9000164e:	2b00      	cmp	r3, #0
90001650:	d002      	beq.n	90001658 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
90001652:	687b      	ldr	r3, [r7, #4]
90001654:	689b      	ldr	r3, [r3, #8]
90001656:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
90001658:	687b      	ldr	r3, [r7, #4]
9000165a:	2220      	movs	r2, #32
9000165c:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
9000165e:	2300      	movs	r3, #0
90001660:	617b      	str	r3, [r7, #20]
90001662:	e01c      	b.n	9000169e <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
90001664:	687b      	ldr	r3, [r7, #4]
90001666:	695b      	ldr	r3, [r3, #20]
90001668:	f107 0208 	add.w	r2, r7, #8
9000166c:	2112      	movs	r1, #18
9000166e:	6978      	ldr	r0, [r7, #20]
90001670:	4798      	blx	r3
90001672:	4603      	mov	r3, r0
90001674:	2b00      	cmp	r3, #0
90001676:	da03      	bge.n	90001680 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
90001678:	f06f 0304 	mvn.w	r3, #4
9000167c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
9000167e:	e00b      	b.n	90001698 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
90001680:	68bb      	ldr	r3, [r7, #8]
90001682:	f003 031f 	and.w	r3, r3, #31
90001686:	697a      	ldr	r2, [r7, #20]
90001688:	429a      	cmp	r2, r3
9000168a:	d105      	bne.n	90001698 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
9000168c:	687b      	ldr	r3, [r7, #4]
9000168e:	697a      	ldr	r2, [r7, #20]
90001690:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
90001692:	2300      	movs	r3, #0
90001694:	613b      	str	r3, [r7, #16]
         break;
90001696:	e005      	b.n	900016a4 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
90001698:	697b      	ldr	r3, [r7, #20]
9000169a:	3301      	adds	r3, #1
9000169c:	617b      	str	r3, [r7, #20]
9000169e:	697b      	ldr	r3, [r7, #20]
900016a0:	2b1f      	cmp	r3, #31
900016a2:	d9df      	bls.n	90001664 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
900016a4:	687b      	ldr	r3, [r7, #4]
900016a6:	681b      	ldr	r3, [r3, #0]
900016a8:	2b1f      	cmp	r3, #31
900016aa:	d902      	bls.n	900016b2 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
900016ac:	f06f 0302 	mvn.w	r3, #2
900016b0:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
900016b2:	693b      	ldr	r3, [r7, #16]
900016b4:	2b00      	cmp	r3, #0
900016b6:	d145      	bne.n	90001744 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
900016b8:	687b      	ldr	r3, [r7, #4]
900016ba:	691b      	ldr	r3, [r3, #16]
900016bc:	687a      	ldr	r2, [r7, #4]
900016be:	6810      	ldr	r0, [r2, #0]
900016c0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
900016c4:	2100      	movs	r1, #0
900016c6:	4798      	blx	r3
900016c8:	4603      	mov	r3, r0
900016ca:	2b00      	cmp	r3, #0
900016cc:	db37      	blt.n	9000173e <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
900016ce:	687b      	ldr	r3, [r7, #4]
900016d0:	695b      	ldr	r3, [r3, #20]
900016d2:	687a      	ldr	r2, [r7, #4]
900016d4:	6810      	ldr	r0, [r2, #0]
900016d6:	f107 0208 	add.w	r2, r7, #8
900016da:	2100      	movs	r1, #0
900016dc:	4798      	blx	r3
900016de:	4603      	mov	r3, r0
900016e0:	2b00      	cmp	r3, #0
900016e2:	db28      	blt.n	90001736 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
900016e4:	687b      	ldr	r3, [r7, #4]
900016e6:	699b      	ldr	r3, [r3, #24]
900016e8:	4798      	blx	r3
900016ea:	4603      	mov	r3, r0
900016ec:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
900016ee:	e01c      	b.n	9000172a <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
900016f0:	687b      	ldr	r3, [r7, #4]
900016f2:	699b      	ldr	r3, [r3, #24]
900016f4:	4798      	blx	r3
900016f6:	4603      	mov	r3, r0
900016f8:	461a      	mov	r2, r3
900016fa:	68fb      	ldr	r3, [r7, #12]
900016fc:	1ad3      	subs	r3, r2, r3
900016fe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
90001702:	d80e      	bhi.n	90001722 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
90001704:	687b      	ldr	r3, [r7, #4]
90001706:	695b      	ldr	r3, [r3, #20]
90001708:	687a      	ldr	r2, [r7, #4]
9000170a:	6810      	ldr	r0, [r2, #0]
9000170c:	f107 0208 	add.w	r2, r7, #8
90001710:	2100      	movs	r1, #0
90001712:	4798      	blx	r3
90001714:	4603      	mov	r3, r0
90001716:	2b00      	cmp	r3, #0
90001718:	da07      	bge.n	9000172a <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
9000171a:	f06f 0304 	mvn.w	r3, #4
9000171e:	613b      	str	r3, [r7, #16]
                 break;
90001720:	e010      	b.n	90001744 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
90001722:	f06f 0301 	mvn.w	r3, #1
90001726:	613b      	str	r3, [r7, #16]
               break;
90001728:	e00c      	b.n	90001744 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
9000172a:	68bb      	ldr	r3, [r7, #8]
9000172c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
90001730:	2b00      	cmp	r3, #0
90001732:	d1dd      	bne.n	900016f0 <LAN8742_Init+0xc6>
90001734:	e006      	b.n	90001744 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
90001736:	f06f 0304 	mvn.w	r3, #4
9000173a:	613b      	str	r3, [r7, #16]
9000173c:	e002      	b.n	90001744 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
9000173e:	f06f 0303 	mvn.w	r3, #3
90001742:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
90001744:	693b      	ldr	r3, [r7, #16]
90001746:	2b00      	cmp	r3, #0
90001748:	d112      	bne.n	90001770 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
9000174a:	687b      	ldr	r3, [r7, #4]
9000174c:	699b      	ldr	r3, [r3, #24]
9000174e:	4798      	blx	r3
90001750:	4603      	mov	r3, r0
90001752:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
90001754:	bf00      	nop
90001756:	687b      	ldr	r3, [r7, #4]
90001758:	699b      	ldr	r3, [r3, #24]
9000175a:	4798      	blx	r3
9000175c:	4603      	mov	r3, r0
9000175e:	461a      	mov	r2, r3
90001760:	68fb      	ldr	r3, [r7, #12]
90001762:	1ad3      	subs	r3, r2, r3
90001764:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
90001768:	d9f5      	bls.n	90001756 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
9000176a:	687b      	ldr	r3, [r7, #4]
9000176c:	2201      	movs	r2, #1
9000176e:	605a      	str	r2, [r3, #4]
   }
   
   return status;
90001770:	693b      	ldr	r3, [r7, #16]
 }
90001772:	4618      	mov	r0, r3
90001774:	3718      	adds	r7, #24
90001776:	46bd      	mov	sp, r7
90001778:	bd80      	pop	{r7, pc}

9000177a <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
9000177a:	b580      	push	{r7, lr}
9000177c:	b084      	sub	sp, #16
9000177e:	af00      	add	r7, sp, #0
90001780:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
90001782:	2300      	movs	r3, #0
90001784:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
90001786:	687b      	ldr	r3, [r7, #4]
90001788:	695b      	ldr	r3, [r3, #20]
9000178a:	687a      	ldr	r2, [r7, #4]
9000178c:	6810      	ldr	r0, [r2, #0]
9000178e:	f107 020c 	add.w	r2, r7, #12
90001792:	2101      	movs	r1, #1
90001794:	4798      	blx	r3
90001796:	4603      	mov	r3, r0
90001798:	2b00      	cmp	r3, #0
9000179a:	da02      	bge.n	900017a2 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
9000179c:	f06f 0304 	mvn.w	r3, #4
900017a0:	e06e      	b.n	90001880 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
900017a2:	687b      	ldr	r3, [r7, #4]
900017a4:	695b      	ldr	r3, [r3, #20]
900017a6:	687a      	ldr	r2, [r7, #4]
900017a8:	6810      	ldr	r0, [r2, #0]
900017aa:	f107 020c 	add.w	r2, r7, #12
900017ae:	2101      	movs	r1, #1
900017b0:	4798      	blx	r3
900017b2:	4603      	mov	r3, r0
900017b4:	2b00      	cmp	r3, #0
900017b6:	da02      	bge.n	900017be <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
900017b8:	f06f 0304 	mvn.w	r3, #4
900017bc:	e060      	b.n	90001880 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
900017be:	68fb      	ldr	r3, [r7, #12]
900017c0:	f003 0304 	and.w	r3, r3, #4
900017c4:	2b00      	cmp	r3, #0
900017c6:	d101      	bne.n	900017cc <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
900017c8:	2301      	movs	r3, #1
900017ca:	e059      	b.n	90001880 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
900017cc:	687b      	ldr	r3, [r7, #4]
900017ce:	695b      	ldr	r3, [r3, #20]
900017d0:	687a      	ldr	r2, [r7, #4]
900017d2:	6810      	ldr	r0, [r2, #0]
900017d4:	f107 020c 	add.w	r2, r7, #12
900017d8:	2100      	movs	r1, #0
900017da:	4798      	blx	r3
900017dc:	4603      	mov	r3, r0
900017de:	2b00      	cmp	r3, #0
900017e0:	da02      	bge.n	900017e8 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
900017e2:	f06f 0304 	mvn.w	r3, #4
900017e6:	e04b      	b.n	90001880 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
900017e8:	68fb      	ldr	r3, [r7, #12]
900017ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
900017ee:	2b00      	cmp	r3, #0
900017f0:	d11b      	bne.n	9000182a <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
900017f2:	68fb      	ldr	r3, [r7, #12]
900017f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
900017f8:	2b00      	cmp	r3, #0
900017fa:	d006      	beq.n	9000180a <LAN8742_GetLinkState+0x90>
900017fc:	68fb      	ldr	r3, [r7, #12]
900017fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
90001802:	2b00      	cmp	r3, #0
90001804:	d001      	beq.n	9000180a <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
90001806:	2302      	movs	r3, #2
90001808:	e03a      	b.n	90001880 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
9000180a:	68fb      	ldr	r3, [r7, #12]
9000180c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
90001810:	2b00      	cmp	r3, #0
90001812:	d001      	beq.n	90001818 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
90001814:	2303      	movs	r3, #3
90001816:	e033      	b.n	90001880 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
90001818:	68fb      	ldr	r3, [r7, #12]
9000181a:	f403 7380 	and.w	r3, r3, #256	; 0x100
9000181e:	2b00      	cmp	r3, #0
90001820:	d001      	beq.n	90001826 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
90001822:	2304      	movs	r3, #4
90001824:	e02c      	b.n	90001880 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
90001826:	2305      	movs	r3, #5
90001828:	e02a      	b.n	90001880 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
9000182a:	687b      	ldr	r3, [r7, #4]
9000182c:	695b      	ldr	r3, [r3, #20]
9000182e:	687a      	ldr	r2, [r7, #4]
90001830:	6810      	ldr	r0, [r2, #0]
90001832:	f107 020c 	add.w	r2, r7, #12
90001836:	211f      	movs	r1, #31
90001838:	4798      	blx	r3
9000183a:	4603      	mov	r3, r0
9000183c:	2b00      	cmp	r3, #0
9000183e:	da02      	bge.n	90001846 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
90001840:	f06f 0304 	mvn.w	r3, #4
90001844:	e01c      	b.n	90001880 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
90001846:	68fb      	ldr	r3, [r7, #12]
90001848:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
9000184c:	2b00      	cmp	r3, #0
9000184e:	d101      	bne.n	90001854 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
90001850:	2306      	movs	r3, #6
90001852:	e015      	b.n	90001880 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
90001854:	68fb      	ldr	r3, [r7, #12]
90001856:	f003 031c 	and.w	r3, r3, #28
9000185a:	2b18      	cmp	r3, #24
9000185c:	d101      	bne.n	90001862 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
9000185e:	2302      	movs	r3, #2
90001860:	e00e      	b.n	90001880 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
90001862:	68fb      	ldr	r3, [r7, #12]
90001864:	f003 031c 	and.w	r3, r3, #28
90001868:	2b08      	cmp	r3, #8
9000186a:	d101      	bne.n	90001870 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
9000186c:	2303      	movs	r3, #3
9000186e:	e007      	b.n	90001880 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
90001870:	68fb      	ldr	r3, [r7, #12]
90001872:	f003 031c 	and.w	r3, r3, #28
90001876:	2b14      	cmp	r3, #20
90001878:	d101      	bne.n	9000187e <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
9000187a:	2304      	movs	r3, #4
9000187c:	e000      	b.n	90001880 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
9000187e:	2305      	movs	r3, #5
    }				
  }
}
90001880:	4618      	mov	r0, r3
90001882:	3710      	adds	r7, #16
90001884:	46bd      	mov	sp, r7
90001886:	bd80      	pop	{r7, pc}

90001888 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
90001888:	b580      	push	{r7, lr}
9000188a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
9000188c:	2003      	movs	r0, #3
9000188e:	f000 f92f 	bl	90001af0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
90001892:	2000      	movs	r0, #0
90001894:	f000 f806 	bl	900018a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
90001898:	f7ff fd3a 	bl	90001310 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
9000189c:	2300      	movs	r3, #0
}
9000189e:	4618      	mov	r0, r3
900018a0:	bd80      	pop	{r7, pc}
	...

900018a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
900018a4:	b580      	push	{r7, lr}
900018a6:	b082      	sub	sp, #8
900018a8:	af00      	add	r7, sp, #0
900018aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
900018ac:	4b12      	ldr	r3, [pc, #72]	; (900018f8 <HAL_InitTick+0x54>)
900018ae:	681a      	ldr	r2, [r3, #0]
900018b0:	4b12      	ldr	r3, [pc, #72]	; (900018fc <HAL_InitTick+0x58>)
900018b2:	781b      	ldrb	r3, [r3, #0]
900018b4:	4619      	mov	r1, r3
900018b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
900018ba:	fbb3 f3f1 	udiv	r3, r3, r1
900018be:	fbb2 f3f3 	udiv	r3, r2, r3
900018c2:	4618      	mov	r0, r3
900018c4:	f000 f93b 	bl	90001b3e <HAL_SYSTICK_Config>
900018c8:	4603      	mov	r3, r0
900018ca:	2b00      	cmp	r3, #0
900018cc:	d001      	beq.n	900018d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
900018ce:	2301      	movs	r3, #1
900018d0:	e00e      	b.n	900018f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
900018d2:	687b      	ldr	r3, [r7, #4]
900018d4:	2b0f      	cmp	r3, #15
900018d6:	d80a      	bhi.n	900018ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
900018d8:	2200      	movs	r2, #0
900018da:	6879      	ldr	r1, [r7, #4]
900018dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
900018e0:	f000 f911 	bl	90001b06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
900018e4:	4a06      	ldr	r2, [pc, #24]	; (90001900 <HAL_InitTick+0x5c>)
900018e6:	687b      	ldr	r3, [r7, #4]
900018e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
900018ea:	2300      	movs	r3, #0
900018ec:	e000      	b.n	900018f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
900018ee:	2301      	movs	r3, #1
}
900018f0:	4618      	mov	r0, r3
900018f2:	3708      	adds	r7, #8
900018f4:	46bd      	mov	sp, r7
900018f6:	bd80      	pop	{r7, pc}
900018f8:	20000010 	.word	0x20000010
900018fc:	20000018 	.word	0x20000018
90001900:	20000014 	.word	0x20000014

90001904 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
90001904:	b480      	push	{r7}
90001906:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
90001908:	4b06      	ldr	r3, [pc, #24]	; (90001924 <HAL_IncTick+0x20>)
9000190a:	781b      	ldrb	r3, [r3, #0]
9000190c:	461a      	mov	r2, r3
9000190e:	4b06      	ldr	r3, [pc, #24]	; (90001928 <HAL_IncTick+0x24>)
90001910:	681b      	ldr	r3, [r3, #0]
90001912:	4413      	add	r3, r2
90001914:	4a04      	ldr	r2, [pc, #16]	; (90001928 <HAL_IncTick+0x24>)
90001916:	6013      	str	r3, [r2, #0]
}
90001918:	bf00      	nop
9000191a:	46bd      	mov	sp, r7
9000191c:	f85d 7b04 	ldr.w	r7, [sp], #4
90001920:	4770      	bx	lr
90001922:	bf00      	nop
90001924:	20000018 	.word	0x20000018
90001928:	20000234 	.word	0x20000234

9000192c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
9000192c:	b480      	push	{r7}
9000192e:	af00      	add	r7, sp, #0
  return uwTick;
90001930:	4b03      	ldr	r3, [pc, #12]	; (90001940 <HAL_GetTick+0x14>)
90001932:	681b      	ldr	r3, [r3, #0]
}
90001934:	4618      	mov	r0, r3
90001936:	46bd      	mov	sp, r7
90001938:	f85d 7b04 	ldr.w	r7, [sp], #4
9000193c:	4770      	bx	lr
9000193e:	bf00      	nop
90001940:	20000234 	.word	0x20000234

90001944 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
90001944:	b580      	push	{r7, lr}
90001946:	b084      	sub	sp, #16
90001948:	af00      	add	r7, sp, #0
9000194a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
9000194c:	f7ff ffee 	bl	9000192c <HAL_GetTick>
90001950:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
90001952:	687b      	ldr	r3, [r7, #4]
90001954:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
90001956:	68fb      	ldr	r3, [r7, #12]
90001958:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
9000195c:	d005      	beq.n	9000196a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
9000195e:	4b0a      	ldr	r3, [pc, #40]	; (90001988 <HAL_Delay+0x44>)
90001960:	781b      	ldrb	r3, [r3, #0]
90001962:	461a      	mov	r2, r3
90001964:	68fb      	ldr	r3, [r7, #12]
90001966:	4413      	add	r3, r2
90001968:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
9000196a:	bf00      	nop
9000196c:	f7ff ffde 	bl	9000192c <HAL_GetTick>
90001970:	4602      	mov	r2, r0
90001972:	68bb      	ldr	r3, [r7, #8]
90001974:	1ad3      	subs	r3, r2, r3
90001976:	68fa      	ldr	r2, [r7, #12]
90001978:	429a      	cmp	r2, r3
9000197a:	d8f7      	bhi.n	9000196c <HAL_Delay+0x28>
  {
  }
}
9000197c:	bf00      	nop
9000197e:	bf00      	nop
90001980:	3710      	adds	r7, #16
90001982:	46bd      	mov	sp, r7
90001984:	bd80      	pop	{r7, pc}
90001986:	bf00      	nop
90001988:	20000018 	.word	0x20000018

9000198c <__NVIC_SetPriorityGrouping>:
{
9000198c:	b480      	push	{r7}
9000198e:	b085      	sub	sp, #20
90001990:	af00      	add	r7, sp, #0
90001992:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
90001994:	687b      	ldr	r3, [r7, #4]
90001996:	f003 0307 	and.w	r3, r3, #7
9000199a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
9000199c:	4b0b      	ldr	r3, [pc, #44]	; (900019cc <__NVIC_SetPriorityGrouping+0x40>)
9000199e:	68db      	ldr	r3, [r3, #12]
900019a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
900019a2:	68ba      	ldr	r2, [r7, #8]
900019a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
900019a8:	4013      	ands	r3, r2
900019aa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
900019ac:	68fb      	ldr	r3, [r7, #12]
900019ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
900019b0:	68bb      	ldr	r3, [r7, #8]
900019b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
900019b4:	4b06      	ldr	r3, [pc, #24]	; (900019d0 <__NVIC_SetPriorityGrouping+0x44>)
900019b6:	4313      	orrs	r3, r2
900019b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
900019ba:	4a04      	ldr	r2, [pc, #16]	; (900019cc <__NVIC_SetPriorityGrouping+0x40>)
900019bc:	68bb      	ldr	r3, [r7, #8]
900019be:	60d3      	str	r3, [r2, #12]
}
900019c0:	bf00      	nop
900019c2:	3714      	adds	r7, #20
900019c4:	46bd      	mov	sp, r7
900019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
900019ca:	4770      	bx	lr
900019cc:	e000ed00 	.word	0xe000ed00
900019d0:	05fa0000 	.word	0x05fa0000

900019d4 <__NVIC_GetPriorityGrouping>:
{
900019d4:	b480      	push	{r7}
900019d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
900019d8:	4b04      	ldr	r3, [pc, #16]	; (900019ec <__NVIC_GetPriorityGrouping+0x18>)
900019da:	68db      	ldr	r3, [r3, #12]
900019dc:	0a1b      	lsrs	r3, r3, #8
900019de:	f003 0307 	and.w	r3, r3, #7
}
900019e2:	4618      	mov	r0, r3
900019e4:	46bd      	mov	sp, r7
900019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
900019ea:	4770      	bx	lr
900019ec:	e000ed00 	.word	0xe000ed00

900019f0 <__NVIC_SetPriority>:
{
900019f0:	b480      	push	{r7}
900019f2:	b083      	sub	sp, #12
900019f4:	af00      	add	r7, sp, #0
900019f6:	4603      	mov	r3, r0
900019f8:	6039      	str	r1, [r7, #0]
900019fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
900019fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
90001a00:	2b00      	cmp	r3, #0
90001a02:	db0a      	blt.n	90001a1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90001a04:	683b      	ldr	r3, [r7, #0]
90001a06:	b2da      	uxtb	r2, r3
90001a08:	490c      	ldr	r1, [pc, #48]	; (90001a3c <__NVIC_SetPriority+0x4c>)
90001a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
90001a0e:	0112      	lsls	r2, r2, #4
90001a10:	b2d2      	uxtb	r2, r2
90001a12:	440b      	add	r3, r1
90001a14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
90001a18:	e00a      	b.n	90001a30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90001a1a:	683b      	ldr	r3, [r7, #0]
90001a1c:	b2da      	uxtb	r2, r3
90001a1e:	4908      	ldr	r1, [pc, #32]	; (90001a40 <__NVIC_SetPriority+0x50>)
90001a20:	79fb      	ldrb	r3, [r7, #7]
90001a22:	f003 030f 	and.w	r3, r3, #15
90001a26:	3b04      	subs	r3, #4
90001a28:	0112      	lsls	r2, r2, #4
90001a2a:	b2d2      	uxtb	r2, r2
90001a2c:	440b      	add	r3, r1
90001a2e:	761a      	strb	r2, [r3, #24]
}
90001a30:	bf00      	nop
90001a32:	370c      	adds	r7, #12
90001a34:	46bd      	mov	sp, r7
90001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
90001a3a:	4770      	bx	lr
90001a3c:	e000e100 	.word	0xe000e100
90001a40:	e000ed00 	.word	0xe000ed00

90001a44 <NVIC_EncodePriority>:
{
90001a44:	b480      	push	{r7}
90001a46:	b089      	sub	sp, #36	; 0x24
90001a48:	af00      	add	r7, sp, #0
90001a4a:	60f8      	str	r0, [r7, #12]
90001a4c:	60b9      	str	r1, [r7, #8]
90001a4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
90001a50:	68fb      	ldr	r3, [r7, #12]
90001a52:	f003 0307 	and.w	r3, r3, #7
90001a56:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
90001a58:	69fb      	ldr	r3, [r7, #28]
90001a5a:	f1c3 0307 	rsb	r3, r3, #7
90001a5e:	2b04      	cmp	r3, #4
90001a60:	bf28      	it	cs
90001a62:	2304      	movcs	r3, #4
90001a64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
90001a66:	69fb      	ldr	r3, [r7, #28]
90001a68:	3304      	adds	r3, #4
90001a6a:	2b06      	cmp	r3, #6
90001a6c:	d902      	bls.n	90001a74 <NVIC_EncodePriority+0x30>
90001a6e:	69fb      	ldr	r3, [r7, #28]
90001a70:	3b03      	subs	r3, #3
90001a72:	e000      	b.n	90001a76 <NVIC_EncodePriority+0x32>
90001a74:	2300      	movs	r3, #0
90001a76:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90001a78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
90001a7c:	69bb      	ldr	r3, [r7, #24]
90001a7e:	fa02 f303 	lsl.w	r3, r2, r3
90001a82:	43da      	mvns	r2, r3
90001a84:	68bb      	ldr	r3, [r7, #8]
90001a86:	401a      	ands	r2, r3
90001a88:	697b      	ldr	r3, [r7, #20]
90001a8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
90001a8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
90001a90:	697b      	ldr	r3, [r7, #20]
90001a92:	fa01 f303 	lsl.w	r3, r1, r3
90001a96:	43d9      	mvns	r1, r3
90001a98:	687b      	ldr	r3, [r7, #4]
90001a9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90001a9c:	4313      	orrs	r3, r2
}
90001a9e:	4618      	mov	r0, r3
90001aa0:	3724      	adds	r7, #36	; 0x24
90001aa2:	46bd      	mov	sp, r7
90001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
90001aa8:	4770      	bx	lr
	...

90001aac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
90001aac:	b580      	push	{r7, lr}
90001aae:	b082      	sub	sp, #8
90001ab0:	af00      	add	r7, sp, #0
90001ab2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
90001ab4:	687b      	ldr	r3, [r7, #4]
90001ab6:	3b01      	subs	r3, #1
90001ab8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
90001abc:	d301      	bcc.n	90001ac2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
90001abe:	2301      	movs	r3, #1
90001ac0:	e00f      	b.n	90001ae2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
90001ac2:	4a0a      	ldr	r2, [pc, #40]	; (90001aec <SysTick_Config+0x40>)
90001ac4:	687b      	ldr	r3, [r7, #4]
90001ac6:	3b01      	subs	r3, #1
90001ac8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
90001aca:	210f      	movs	r1, #15
90001acc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
90001ad0:	f7ff ff8e 	bl	900019f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
90001ad4:	4b05      	ldr	r3, [pc, #20]	; (90001aec <SysTick_Config+0x40>)
90001ad6:	2200      	movs	r2, #0
90001ad8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
90001ada:	4b04      	ldr	r3, [pc, #16]	; (90001aec <SysTick_Config+0x40>)
90001adc:	2207      	movs	r2, #7
90001ade:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
90001ae0:	2300      	movs	r3, #0
}
90001ae2:	4618      	mov	r0, r3
90001ae4:	3708      	adds	r7, #8
90001ae6:	46bd      	mov	sp, r7
90001ae8:	bd80      	pop	{r7, pc}
90001aea:	bf00      	nop
90001aec:	e000e010 	.word	0xe000e010

90001af0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
90001af0:	b580      	push	{r7, lr}
90001af2:	b082      	sub	sp, #8
90001af4:	af00      	add	r7, sp, #0
90001af6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
90001af8:	6878      	ldr	r0, [r7, #4]
90001afa:	f7ff ff47 	bl	9000198c <__NVIC_SetPriorityGrouping>
}
90001afe:	bf00      	nop
90001b00:	3708      	adds	r7, #8
90001b02:	46bd      	mov	sp, r7
90001b04:	bd80      	pop	{r7, pc}

90001b06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
90001b06:	b580      	push	{r7, lr}
90001b08:	b086      	sub	sp, #24
90001b0a:	af00      	add	r7, sp, #0
90001b0c:	4603      	mov	r3, r0
90001b0e:	60b9      	str	r1, [r7, #8]
90001b10:	607a      	str	r2, [r7, #4]
90001b12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
90001b14:	2300      	movs	r3, #0
90001b16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
90001b18:	f7ff ff5c 	bl	900019d4 <__NVIC_GetPriorityGrouping>
90001b1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
90001b1e:	687a      	ldr	r2, [r7, #4]
90001b20:	68b9      	ldr	r1, [r7, #8]
90001b22:	6978      	ldr	r0, [r7, #20]
90001b24:	f7ff ff8e 	bl	90001a44 <NVIC_EncodePriority>
90001b28:	4602      	mov	r2, r0
90001b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
90001b2e:	4611      	mov	r1, r2
90001b30:	4618      	mov	r0, r3
90001b32:	f7ff ff5d 	bl	900019f0 <__NVIC_SetPriority>
}
90001b36:	bf00      	nop
90001b38:	3718      	adds	r7, #24
90001b3a:	46bd      	mov	sp, r7
90001b3c:	bd80      	pop	{r7, pc}

90001b3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
90001b3e:	b580      	push	{r7, lr}
90001b40:	b082      	sub	sp, #8
90001b42:	af00      	add	r7, sp, #0
90001b44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
90001b46:	6878      	ldr	r0, [r7, #4]
90001b48:	f7ff ffb0 	bl	90001aac <SysTick_Config>
90001b4c:	4603      	mov	r3, r0
}
90001b4e:	4618      	mov	r0, r3
90001b50:	3708      	adds	r7, #8
90001b52:	46bd      	mov	sp, r7
90001b54:	bd80      	pop	{r7, pc}
	...

90001b58 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
90001b58:	b580      	push	{r7, lr}
90001b5a:	b084      	sub	sp, #16
90001b5c:	af00      	add	r7, sp, #0
90001b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
90001b60:	687b      	ldr	r3, [r7, #4]
90001b62:	2b00      	cmp	r3, #0
90001b64:	d101      	bne.n	90001b6a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
90001b66:	2301      	movs	r3, #1
90001b68:	e06a      	b.n	90001c40 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
90001b6a:	687b      	ldr	r3, [r7, #4]
90001b6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90001b70:	2b00      	cmp	r3, #0
90001b72:	d106      	bne.n	90001b82 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
90001b74:	687b      	ldr	r3, [r7, #4]
90001b76:	2223      	movs	r2, #35	; 0x23
90001b78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
90001b7c:	6878      	ldr	r0, [r7, #4]
90001b7e:	f002 fa61 	bl	90004044 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
90001b82:	4b31      	ldr	r3, [pc, #196]	; (90001c48 <HAL_ETH_Init+0xf0>)
90001b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90001b86:	4a30      	ldr	r2, [pc, #192]	; (90001c48 <HAL_ETH_Init+0xf0>)
90001b88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
90001b8c:	6453      	str	r3, [r2, #68]	; 0x44
90001b8e:	4b2e      	ldr	r3, [pc, #184]	; (90001c48 <HAL_ETH_Init+0xf0>)
90001b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90001b92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
90001b96:	60bb      	str	r3, [r7, #8]
90001b98:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
90001b9a:	4b2c      	ldr	r3, [pc, #176]	; (90001c4c <HAL_ETH_Init+0xf4>)
90001b9c:	685b      	ldr	r3, [r3, #4]
90001b9e:	4a2b      	ldr	r2, [pc, #172]	; (90001c4c <HAL_ETH_Init+0xf4>)
90001ba0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
90001ba4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
90001ba6:	4b29      	ldr	r3, [pc, #164]	; (90001c4c <HAL_ETH_Init+0xf4>)
90001ba8:	685a      	ldr	r2, [r3, #4]
90001baa:	687b      	ldr	r3, [r7, #4]
90001bac:	689b      	ldr	r3, [r3, #8]
90001bae:	4927      	ldr	r1, [pc, #156]	; (90001c4c <HAL_ETH_Init+0xf4>)
90001bb0:	4313      	orrs	r3, r2
90001bb2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
90001bb4:	4b25      	ldr	r3, [pc, #148]	; (90001c4c <HAL_ETH_Init+0xf4>)
90001bb6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
90001bb8:	687b      	ldr	r3, [r7, #4]
90001bba:	681b      	ldr	r3, [r3, #0]
90001bbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90001bc0:	681b      	ldr	r3, [r3, #0]
90001bc2:	687a      	ldr	r2, [r7, #4]
90001bc4:	6812      	ldr	r2, [r2, #0]
90001bc6:	f043 0301 	orr.w	r3, r3, #1
90001bca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
90001bce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
90001bd0:	f7ff feac 	bl	9000192c <HAL_GetTick>
90001bd4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
90001bd6:	e011      	b.n	90001bfc <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
90001bd8:	f7ff fea8 	bl	9000192c <HAL_GetTick>
90001bdc:	4602      	mov	r2, r0
90001bde:	68fb      	ldr	r3, [r7, #12]
90001be0:	1ad3      	subs	r3, r2, r3
90001be2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
90001be6:	d909      	bls.n	90001bfc <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
90001be8:	687b      	ldr	r3, [r7, #4]
90001bea:	2204      	movs	r2, #4
90001bec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
90001bf0:	687b      	ldr	r3, [r7, #4]
90001bf2:	22e0      	movs	r2, #224	; 0xe0
90001bf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
90001bf8:	2301      	movs	r3, #1
90001bfa:	e021      	b.n	90001c40 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
90001bfc:	687b      	ldr	r3, [r7, #4]
90001bfe:	681b      	ldr	r3, [r3, #0]
90001c00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90001c04:	681b      	ldr	r3, [r3, #0]
90001c06:	f003 0301 	and.w	r3, r3, #1
90001c0a:	2b00      	cmp	r3, #0
90001c0c:	d1e4      	bne.n	90001bd8 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
90001c0e:	6878      	ldr	r0, [r7, #4]
90001c10:	f000 fdf0 	bl	900027f4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
90001c14:	6878      	ldr	r0, [r7, #4]
90001c16:	f000 fe97 	bl	90002948 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
90001c1a:	6878      	ldr	r0, [r7, #4]
90001c1c:	f000 feed 	bl	900029fa <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
90001c20:	687b      	ldr	r3, [r7, #4]
90001c22:	685b      	ldr	r3, [r3, #4]
90001c24:	461a      	mov	r2, r3
90001c26:	2100      	movs	r1, #0
90001c28:	6878      	ldr	r0, [r7, #4]
90001c2a:	f000 fe55 	bl	900028d8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
90001c2e:	687b      	ldr	r3, [r7, #4]
90001c30:	2200      	movs	r2, #0
90001c32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
90001c36:	687b      	ldr	r3, [r7, #4]
90001c38:	2210      	movs	r2, #16
90001c3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
90001c3e:	2300      	movs	r3, #0
}
90001c40:	4618      	mov	r0, r3
90001c42:	3710      	adds	r7, #16
90001c44:	46bd      	mov	sp, r7
90001c46:	bd80      	pop	{r7, pc}
90001c48:	40023800 	.word	0x40023800
90001c4c:	40013800 	.word	0x40013800

90001c50 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
90001c50:	b580      	push	{r7, lr}
90001c52:	b084      	sub	sp, #16
90001c54:	af00      	add	r7, sp, #0
90001c56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
90001c58:	687b      	ldr	r3, [r7, #4]
90001c5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90001c5e:	2b10      	cmp	r3, #16
90001c60:	d150      	bne.n	90001d04 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
90001c62:	687b      	ldr	r3, [r7, #4]
90001c64:	2223      	movs	r2, #35	; 0x23
90001c66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
90001c6a:	687b      	ldr	r3, [r7, #4]
90001c6c:	2204      	movs	r2, #4
90001c6e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
90001c70:	6878      	ldr	r0, [r7, #4]
90001c72:	f000 f9fd 	bl	90002070 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
90001c76:	687b      	ldr	r3, [r7, #4]
90001c78:	681b      	ldr	r3, [r3, #0]
90001c7a:	681a      	ldr	r2, [r3, #0]
90001c7c:	687b      	ldr	r3, [r7, #4]
90001c7e:	681b      	ldr	r3, [r3, #0]
90001c80:	f042 0208 	orr.w	r2, r2, #8
90001c84:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
90001c86:	687b      	ldr	r3, [r7, #4]
90001c88:	681b      	ldr	r3, [r3, #0]
90001c8a:	681b      	ldr	r3, [r3, #0]
90001c8c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
90001c8e:	2001      	movs	r0, #1
90001c90:	f7ff fe58 	bl	90001944 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
90001c94:	687b      	ldr	r3, [r7, #4]
90001c96:	681b      	ldr	r3, [r3, #0]
90001c98:	68fa      	ldr	r2, [r7, #12]
90001c9a:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
90001c9c:	687b      	ldr	r3, [r7, #4]
90001c9e:	681b      	ldr	r3, [r3, #0]
90001ca0:	681a      	ldr	r2, [r3, #0]
90001ca2:	687b      	ldr	r3, [r7, #4]
90001ca4:	681b      	ldr	r3, [r3, #0]
90001ca6:	f042 0204 	orr.w	r2, r2, #4
90001caa:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
90001cac:	687b      	ldr	r3, [r7, #4]
90001cae:	681b      	ldr	r3, [r3, #0]
90001cb0:	681b      	ldr	r3, [r3, #0]
90001cb2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
90001cb4:	2001      	movs	r0, #1
90001cb6:	f7ff fe45 	bl	90001944 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
90001cba:	687b      	ldr	r3, [r7, #4]
90001cbc:	681b      	ldr	r3, [r3, #0]
90001cbe:	68fa      	ldr	r2, [r7, #12]
90001cc0:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
90001cc2:	6878      	ldr	r0, [r7, #4]
90001cc4:	f000 fc36 	bl	90002534 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
90001cc8:	687b      	ldr	r3, [r7, #4]
90001cca:	681b      	ldr	r3, [r3, #0]
90001ccc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90001cd0:	699b      	ldr	r3, [r3, #24]
90001cd2:	687a      	ldr	r2, [r7, #4]
90001cd4:	6812      	ldr	r2, [r2, #0]
90001cd6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
90001cda:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
90001cde:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
90001ce0:	687b      	ldr	r3, [r7, #4]
90001ce2:	681b      	ldr	r3, [r3, #0]
90001ce4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90001ce8:	699b      	ldr	r3, [r3, #24]
90001cea:	687a      	ldr	r2, [r7, #4]
90001cec:	6812      	ldr	r2, [r2, #0]
90001cee:	f043 0302 	orr.w	r3, r3, #2
90001cf2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
90001cf6:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
90001cf8:	687b      	ldr	r3, [r7, #4]
90001cfa:	2223      	movs	r2, #35	; 0x23
90001cfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
90001d00:	2300      	movs	r3, #0
90001d02:	e000      	b.n	90001d06 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
90001d04:	2301      	movs	r3, #1
  }
}
90001d06:	4618      	mov	r0, r3
90001d08:	3710      	adds	r7, #16
90001d0a:	46bd      	mov	sp, r7
90001d0c:	bd80      	pop	{r7, pc}

90001d0e <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
90001d0e:	b580      	push	{r7, lr}
90001d10:	b084      	sub	sp, #16
90001d12:	af00      	add	r7, sp, #0
90001d14:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
90001d16:	687b      	ldr	r3, [r7, #4]
90001d18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90001d1c:	2b23      	cmp	r3, #35	; 0x23
90001d1e:	d14a      	bne.n	90001db6 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
90001d20:	687b      	ldr	r3, [r7, #4]
90001d22:	2223      	movs	r2, #35	; 0x23
90001d24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
90001d28:	687b      	ldr	r3, [r7, #4]
90001d2a:	681b      	ldr	r3, [r3, #0]
90001d2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90001d30:	699b      	ldr	r3, [r3, #24]
90001d32:	687a      	ldr	r2, [r7, #4]
90001d34:	6812      	ldr	r2, [r2, #0]
90001d36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
90001d3a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
90001d3e:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
90001d40:	687b      	ldr	r3, [r7, #4]
90001d42:	681b      	ldr	r3, [r3, #0]
90001d44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90001d48:	699b      	ldr	r3, [r3, #24]
90001d4a:	687a      	ldr	r2, [r7, #4]
90001d4c:	6812      	ldr	r2, [r2, #0]
90001d4e:	f023 0302 	bic.w	r3, r3, #2
90001d52:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
90001d56:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
90001d58:	687b      	ldr	r3, [r7, #4]
90001d5a:	681b      	ldr	r3, [r3, #0]
90001d5c:	681a      	ldr	r2, [r3, #0]
90001d5e:	687b      	ldr	r3, [r7, #4]
90001d60:	681b      	ldr	r3, [r3, #0]
90001d62:	f022 0204 	bic.w	r2, r2, #4
90001d66:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
90001d68:	687b      	ldr	r3, [r7, #4]
90001d6a:	681b      	ldr	r3, [r3, #0]
90001d6c:	681b      	ldr	r3, [r3, #0]
90001d6e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
90001d70:	2001      	movs	r0, #1
90001d72:	f7ff fde7 	bl	90001944 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
90001d76:	687b      	ldr	r3, [r7, #4]
90001d78:	681b      	ldr	r3, [r3, #0]
90001d7a:	68fa      	ldr	r2, [r7, #12]
90001d7c:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
90001d7e:	6878      	ldr	r0, [r7, #4]
90001d80:	f000 fbd8 	bl	90002534 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
90001d84:	687b      	ldr	r3, [r7, #4]
90001d86:	681b      	ldr	r3, [r3, #0]
90001d88:	681a      	ldr	r2, [r3, #0]
90001d8a:	687b      	ldr	r3, [r7, #4]
90001d8c:	681b      	ldr	r3, [r3, #0]
90001d8e:	f022 0208 	bic.w	r2, r2, #8
90001d92:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
90001d94:	687b      	ldr	r3, [r7, #4]
90001d96:	681b      	ldr	r3, [r3, #0]
90001d98:	681b      	ldr	r3, [r3, #0]
90001d9a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
90001d9c:	2001      	movs	r0, #1
90001d9e:	f7ff fdd1 	bl	90001944 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
90001da2:	687b      	ldr	r3, [r7, #4]
90001da4:	681b      	ldr	r3, [r3, #0]
90001da6:	68fa      	ldr	r2, [r7, #12]
90001da8:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
90001daa:	687b      	ldr	r3, [r7, #4]
90001dac:	2210      	movs	r2, #16
90001dae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
90001db2:	2300      	movs	r3, #0
90001db4:	e000      	b.n	90001db8 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
90001db6:	2301      	movs	r3, #1
  }
}
90001db8:	4618      	mov	r0, r3
90001dba:	3710      	adds	r7, #16
90001dbc:	46bd      	mov	sp, r7
90001dbe:	bd80      	pop	{r7, pc}

90001dc0 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
90001dc0:	b580      	push	{r7, lr}
90001dc2:	b086      	sub	sp, #24
90001dc4:	af00      	add	r7, sp, #0
90001dc6:	60f8      	str	r0, [r7, #12]
90001dc8:	60b9      	str	r1, [r7, #8]
90001dca:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
90001dcc:	68bb      	ldr	r3, [r7, #8]
90001dce:	2b00      	cmp	r3, #0
90001dd0:	d109      	bne.n	90001de6 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
90001dd2:	68fb      	ldr	r3, [r7, #12]
90001dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90001dd8:	f043 0201 	orr.w	r2, r3, #1
90001ddc:	68fb      	ldr	r3, [r7, #12]
90001dde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
90001de2:	2301      	movs	r3, #1
90001de4:	e07c      	b.n	90001ee0 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
90001de6:	68fb      	ldr	r3, [r7, #12]
90001de8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90001dec:	2b23      	cmp	r3, #35	; 0x23
90001dee:	d176      	bne.n	90001ede <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
90001df0:	2200      	movs	r2, #0
90001df2:	68b9      	ldr	r1, [r7, #8]
90001df4:	68f8      	ldr	r0, [r7, #12]
90001df6:	f000 fe6d 	bl	90002ad4 <ETH_Prepare_Tx_Descriptors>
90001dfa:	4603      	mov	r3, r0
90001dfc:	2b00      	cmp	r3, #0
90001dfe:	d009      	beq.n	90001e14 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
90001e00:	68fb      	ldr	r3, [r7, #12]
90001e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90001e06:	f043 0202 	orr.w	r2, r3, #2
90001e0a:	68fb      	ldr	r3, [r7, #12]
90001e0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
90001e10:	2301      	movs	r3, #1
90001e12:	e065      	b.n	90001ee0 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
90001e14:	f3bf 8f4f 	dsb	sy
}
90001e18:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
90001e1a:	68fb      	ldr	r3, [r7, #12]
90001e1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
90001e1e:	68fb      	ldr	r3, [r7, #12]
90001e20:	3206      	adds	r2, #6
90001e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
90001e26:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
90001e28:	68fb      	ldr	r3, [r7, #12]
90001e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90001e2c:	1c5a      	adds	r2, r3, #1
90001e2e:	68fb      	ldr	r3, [r7, #12]
90001e30:	629a      	str	r2, [r3, #40]	; 0x28
90001e32:	68fb      	ldr	r3, [r7, #12]
90001e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90001e36:	2b03      	cmp	r3, #3
90001e38:	d904      	bls.n	90001e44 <HAL_ETH_Transmit+0x84>
90001e3a:	68fb      	ldr	r3, [r7, #12]
90001e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90001e3e:	1f1a      	subs	r2, r3, #4
90001e40:	68fb      	ldr	r3, [r7, #12]
90001e42:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
90001e44:	68fb      	ldr	r3, [r7, #12]
90001e46:	6a99      	ldr	r1, [r3, #40]	; 0x28
90001e48:	68fb      	ldr	r3, [r7, #12]
90001e4a:	681a      	ldr	r2, [r3, #0]
90001e4c:	68fb      	ldr	r3, [r7, #12]
90001e4e:	3106      	adds	r1, #6
90001e50:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
90001e54:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
90001e58:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
90001e5a:	f7ff fd67 	bl	9000192c <HAL_GetTick>
90001e5e:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
90001e60:	e037      	b.n	90001ed2 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
90001e62:	68fb      	ldr	r3, [r7, #12]
90001e64:	681b      	ldr	r3, [r3, #0]
90001e66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90001e6a:	695b      	ldr	r3, [r3, #20]
90001e6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
90001e70:	2b00      	cmp	r3, #0
90001e72:	d011      	beq.n	90001e98 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
90001e74:	68fb      	ldr	r3, [r7, #12]
90001e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90001e7a:	f043 0208 	orr.w	r2, r3, #8
90001e7e:	68fb      	ldr	r3, [r7, #12]
90001e80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
90001e84:	68fb      	ldr	r3, [r7, #12]
90001e86:	681b      	ldr	r3, [r3, #0]
90001e88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90001e8c:	695a      	ldr	r2, [r3, #20]
90001e8e:	68fb      	ldr	r3, [r7, #12]
90001e90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
90001e94:	2301      	movs	r3, #1
90001e96:	e023      	b.n	90001ee0 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
90001e98:	687b      	ldr	r3, [r7, #4]
90001e9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
90001e9e:	d018      	beq.n	90001ed2 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90001ea0:	f7ff fd44 	bl	9000192c <HAL_GetTick>
90001ea4:	4602      	mov	r2, r0
90001ea6:	693b      	ldr	r3, [r7, #16]
90001ea8:	1ad3      	subs	r3, r2, r3
90001eaa:	687a      	ldr	r2, [r7, #4]
90001eac:	429a      	cmp	r2, r3
90001eae:	d302      	bcc.n	90001eb6 <HAL_ETH_Transmit+0xf6>
90001eb0:	687b      	ldr	r3, [r7, #4]
90001eb2:	2b00      	cmp	r3, #0
90001eb4:	d10d      	bne.n	90001ed2 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
90001eb6:	68fb      	ldr	r3, [r7, #12]
90001eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90001ebc:	f043 0204 	orr.w	r2, r3, #4
90001ec0:	68fb      	ldr	r3, [r7, #12]
90001ec2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
90001ec6:	697b      	ldr	r3, [r7, #20]
90001ec8:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
90001ecc:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
90001ece:	2301      	movs	r3, #1
90001ed0:	e006      	b.n	90001ee0 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
90001ed2:	697b      	ldr	r3, [r7, #20]
90001ed4:	681b      	ldr	r3, [r3, #0]
90001ed6:	2b00      	cmp	r3, #0
90001ed8:	dbc3      	blt.n	90001e62 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
90001eda:	2300      	movs	r3, #0
90001edc:	e000      	b.n	90001ee0 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
90001ede:	2301      	movs	r3, #1
  }
}
90001ee0:	4618      	mov	r0, r3
90001ee2:	3718      	adds	r7, #24
90001ee4:	46bd      	mov	sp, r7
90001ee6:	bd80      	pop	{r7, pc}

90001ee8 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
90001ee8:	b580      	push	{r7, lr}
90001eea:	b088      	sub	sp, #32
90001eec:	af00      	add	r7, sp, #0
90001eee:	6078      	str	r0, [r7, #4]
90001ef0:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
90001ef2:	2300      	movs	r3, #0
90001ef4:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
90001ef6:	2300      	movs	r3, #0
90001ef8:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
90001efa:	683b      	ldr	r3, [r7, #0]
90001efc:	2b00      	cmp	r3, #0
90001efe:	d109      	bne.n	90001f14 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
90001f00:	687b      	ldr	r3, [r7, #4]
90001f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90001f06:	f043 0201 	orr.w	r2, r3, #1
90001f0a:	687b      	ldr	r3, [r7, #4]
90001f0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
90001f10:	2301      	movs	r3, #1
90001f12:	e0a8      	b.n	90002066 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
90001f14:	687b      	ldr	r3, [r7, #4]
90001f16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90001f1a:	2b23      	cmp	r3, #35	; 0x23
90001f1c:	d001      	beq.n	90001f22 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
90001f1e:	2301      	movs	r3, #1
90001f20:	e0a1      	b.n	90002066 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
90001f22:	687b      	ldr	r3, [r7, #4]
90001f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
90001f26:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
90001f28:	687b      	ldr	r3, [r7, #4]
90001f2a:	69fa      	ldr	r2, [r7, #28]
90001f2c:	3212      	adds	r2, #18
90001f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
90001f32:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
90001f34:	687b      	ldr	r3, [r7, #4]
90001f36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90001f38:	f1c3 0304 	rsb	r3, r3, #4
90001f3c:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
90001f3e:	e06a      	b.n	90002016 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
90001f40:	69bb      	ldr	r3, [r7, #24]
90001f42:	681b      	ldr	r3, [r3, #0]
90001f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
90001f48:	2b00      	cmp	r3, #0
90001f4a:	d007      	beq.n	90001f5c <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
90001f4c:	69bb      	ldr	r3, [r7, #24]
90001f4e:	699a      	ldr	r2, [r3, #24]
90001f50:	687b      	ldr	r3, [r7, #4]
90001f52:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
90001f54:	69bb      	ldr	r3, [r7, #24]
90001f56:	69da      	ldr	r2, [r3, #28]
90001f58:	687b      	ldr	r3, [r7, #4]
90001f5a:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
90001f5c:	69bb      	ldr	r3, [r7, #24]
90001f5e:	681b      	ldr	r3, [r3, #0]
90001f60:	f403 7300 	and.w	r3, r3, #512	; 0x200
90001f64:	2b00      	cmp	r3, #0
90001f66:	d103      	bne.n	90001f70 <HAL_ETH_ReadData+0x88>
90001f68:	687b      	ldr	r3, [r7, #4]
90001f6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90001f6c:	2b00      	cmp	r3, #0
90001f6e:	d040      	beq.n	90001ff2 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
90001f70:	69bb      	ldr	r3, [r7, #24]
90001f72:	681b      	ldr	r3, [r3, #0]
90001f74:	f403 7300 	and.w	r3, r3, #512	; 0x200
90001f78:	2b00      	cmp	r3, #0
90001f7a:	d005      	beq.n	90001f88 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
90001f7c:	687b      	ldr	r3, [r7, #4]
90001f7e:	2200      	movs	r2, #0
90001f80:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
90001f82:	687b      	ldr	r3, [r7, #4]
90001f84:	2200      	movs	r2, #0
90001f86:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
90001f88:	687b      	ldr	r3, [r7, #4]
90001f8a:	695b      	ldr	r3, [r3, #20]
90001f8c:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
90001f8e:	69bb      	ldr	r3, [r7, #24]
90001f90:	681b      	ldr	r3, [r3, #0]
90001f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
90001f96:	2b00      	cmp	r3, #0
90001f98:	d00c      	beq.n	90001fb4 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
90001f9a:	69bb      	ldr	r3, [r7, #24]
90001f9c:	681b      	ldr	r3, [r3, #0]
90001f9e:	0c1b      	lsrs	r3, r3, #16
90001fa0:	f3c3 030d 	ubfx	r3, r3, #0, #14
90001fa4:	3b04      	subs	r3, #4
90001fa6:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
90001fa8:	69bb      	ldr	r3, [r7, #24]
90001faa:	681a      	ldr	r2, [r3, #0]
90001fac:	687b      	ldr	r3, [r7, #4]
90001fae:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
90001fb0:	2301      	movs	r3, #1
90001fb2:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
90001fb4:	69bb      	ldr	r3, [r7, #24]
90001fb6:	689a      	ldr	r2, [r3, #8]
90001fb8:	69bb      	ldr	r3, [r7, #24]
90001fba:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
90001fbc:	687b      	ldr	r3, [r7, #4]
90001fbe:	f103 007c 	add.w	r0, r3, #124	; 0x7c
90001fc2:	687b      	ldr	r3, [r7, #4]
90001fc4:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
90001fc8:	69bb      	ldr	r3, [r7, #24]
90001fca:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
90001fcc:	461a      	mov	r2, r3
90001fce:	693b      	ldr	r3, [r7, #16]
90001fd0:	b29b      	uxth	r3, r3
90001fd2:	f002 f9d9 	bl	90004388 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
90001fd6:	687b      	ldr	r3, [r7, #4]
90001fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
90001fda:	1c5a      	adds	r2, r3, #1
90001fdc:	687b      	ldr	r3, [r7, #4]
90001fde:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
90001fe0:	687b      	ldr	r3, [r7, #4]
90001fe2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
90001fe4:	693b      	ldr	r3, [r7, #16]
90001fe6:	441a      	add	r2, r3
90001fe8:	687b      	ldr	r3, [r7, #4]
90001fea:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
90001fec:	69bb      	ldr	r3, [r7, #24]
90001fee:	2200      	movs	r2, #0
90001ff0:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
90001ff2:	69fb      	ldr	r3, [r7, #28]
90001ff4:	3301      	adds	r3, #1
90001ff6:	61fb      	str	r3, [r7, #28]
90001ff8:	69fb      	ldr	r3, [r7, #28]
90001ffa:	2b03      	cmp	r3, #3
90001ffc:	d902      	bls.n	90002004 <HAL_ETH_ReadData+0x11c>
90001ffe:	69fb      	ldr	r3, [r7, #28]
90002000:	3b04      	subs	r3, #4
90002002:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
90002004:	687b      	ldr	r3, [r7, #4]
90002006:	69fa      	ldr	r2, [r7, #28]
90002008:	3212      	adds	r2, #18
9000200a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
9000200e:	61bb      	str	r3, [r7, #24]
    desccnt++;
90002010:	697b      	ldr	r3, [r7, #20]
90002012:	3301      	adds	r3, #1
90002014:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
90002016:	69bb      	ldr	r3, [r7, #24]
90002018:	681b      	ldr	r3, [r3, #0]
9000201a:	2b00      	cmp	r3, #0
9000201c:	db06      	blt.n	9000202c <HAL_ETH_ReadData+0x144>
9000201e:	697a      	ldr	r2, [r7, #20]
90002020:	68bb      	ldr	r3, [r7, #8]
90002022:	429a      	cmp	r2, r3
90002024:	d202      	bcs.n	9000202c <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
90002026:	7bfb      	ldrb	r3, [r7, #15]
90002028:	2b00      	cmp	r3, #0
9000202a:	d089      	beq.n	90001f40 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
9000202c:	687b      	ldr	r3, [r7, #4]
9000202e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
90002030:	697b      	ldr	r3, [r7, #20]
90002032:	441a      	add	r2, r3
90002034:	687b      	ldr	r3, [r7, #4]
90002036:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
90002038:	687b      	ldr	r3, [r7, #4]
9000203a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000203c:	2b00      	cmp	r3, #0
9000203e:	d002      	beq.n	90002046 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
90002040:	6878      	ldr	r0, [r7, #4]
90002042:	f000 f815 	bl	90002070 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
90002046:	687b      	ldr	r3, [r7, #4]
90002048:	69fa      	ldr	r2, [r7, #28]
9000204a:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
9000204c:	7bfb      	ldrb	r3, [r7, #15]
9000204e:	2b01      	cmp	r3, #1
90002050:	d108      	bne.n	90002064 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
90002052:	687b      	ldr	r3, [r7, #4]
90002054:	6fda      	ldr	r2, [r3, #124]	; 0x7c
90002056:	683b      	ldr	r3, [r7, #0]
90002058:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
9000205a:	687b      	ldr	r3, [r7, #4]
9000205c:	2200      	movs	r2, #0
9000205e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
90002060:	2300      	movs	r3, #0
90002062:	e000      	b.n	90002066 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
90002064:	2301      	movs	r3, #1
}
90002066:	4618      	mov	r0, r3
90002068:	3720      	adds	r7, #32
9000206a:	46bd      	mov	sp, r7
9000206c:	bd80      	pop	{r7, pc}
	...

90002070 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
90002070:	b580      	push	{r7, lr}
90002072:	b088      	sub	sp, #32
90002074:	af00      	add	r7, sp, #0
90002076:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
90002078:	2300      	movs	r3, #0
9000207a:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
9000207c:	2301      	movs	r3, #1
9000207e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
90002080:	687b      	ldr	r3, [r7, #4]
90002082:	6e9b      	ldr	r3, [r3, #104]	; 0x68
90002084:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
90002086:	687b      	ldr	r3, [r7, #4]
90002088:	69fa      	ldr	r2, [r7, #28]
9000208a:	3212      	adds	r2, #18
9000208c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
90002090:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
90002092:	687b      	ldr	r3, [r7, #4]
90002094:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90002096:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
90002098:	e040      	b.n	9000211c <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
9000209a:	697b      	ldr	r3, [r7, #20]
9000209c:	6a1b      	ldr	r3, [r3, #32]
9000209e:	2b00      	cmp	r3, #0
900020a0:	d112      	bne.n	900020c8 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
900020a2:	f107 030c 	add.w	r3, r7, #12
900020a6:	4618      	mov	r0, r3
900020a8:	f002 f93e 	bl	90004328 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
900020ac:	68fb      	ldr	r3, [r7, #12]
900020ae:	2b00      	cmp	r3, #0
900020b0:	d102      	bne.n	900020b8 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
900020b2:	2300      	movs	r3, #0
900020b4:	74fb      	strb	r3, [r7, #19]
900020b6:	e007      	b.n	900020c8 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
900020b8:	68fb      	ldr	r3, [r7, #12]
900020ba:	461a      	mov	r2, r3
900020bc:	697b      	ldr	r3, [r7, #20]
900020be:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
900020c0:	68fb      	ldr	r3, [r7, #12]
900020c2:	461a      	mov	r2, r3
900020c4:	697b      	ldr	r3, [r7, #20]
900020c6:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
900020c8:	7cfb      	ldrb	r3, [r7, #19]
900020ca:	2b00      	cmp	r3, #0
900020cc:	d026      	beq.n	9000211c <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
900020ce:	687b      	ldr	r3, [r7, #4]
900020d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
900020d2:	2b00      	cmp	r3, #0
900020d4:	d103      	bne.n	900020de <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
900020d6:	697b      	ldr	r3, [r7, #20]
900020d8:	4a1e      	ldr	r2, [pc, #120]	; (90002154 <ETH_UpdateDescriptor+0xe4>)
900020da:	605a      	str	r2, [r3, #4]
900020dc:	e003      	b.n	900020e6 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
900020de:	697b      	ldr	r3, [r7, #20]
900020e0:	f44f 428c 	mov.w	r2, #17920	; 0x4600
900020e4:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
900020e6:	f3bf 8f5f 	dmb	sy
}
900020ea:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
900020ec:	697b      	ldr	r3, [r7, #20]
900020ee:	681b      	ldr	r3, [r3, #0]
900020f0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
900020f4:	697b      	ldr	r3, [r7, #20]
900020f6:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
900020f8:	69fb      	ldr	r3, [r7, #28]
900020fa:	3301      	adds	r3, #1
900020fc:	61fb      	str	r3, [r7, #28]
900020fe:	69fb      	ldr	r3, [r7, #28]
90002100:	2b03      	cmp	r3, #3
90002102:	d902      	bls.n	9000210a <ETH_UpdateDescriptor+0x9a>
90002104:	69fb      	ldr	r3, [r7, #28]
90002106:	3b04      	subs	r3, #4
90002108:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
9000210a:	687b      	ldr	r3, [r7, #4]
9000210c:	69fa      	ldr	r2, [r7, #28]
9000210e:	3212      	adds	r2, #18
90002110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
90002114:	617b      	str	r3, [r7, #20]
      desccount--;
90002116:	69bb      	ldr	r3, [r7, #24]
90002118:	3b01      	subs	r3, #1
9000211a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
9000211c:	69bb      	ldr	r3, [r7, #24]
9000211e:	2b00      	cmp	r3, #0
90002120:	d002      	beq.n	90002128 <ETH_UpdateDescriptor+0xb8>
90002122:	7cfb      	ldrb	r3, [r7, #19]
90002124:	2b00      	cmp	r3, #0
90002126:	d1b8      	bne.n	9000209a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
90002128:	687b      	ldr	r3, [r7, #4]
9000212a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000212c:	69ba      	ldr	r2, [r7, #24]
9000212e:	429a      	cmp	r2, r3
90002130:	d00c      	beq.n	9000214c <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
90002132:	687b      	ldr	r3, [r7, #4]
90002134:	681b      	ldr	r3, [r3, #0]
90002136:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
9000213a:	461a      	mov	r2, r3
9000213c:	2300      	movs	r3, #0
9000213e:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
90002140:	687b      	ldr	r3, [r7, #4]
90002142:	69fa      	ldr	r2, [r7, #28]
90002144:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
90002146:	687b      	ldr	r3, [r7, #4]
90002148:	69ba      	ldr	r2, [r7, #24]
9000214a:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
9000214c:	bf00      	nop
9000214e:	3720      	adds	r7, #32
90002150:	46bd      	mov	sp, r7
90002152:	bd80      	pop	{r7, pc}
90002154:	80004600 	.word	0x80004600

90002158 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
90002158:	b580      	push	{r7, lr}
9000215a:	b086      	sub	sp, #24
9000215c:	af00      	add	r7, sp, #0
9000215e:	60f8      	str	r0, [r7, #12]
90002160:	60b9      	str	r1, [r7, #8]
90002162:	607a      	str	r2, [r7, #4]
90002164:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
90002166:	68fb      	ldr	r3, [r7, #12]
90002168:	681b      	ldr	r3, [r3, #0]
9000216a:	691b      	ldr	r3, [r3, #16]
9000216c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
9000216e:	697b      	ldr	r3, [r7, #20]
90002170:	f003 031c 	and.w	r3, r3, #28
90002174:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
90002176:	68bb      	ldr	r3, [r7, #8]
90002178:	02db      	lsls	r3, r3, #11
9000217a:	b29b      	uxth	r3, r3
9000217c:	697a      	ldr	r2, [r7, #20]
9000217e:	4313      	orrs	r3, r2
90002180:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
90002182:	687b      	ldr	r3, [r7, #4]
90002184:	019b      	lsls	r3, r3, #6
90002186:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
9000218a:	697a      	ldr	r2, [r7, #20]
9000218c:	4313      	orrs	r3, r2
9000218e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
90002190:	697b      	ldr	r3, [r7, #20]
90002192:	f023 0302 	bic.w	r3, r3, #2
90002196:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
90002198:	697b      	ldr	r3, [r7, #20]
9000219a:	f043 0301 	orr.w	r3, r3, #1
9000219e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
900021a0:	68fb      	ldr	r3, [r7, #12]
900021a2:	681b      	ldr	r3, [r3, #0]
900021a4:	697a      	ldr	r2, [r7, #20]
900021a6:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
900021a8:	f7ff fbc0 	bl	9000192c <HAL_GetTick>
900021ac:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
900021ae:	e00d      	b.n	900021cc <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
900021b0:	f7ff fbbc 	bl	9000192c <HAL_GetTick>
900021b4:	4602      	mov	r2, r0
900021b6:	693b      	ldr	r3, [r7, #16]
900021b8:	1ad3      	subs	r3, r2, r3
900021ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
900021be:	d301      	bcc.n	900021c4 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
900021c0:	2301      	movs	r3, #1
900021c2:	e010      	b.n	900021e6 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
900021c4:	68fb      	ldr	r3, [r7, #12]
900021c6:	681b      	ldr	r3, [r3, #0]
900021c8:	691b      	ldr	r3, [r3, #16]
900021ca:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
900021cc:	697b      	ldr	r3, [r7, #20]
900021ce:	f003 0301 	and.w	r3, r3, #1
900021d2:	2b00      	cmp	r3, #0
900021d4:	d1ec      	bne.n	900021b0 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
900021d6:	68fb      	ldr	r3, [r7, #12]
900021d8:	681b      	ldr	r3, [r3, #0]
900021da:	695b      	ldr	r3, [r3, #20]
900021dc:	b29b      	uxth	r3, r3
900021de:	461a      	mov	r2, r3
900021e0:	683b      	ldr	r3, [r7, #0]
900021e2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
900021e4:	2300      	movs	r3, #0
}
900021e6:	4618      	mov	r0, r3
900021e8:	3718      	adds	r7, #24
900021ea:	46bd      	mov	sp, r7
900021ec:	bd80      	pop	{r7, pc}

900021ee <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
900021ee:	b580      	push	{r7, lr}
900021f0:	b086      	sub	sp, #24
900021f2:	af00      	add	r7, sp, #0
900021f4:	60f8      	str	r0, [r7, #12]
900021f6:	60b9      	str	r1, [r7, #8]
900021f8:	607a      	str	r2, [r7, #4]
900021fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
900021fc:	68fb      	ldr	r3, [r7, #12]
900021fe:	681b      	ldr	r3, [r3, #0]
90002200:	691b      	ldr	r3, [r3, #16]
90002202:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
90002204:	697b      	ldr	r3, [r7, #20]
90002206:	f003 031c 	and.w	r3, r3, #28
9000220a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
9000220c:	68bb      	ldr	r3, [r7, #8]
9000220e:	02db      	lsls	r3, r3, #11
90002210:	b29b      	uxth	r3, r3
90002212:	697a      	ldr	r2, [r7, #20]
90002214:	4313      	orrs	r3, r2
90002216:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
90002218:	687b      	ldr	r3, [r7, #4]
9000221a:	019b      	lsls	r3, r3, #6
9000221c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
90002220:	697a      	ldr	r2, [r7, #20]
90002222:	4313      	orrs	r3, r2
90002224:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
90002226:	697b      	ldr	r3, [r7, #20]
90002228:	f043 0302 	orr.w	r3, r3, #2
9000222c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
9000222e:	697b      	ldr	r3, [r7, #20]
90002230:	f043 0301 	orr.w	r3, r3, #1
90002234:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
90002236:	683b      	ldr	r3, [r7, #0]
90002238:	b29a      	uxth	r2, r3
9000223a:	68fb      	ldr	r3, [r7, #12]
9000223c:	681b      	ldr	r3, [r3, #0]
9000223e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
90002240:	68fb      	ldr	r3, [r7, #12]
90002242:	681b      	ldr	r3, [r3, #0]
90002244:	697a      	ldr	r2, [r7, #20]
90002246:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
90002248:	f7ff fb70 	bl	9000192c <HAL_GetTick>
9000224c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
9000224e:	e00d      	b.n	9000226c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
90002250:	f7ff fb6c 	bl	9000192c <HAL_GetTick>
90002254:	4602      	mov	r2, r0
90002256:	693b      	ldr	r3, [r7, #16]
90002258:	1ad3      	subs	r3, r2, r3
9000225a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000225e:	d301      	bcc.n	90002264 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
90002260:	2301      	movs	r3, #1
90002262:	e009      	b.n	90002278 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
90002264:	68fb      	ldr	r3, [r7, #12]
90002266:	681b      	ldr	r3, [r3, #0]
90002268:	691b      	ldr	r3, [r3, #16]
9000226a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
9000226c:	697b      	ldr	r3, [r7, #20]
9000226e:	f003 0301 	and.w	r3, r3, #1
90002272:	2b00      	cmp	r3, #0
90002274:	d1ec      	bne.n	90002250 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
90002276:	2300      	movs	r3, #0
}
90002278:	4618      	mov	r0, r3
9000227a:	3718      	adds	r7, #24
9000227c:	46bd      	mov	sp, r7
9000227e:	bd80      	pop	{r7, pc}

90002280 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
90002280:	b480      	push	{r7}
90002282:	b083      	sub	sp, #12
90002284:	af00      	add	r7, sp, #0
90002286:	6078      	str	r0, [r7, #4]
90002288:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
9000228a:	683b      	ldr	r3, [r7, #0]
9000228c:	2b00      	cmp	r3, #0
9000228e:	d101      	bne.n	90002294 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
90002290:	2301      	movs	r3, #1
90002292:	e0d9      	b.n	90002448 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
90002294:	687b      	ldr	r3, [r7, #4]
90002296:	681b      	ldr	r3, [r3, #0]
90002298:	681b      	ldr	r3, [r3, #0]
9000229a:	f003 0310 	and.w	r3, r3, #16
9000229e:	2b00      	cmp	r3, #0
900022a0:	bf14      	ite	ne
900022a2:	2301      	movne	r3, #1
900022a4:	2300      	moveq	r3, #0
900022a6:	b2db      	uxtb	r3, r3
900022a8:	461a      	mov	r2, r3
900022aa:	683b      	ldr	r3, [r7, #0]
900022ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
900022b0:	687b      	ldr	r3, [r7, #4]
900022b2:	681b      	ldr	r3, [r3, #0]
900022b4:	681b      	ldr	r3, [r3, #0]
900022b6:	f003 0260 	and.w	r2, r3, #96	; 0x60
900022ba:	683b      	ldr	r3, [r7, #0]
900022bc:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
900022be:	687b      	ldr	r3, [r7, #4]
900022c0:	681b      	ldr	r3, [r3, #0]
900022c2:	681b      	ldr	r3, [r3, #0]
900022c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
900022c8:	2b00      	cmp	r3, #0
900022ca:	bf0c      	ite	eq
900022cc:	2301      	moveq	r3, #1
900022ce:	2300      	movne	r3, #0
900022d0:	b2db      	uxtb	r3, r3
900022d2:	461a      	mov	r2, r3
900022d4:	683b      	ldr	r3, [r7, #0]
900022d6:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
900022da:	687b      	ldr	r3, [r7, #4]
900022dc:	681b      	ldr	r3, [r3, #0]
900022de:	681b      	ldr	r3, [r3, #0]
900022e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
900022e4:	2b00      	cmp	r3, #0
900022e6:	bf14      	ite	ne
900022e8:	2301      	movne	r3, #1
900022ea:	2300      	moveq	r3, #0
900022ec:	b2db      	uxtb	r3, r3
900022ee:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
900022f0:	683b      	ldr	r3, [r7, #0]
900022f2:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
900022f4:	687b      	ldr	r3, [r7, #4]
900022f6:	681b      	ldr	r3, [r3, #0]
900022f8:	681b      	ldr	r3, [r3, #0]
900022fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
900022fe:	2b00      	cmp	r3, #0
90002300:	bf0c      	ite	eq
90002302:	2301      	moveq	r3, #1
90002304:	2300      	movne	r3, #0
90002306:	b2db      	uxtb	r3, r3
90002308:	461a      	mov	r2, r3
9000230a:	683b      	ldr	r3, [r7, #0]
9000230c:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
9000230e:	687b      	ldr	r3, [r7, #4]
90002310:	681b      	ldr	r3, [r3, #0]
90002312:	681b      	ldr	r3, [r3, #0]
90002314:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
90002318:	2b00      	cmp	r3, #0
9000231a:	bf14      	ite	ne
9000231c:	2301      	movne	r3, #1
9000231e:	2300      	moveq	r3, #0
90002320:	b2db      	uxtb	r3, r3
90002322:	461a      	mov	r2, r3
90002324:	683b      	ldr	r3, [r7, #0]
90002326:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
90002328:	687b      	ldr	r3, [r7, #4]
9000232a:	681b      	ldr	r3, [r3, #0]
9000232c:	681b      	ldr	r3, [r3, #0]
9000232e:	f403 6200 	and.w	r2, r3, #2048	; 0x800
90002332:	683b      	ldr	r3, [r7, #0]
90002334:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
90002336:	687b      	ldr	r3, [r7, #4]
90002338:	681b      	ldr	r3, [r3, #0]
9000233a:	681b      	ldr	r3, [r3, #0]
9000233c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
90002340:	683b      	ldr	r3, [r7, #0]
90002342:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
90002344:	687b      	ldr	r3, [r7, #4]
90002346:	681b      	ldr	r3, [r3, #0]
90002348:	681b      	ldr	r3, [r3, #0]
9000234a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
9000234e:	2b00      	cmp	r3, #0
90002350:	bf0c      	ite	eq
90002352:	2301      	moveq	r3, #1
90002354:	2300      	movne	r3, #0
90002356:	b2db      	uxtb	r3, r3
90002358:	461a      	mov	r2, r3
9000235a:	683b      	ldr	r3, [r7, #0]
9000235c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
9000235e:	687b      	ldr	r3, [r7, #4]
90002360:	681b      	ldr	r3, [r3, #0]
90002362:	681b      	ldr	r3, [r3, #0]
90002364:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
90002368:	2b00      	cmp	r3, #0
9000236a:	bf0c      	ite	eq
9000236c:	2301      	moveq	r3, #1
9000236e:	2300      	movne	r3, #0
90002370:	b2db      	uxtb	r3, r3
90002372:	461a      	mov	r2, r3
90002374:	683b      	ldr	r3, [r7, #0]
90002376:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
90002378:	687b      	ldr	r3, [r7, #4]
9000237a:	681b      	ldr	r3, [r3, #0]
9000237c:	681b      	ldr	r3, [r3, #0]
9000237e:	f003 0380 	and.w	r3, r3, #128	; 0x80
90002382:	2b00      	cmp	r3, #0
90002384:	bf14      	ite	ne
90002386:	2301      	movne	r3, #1
90002388:	2300      	moveq	r3, #0
9000238a:	b2db      	uxtb	r3, r3
9000238c:	461a      	mov	r2, r3
9000238e:	683b      	ldr	r3, [r7, #0]
90002390:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
90002392:	687b      	ldr	r3, [r7, #4]
90002394:	681b      	ldr	r3, [r3, #0]
90002396:	681b      	ldr	r3, [r3, #0]
90002398:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
9000239c:	683b      	ldr	r3, [r7, #0]
9000239e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
900023a0:	687b      	ldr	r3, [r7, #4]
900023a2:	681b      	ldr	r3, [r3, #0]
900023a4:	681b      	ldr	r3, [r3, #0]
900023a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
900023aa:	2b00      	cmp	r3, #0
900023ac:	bf14      	ite	ne
900023ae:	2301      	movne	r3, #1
900023b0:	2300      	moveq	r3, #0
900023b2:	b2db      	uxtb	r3, r3
900023b4:	461a      	mov	r2, r3
900023b6:	683b      	ldr	r3, [r7, #0]
900023b8:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
900023ba:	687b      	ldr	r3, [r7, #4]
900023bc:	681b      	ldr	r3, [r3, #0]
900023be:	699b      	ldr	r3, [r3, #24]
900023c0:	f003 0302 	and.w	r3, r3, #2
900023c4:	2b00      	cmp	r3, #0
900023c6:	bf14      	ite	ne
900023c8:	2301      	movne	r3, #1
900023ca:	2300      	moveq	r3, #0
900023cc:	b2db      	uxtb	r3, r3
900023ce:	461a      	mov	r2, r3
900023d0:	683b      	ldr	r3, [r7, #0]
900023d2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
900023d6:	687b      	ldr	r3, [r7, #4]
900023d8:	681b      	ldr	r3, [r3, #0]
900023da:	699b      	ldr	r3, [r3, #24]
900023dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
900023e0:	2b00      	cmp	r3, #0
900023e2:	bf0c      	ite	eq
900023e4:	2301      	moveq	r3, #1
900023e6:	2300      	movne	r3, #0
900023e8:	b2db      	uxtb	r3, r3
900023ea:	461a      	mov	r2, r3
900023ec:	683b      	ldr	r3, [r7, #0]
900023ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
900023f2:	687b      	ldr	r3, [r7, #4]
900023f4:	681b      	ldr	r3, [r3, #0]
900023f6:	699b      	ldr	r3, [r3, #24]
900023f8:	f003 0230 	and.w	r2, r3, #48	; 0x30
900023fc:	683b      	ldr	r3, [r7, #0]
900023fe:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
90002400:	687b      	ldr	r3, [r7, #4]
90002402:	681b      	ldr	r3, [r3, #0]
90002404:	699b      	ldr	r3, [r3, #24]
90002406:	0c1b      	lsrs	r3, r3, #16
90002408:	b29a      	uxth	r2, r3
9000240a:	683b      	ldr	r3, [r7, #0]
9000240c:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
9000240e:	687b      	ldr	r3, [r7, #4]
90002410:	681b      	ldr	r3, [r3, #0]
90002412:	699b      	ldr	r3, [r3, #24]
90002414:	f003 0304 	and.w	r3, r3, #4
90002418:	2b00      	cmp	r3, #0
9000241a:	bf14      	ite	ne
9000241c:	2301      	movne	r3, #1
9000241e:	2300      	moveq	r3, #0
90002420:	b2db      	uxtb	r3, r3
90002422:	461a      	mov	r2, r3
90002424:	683b      	ldr	r3, [r7, #0]
90002426:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
9000242a:	687b      	ldr	r3, [r7, #4]
9000242c:	681b      	ldr	r3, [r3, #0]
9000242e:	699b      	ldr	r3, [r3, #24]
90002430:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
90002434:	2b00      	cmp	r3, #0
90002436:	bf14      	ite	ne
90002438:	2301      	movne	r3, #1
9000243a:	2300      	moveq	r3, #0
9000243c:	b2db      	uxtb	r3, r3
9000243e:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
90002440:	683b      	ldr	r3, [r7, #0]
90002442:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
90002446:	2300      	movs	r3, #0
}
90002448:	4618      	mov	r0, r3
9000244a:	370c      	adds	r7, #12
9000244c:	46bd      	mov	sp, r7
9000244e:	f85d 7b04 	ldr.w	r7, [sp], #4
90002452:	4770      	bx	lr

90002454 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
90002454:	b580      	push	{r7, lr}
90002456:	b082      	sub	sp, #8
90002458:	af00      	add	r7, sp, #0
9000245a:	6078      	str	r0, [r7, #4]
9000245c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
9000245e:	683b      	ldr	r3, [r7, #0]
90002460:	2b00      	cmp	r3, #0
90002462:	d101      	bne.n	90002468 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
90002464:	2301      	movs	r3, #1
90002466:	e00b      	b.n	90002480 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
90002468:	687b      	ldr	r3, [r7, #4]
9000246a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
9000246e:	2b10      	cmp	r3, #16
90002470:	d105      	bne.n	9000247e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
90002472:	6839      	ldr	r1, [r7, #0]
90002474:	6878      	ldr	r0, [r7, #4]
90002476:	f000 f883 	bl	90002580 <ETH_SetMACConfig>

    return HAL_OK;
9000247a:	2300      	movs	r3, #0
9000247c:	e000      	b.n	90002480 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
9000247e:	2301      	movs	r3, #1
  }
}
90002480:	4618      	mov	r0, r3
90002482:	3708      	adds	r7, #8
90002484:	46bd      	mov	sp, r7
90002486:	bd80      	pop	{r7, pc}

90002488 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
90002488:	b580      	push	{r7, lr}
9000248a:	b084      	sub	sp, #16
9000248c:	af00      	add	r7, sp, #0
9000248e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
90002490:	687b      	ldr	r3, [r7, #4]
90002492:	681b      	ldr	r3, [r3, #0]
90002494:	691b      	ldr	r3, [r3, #16]
90002496:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
90002498:	68fb      	ldr	r3, [r7, #12]
9000249a:	f023 031c 	bic.w	r3, r3, #28
9000249e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
900024a0:	f001 fab8 	bl	90003a14 <HAL_RCC_GetHCLKFreq>
900024a4:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
900024a6:	68bb      	ldr	r3, [r7, #8]
900024a8:	4a1d      	ldr	r2, [pc, #116]	; (90002520 <HAL_ETH_SetMDIOClockRange+0x98>)
900024aa:	4293      	cmp	r3, r2
900024ac:	d908      	bls.n	900024c0 <HAL_ETH_SetMDIOClockRange+0x38>
900024ae:	68bb      	ldr	r3, [r7, #8]
900024b0:	4a1c      	ldr	r2, [pc, #112]	; (90002524 <HAL_ETH_SetMDIOClockRange+0x9c>)
900024b2:	4293      	cmp	r3, r2
900024b4:	d804      	bhi.n	900024c0 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
900024b6:	68fb      	ldr	r3, [r7, #12]
900024b8:	f043 0308 	orr.w	r3, r3, #8
900024bc:	60fb      	str	r3, [r7, #12]
900024be:	e027      	b.n	90002510 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
900024c0:	68bb      	ldr	r3, [r7, #8]
900024c2:	4a18      	ldr	r2, [pc, #96]	; (90002524 <HAL_ETH_SetMDIOClockRange+0x9c>)
900024c4:	4293      	cmp	r3, r2
900024c6:	d908      	bls.n	900024da <HAL_ETH_SetMDIOClockRange+0x52>
900024c8:	68bb      	ldr	r3, [r7, #8]
900024ca:	4a17      	ldr	r2, [pc, #92]	; (90002528 <HAL_ETH_SetMDIOClockRange+0xa0>)
900024cc:	4293      	cmp	r3, r2
900024ce:	d204      	bcs.n	900024da <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
900024d0:	68fb      	ldr	r3, [r7, #12]
900024d2:	f043 030c 	orr.w	r3, r3, #12
900024d6:	60fb      	str	r3, [r7, #12]
900024d8:	e01a      	b.n	90002510 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
900024da:	68bb      	ldr	r3, [r7, #8]
900024dc:	4a12      	ldr	r2, [pc, #72]	; (90002528 <HAL_ETH_SetMDIOClockRange+0xa0>)
900024de:	4293      	cmp	r3, r2
900024e0:	d303      	bcc.n	900024ea <HAL_ETH_SetMDIOClockRange+0x62>
900024e2:	68bb      	ldr	r3, [r7, #8]
900024e4:	4a11      	ldr	r2, [pc, #68]	; (9000252c <HAL_ETH_SetMDIOClockRange+0xa4>)
900024e6:	4293      	cmp	r3, r2
900024e8:	d911      	bls.n	9000250e <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
900024ea:	68bb      	ldr	r3, [r7, #8]
900024ec:	4a0f      	ldr	r2, [pc, #60]	; (9000252c <HAL_ETH_SetMDIOClockRange+0xa4>)
900024ee:	4293      	cmp	r3, r2
900024f0:	d908      	bls.n	90002504 <HAL_ETH_SetMDIOClockRange+0x7c>
900024f2:	68bb      	ldr	r3, [r7, #8]
900024f4:	4a0e      	ldr	r2, [pc, #56]	; (90002530 <HAL_ETH_SetMDIOClockRange+0xa8>)
900024f6:	4293      	cmp	r3, r2
900024f8:	d804      	bhi.n	90002504 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
900024fa:	68fb      	ldr	r3, [r7, #12]
900024fc:	f043 0304 	orr.w	r3, r3, #4
90002500:	60fb      	str	r3, [r7, #12]
90002502:	e005      	b.n	90002510 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
90002504:	68fb      	ldr	r3, [r7, #12]
90002506:	f043 0310 	orr.w	r3, r3, #16
9000250a:	60fb      	str	r3, [r7, #12]
9000250c:	e000      	b.n	90002510 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
9000250e:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
90002510:	687b      	ldr	r3, [r7, #4]
90002512:	681b      	ldr	r3, [r3, #0]
90002514:	68fa      	ldr	r2, [r7, #12]
90002516:	611a      	str	r2, [r3, #16]
}
90002518:	bf00      	nop
9000251a:	3710      	adds	r7, #16
9000251c:	46bd      	mov	sp, r7
9000251e:	bd80      	pop	{r7, pc}
90002520:	01312cff 	.word	0x01312cff
90002524:	02160ebf 	.word	0x02160ebf
90002528:	03938700 	.word	0x03938700
9000252c:	05f5e0ff 	.word	0x05f5e0ff
90002530:	08f0d17f 	.word	0x08f0d17f

90002534 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
90002534:	b580      	push	{r7, lr}
90002536:	b084      	sub	sp, #16
90002538:	af00      	add	r7, sp, #0
9000253a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
9000253c:	2300      	movs	r3, #0
9000253e:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
90002540:	687b      	ldr	r3, [r7, #4]
90002542:	681b      	ldr	r3, [r3, #0]
90002544:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90002548:	699b      	ldr	r3, [r3, #24]
9000254a:	687a      	ldr	r2, [r7, #4]
9000254c:	6812      	ldr	r2, [r2, #0]
9000254e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
90002552:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
90002556:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
90002558:	687b      	ldr	r3, [r7, #4]
9000255a:	681b      	ldr	r3, [r3, #0]
9000255c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90002560:	699b      	ldr	r3, [r3, #24]
90002562:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
90002564:	2001      	movs	r0, #1
90002566:	f7ff f9ed 	bl	90001944 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
9000256a:	687b      	ldr	r3, [r7, #4]
9000256c:	681a      	ldr	r2, [r3, #0]
9000256e:	68fb      	ldr	r3, [r7, #12]
90002570:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
90002574:	6193      	str	r3, [r2, #24]
}
90002576:	bf00      	nop
90002578:	3710      	adds	r7, #16
9000257a:	46bd      	mov	sp, r7
9000257c:	bd80      	pop	{r7, pc}
	...

90002580 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
90002580:	b580      	push	{r7, lr}
90002582:	b084      	sub	sp, #16
90002584:	af00      	add	r7, sp, #0
90002586:	6078      	str	r0, [r7, #4]
90002588:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
9000258a:	687b      	ldr	r3, [r7, #4]
9000258c:	681b      	ldr	r3, [r3, #0]
9000258e:	681b      	ldr	r3, [r3, #0]
90002590:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
90002592:	68fa      	ldr	r2, [r7, #12]
90002594:	4b51      	ldr	r3, [pc, #324]	; (900026dc <ETH_SetMACConfig+0x15c>)
90002596:	4013      	ands	r3, r2
90002598:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
9000259a:	683b      	ldr	r3, [r7, #0]
9000259c:	7c1b      	ldrb	r3, [r3, #16]
9000259e:	2b00      	cmp	r3, #0
900025a0:	d102      	bne.n	900025a8 <ETH_SetMACConfig+0x28>
900025a2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
900025a6:	e000      	b.n	900025aa <ETH_SetMACConfig+0x2a>
900025a8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
900025aa:	683b      	ldr	r3, [r7, #0]
900025ac:	7c5b      	ldrb	r3, [r3, #17]
900025ae:	2b00      	cmp	r3, #0
900025b0:	d102      	bne.n	900025b8 <ETH_SetMACConfig+0x38>
900025b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
900025b6:	e000      	b.n	900025ba <ETH_SetMACConfig+0x3a>
900025b8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
900025ba:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
900025bc:	683b      	ldr	r3, [r7, #0]
900025be:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
900025c0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
900025c2:	683b      	ldr	r3, [r7, #0]
900025c4:	7fdb      	ldrb	r3, [r3, #31]
900025c6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
900025c8:	431a      	orrs	r2, r3
                        macconf->Speed |
900025ca:	683b      	ldr	r3, [r7, #0]
900025cc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
900025ce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
900025d0:	683a      	ldr	r2, [r7, #0]
900025d2:	7f92      	ldrb	r2, [r2, #30]
900025d4:	2a00      	cmp	r2, #0
900025d6:	d102      	bne.n	900025de <ETH_SetMACConfig+0x5e>
900025d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
900025dc:	e000      	b.n	900025e0 <ETH_SetMACConfig+0x60>
900025de:	2200      	movs	r2, #0
                        macconf->Speed |
900025e0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
900025e2:	683b      	ldr	r3, [r7, #0]
900025e4:	7f1b      	ldrb	r3, [r3, #28]
900025e6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
900025e8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
900025ea:	683b      	ldr	r3, [r7, #0]
900025ec:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
900025ee:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
900025f0:	683b      	ldr	r3, [r7, #0]
900025f2:	791b      	ldrb	r3, [r3, #4]
900025f4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
900025f6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
900025f8:	683a      	ldr	r2, [r7, #0]
900025fa:	f892 2020 	ldrb.w	r2, [r2, #32]
900025fe:	2a00      	cmp	r2, #0
90002600:	d102      	bne.n	90002608 <ETH_SetMACConfig+0x88>
90002602:	f44f 7200 	mov.w	r2, #512	; 0x200
90002606:	e000      	b.n	9000260a <ETH_SetMACConfig+0x8a>
90002608:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
9000260a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
9000260c:	683b      	ldr	r3, [r7, #0]
9000260e:	7bdb      	ldrb	r3, [r3, #15]
90002610:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
90002612:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
90002614:	683b      	ldr	r3, [r7, #0]
90002616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
90002618:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
9000261a:	683b      	ldr	r3, [r7, #0]
9000261c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
90002620:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
90002622:	4313      	orrs	r3, r2
90002624:	68fa      	ldr	r2, [r7, #12]
90002626:	4313      	orrs	r3, r2
90002628:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
9000262a:	687b      	ldr	r3, [r7, #4]
9000262c:	681b      	ldr	r3, [r3, #0]
9000262e:	68fa      	ldr	r2, [r7, #12]
90002630:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
90002632:	687b      	ldr	r3, [r7, #4]
90002634:	681b      	ldr	r3, [r3, #0]
90002636:	681b      	ldr	r3, [r3, #0]
90002638:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
9000263a:	2001      	movs	r0, #1
9000263c:	f7ff f982 	bl	90001944 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
90002640:	687b      	ldr	r3, [r7, #4]
90002642:	681b      	ldr	r3, [r3, #0]
90002644:	68fa      	ldr	r2, [r7, #12]
90002646:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
90002648:	687b      	ldr	r3, [r7, #4]
9000264a:	681b      	ldr	r3, [r3, #0]
9000264c:	699b      	ldr	r3, [r3, #24]
9000264e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
90002650:	68fa      	ldr	r2, [r7, #12]
90002652:	f64f 7341 	movw	r3, #65345	; 0xff41
90002656:	4013      	ands	r3, r2
90002658:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
9000265a:	683b      	ldr	r3, [r7, #0]
9000265c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
9000265e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
90002660:	683a      	ldr	r2, [r7, #0]
90002662:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
90002666:	2a00      	cmp	r2, #0
90002668:	d101      	bne.n	9000266e <ETH_SetMACConfig+0xee>
9000266a:	2280      	movs	r2, #128	; 0x80
9000266c:	e000      	b.n	90002670 <ETH_SetMACConfig+0xf0>
9000266e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
90002670:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
90002672:	683b      	ldr	r3, [r7, #0]
90002674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
90002676:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
90002678:	683a      	ldr	r2, [r7, #0]
9000267a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
9000267e:	2a01      	cmp	r2, #1
90002680:	d101      	bne.n	90002686 <ETH_SetMACConfig+0x106>
90002682:	2208      	movs	r2, #8
90002684:	e000      	b.n	90002688 <ETH_SetMACConfig+0x108>
90002686:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
90002688:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
9000268a:	683a      	ldr	r2, [r7, #0]
9000268c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
90002690:	2a01      	cmp	r2, #1
90002692:	d101      	bne.n	90002698 <ETH_SetMACConfig+0x118>
90002694:	2204      	movs	r2, #4
90002696:	e000      	b.n	9000269a <ETH_SetMACConfig+0x11a>
90002698:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
9000269a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
9000269c:	683a      	ldr	r2, [r7, #0]
9000269e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
900026a2:	2a01      	cmp	r2, #1
900026a4:	d101      	bne.n	900026aa <ETH_SetMACConfig+0x12a>
900026a6:	2202      	movs	r2, #2
900026a8:	e000      	b.n	900026ac <ETH_SetMACConfig+0x12c>
900026aa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
900026ac:	4313      	orrs	r3, r2
900026ae:	68fa      	ldr	r2, [r7, #12]
900026b0:	4313      	orrs	r3, r2
900026b2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
900026b4:	687b      	ldr	r3, [r7, #4]
900026b6:	681b      	ldr	r3, [r3, #0]
900026b8:	68fa      	ldr	r2, [r7, #12]
900026ba:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
900026bc:	687b      	ldr	r3, [r7, #4]
900026be:	681b      	ldr	r3, [r3, #0]
900026c0:	699b      	ldr	r3, [r3, #24]
900026c2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
900026c4:	2001      	movs	r0, #1
900026c6:	f7ff f93d 	bl	90001944 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
900026ca:	687b      	ldr	r3, [r7, #4]
900026cc:	681b      	ldr	r3, [r3, #0]
900026ce:	68fa      	ldr	r2, [r7, #12]
900026d0:	619a      	str	r2, [r3, #24]
}
900026d2:	bf00      	nop
900026d4:	3710      	adds	r7, #16
900026d6:	46bd      	mov	sp, r7
900026d8:	bd80      	pop	{r7, pc}
900026da:	bf00      	nop
900026dc:	ff20810f 	.word	0xff20810f

900026e0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
900026e0:	b580      	push	{r7, lr}
900026e2:	b084      	sub	sp, #16
900026e4:	af00      	add	r7, sp, #0
900026e6:	6078      	str	r0, [r7, #4]
900026e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
900026ea:	687b      	ldr	r3, [r7, #4]
900026ec:	681b      	ldr	r3, [r3, #0]
900026ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
900026f2:	699b      	ldr	r3, [r3, #24]
900026f4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
900026f6:	68fa      	ldr	r2, [r7, #12]
900026f8:	4b3d      	ldr	r3, [pc, #244]	; (900027f0 <ETH_SetDMAConfig+0x110>)
900026fa:	4013      	ands	r3, r2
900026fc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
900026fe:	683b      	ldr	r3, [r7, #0]
90002700:	7b1b      	ldrb	r3, [r3, #12]
90002702:	2b00      	cmp	r3, #0
90002704:	d102      	bne.n	9000270c <ETH_SetDMAConfig+0x2c>
90002706:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
9000270a:	e000      	b.n	9000270e <ETH_SetDMAConfig+0x2e>
9000270c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
9000270e:	683b      	ldr	r3, [r7, #0]
90002710:	7b5b      	ldrb	r3, [r3, #13]
90002712:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
90002714:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
90002716:	683a      	ldr	r2, [r7, #0]
90002718:	7f52      	ldrb	r2, [r2, #29]
9000271a:	2a00      	cmp	r2, #0
9000271c:	d102      	bne.n	90002724 <ETH_SetDMAConfig+0x44>
9000271e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
90002722:	e000      	b.n	90002726 <ETH_SetDMAConfig+0x46>
90002724:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
90002726:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
90002728:	683b      	ldr	r3, [r7, #0]
9000272a:	7b9b      	ldrb	r3, [r3, #14]
9000272c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
9000272e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
90002730:	683b      	ldr	r3, [r7, #0]
90002732:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
90002734:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
90002736:	683b      	ldr	r3, [r7, #0]
90002738:	7f1b      	ldrb	r3, [r3, #28]
9000273a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
9000273c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
9000273e:	683b      	ldr	r3, [r7, #0]
90002740:	7f9b      	ldrb	r3, [r3, #30]
90002742:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
90002744:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
90002746:	683b      	ldr	r3, [r7, #0]
90002748:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
9000274a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
9000274c:	683b      	ldr	r3, [r7, #0]
9000274e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
90002752:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
90002754:	4313      	orrs	r3, r2
90002756:	68fa      	ldr	r2, [r7, #12]
90002758:	4313      	orrs	r3, r2
9000275a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
9000275c:	687b      	ldr	r3, [r7, #4]
9000275e:	681b      	ldr	r3, [r3, #0]
90002760:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90002764:	461a      	mov	r2, r3
90002766:	68fb      	ldr	r3, [r7, #12]
90002768:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
9000276a:	687b      	ldr	r3, [r7, #4]
9000276c:	681b      	ldr	r3, [r3, #0]
9000276e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90002772:	699b      	ldr	r3, [r3, #24]
90002774:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
90002776:	2001      	movs	r0, #1
90002778:	f7ff f8e4 	bl	90001944 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
9000277c:	687b      	ldr	r3, [r7, #4]
9000277e:	681b      	ldr	r3, [r3, #0]
90002780:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90002784:	461a      	mov	r2, r3
90002786:	68fb      	ldr	r3, [r7, #12]
90002788:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
9000278a:	683b      	ldr	r3, [r7, #0]
9000278c:	791b      	ldrb	r3, [r3, #4]
9000278e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
90002790:	683b      	ldr	r3, [r7, #0]
90002792:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
90002794:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
90002796:	683b      	ldr	r3, [r7, #0]
90002798:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
9000279a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
9000279c:	683b      	ldr	r3, [r7, #0]
9000279e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
900027a0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
900027a2:	683b      	ldr	r3, [r7, #0]
900027a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
900027a8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
900027aa:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
900027ac:	683b      	ldr	r3, [r7, #0]
900027ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900027b0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
900027b2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
900027b4:	683b      	ldr	r3, [r7, #0]
900027b6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
900027b8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
900027ba:	687a      	ldr	r2, [r7, #4]
900027bc:	6812      	ldr	r2, [r2, #0]
900027be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
900027c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
900027c6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
900027c8:	687b      	ldr	r3, [r7, #4]
900027ca:	681b      	ldr	r3, [r3, #0]
900027cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
900027d0:	681b      	ldr	r3, [r3, #0]
900027d2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
900027d4:	2001      	movs	r0, #1
900027d6:	f7ff f8b5 	bl	90001944 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
900027da:	687b      	ldr	r3, [r7, #4]
900027dc:	681b      	ldr	r3, [r3, #0]
900027de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
900027e2:	461a      	mov	r2, r3
900027e4:	68fb      	ldr	r3, [r7, #12]
900027e6:	6013      	str	r3, [r2, #0]
}
900027e8:	bf00      	nop
900027ea:	3710      	adds	r7, #16
900027ec:	46bd      	mov	sp, r7
900027ee:	bd80      	pop	{r7, pc}
900027f0:	f8de3f23 	.word	0xf8de3f23

900027f4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
900027f4:	b580      	push	{r7, lr}
900027f6:	b0a6      	sub	sp, #152	; 0x98
900027f8:	af00      	add	r7, sp, #0
900027fa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
900027fc:	2301      	movs	r3, #1
900027fe:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
90002802:	2301      	movs	r3, #1
90002804:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
90002808:	2300      	movs	r3, #0
9000280a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
9000280c:	2300      	movs	r3, #0
9000280e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
90002812:	2301      	movs	r3, #1
90002814:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
90002818:	2300      	movs	r3, #0
9000281a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
9000281e:	2301      	movs	r3, #1
90002820:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
90002824:	2300      	movs	r3, #0
90002826:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
9000282a:	2300      	movs	r3, #0
9000282c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
90002830:	2300      	movs	r3, #0
90002832:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
90002834:	2300      	movs	r3, #0
90002836:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
9000283a:	2300      	movs	r3, #0
9000283c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
9000283e:	2300      	movs	r3, #0
90002840:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
90002844:	2300      	movs	r3, #0
90002846:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
9000284a:	2300      	movs	r3, #0
9000284c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
90002850:	2300      	movs	r3, #0
90002852:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
90002856:	f44f 4380 	mov.w	r3, #16384	; 0x4000
9000285a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
9000285c:	f44f 6300 	mov.w	r3, #2048	; 0x800
90002860:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
90002862:	2300      	movs	r3, #0
90002864:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
90002868:	f107 0334 	add.w	r3, r7, #52	; 0x34
9000286c:	4619      	mov	r1, r3
9000286e:	6878      	ldr	r0, [r7, #4]
90002870:	f7ff fe86 	bl	90002580 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
90002874:	2301      	movs	r3, #1
90002876:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
90002878:	2301      	movs	r3, #1
9000287a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
9000287c:	2301      	movs	r3, #1
9000287e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
90002882:	2301      	movs	r3, #1
90002884:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
90002886:	2300      	movs	r3, #0
90002888:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
9000288a:	2300      	movs	r3, #0
9000288c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
90002890:	2300      	movs	r3, #0
90002892:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
90002896:	2300      	movs	r3, #0
90002898:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
9000289a:	2301      	movs	r3, #1
9000289c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
900028a0:	2301      	movs	r3, #1
900028a2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
900028a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
900028a8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
900028aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
900028ae:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
900028b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
900028b4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
900028b6:	2301      	movs	r3, #1
900028b8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
900028bc:	2300      	movs	r3, #0
900028be:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
900028c0:	2300      	movs	r3, #0
900028c2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
900028c4:	f107 0308 	add.w	r3, r7, #8
900028c8:	4619      	mov	r1, r3
900028ca:	6878      	ldr	r0, [r7, #4]
900028cc:	f7ff ff08 	bl	900026e0 <ETH_SetDMAConfig>
}
900028d0:	bf00      	nop
900028d2:	3798      	adds	r7, #152	; 0x98
900028d4:	46bd      	mov	sp, r7
900028d6:	bd80      	pop	{r7, pc}

900028d8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
900028d8:	b480      	push	{r7}
900028da:	b087      	sub	sp, #28
900028dc:	af00      	add	r7, sp, #0
900028de:	60f8      	str	r0, [r7, #12]
900028e0:	60b9      	str	r1, [r7, #8]
900028e2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
900028e4:	687b      	ldr	r3, [r7, #4]
900028e6:	3305      	adds	r3, #5
900028e8:	781b      	ldrb	r3, [r3, #0]
900028ea:	021b      	lsls	r3, r3, #8
900028ec:	687a      	ldr	r2, [r7, #4]
900028ee:	3204      	adds	r2, #4
900028f0:	7812      	ldrb	r2, [r2, #0]
900028f2:	4313      	orrs	r3, r2
900028f4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
900028f6:	68ba      	ldr	r2, [r7, #8]
900028f8:	4b11      	ldr	r3, [pc, #68]	; (90002940 <ETH_MACAddressConfig+0x68>)
900028fa:	4413      	add	r3, r2
900028fc:	461a      	mov	r2, r3
900028fe:	697b      	ldr	r3, [r7, #20]
90002900:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
90002902:	687b      	ldr	r3, [r7, #4]
90002904:	3303      	adds	r3, #3
90002906:	781b      	ldrb	r3, [r3, #0]
90002908:	061a      	lsls	r2, r3, #24
9000290a:	687b      	ldr	r3, [r7, #4]
9000290c:	3302      	adds	r3, #2
9000290e:	781b      	ldrb	r3, [r3, #0]
90002910:	041b      	lsls	r3, r3, #16
90002912:	431a      	orrs	r2, r3
90002914:	687b      	ldr	r3, [r7, #4]
90002916:	3301      	adds	r3, #1
90002918:	781b      	ldrb	r3, [r3, #0]
9000291a:	021b      	lsls	r3, r3, #8
9000291c:	4313      	orrs	r3, r2
9000291e:	687a      	ldr	r2, [r7, #4]
90002920:	7812      	ldrb	r2, [r2, #0]
90002922:	4313      	orrs	r3, r2
90002924:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
90002926:	68ba      	ldr	r2, [r7, #8]
90002928:	4b06      	ldr	r3, [pc, #24]	; (90002944 <ETH_MACAddressConfig+0x6c>)
9000292a:	4413      	add	r3, r2
9000292c:	461a      	mov	r2, r3
9000292e:	697b      	ldr	r3, [r7, #20]
90002930:	6013      	str	r3, [r2, #0]
}
90002932:	bf00      	nop
90002934:	371c      	adds	r7, #28
90002936:	46bd      	mov	sp, r7
90002938:	f85d 7b04 	ldr.w	r7, [sp], #4
9000293c:	4770      	bx	lr
9000293e:	bf00      	nop
90002940:	40028040 	.word	0x40028040
90002944:	40028044 	.word	0x40028044

90002948 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
90002948:	b480      	push	{r7}
9000294a:	b085      	sub	sp, #20
9000294c:	af00      	add	r7, sp, #0
9000294e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
90002950:	2300      	movs	r3, #0
90002952:	60fb      	str	r3, [r7, #12]
90002954:	e03e      	b.n	900029d4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
90002956:	687b      	ldr	r3, [r7, #4]
90002958:	68d9      	ldr	r1, [r3, #12]
9000295a:	68fa      	ldr	r2, [r7, #12]
9000295c:	4613      	mov	r3, r2
9000295e:	009b      	lsls	r3, r3, #2
90002960:	4413      	add	r3, r2
90002962:	00db      	lsls	r3, r3, #3
90002964:	440b      	add	r3, r1
90002966:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
90002968:	68bb      	ldr	r3, [r7, #8]
9000296a:	2200      	movs	r2, #0
9000296c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
9000296e:	68bb      	ldr	r3, [r7, #8]
90002970:	2200      	movs	r2, #0
90002972:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
90002974:	68bb      	ldr	r3, [r7, #8]
90002976:	2200      	movs	r2, #0
90002978:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
9000297a:	68bb      	ldr	r3, [r7, #8]
9000297c:	2200      	movs	r2, #0
9000297e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
90002980:	68b9      	ldr	r1, [r7, #8]
90002982:	687b      	ldr	r3, [r7, #4]
90002984:	68fa      	ldr	r2, [r7, #12]
90002986:	3206      	adds	r2, #6
90002988:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
9000298c:	68bb      	ldr	r3, [r7, #8]
9000298e:	681b      	ldr	r3, [r3, #0]
90002990:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
90002994:	68bb      	ldr	r3, [r7, #8]
90002996:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
90002998:	68fb      	ldr	r3, [r7, #12]
9000299a:	2b02      	cmp	r3, #2
9000299c:	d80c      	bhi.n	900029b8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
9000299e:	687b      	ldr	r3, [r7, #4]
900029a0:	68d9      	ldr	r1, [r3, #12]
900029a2:	68fb      	ldr	r3, [r7, #12]
900029a4:	1c5a      	adds	r2, r3, #1
900029a6:	4613      	mov	r3, r2
900029a8:	009b      	lsls	r3, r3, #2
900029aa:	4413      	add	r3, r2
900029ac:	00db      	lsls	r3, r3, #3
900029ae:	440b      	add	r3, r1
900029b0:	461a      	mov	r2, r3
900029b2:	68bb      	ldr	r3, [r7, #8]
900029b4:	60da      	str	r2, [r3, #12]
900029b6:	e004      	b.n	900029c2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
900029b8:	687b      	ldr	r3, [r7, #4]
900029ba:	68db      	ldr	r3, [r3, #12]
900029bc:	461a      	mov	r2, r3
900029be:	68bb      	ldr	r3, [r7, #8]
900029c0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
900029c2:	68bb      	ldr	r3, [r7, #8]
900029c4:	681b      	ldr	r3, [r3, #0]
900029c6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
900029ca:	68bb      	ldr	r3, [r7, #8]
900029cc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
900029ce:	68fb      	ldr	r3, [r7, #12]
900029d0:	3301      	adds	r3, #1
900029d2:	60fb      	str	r3, [r7, #12]
900029d4:	68fb      	ldr	r3, [r7, #12]
900029d6:	2b03      	cmp	r3, #3
900029d8:	d9bd      	bls.n	90002956 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
900029da:	687b      	ldr	r3, [r7, #4]
900029dc:	2200      	movs	r2, #0
900029de:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
900029e0:	687b      	ldr	r3, [r7, #4]
900029e2:	68da      	ldr	r2, [r3, #12]
900029e4:	687b      	ldr	r3, [r7, #4]
900029e6:	681b      	ldr	r3, [r3, #0]
900029e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
900029ec:	611a      	str	r2, [r3, #16]
}
900029ee:	bf00      	nop
900029f0:	3714      	adds	r7, #20
900029f2:	46bd      	mov	sp, r7
900029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
900029f8:	4770      	bx	lr

900029fa <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
900029fa:	b480      	push	{r7}
900029fc:	b085      	sub	sp, #20
900029fe:	af00      	add	r7, sp, #0
90002a00:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
90002a02:	2300      	movs	r3, #0
90002a04:	60fb      	str	r3, [r7, #12]
90002a06:	e046      	b.n	90002a96 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
90002a08:	687b      	ldr	r3, [r7, #4]
90002a0a:	6919      	ldr	r1, [r3, #16]
90002a0c:	68fa      	ldr	r2, [r7, #12]
90002a0e:	4613      	mov	r3, r2
90002a10:	009b      	lsls	r3, r3, #2
90002a12:	4413      	add	r3, r2
90002a14:	00db      	lsls	r3, r3, #3
90002a16:	440b      	add	r3, r1
90002a18:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
90002a1a:	68bb      	ldr	r3, [r7, #8]
90002a1c:	2200      	movs	r2, #0
90002a1e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
90002a20:	68bb      	ldr	r3, [r7, #8]
90002a22:	2200      	movs	r2, #0
90002a24:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
90002a26:	68bb      	ldr	r3, [r7, #8]
90002a28:	2200      	movs	r2, #0
90002a2a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
90002a2c:	68bb      	ldr	r3, [r7, #8]
90002a2e:	2200      	movs	r2, #0
90002a30:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
90002a32:	68bb      	ldr	r3, [r7, #8]
90002a34:	2200      	movs	r2, #0
90002a36:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
90002a38:	68bb      	ldr	r3, [r7, #8]
90002a3a:	2200      	movs	r2, #0
90002a3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
90002a3e:	68bb      	ldr	r3, [r7, #8]
90002a40:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
90002a44:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
90002a46:	68bb      	ldr	r3, [r7, #8]
90002a48:	f44f 428c 	mov.w	r2, #17920	; 0x4600
90002a4c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
90002a4e:	68bb      	ldr	r3, [r7, #8]
90002a50:	685b      	ldr	r3, [r3, #4]
90002a52:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
90002a56:	68bb      	ldr	r3, [r7, #8]
90002a58:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
90002a5a:	68b9      	ldr	r1, [r7, #8]
90002a5c:	687b      	ldr	r3, [r7, #4]
90002a5e:	68fa      	ldr	r2, [r7, #12]
90002a60:	3212      	adds	r2, #18
90002a62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
90002a66:	68fb      	ldr	r3, [r7, #12]
90002a68:	2b02      	cmp	r3, #2
90002a6a:	d80c      	bhi.n	90002a86 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
90002a6c:	687b      	ldr	r3, [r7, #4]
90002a6e:	6919      	ldr	r1, [r3, #16]
90002a70:	68fb      	ldr	r3, [r7, #12]
90002a72:	1c5a      	adds	r2, r3, #1
90002a74:	4613      	mov	r3, r2
90002a76:	009b      	lsls	r3, r3, #2
90002a78:	4413      	add	r3, r2
90002a7a:	00db      	lsls	r3, r3, #3
90002a7c:	440b      	add	r3, r1
90002a7e:	461a      	mov	r2, r3
90002a80:	68bb      	ldr	r3, [r7, #8]
90002a82:	60da      	str	r2, [r3, #12]
90002a84:	e004      	b.n	90002a90 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
90002a86:	687b      	ldr	r3, [r7, #4]
90002a88:	691b      	ldr	r3, [r3, #16]
90002a8a:	461a      	mov	r2, r3
90002a8c:	68bb      	ldr	r3, [r7, #8]
90002a8e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
90002a90:	68fb      	ldr	r3, [r7, #12]
90002a92:	3301      	adds	r3, #1
90002a94:	60fb      	str	r3, [r7, #12]
90002a96:	68fb      	ldr	r3, [r7, #12]
90002a98:	2b03      	cmp	r3, #3
90002a9a:	d9b5      	bls.n	90002a08 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
90002a9c:	687b      	ldr	r3, [r7, #4]
90002a9e:	2200      	movs	r2, #0
90002aa0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
90002aa2:	687b      	ldr	r3, [r7, #4]
90002aa4:	2200      	movs	r2, #0
90002aa6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
90002aa8:	687b      	ldr	r3, [r7, #4]
90002aaa:	2200      	movs	r2, #0
90002aac:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
90002aae:	687b      	ldr	r3, [r7, #4]
90002ab0:	2200      	movs	r2, #0
90002ab2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
90002ab4:	687b      	ldr	r3, [r7, #4]
90002ab6:	2200      	movs	r2, #0
90002ab8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
90002aba:	687b      	ldr	r3, [r7, #4]
90002abc:	691a      	ldr	r2, [r3, #16]
90002abe:	687b      	ldr	r3, [r7, #4]
90002ac0:	681b      	ldr	r3, [r3, #0]
90002ac2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90002ac6:	60da      	str	r2, [r3, #12]
}
90002ac8:	bf00      	nop
90002aca:	3714      	adds	r7, #20
90002acc:	46bd      	mov	sp, r7
90002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
90002ad2:	4770      	bx	lr

90002ad4 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
90002ad4:	b480      	push	{r7}
90002ad6:	b08d      	sub	sp, #52	; 0x34
90002ad8:	af00      	add	r7, sp, #0
90002ada:	60f8      	str	r0, [r7, #12]
90002adc:	60b9      	str	r1, [r7, #8]
90002ade:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
90002ae0:	68fb      	ldr	r3, [r7, #12]
90002ae2:	3318      	adds	r3, #24
90002ae4:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
90002ae6:	697b      	ldr	r3, [r7, #20]
90002ae8:	691b      	ldr	r3, [r3, #16]
90002aea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
90002aec:	697b      	ldr	r3, [r7, #20]
90002aee:	691b      	ldr	r3, [r3, #16]
90002af0:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
90002af2:	2300      	movs	r3, #0
90002af4:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
90002af6:	697b      	ldr	r3, [r7, #20]
90002af8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
90002afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
90002afe:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
90002b00:	68bb      	ldr	r3, [r7, #8]
90002b02:	689b      	ldr	r3, [r3, #8]
90002b04:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
90002b06:	2300      	movs	r3, #0
90002b08:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
90002b0a:	6a3b      	ldr	r3, [r7, #32]
90002b0c:	681b      	ldr	r3, [r3, #0]
90002b0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
90002b12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
90002b16:	d007      	beq.n	90002b28 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
90002b18:	697a      	ldr	r2, [r7, #20]
90002b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90002b1c:	3304      	adds	r3, #4
90002b1e:	009b      	lsls	r3, r3, #2
90002b20:	4413      	add	r3, r2
90002b22:	685b      	ldr	r3, [r3, #4]
90002b24:	2b00      	cmp	r3, #0
90002b26:	d001      	beq.n	90002b2c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
90002b28:	2302      	movs	r3, #2
90002b2a:	e0ff      	b.n	90002d2c <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
90002b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90002b2e:	3301      	adds	r3, #1
90002b30:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
90002b32:	69fb      	ldr	r3, [r7, #28]
90002b34:	681b      	ldr	r3, [r3, #0]
90002b36:	461a      	mov	r2, r3
90002b38:	6a3b      	ldr	r3, [r7, #32]
90002b3a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
90002b3c:	6a3b      	ldr	r3, [r7, #32]
90002b3e:	685a      	ldr	r2, [r3, #4]
90002b40:	4b7d      	ldr	r3, [pc, #500]	; (90002d38 <ETH_Prepare_Tx_Descriptors+0x264>)
90002b42:	4013      	ands	r3, r2
90002b44:	69fa      	ldr	r2, [r7, #28]
90002b46:	6852      	ldr	r2, [r2, #4]
90002b48:	431a      	orrs	r2, r3
90002b4a:	6a3b      	ldr	r3, [r7, #32]
90002b4c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
90002b4e:	68bb      	ldr	r3, [r7, #8]
90002b50:	681b      	ldr	r3, [r3, #0]
90002b52:	f003 0301 	and.w	r3, r3, #1
90002b56:	2b00      	cmp	r3, #0
90002b58:	d008      	beq.n	90002b6c <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
90002b5a:	6a3b      	ldr	r3, [r7, #32]
90002b5c:	681b      	ldr	r3, [r3, #0]
90002b5e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
90002b62:	68bb      	ldr	r3, [r7, #8]
90002b64:	695b      	ldr	r3, [r3, #20]
90002b66:	431a      	orrs	r2, r3
90002b68:	6a3b      	ldr	r3, [r7, #32]
90002b6a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
90002b6c:	68bb      	ldr	r3, [r7, #8]
90002b6e:	681b      	ldr	r3, [r3, #0]
90002b70:	f003 0320 	and.w	r3, r3, #32
90002b74:	2b00      	cmp	r3, #0
90002b76:	d008      	beq.n	90002b8a <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
90002b78:	6a3b      	ldr	r3, [r7, #32]
90002b7a:	681b      	ldr	r3, [r3, #0]
90002b7c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
90002b80:	68bb      	ldr	r3, [r7, #8]
90002b82:	691b      	ldr	r3, [r3, #16]
90002b84:	431a      	orrs	r2, r3
90002b86:	6a3b      	ldr	r3, [r7, #32]
90002b88:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
90002b8a:	68bb      	ldr	r3, [r7, #8]
90002b8c:	681b      	ldr	r3, [r3, #0]
90002b8e:	f003 0304 	and.w	r3, r3, #4
90002b92:	2b00      	cmp	r3, #0
90002b94:	d005      	beq.n	90002ba2 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
90002b96:	6a3b      	ldr	r3, [r7, #32]
90002b98:	681b      	ldr	r3, [r3, #0]
90002b9a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
90002b9e:	6a3b      	ldr	r3, [r7, #32]
90002ba0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
90002ba2:	6a3b      	ldr	r3, [r7, #32]
90002ba4:	681b      	ldr	r3, [r3, #0]
90002ba6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
90002baa:	6a3b      	ldr	r3, [r7, #32]
90002bac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
90002bae:	f3bf 8f5f 	dmb	sy
}
90002bb2:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
90002bb4:	6a3b      	ldr	r3, [r7, #32]
90002bb6:	681b      	ldr	r3, [r3, #0]
90002bb8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
90002bbc:	6a3b      	ldr	r3, [r7, #32]
90002bbe:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
90002bc0:	e082      	b.n	90002cc8 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
90002bc2:	6a3b      	ldr	r3, [r7, #32]
90002bc4:	681b      	ldr	r3, [r3, #0]
90002bc6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
90002bca:	6a3b      	ldr	r3, [r7, #32]
90002bcc:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
90002bce:	687b      	ldr	r3, [r7, #4]
90002bd0:	2b00      	cmp	r3, #0
90002bd2:	d006      	beq.n	90002be2 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
90002bd4:	6a3b      	ldr	r3, [r7, #32]
90002bd6:	681b      	ldr	r3, [r3, #0]
90002bd8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
90002bdc:	6a3b      	ldr	r3, [r7, #32]
90002bde:	601a      	str	r2, [r3, #0]
90002be0:	e005      	b.n	90002bee <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
90002be2:	6a3b      	ldr	r3, [r7, #32]
90002be4:	681b      	ldr	r3, [r3, #0]
90002be6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
90002bea:	6a3b      	ldr	r3, [r7, #32]
90002bec:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
90002bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90002bf0:	3301      	adds	r3, #1
90002bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
90002bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90002bf6:	2b03      	cmp	r3, #3
90002bf8:	d902      	bls.n	90002c00 <ETH_Prepare_Tx_Descriptors+0x12c>
90002bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90002bfc:	3b04      	subs	r3, #4
90002bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
90002c00:	697b      	ldr	r3, [r7, #20]
90002c02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
90002c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
90002c08:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
90002c0a:	6a3b      	ldr	r3, [r7, #32]
90002c0c:	681b      	ldr	r3, [r3, #0]
90002c0e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
90002c12:	6a3b      	ldr	r3, [r7, #32]
90002c14:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
90002c16:	6a3b      	ldr	r3, [r7, #32]
90002c18:	681b      	ldr	r3, [r3, #0]
90002c1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
90002c1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
90002c22:	d007      	beq.n	90002c34 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
90002c24:	697a      	ldr	r2, [r7, #20]
90002c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90002c28:	3304      	adds	r3, #4
90002c2a:	009b      	lsls	r3, r3, #2
90002c2c:	4413      	add	r3, r2
90002c2e:	685b      	ldr	r3, [r3, #4]
90002c30:	2b00      	cmp	r3, #0
90002c32:	d029      	beq.n	90002c88 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
90002c34:	693b      	ldr	r3, [r7, #16]
90002c36:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
90002c38:	697b      	ldr	r3, [r7, #20]
90002c3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
90002c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
90002c40:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
90002c42:	2300      	movs	r3, #0
90002c44:	62bb      	str	r3, [r7, #40]	; 0x28
90002c46:	e019      	b.n	90002c7c <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
90002c48:	f3bf 8f5f 	dmb	sy
}
90002c4c:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
90002c4e:	6a3b      	ldr	r3, [r7, #32]
90002c50:	681b      	ldr	r3, [r3, #0]
90002c52:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
90002c56:	6a3b      	ldr	r3, [r7, #32]
90002c58:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
90002c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90002c5c:	3301      	adds	r3, #1
90002c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
90002c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90002c62:	2b03      	cmp	r3, #3
90002c64:	d902      	bls.n	90002c6c <ETH_Prepare_Tx_Descriptors+0x198>
90002c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90002c68:	3b04      	subs	r3, #4
90002c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
90002c6c:	697b      	ldr	r3, [r7, #20]
90002c6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
90002c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
90002c74:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
90002c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
90002c78:	3301      	adds	r3, #1
90002c7a:	62bb      	str	r3, [r7, #40]	; 0x28
90002c7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
90002c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90002c80:	429a      	cmp	r2, r3
90002c82:	d3e1      	bcc.n	90002c48 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
90002c84:	2302      	movs	r3, #2
90002c86:	e051      	b.n	90002d2c <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
90002c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90002c8a:	3301      	adds	r3, #1
90002c8c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
90002c8e:	69fb      	ldr	r3, [r7, #28]
90002c90:	689b      	ldr	r3, [r3, #8]
90002c92:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
90002c94:	69fb      	ldr	r3, [r7, #28]
90002c96:	681b      	ldr	r3, [r3, #0]
90002c98:	461a      	mov	r2, r3
90002c9a:	6a3b      	ldr	r3, [r7, #32]
90002c9c:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
90002c9e:	6a3b      	ldr	r3, [r7, #32]
90002ca0:	685a      	ldr	r2, [r3, #4]
90002ca2:	4b25      	ldr	r3, [pc, #148]	; (90002d38 <ETH_Prepare_Tx_Descriptors+0x264>)
90002ca4:	4013      	ands	r3, r2
90002ca6:	69fa      	ldr	r2, [r7, #28]
90002ca8:	6852      	ldr	r2, [r2, #4]
90002caa:	431a      	orrs	r2, r3
90002cac:	6a3b      	ldr	r3, [r7, #32]
90002cae:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
90002cb0:	69bb      	ldr	r3, [r7, #24]
90002cb2:	3301      	adds	r3, #1
90002cb4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
90002cb6:	f3bf 8f5f 	dmb	sy
}
90002cba:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
90002cbc:	6a3b      	ldr	r3, [r7, #32]
90002cbe:	681b      	ldr	r3, [r3, #0]
90002cc0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
90002cc4:	6a3b      	ldr	r3, [r7, #32]
90002cc6:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
90002cc8:	69fb      	ldr	r3, [r7, #28]
90002cca:	689b      	ldr	r3, [r3, #8]
90002ccc:	2b00      	cmp	r3, #0
90002cce:	f47f af78 	bne.w	90002bc2 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
90002cd2:	687b      	ldr	r3, [r7, #4]
90002cd4:	2b00      	cmp	r3, #0
90002cd6:	d006      	beq.n	90002ce6 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
90002cd8:	6a3b      	ldr	r3, [r7, #32]
90002cda:	681b      	ldr	r3, [r3, #0]
90002cdc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
90002ce0:	6a3b      	ldr	r3, [r7, #32]
90002ce2:	601a      	str	r2, [r3, #0]
90002ce4:	e005      	b.n	90002cf2 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
90002ce6:	6a3b      	ldr	r3, [r7, #32]
90002ce8:	681b      	ldr	r3, [r3, #0]
90002cea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
90002cee:	6a3b      	ldr	r3, [r7, #32]
90002cf0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
90002cf2:	6a3b      	ldr	r3, [r7, #32]
90002cf4:	681b      	ldr	r3, [r3, #0]
90002cf6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
90002cfa:	6a3b      	ldr	r3, [r7, #32]
90002cfc:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
90002cfe:	697b      	ldr	r3, [r7, #20]
90002d00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90002d02:	6979      	ldr	r1, [r7, #20]
90002d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90002d06:	3304      	adds	r3, #4
90002d08:	009b      	lsls	r3, r3, #2
90002d0a:	440b      	add	r3, r1
90002d0c:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
90002d0e:	697b      	ldr	r3, [r7, #20]
90002d10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
90002d12:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
90002d14:	b672      	cpsid	i
}
90002d16:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
90002d18:	697b      	ldr	r3, [r7, #20]
90002d1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
90002d1c:	69bb      	ldr	r3, [r7, #24]
90002d1e:	4413      	add	r3, r2
90002d20:	1c5a      	adds	r2, r3, #1
90002d22:	697b      	ldr	r3, [r7, #20]
90002d24:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
90002d26:	b662      	cpsie	i
}
90002d28:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
90002d2a:	2300      	movs	r3, #0
}
90002d2c:	4618      	mov	r0, r3
90002d2e:	3734      	adds	r7, #52	; 0x34
90002d30:	46bd      	mov	sp, r7
90002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
90002d36:	4770      	bx	lr
90002d38:	ffffe000 	.word	0xffffe000

90002d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
90002d3c:	b480      	push	{r7}
90002d3e:	b089      	sub	sp, #36	; 0x24
90002d40:	af00      	add	r7, sp, #0
90002d42:	6078      	str	r0, [r7, #4]
90002d44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
90002d46:	2300      	movs	r3, #0
90002d48:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
90002d4a:	2300      	movs	r3, #0
90002d4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
90002d4e:	2300      	movs	r3, #0
90002d50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
90002d52:	2300      	movs	r3, #0
90002d54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
90002d56:	2300      	movs	r3, #0
90002d58:	61fb      	str	r3, [r7, #28]
90002d5a:	e175      	b.n	90003048 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
90002d5c:	2201      	movs	r2, #1
90002d5e:	69fb      	ldr	r3, [r7, #28]
90002d60:	fa02 f303 	lsl.w	r3, r2, r3
90002d64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
90002d66:	683b      	ldr	r3, [r7, #0]
90002d68:	681b      	ldr	r3, [r3, #0]
90002d6a:	697a      	ldr	r2, [r7, #20]
90002d6c:	4013      	ands	r3, r2
90002d6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
90002d70:	693a      	ldr	r2, [r7, #16]
90002d72:	697b      	ldr	r3, [r7, #20]
90002d74:	429a      	cmp	r2, r3
90002d76:	f040 8164 	bne.w	90003042 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
90002d7a:	683b      	ldr	r3, [r7, #0]
90002d7c:	685b      	ldr	r3, [r3, #4]
90002d7e:	f003 0303 	and.w	r3, r3, #3
90002d82:	2b01      	cmp	r3, #1
90002d84:	d005      	beq.n	90002d92 <HAL_GPIO_Init+0x56>
90002d86:	683b      	ldr	r3, [r7, #0]
90002d88:	685b      	ldr	r3, [r3, #4]
90002d8a:	f003 0303 	and.w	r3, r3, #3
90002d8e:	2b02      	cmp	r3, #2
90002d90:	d130      	bne.n	90002df4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
90002d92:	687b      	ldr	r3, [r7, #4]
90002d94:	689b      	ldr	r3, [r3, #8]
90002d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
90002d98:	69fb      	ldr	r3, [r7, #28]
90002d9a:	005b      	lsls	r3, r3, #1
90002d9c:	2203      	movs	r2, #3
90002d9e:	fa02 f303 	lsl.w	r3, r2, r3
90002da2:	43db      	mvns	r3, r3
90002da4:	69ba      	ldr	r2, [r7, #24]
90002da6:	4013      	ands	r3, r2
90002da8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
90002daa:	683b      	ldr	r3, [r7, #0]
90002dac:	68da      	ldr	r2, [r3, #12]
90002dae:	69fb      	ldr	r3, [r7, #28]
90002db0:	005b      	lsls	r3, r3, #1
90002db2:	fa02 f303 	lsl.w	r3, r2, r3
90002db6:	69ba      	ldr	r2, [r7, #24]
90002db8:	4313      	orrs	r3, r2
90002dba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
90002dbc:	687b      	ldr	r3, [r7, #4]
90002dbe:	69ba      	ldr	r2, [r7, #24]
90002dc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
90002dc2:	687b      	ldr	r3, [r7, #4]
90002dc4:	685b      	ldr	r3, [r3, #4]
90002dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
90002dc8:	2201      	movs	r2, #1
90002dca:	69fb      	ldr	r3, [r7, #28]
90002dcc:	fa02 f303 	lsl.w	r3, r2, r3
90002dd0:	43db      	mvns	r3, r3
90002dd2:	69ba      	ldr	r2, [r7, #24]
90002dd4:	4013      	ands	r3, r2
90002dd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
90002dd8:	683b      	ldr	r3, [r7, #0]
90002dda:	685b      	ldr	r3, [r3, #4]
90002ddc:	091b      	lsrs	r3, r3, #4
90002dde:	f003 0201 	and.w	r2, r3, #1
90002de2:	69fb      	ldr	r3, [r7, #28]
90002de4:	fa02 f303 	lsl.w	r3, r2, r3
90002de8:	69ba      	ldr	r2, [r7, #24]
90002dea:	4313      	orrs	r3, r2
90002dec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
90002dee:	687b      	ldr	r3, [r7, #4]
90002df0:	69ba      	ldr	r2, [r7, #24]
90002df2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
90002df4:	683b      	ldr	r3, [r7, #0]
90002df6:	685b      	ldr	r3, [r3, #4]
90002df8:	f003 0303 	and.w	r3, r3, #3
90002dfc:	2b03      	cmp	r3, #3
90002dfe:	d017      	beq.n	90002e30 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
90002e00:	687b      	ldr	r3, [r7, #4]
90002e02:	68db      	ldr	r3, [r3, #12]
90002e04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
90002e06:	69fb      	ldr	r3, [r7, #28]
90002e08:	005b      	lsls	r3, r3, #1
90002e0a:	2203      	movs	r2, #3
90002e0c:	fa02 f303 	lsl.w	r3, r2, r3
90002e10:	43db      	mvns	r3, r3
90002e12:	69ba      	ldr	r2, [r7, #24]
90002e14:	4013      	ands	r3, r2
90002e16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
90002e18:	683b      	ldr	r3, [r7, #0]
90002e1a:	689a      	ldr	r2, [r3, #8]
90002e1c:	69fb      	ldr	r3, [r7, #28]
90002e1e:	005b      	lsls	r3, r3, #1
90002e20:	fa02 f303 	lsl.w	r3, r2, r3
90002e24:	69ba      	ldr	r2, [r7, #24]
90002e26:	4313      	orrs	r3, r2
90002e28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
90002e2a:	687b      	ldr	r3, [r7, #4]
90002e2c:	69ba      	ldr	r2, [r7, #24]
90002e2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
90002e30:	683b      	ldr	r3, [r7, #0]
90002e32:	685b      	ldr	r3, [r3, #4]
90002e34:	f003 0303 	and.w	r3, r3, #3
90002e38:	2b02      	cmp	r3, #2
90002e3a:	d123      	bne.n	90002e84 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
90002e3c:	69fb      	ldr	r3, [r7, #28]
90002e3e:	08da      	lsrs	r2, r3, #3
90002e40:	687b      	ldr	r3, [r7, #4]
90002e42:	3208      	adds	r2, #8
90002e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
90002e48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
90002e4a:	69fb      	ldr	r3, [r7, #28]
90002e4c:	f003 0307 	and.w	r3, r3, #7
90002e50:	009b      	lsls	r3, r3, #2
90002e52:	220f      	movs	r2, #15
90002e54:	fa02 f303 	lsl.w	r3, r2, r3
90002e58:	43db      	mvns	r3, r3
90002e5a:	69ba      	ldr	r2, [r7, #24]
90002e5c:	4013      	ands	r3, r2
90002e5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
90002e60:	683b      	ldr	r3, [r7, #0]
90002e62:	691a      	ldr	r2, [r3, #16]
90002e64:	69fb      	ldr	r3, [r7, #28]
90002e66:	f003 0307 	and.w	r3, r3, #7
90002e6a:	009b      	lsls	r3, r3, #2
90002e6c:	fa02 f303 	lsl.w	r3, r2, r3
90002e70:	69ba      	ldr	r2, [r7, #24]
90002e72:	4313      	orrs	r3, r2
90002e74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
90002e76:	69fb      	ldr	r3, [r7, #28]
90002e78:	08da      	lsrs	r2, r3, #3
90002e7a:	687b      	ldr	r3, [r7, #4]
90002e7c:	3208      	adds	r2, #8
90002e7e:	69b9      	ldr	r1, [r7, #24]
90002e80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
90002e84:	687b      	ldr	r3, [r7, #4]
90002e86:	681b      	ldr	r3, [r3, #0]
90002e88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
90002e8a:	69fb      	ldr	r3, [r7, #28]
90002e8c:	005b      	lsls	r3, r3, #1
90002e8e:	2203      	movs	r2, #3
90002e90:	fa02 f303 	lsl.w	r3, r2, r3
90002e94:	43db      	mvns	r3, r3
90002e96:	69ba      	ldr	r2, [r7, #24]
90002e98:	4013      	ands	r3, r2
90002e9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
90002e9c:	683b      	ldr	r3, [r7, #0]
90002e9e:	685b      	ldr	r3, [r3, #4]
90002ea0:	f003 0203 	and.w	r2, r3, #3
90002ea4:	69fb      	ldr	r3, [r7, #28]
90002ea6:	005b      	lsls	r3, r3, #1
90002ea8:	fa02 f303 	lsl.w	r3, r2, r3
90002eac:	69ba      	ldr	r2, [r7, #24]
90002eae:	4313      	orrs	r3, r2
90002eb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
90002eb2:	687b      	ldr	r3, [r7, #4]
90002eb4:	69ba      	ldr	r2, [r7, #24]
90002eb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
90002eb8:	683b      	ldr	r3, [r7, #0]
90002eba:	685b      	ldr	r3, [r3, #4]
90002ebc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
90002ec0:	2b00      	cmp	r3, #0
90002ec2:	f000 80be 	beq.w	90003042 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90002ec6:	4b66      	ldr	r3, [pc, #408]	; (90003060 <HAL_GPIO_Init+0x324>)
90002ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90002eca:	4a65      	ldr	r2, [pc, #404]	; (90003060 <HAL_GPIO_Init+0x324>)
90002ecc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
90002ed0:	6453      	str	r3, [r2, #68]	; 0x44
90002ed2:	4b63      	ldr	r3, [pc, #396]	; (90003060 <HAL_GPIO_Init+0x324>)
90002ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90002ed6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
90002eda:	60fb      	str	r3, [r7, #12]
90002edc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
90002ede:	4a61      	ldr	r2, [pc, #388]	; (90003064 <HAL_GPIO_Init+0x328>)
90002ee0:	69fb      	ldr	r3, [r7, #28]
90002ee2:	089b      	lsrs	r3, r3, #2
90002ee4:	3302      	adds	r3, #2
90002ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90002eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
90002eec:	69fb      	ldr	r3, [r7, #28]
90002eee:	f003 0303 	and.w	r3, r3, #3
90002ef2:	009b      	lsls	r3, r3, #2
90002ef4:	220f      	movs	r2, #15
90002ef6:	fa02 f303 	lsl.w	r3, r2, r3
90002efa:	43db      	mvns	r3, r3
90002efc:	69ba      	ldr	r2, [r7, #24]
90002efe:	4013      	ands	r3, r2
90002f00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
90002f02:	687b      	ldr	r3, [r7, #4]
90002f04:	4a58      	ldr	r2, [pc, #352]	; (90003068 <HAL_GPIO_Init+0x32c>)
90002f06:	4293      	cmp	r3, r2
90002f08:	d037      	beq.n	90002f7a <HAL_GPIO_Init+0x23e>
90002f0a:	687b      	ldr	r3, [r7, #4]
90002f0c:	4a57      	ldr	r2, [pc, #348]	; (9000306c <HAL_GPIO_Init+0x330>)
90002f0e:	4293      	cmp	r3, r2
90002f10:	d031      	beq.n	90002f76 <HAL_GPIO_Init+0x23a>
90002f12:	687b      	ldr	r3, [r7, #4]
90002f14:	4a56      	ldr	r2, [pc, #344]	; (90003070 <HAL_GPIO_Init+0x334>)
90002f16:	4293      	cmp	r3, r2
90002f18:	d02b      	beq.n	90002f72 <HAL_GPIO_Init+0x236>
90002f1a:	687b      	ldr	r3, [r7, #4]
90002f1c:	4a55      	ldr	r2, [pc, #340]	; (90003074 <HAL_GPIO_Init+0x338>)
90002f1e:	4293      	cmp	r3, r2
90002f20:	d025      	beq.n	90002f6e <HAL_GPIO_Init+0x232>
90002f22:	687b      	ldr	r3, [r7, #4]
90002f24:	4a54      	ldr	r2, [pc, #336]	; (90003078 <HAL_GPIO_Init+0x33c>)
90002f26:	4293      	cmp	r3, r2
90002f28:	d01f      	beq.n	90002f6a <HAL_GPIO_Init+0x22e>
90002f2a:	687b      	ldr	r3, [r7, #4]
90002f2c:	4a53      	ldr	r2, [pc, #332]	; (9000307c <HAL_GPIO_Init+0x340>)
90002f2e:	4293      	cmp	r3, r2
90002f30:	d019      	beq.n	90002f66 <HAL_GPIO_Init+0x22a>
90002f32:	687b      	ldr	r3, [r7, #4]
90002f34:	4a52      	ldr	r2, [pc, #328]	; (90003080 <HAL_GPIO_Init+0x344>)
90002f36:	4293      	cmp	r3, r2
90002f38:	d013      	beq.n	90002f62 <HAL_GPIO_Init+0x226>
90002f3a:	687b      	ldr	r3, [r7, #4]
90002f3c:	4a51      	ldr	r2, [pc, #324]	; (90003084 <HAL_GPIO_Init+0x348>)
90002f3e:	4293      	cmp	r3, r2
90002f40:	d00d      	beq.n	90002f5e <HAL_GPIO_Init+0x222>
90002f42:	687b      	ldr	r3, [r7, #4]
90002f44:	4a50      	ldr	r2, [pc, #320]	; (90003088 <HAL_GPIO_Init+0x34c>)
90002f46:	4293      	cmp	r3, r2
90002f48:	d007      	beq.n	90002f5a <HAL_GPIO_Init+0x21e>
90002f4a:	687b      	ldr	r3, [r7, #4]
90002f4c:	4a4f      	ldr	r2, [pc, #316]	; (9000308c <HAL_GPIO_Init+0x350>)
90002f4e:	4293      	cmp	r3, r2
90002f50:	d101      	bne.n	90002f56 <HAL_GPIO_Init+0x21a>
90002f52:	2309      	movs	r3, #9
90002f54:	e012      	b.n	90002f7c <HAL_GPIO_Init+0x240>
90002f56:	230a      	movs	r3, #10
90002f58:	e010      	b.n	90002f7c <HAL_GPIO_Init+0x240>
90002f5a:	2308      	movs	r3, #8
90002f5c:	e00e      	b.n	90002f7c <HAL_GPIO_Init+0x240>
90002f5e:	2307      	movs	r3, #7
90002f60:	e00c      	b.n	90002f7c <HAL_GPIO_Init+0x240>
90002f62:	2306      	movs	r3, #6
90002f64:	e00a      	b.n	90002f7c <HAL_GPIO_Init+0x240>
90002f66:	2305      	movs	r3, #5
90002f68:	e008      	b.n	90002f7c <HAL_GPIO_Init+0x240>
90002f6a:	2304      	movs	r3, #4
90002f6c:	e006      	b.n	90002f7c <HAL_GPIO_Init+0x240>
90002f6e:	2303      	movs	r3, #3
90002f70:	e004      	b.n	90002f7c <HAL_GPIO_Init+0x240>
90002f72:	2302      	movs	r3, #2
90002f74:	e002      	b.n	90002f7c <HAL_GPIO_Init+0x240>
90002f76:	2301      	movs	r3, #1
90002f78:	e000      	b.n	90002f7c <HAL_GPIO_Init+0x240>
90002f7a:	2300      	movs	r3, #0
90002f7c:	69fa      	ldr	r2, [r7, #28]
90002f7e:	f002 0203 	and.w	r2, r2, #3
90002f82:	0092      	lsls	r2, r2, #2
90002f84:	4093      	lsls	r3, r2
90002f86:	69ba      	ldr	r2, [r7, #24]
90002f88:	4313      	orrs	r3, r2
90002f8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
90002f8c:	4935      	ldr	r1, [pc, #212]	; (90003064 <HAL_GPIO_Init+0x328>)
90002f8e:	69fb      	ldr	r3, [r7, #28]
90002f90:	089b      	lsrs	r3, r3, #2
90002f92:	3302      	adds	r3, #2
90002f94:	69ba      	ldr	r2, [r7, #24]
90002f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
90002f9a:	4b3d      	ldr	r3, [pc, #244]	; (90003090 <HAL_GPIO_Init+0x354>)
90002f9c:	689b      	ldr	r3, [r3, #8]
90002f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
90002fa0:	693b      	ldr	r3, [r7, #16]
90002fa2:	43db      	mvns	r3, r3
90002fa4:	69ba      	ldr	r2, [r7, #24]
90002fa6:	4013      	ands	r3, r2
90002fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
90002faa:	683b      	ldr	r3, [r7, #0]
90002fac:	685b      	ldr	r3, [r3, #4]
90002fae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
90002fb2:	2b00      	cmp	r3, #0
90002fb4:	d003      	beq.n	90002fbe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
90002fb6:	69ba      	ldr	r2, [r7, #24]
90002fb8:	693b      	ldr	r3, [r7, #16]
90002fba:	4313      	orrs	r3, r2
90002fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
90002fbe:	4a34      	ldr	r2, [pc, #208]	; (90003090 <HAL_GPIO_Init+0x354>)
90002fc0:	69bb      	ldr	r3, [r7, #24]
90002fc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
90002fc4:	4b32      	ldr	r3, [pc, #200]	; (90003090 <HAL_GPIO_Init+0x354>)
90002fc6:	68db      	ldr	r3, [r3, #12]
90002fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
90002fca:	693b      	ldr	r3, [r7, #16]
90002fcc:	43db      	mvns	r3, r3
90002fce:	69ba      	ldr	r2, [r7, #24]
90002fd0:	4013      	ands	r3, r2
90002fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
90002fd4:	683b      	ldr	r3, [r7, #0]
90002fd6:	685b      	ldr	r3, [r3, #4]
90002fd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
90002fdc:	2b00      	cmp	r3, #0
90002fde:	d003      	beq.n	90002fe8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
90002fe0:	69ba      	ldr	r2, [r7, #24]
90002fe2:	693b      	ldr	r3, [r7, #16]
90002fe4:	4313      	orrs	r3, r2
90002fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
90002fe8:	4a29      	ldr	r2, [pc, #164]	; (90003090 <HAL_GPIO_Init+0x354>)
90002fea:	69bb      	ldr	r3, [r7, #24]
90002fec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
90002fee:	4b28      	ldr	r3, [pc, #160]	; (90003090 <HAL_GPIO_Init+0x354>)
90002ff0:	685b      	ldr	r3, [r3, #4]
90002ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
90002ff4:	693b      	ldr	r3, [r7, #16]
90002ff6:	43db      	mvns	r3, r3
90002ff8:	69ba      	ldr	r2, [r7, #24]
90002ffa:	4013      	ands	r3, r2
90002ffc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
90002ffe:	683b      	ldr	r3, [r7, #0]
90003000:	685b      	ldr	r3, [r3, #4]
90003002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90003006:	2b00      	cmp	r3, #0
90003008:	d003      	beq.n	90003012 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
9000300a:	69ba      	ldr	r2, [r7, #24]
9000300c:	693b      	ldr	r3, [r7, #16]
9000300e:	4313      	orrs	r3, r2
90003010:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
90003012:	4a1f      	ldr	r2, [pc, #124]	; (90003090 <HAL_GPIO_Init+0x354>)
90003014:	69bb      	ldr	r3, [r7, #24]
90003016:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
90003018:	4b1d      	ldr	r3, [pc, #116]	; (90003090 <HAL_GPIO_Init+0x354>)
9000301a:	681b      	ldr	r3, [r3, #0]
9000301c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
9000301e:	693b      	ldr	r3, [r7, #16]
90003020:	43db      	mvns	r3, r3
90003022:	69ba      	ldr	r2, [r7, #24]
90003024:	4013      	ands	r3, r2
90003026:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
90003028:	683b      	ldr	r3, [r7, #0]
9000302a:	685b      	ldr	r3, [r3, #4]
9000302c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
90003030:	2b00      	cmp	r3, #0
90003032:	d003      	beq.n	9000303c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
90003034:	69ba      	ldr	r2, [r7, #24]
90003036:	693b      	ldr	r3, [r7, #16]
90003038:	4313      	orrs	r3, r2
9000303a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
9000303c:	4a14      	ldr	r2, [pc, #80]	; (90003090 <HAL_GPIO_Init+0x354>)
9000303e:	69bb      	ldr	r3, [r7, #24]
90003040:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
90003042:	69fb      	ldr	r3, [r7, #28]
90003044:	3301      	adds	r3, #1
90003046:	61fb      	str	r3, [r7, #28]
90003048:	69fb      	ldr	r3, [r7, #28]
9000304a:	2b0f      	cmp	r3, #15
9000304c:	f67f ae86 	bls.w	90002d5c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
90003050:	bf00      	nop
90003052:	bf00      	nop
90003054:	3724      	adds	r7, #36	; 0x24
90003056:	46bd      	mov	sp, r7
90003058:	f85d 7b04 	ldr.w	r7, [sp], #4
9000305c:	4770      	bx	lr
9000305e:	bf00      	nop
90003060:	40023800 	.word	0x40023800
90003064:	40013800 	.word	0x40013800
90003068:	40020000 	.word	0x40020000
9000306c:	40020400 	.word	0x40020400
90003070:	40020800 	.word	0x40020800
90003074:	40020c00 	.word	0x40020c00
90003078:	40021000 	.word	0x40021000
9000307c:	40021400 	.word	0x40021400
90003080:	40021800 	.word	0x40021800
90003084:	40021c00 	.word	0x40021c00
90003088:	40022000 	.word	0x40022000
9000308c:	40022400 	.word	0x40022400
90003090:	40013c00 	.word	0x40013c00

90003094 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
90003094:	b480      	push	{r7}
90003096:	b083      	sub	sp, #12
90003098:	af00      	add	r7, sp, #0
9000309a:	6078      	str	r0, [r7, #4]
9000309c:	460b      	mov	r3, r1
9000309e:	807b      	strh	r3, [r7, #2]
900030a0:	4613      	mov	r3, r2
900030a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
900030a4:	787b      	ldrb	r3, [r7, #1]
900030a6:	2b00      	cmp	r3, #0
900030a8:	d003      	beq.n	900030b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
900030aa:	887a      	ldrh	r2, [r7, #2]
900030ac:	687b      	ldr	r3, [r7, #4]
900030ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
900030b0:	e003      	b.n	900030ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
900030b2:	887b      	ldrh	r3, [r7, #2]
900030b4:	041a      	lsls	r2, r3, #16
900030b6:	687b      	ldr	r3, [r7, #4]
900030b8:	619a      	str	r2, [r3, #24]
}
900030ba:	bf00      	nop
900030bc:	370c      	adds	r7, #12
900030be:	46bd      	mov	sp, r7
900030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
900030c4:	4770      	bx	lr
	...

900030c8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
900030c8:	b580      	push	{r7, lr}
900030ca:	b082      	sub	sp, #8
900030cc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
900030ce:	2300      	movs	r3, #0
900030d0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
900030d2:	4b23      	ldr	r3, [pc, #140]	; (90003160 <HAL_PWREx_EnableOverDrive+0x98>)
900030d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900030d6:	4a22      	ldr	r2, [pc, #136]	; (90003160 <HAL_PWREx_EnableOverDrive+0x98>)
900030d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
900030dc:	6413      	str	r3, [r2, #64]	; 0x40
900030de:	4b20      	ldr	r3, [pc, #128]	; (90003160 <HAL_PWREx_EnableOverDrive+0x98>)
900030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900030e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
900030e6:	603b      	str	r3, [r7, #0]
900030e8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
900030ea:	4b1e      	ldr	r3, [pc, #120]	; (90003164 <HAL_PWREx_EnableOverDrive+0x9c>)
900030ec:	681b      	ldr	r3, [r3, #0]
900030ee:	4a1d      	ldr	r2, [pc, #116]	; (90003164 <HAL_PWREx_EnableOverDrive+0x9c>)
900030f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
900030f4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
900030f6:	f7fe fc19 	bl	9000192c <HAL_GetTick>
900030fa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
900030fc:	e009      	b.n	90003112 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
900030fe:	f7fe fc15 	bl	9000192c <HAL_GetTick>
90003102:	4602      	mov	r2, r0
90003104:	687b      	ldr	r3, [r7, #4]
90003106:	1ad3      	subs	r3, r2, r3
90003108:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
9000310c:	d901      	bls.n	90003112 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
9000310e:	2303      	movs	r3, #3
90003110:	e022      	b.n	90003158 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
90003112:	4b14      	ldr	r3, [pc, #80]	; (90003164 <HAL_PWREx_EnableOverDrive+0x9c>)
90003114:	685b      	ldr	r3, [r3, #4]
90003116:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
9000311a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000311e:	d1ee      	bne.n	900030fe <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
90003120:	4b10      	ldr	r3, [pc, #64]	; (90003164 <HAL_PWREx_EnableOverDrive+0x9c>)
90003122:	681b      	ldr	r3, [r3, #0]
90003124:	4a0f      	ldr	r2, [pc, #60]	; (90003164 <HAL_PWREx_EnableOverDrive+0x9c>)
90003126:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
9000312a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
9000312c:	f7fe fbfe 	bl	9000192c <HAL_GetTick>
90003130:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
90003132:	e009      	b.n	90003148 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
90003134:	f7fe fbfa 	bl	9000192c <HAL_GetTick>
90003138:	4602      	mov	r2, r0
9000313a:	687b      	ldr	r3, [r7, #4]
9000313c:	1ad3      	subs	r3, r2, r3
9000313e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
90003142:	d901      	bls.n	90003148 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
90003144:	2303      	movs	r3, #3
90003146:	e007      	b.n	90003158 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
90003148:	4b06      	ldr	r3, [pc, #24]	; (90003164 <HAL_PWREx_EnableOverDrive+0x9c>)
9000314a:	685b      	ldr	r3, [r3, #4]
9000314c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90003150:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
90003154:	d1ee      	bne.n	90003134 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
90003156:	2300      	movs	r3, #0
}
90003158:	4618      	mov	r0, r3
9000315a:	3708      	adds	r7, #8
9000315c:	46bd      	mov	sp, r7
9000315e:	bd80      	pop	{r7, pc}
90003160:	40023800 	.word	0x40023800
90003164:	40007000 	.word	0x40007000

90003168 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
90003168:	b580      	push	{r7, lr}
9000316a:	b086      	sub	sp, #24
9000316c:	af00      	add	r7, sp, #0
9000316e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
90003170:	2300      	movs	r3, #0
90003172:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
90003174:	687b      	ldr	r3, [r7, #4]
90003176:	2b00      	cmp	r3, #0
90003178:	d101      	bne.n	9000317e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
9000317a:	2301      	movs	r3, #1
9000317c:	e291      	b.n	900036a2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
9000317e:	687b      	ldr	r3, [r7, #4]
90003180:	681b      	ldr	r3, [r3, #0]
90003182:	f003 0301 	and.w	r3, r3, #1
90003186:	2b00      	cmp	r3, #0
90003188:	f000 8087 	beq.w	9000329a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
9000318c:	4b96      	ldr	r3, [pc, #600]	; (900033e8 <HAL_RCC_OscConfig+0x280>)
9000318e:	689b      	ldr	r3, [r3, #8]
90003190:	f003 030c 	and.w	r3, r3, #12
90003194:	2b04      	cmp	r3, #4
90003196:	d00c      	beq.n	900031b2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
90003198:	4b93      	ldr	r3, [pc, #588]	; (900033e8 <HAL_RCC_OscConfig+0x280>)
9000319a:	689b      	ldr	r3, [r3, #8]
9000319c:	f003 030c 	and.w	r3, r3, #12
900031a0:	2b08      	cmp	r3, #8
900031a2:	d112      	bne.n	900031ca <HAL_RCC_OscConfig+0x62>
900031a4:	4b90      	ldr	r3, [pc, #576]	; (900033e8 <HAL_RCC_OscConfig+0x280>)
900031a6:	685b      	ldr	r3, [r3, #4]
900031a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
900031ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
900031b0:	d10b      	bne.n	900031ca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
900031b2:	4b8d      	ldr	r3, [pc, #564]	; (900033e8 <HAL_RCC_OscConfig+0x280>)
900031b4:	681b      	ldr	r3, [r3, #0]
900031b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
900031ba:	2b00      	cmp	r3, #0
900031bc:	d06c      	beq.n	90003298 <HAL_RCC_OscConfig+0x130>
900031be:	687b      	ldr	r3, [r7, #4]
900031c0:	685b      	ldr	r3, [r3, #4]
900031c2:	2b00      	cmp	r3, #0
900031c4:	d168      	bne.n	90003298 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
900031c6:	2301      	movs	r3, #1
900031c8:	e26b      	b.n	900036a2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
900031ca:	687b      	ldr	r3, [r7, #4]
900031cc:	685b      	ldr	r3, [r3, #4]
900031ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
900031d2:	d106      	bne.n	900031e2 <HAL_RCC_OscConfig+0x7a>
900031d4:	4b84      	ldr	r3, [pc, #528]	; (900033e8 <HAL_RCC_OscConfig+0x280>)
900031d6:	681b      	ldr	r3, [r3, #0]
900031d8:	4a83      	ldr	r2, [pc, #524]	; (900033e8 <HAL_RCC_OscConfig+0x280>)
900031da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
900031de:	6013      	str	r3, [r2, #0]
900031e0:	e02e      	b.n	90003240 <HAL_RCC_OscConfig+0xd8>
900031e2:	687b      	ldr	r3, [r7, #4]
900031e4:	685b      	ldr	r3, [r3, #4]
900031e6:	2b00      	cmp	r3, #0
900031e8:	d10c      	bne.n	90003204 <HAL_RCC_OscConfig+0x9c>
900031ea:	4b7f      	ldr	r3, [pc, #508]	; (900033e8 <HAL_RCC_OscConfig+0x280>)
900031ec:	681b      	ldr	r3, [r3, #0]
900031ee:	4a7e      	ldr	r2, [pc, #504]	; (900033e8 <HAL_RCC_OscConfig+0x280>)
900031f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
900031f4:	6013      	str	r3, [r2, #0]
900031f6:	4b7c      	ldr	r3, [pc, #496]	; (900033e8 <HAL_RCC_OscConfig+0x280>)
900031f8:	681b      	ldr	r3, [r3, #0]
900031fa:	4a7b      	ldr	r2, [pc, #492]	; (900033e8 <HAL_RCC_OscConfig+0x280>)
900031fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
90003200:	6013      	str	r3, [r2, #0]
90003202:	e01d      	b.n	90003240 <HAL_RCC_OscConfig+0xd8>
90003204:	687b      	ldr	r3, [r7, #4]
90003206:	685b      	ldr	r3, [r3, #4]
90003208:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
9000320c:	d10c      	bne.n	90003228 <HAL_RCC_OscConfig+0xc0>
9000320e:	4b76      	ldr	r3, [pc, #472]	; (900033e8 <HAL_RCC_OscConfig+0x280>)
90003210:	681b      	ldr	r3, [r3, #0]
90003212:	4a75      	ldr	r2, [pc, #468]	; (900033e8 <HAL_RCC_OscConfig+0x280>)
90003214:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
90003218:	6013      	str	r3, [r2, #0]
9000321a:	4b73      	ldr	r3, [pc, #460]	; (900033e8 <HAL_RCC_OscConfig+0x280>)
9000321c:	681b      	ldr	r3, [r3, #0]
9000321e:	4a72      	ldr	r2, [pc, #456]	; (900033e8 <HAL_RCC_OscConfig+0x280>)
90003220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90003224:	6013      	str	r3, [r2, #0]
90003226:	e00b      	b.n	90003240 <HAL_RCC_OscConfig+0xd8>
90003228:	4b6f      	ldr	r3, [pc, #444]	; (900033e8 <HAL_RCC_OscConfig+0x280>)
9000322a:	681b      	ldr	r3, [r3, #0]
9000322c:	4a6e      	ldr	r2, [pc, #440]	; (900033e8 <HAL_RCC_OscConfig+0x280>)
9000322e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
90003232:	6013      	str	r3, [r2, #0]
90003234:	4b6c      	ldr	r3, [pc, #432]	; (900033e8 <HAL_RCC_OscConfig+0x280>)
90003236:	681b      	ldr	r3, [r3, #0]
90003238:	4a6b      	ldr	r2, [pc, #428]	; (900033e8 <HAL_RCC_OscConfig+0x280>)
9000323a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
9000323e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
90003240:	687b      	ldr	r3, [r7, #4]
90003242:	685b      	ldr	r3, [r3, #4]
90003244:	2b00      	cmp	r3, #0
90003246:	d013      	beq.n	90003270 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90003248:	f7fe fb70 	bl	9000192c <HAL_GetTick>
9000324c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
9000324e:	e008      	b.n	90003262 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
90003250:	f7fe fb6c 	bl	9000192c <HAL_GetTick>
90003254:	4602      	mov	r2, r0
90003256:	693b      	ldr	r3, [r7, #16]
90003258:	1ad3      	subs	r3, r2, r3
9000325a:	2b64      	cmp	r3, #100	; 0x64
9000325c:	d901      	bls.n	90003262 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
9000325e:	2303      	movs	r3, #3
90003260:	e21f      	b.n	900036a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
90003262:	4b61      	ldr	r3, [pc, #388]	; (900033e8 <HAL_RCC_OscConfig+0x280>)
90003264:	681b      	ldr	r3, [r3, #0]
90003266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
9000326a:	2b00      	cmp	r3, #0
9000326c:	d0f0      	beq.n	90003250 <HAL_RCC_OscConfig+0xe8>
9000326e:	e014      	b.n	9000329a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90003270:	f7fe fb5c 	bl	9000192c <HAL_GetTick>
90003274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
90003276:	e008      	b.n	9000328a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
90003278:	f7fe fb58 	bl	9000192c <HAL_GetTick>
9000327c:	4602      	mov	r2, r0
9000327e:	693b      	ldr	r3, [r7, #16]
90003280:	1ad3      	subs	r3, r2, r3
90003282:	2b64      	cmp	r3, #100	; 0x64
90003284:	d901      	bls.n	9000328a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
90003286:	2303      	movs	r3, #3
90003288:	e20b      	b.n	900036a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
9000328a:	4b57      	ldr	r3, [pc, #348]	; (900033e8 <HAL_RCC_OscConfig+0x280>)
9000328c:	681b      	ldr	r3, [r3, #0]
9000328e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90003292:	2b00      	cmp	r3, #0
90003294:	d1f0      	bne.n	90003278 <HAL_RCC_OscConfig+0x110>
90003296:	e000      	b.n	9000329a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
90003298:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
9000329a:	687b      	ldr	r3, [r7, #4]
9000329c:	681b      	ldr	r3, [r3, #0]
9000329e:	f003 0302 	and.w	r3, r3, #2
900032a2:	2b00      	cmp	r3, #0
900032a4:	d069      	beq.n	9000337a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
900032a6:	4b50      	ldr	r3, [pc, #320]	; (900033e8 <HAL_RCC_OscConfig+0x280>)
900032a8:	689b      	ldr	r3, [r3, #8]
900032aa:	f003 030c 	and.w	r3, r3, #12
900032ae:	2b00      	cmp	r3, #0
900032b0:	d00b      	beq.n	900032ca <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
900032b2:	4b4d      	ldr	r3, [pc, #308]	; (900033e8 <HAL_RCC_OscConfig+0x280>)
900032b4:	689b      	ldr	r3, [r3, #8]
900032b6:	f003 030c 	and.w	r3, r3, #12
900032ba:	2b08      	cmp	r3, #8
900032bc:	d11c      	bne.n	900032f8 <HAL_RCC_OscConfig+0x190>
900032be:	4b4a      	ldr	r3, [pc, #296]	; (900033e8 <HAL_RCC_OscConfig+0x280>)
900032c0:	685b      	ldr	r3, [r3, #4]
900032c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
900032c6:	2b00      	cmp	r3, #0
900032c8:	d116      	bne.n	900032f8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
900032ca:	4b47      	ldr	r3, [pc, #284]	; (900033e8 <HAL_RCC_OscConfig+0x280>)
900032cc:	681b      	ldr	r3, [r3, #0]
900032ce:	f003 0302 	and.w	r3, r3, #2
900032d2:	2b00      	cmp	r3, #0
900032d4:	d005      	beq.n	900032e2 <HAL_RCC_OscConfig+0x17a>
900032d6:	687b      	ldr	r3, [r7, #4]
900032d8:	68db      	ldr	r3, [r3, #12]
900032da:	2b01      	cmp	r3, #1
900032dc:	d001      	beq.n	900032e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
900032de:	2301      	movs	r3, #1
900032e0:	e1df      	b.n	900036a2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
900032e2:	4b41      	ldr	r3, [pc, #260]	; (900033e8 <HAL_RCC_OscConfig+0x280>)
900032e4:	681b      	ldr	r3, [r3, #0]
900032e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
900032ea:	687b      	ldr	r3, [r7, #4]
900032ec:	691b      	ldr	r3, [r3, #16]
900032ee:	00db      	lsls	r3, r3, #3
900032f0:	493d      	ldr	r1, [pc, #244]	; (900033e8 <HAL_RCC_OscConfig+0x280>)
900032f2:	4313      	orrs	r3, r2
900032f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
900032f6:	e040      	b.n	9000337a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
900032f8:	687b      	ldr	r3, [r7, #4]
900032fa:	68db      	ldr	r3, [r3, #12]
900032fc:	2b00      	cmp	r3, #0
900032fe:	d023      	beq.n	90003348 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
90003300:	4b39      	ldr	r3, [pc, #228]	; (900033e8 <HAL_RCC_OscConfig+0x280>)
90003302:	681b      	ldr	r3, [r3, #0]
90003304:	4a38      	ldr	r2, [pc, #224]	; (900033e8 <HAL_RCC_OscConfig+0x280>)
90003306:	f043 0301 	orr.w	r3, r3, #1
9000330a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
9000330c:	f7fe fb0e 	bl	9000192c <HAL_GetTick>
90003310:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
90003312:	e008      	b.n	90003326 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90003314:	f7fe fb0a 	bl	9000192c <HAL_GetTick>
90003318:	4602      	mov	r2, r0
9000331a:	693b      	ldr	r3, [r7, #16]
9000331c:	1ad3      	subs	r3, r2, r3
9000331e:	2b02      	cmp	r3, #2
90003320:	d901      	bls.n	90003326 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
90003322:	2303      	movs	r3, #3
90003324:	e1bd      	b.n	900036a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
90003326:	4b30      	ldr	r3, [pc, #192]	; (900033e8 <HAL_RCC_OscConfig+0x280>)
90003328:	681b      	ldr	r3, [r3, #0]
9000332a:	f003 0302 	and.w	r3, r3, #2
9000332e:	2b00      	cmp	r3, #0
90003330:	d0f0      	beq.n	90003314 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90003332:	4b2d      	ldr	r3, [pc, #180]	; (900033e8 <HAL_RCC_OscConfig+0x280>)
90003334:	681b      	ldr	r3, [r3, #0]
90003336:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
9000333a:	687b      	ldr	r3, [r7, #4]
9000333c:	691b      	ldr	r3, [r3, #16]
9000333e:	00db      	lsls	r3, r3, #3
90003340:	4929      	ldr	r1, [pc, #164]	; (900033e8 <HAL_RCC_OscConfig+0x280>)
90003342:	4313      	orrs	r3, r2
90003344:	600b      	str	r3, [r1, #0]
90003346:	e018      	b.n	9000337a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
90003348:	4b27      	ldr	r3, [pc, #156]	; (900033e8 <HAL_RCC_OscConfig+0x280>)
9000334a:	681b      	ldr	r3, [r3, #0]
9000334c:	4a26      	ldr	r2, [pc, #152]	; (900033e8 <HAL_RCC_OscConfig+0x280>)
9000334e:	f023 0301 	bic.w	r3, r3, #1
90003352:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90003354:	f7fe faea 	bl	9000192c <HAL_GetTick>
90003358:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
9000335a:	e008      	b.n	9000336e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
9000335c:	f7fe fae6 	bl	9000192c <HAL_GetTick>
90003360:	4602      	mov	r2, r0
90003362:	693b      	ldr	r3, [r7, #16]
90003364:	1ad3      	subs	r3, r2, r3
90003366:	2b02      	cmp	r3, #2
90003368:	d901      	bls.n	9000336e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
9000336a:	2303      	movs	r3, #3
9000336c:	e199      	b.n	900036a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
9000336e:	4b1e      	ldr	r3, [pc, #120]	; (900033e8 <HAL_RCC_OscConfig+0x280>)
90003370:	681b      	ldr	r3, [r3, #0]
90003372:	f003 0302 	and.w	r3, r3, #2
90003376:	2b00      	cmp	r3, #0
90003378:	d1f0      	bne.n	9000335c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000337a:	687b      	ldr	r3, [r7, #4]
9000337c:	681b      	ldr	r3, [r3, #0]
9000337e:	f003 0308 	and.w	r3, r3, #8
90003382:	2b00      	cmp	r3, #0
90003384:	d038      	beq.n	900033f8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
90003386:	687b      	ldr	r3, [r7, #4]
90003388:	695b      	ldr	r3, [r3, #20]
9000338a:	2b00      	cmp	r3, #0
9000338c:	d019      	beq.n	900033c2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
9000338e:	4b16      	ldr	r3, [pc, #88]	; (900033e8 <HAL_RCC_OscConfig+0x280>)
90003390:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90003392:	4a15      	ldr	r2, [pc, #84]	; (900033e8 <HAL_RCC_OscConfig+0x280>)
90003394:	f043 0301 	orr.w	r3, r3, #1
90003398:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
9000339a:	f7fe fac7 	bl	9000192c <HAL_GetTick>
9000339e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
900033a0:	e008      	b.n	900033b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
900033a2:	f7fe fac3 	bl	9000192c <HAL_GetTick>
900033a6:	4602      	mov	r2, r0
900033a8:	693b      	ldr	r3, [r7, #16]
900033aa:	1ad3      	subs	r3, r2, r3
900033ac:	2b02      	cmp	r3, #2
900033ae:	d901      	bls.n	900033b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
900033b0:	2303      	movs	r3, #3
900033b2:	e176      	b.n	900036a2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
900033b4:	4b0c      	ldr	r3, [pc, #48]	; (900033e8 <HAL_RCC_OscConfig+0x280>)
900033b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
900033b8:	f003 0302 	and.w	r3, r3, #2
900033bc:	2b00      	cmp	r3, #0
900033be:	d0f0      	beq.n	900033a2 <HAL_RCC_OscConfig+0x23a>
900033c0:	e01a      	b.n	900033f8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
900033c2:	4b09      	ldr	r3, [pc, #36]	; (900033e8 <HAL_RCC_OscConfig+0x280>)
900033c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
900033c6:	4a08      	ldr	r2, [pc, #32]	; (900033e8 <HAL_RCC_OscConfig+0x280>)
900033c8:	f023 0301 	bic.w	r3, r3, #1
900033cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
900033ce:	f7fe faad 	bl	9000192c <HAL_GetTick>
900033d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
900033d4:	e00a      	b.n	900033ec <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
900033d6:	f7fe faa9 	bl	9000192c <HAL_GetTick>
900033da:	4602      	mov	r2, r0
900033dc:	693b      	ldr	r3, [r7, #16]
900033de:	1ad3      	subs	r3, r2, r3
900033e0:	2b02      	cmp	r3, #2
900033e2:	d903      	bls.n	900033ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
900033e4:	2303      	movs	r3, #3
900033e6:	e15c      	b.n	900036a2 <HAL_RCC_OscConfig+0x53a>
900033e8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
900033ec:	4b91      	ldr	r3, [pc, #580]	; (90003634 <HAL_RCC_OscConfig+0x4cc>)
900033ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
900033f0:	f003 0302 	and.w	r3, r3, #2
900033f4:	2b00      	cmp	r3, #0
900033f6:	d1ee      	bne.n	900033d6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
900033f8:	687b      	ldr	r3, [r7, #4]
900033fa:	681b      	ldr	r3, [r3, #0]
900033fc:	f003 0304 	and.w	r3, r3, #4
90003400:	2b00      	cmp	r3, #0
90003402:	f000 80a4 	beq.w	9000354e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
90003406:	4b8b      	ldr	r3, [pc, #556]	; (90003634 <HAL_RCC_OscConfig+0x4cc>)
90003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000340a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
9000340e:	2b00      	cmp	r3, #0
90003410:	d10d      	bne.n	9000342e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
90003412:	4b88      	ldr	r3, [pc, #544]	; (90003634 <HAL_RCC_OscConfig+0x4cc>)
90003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90003416:	4a87      	ldr	r2, [pc, #540]	; (90003634 <HAL_RCC_OscConfig+0x4cc>)
90003418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
9000341c:	6413      	str	r3, [r2, #64]	; 0x40
9000341e:	4b85      	ldr	r3, [pc, #532]	; (90003634 <HAL_RCC_OscConfig+0x4cc>)
90003420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90003422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
90003426:	60bb      	str	r3, [r7, #8]
90003428:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
9000342a:	2301      	movs	r3, #1
9000342c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
9000342e:	4b82      	ldr	r3, [pc, #520]	; (90003638 <HAL_RCC_OscConfig+0x4d0>)
90003430:	681b      	ldr	r3, [r3, #0]
90003432:	f403 7380 	and.w	r3, r3, #256	; 0x100
90003436:	2b00      	cmp	r3, #0
90003438:	d118      	bne.n	9000346c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
9000343a:	4b7f      	ldr	r3, [pc, #508]	; (90003638 <HAL_RCC_OscConfig+0x4d0>)
9000343c:	681b      	ldr	r3, [r3, #0]
9000343e:	4a7e      	ldr	r2, [pc, #504]	; (90003638 <HAL_RCC_OscConfig+0x4d0>)
90003440:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90003444:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
90003446:	f7fe fa71 	bl	9000192c <HAL_GetTick>
9000344a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
9000344c:	e008      	b.n	90003460 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
9000344e:	f7fe fa6d 	bl	9000192c <HAL_GetTick>
90003452:	4602      	mov	r2, r0
90003454:	693b      	ldr	r3, [r7, #16]
90003456:	1ad3      	subs	r3, r2, r3
90003458:	2b64      	cmp	r3, #100	; 0x64
9000345a:	d901      	bls.n	90003460 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
9000345c:	2303      	movs	r3, #3
9000345e:	e120      	b.n	900036a2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
90003460:	4b75      	ldr	r3, [pc, #468]	; (90003638 <HAL_RCC_OscConfig+0x4d0>)
90003462:	681b      	ldr	r3, [r3, #0]
90003464:	f403 7380 	and.w	r3, r3, #256	; 0x100
90003468:	2b00      	cmp	r3, #0
9000346a:	d0f0      	beq.n	9000344e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000346c:	687b      	ldr	r3, [r7, #4]
9000346e:	689b      	ldr	r3, [r3, #8]
90003470:	2b01      	cmp	r3, #1
90003472:	d106      	bne.n	90003482 <HAL_RCC_OscConfig+0x31a>
90003474:	4b6f      	ldr	r3, [pc, #444]	; (90003634 <HAL_RCC_OscConfig+0x4cc>)
90003476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90003478:	4a6e      	ldr	r2, [pc, #440]	; (90003634 <HAL_RCC_OscConfig+0x4cc>)
9000347a:	f043 0301 	orr.w	r3, r3, #1
9000347e:	6713      	str	r3, [r2, #112]	; 0x70
90003480:	e02d      	b.n	900034de <HAL_RCC_OscConfig+0x376>
90003482:	687b      	ldr	r3, [r7, #4]
90003484:	689b      	ldr	r3, [r3, #8]
90003486:	2b00      	cmp	r3, #0
90003488:	d10c      	bne.n	900034a4 <HAL_RCC_OscConfig+0x33c>
9000348a:	4b6a      	ldr	r3, [pc, #424]	; (90003634 <HAL_RCC_OscConfig+0x4cc>)
9000348c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000348e:	4a69      	ldr	r2, [pc, #420]	; (90003634 <HAL_RCC_OscConfig+0x4cc>)
90003490:	f023 0301 	bic.w	r3, r3, #1
90003494:	6713      	str	r3, [r2, #112]	; 0x70
90003496:	4b67      	ldr	r3, [pc, #412]	; (90003634 <HAL_RCC_OscConfig+0x4cc>)
90003498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000349a:	4a66      	ldr	r2, [pc, #408]	; (90003634 <HAL_RCC_OscConfig+0x4cc>)
9000349c:	f023 0304 	bic.w	r3, r3, #4
900034a0:	6713      	str	r3, [r2, #112]	; 0x70
900034a2:	e01c      	b.n	900034de <HAL_RCC_OscConfig+0x376>
900034a4:	687b      	ldr	r3, [r7, #4]
900034a6:	689b      	ldr	r3, [r3, #8]
900034a8:	2b05      	cmp	r3, #5
900034aa:	d10c      	bne.n	900034c6 <HAL_RCC_OscConfig+0x35e>
900034ac:	4b61      	ldr	r3, [pc, #388]	; (90003634 <HAL_RCC_OscConfig+0x4cc>)
900034ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900034b0:	4a60      	ldr	r2, [pc, #384]	; (90003634 <HAL_RCC_OscConfig+0x4cc>)
900034b2:	f043 0304 	orr.w	r3, r3, #4
900034b6:	6713      	str	r3, [r2, #112]	; 0x70
900034b8:	4b5e      	ldr	r3, [pc, #376]	; (90003634 <HAL_RCC_OscConfig+0x4cc>)
900034ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900034bc:	4a5d      	ldr	r2, [pc, #372]	; (90003634 <HAL_RCC_OscConfig+0x4cc>)
900034be:	f043 0301 	orr.w	r3, r3, #1
900034c2:	6713      	str	r3, [r2, #112]	; 0x70
900034c4:	e00b      	b.n	900034de <HAL_RCC_OscConfig+0x376>
900034c6:	4b5b      	ldr	r3, [pc, #364]	; (90003634 <HAL_RCC_OscConfig+0x4cc>)
900034c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900034ca:	4a5a      	ldr	r2, [pc, #360]	; (90003634 <HAL_RCC_OscConfig+0x4cc>)
900034cc:	f023 0301 	bic.w	r3, r3, #1
900034d0:	6713      	str	r3, [r2, #112]	; 0x70
900034d2:	4b58      	ldr	r3, [pc, #352]	; (90003634 <HAL_RCC_OscConfig+0x4cc>)
900034d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900034d6:	4a57      	ldr	r2, [pc, #348]	; (90003634 <HAL_RCC_OscConfig+0x4cc>)
900034d8:	f023 0304 	bic.w	r3, r3, #4
900034dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
900034de:	687b      	ldr	r3, [r7, #4]
900034e0:	689b      	ldr	r3, [r3, #8]
900034e2:	2b00      	cmp	r3, #0
900034e4:	d015      	beq.n	90003512 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
900034e6:	f7fe fa21 	bl	9000192c <HAL_GetTick>
900034ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
900034ec:	e00a      	b.n	90003504 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
900034ee:	f7fe fa1d 	bl	9000192c <HAL_GetTick>
900034f2:	4602      	mov	r2, r0
900034f4:	693b      	ldr	r3, [r7, #16]
900034f6:	1ad3      	subs	r3, r2, r3
900034f8:	f241 3288 	movw	r2, #5000	; 0x1388
900034fc:	4293      	cmp	r3, r2
900034fe:	d901      	bls.n	90003504 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
90003500:	2303      	movs	r3, #3
90003502:	e0ce      	b.n	900036a2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
90003504:	4b4b      	ldr	r3, [pc, #300]	; (90003634 <HAL_RCC_OscConfig+0x4cc>)
90003506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90003508:	f003 0302 	and.w	r3, r3, #2
9000350c:	2b00      	cmp	r3, #0
9000350e:	d0ee      	beq.n	900034ee <HAL_RCC_OscConfig+0x386>
90003510:	e014      	b.n	9000353c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90003512:	f7fe fa0b 	bl	9000192c <HAL_GetTick>
90003516:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
90003518:	e00a      	b.n	90003530 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000351a:	f7fe fa07 	bl	9000192c <HAL_GetTick>
9000351e:	4602      	mov	r2, r0
90003520:	693b      	ldr	r3, [r7, #16]
90003522:	1ad3      	subs	r3, r2, r3
90003524:	f241 3288 	movw	r2, #5000	; 0x1388
90003528:	4293      	cmp	r3, r2
9000352a:	d901      	bls.n	90003530 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
9000352c:	2303      	movs	r3, #3
9000352e:	e0b8      	b.n	900036a2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
90003530:	4b40      	ldr	r3, [pc, #256]	; (90003634 <HAL_RCC_OscConfig+0x4cc>)
90003532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90003534:	f003 0302 	and.w	r3, r3, #2
90003538:	2b00      	cmp	r3, #0
9000353a:	d1ee      	bne.n	9000351a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
9000353c:	7dfb      	ldrb	r3, [r7, #23]
9000353e:	2b01      	cmp	r3, #1
90003540:	d105      	bne.n	9000354e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
90003542:	4b3c      	ldr	r3, [pc, #240]	; (90003634 <HAL_RCC_OscConfig+0x4cc>)
90003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90003546:	4a3b      	ldr	r2, [pc, #236]	; (90003634 <HAL_RCC_OscConfig+0x4cc>)
90003548:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
9000354c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
9000354e:	687b      	ldr	r3, [r7, #4]
90003550:	699b      	ldr	r3, [r3, #24]
90003552:	2b00      	cmp	r3, #0
90003554:	f000 80a4 	beq.w	900036a0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
90003558:	4b36      	ldr	r3, [pc, #216]	; (90003634 <HAL_RCC_OscConfig+0x4cc>)
9000355a:	689b      	ldr	r3, [r3, #8]
9000355c:	f003 030c 	and.w	r3, r3, #12
90003560:	2b08      	cmp	r3, #8
90003562:	d06b      	beq.n	9000363c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
90003564:	687b      	ldr	r3, [r7, #4]
90003566:	699b      	ldr	r3, [r3, #24]
90003568:	2b02      	cmp	r3, #2
9000356a:	d149      	bne.n	90003600 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
9000356c:	4b31      	ldr	r3, [pc, #196]	; (90003634 <HAL_RCC_OscConfig+0x4cc>)
9000356e:	681b      	ldr	r3, [r3, #0]
90003570:	4a30      	ldr	r2, [pc, #192]	; (90003634 <HAL_RCC_OscConfig+0x4cc>)
90003572:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
90003576:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90003578:	f7fe f9d8 	bl	9000192c <HAL_GetTick>
9000357c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
9000357e:	e008      	b.n	90003592 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90003580:	f7fe f9d4 	bl	9000192c <HAL_GetTick>
90003584:	4602      	mov	r2, r0
90003586:	693b      	ldr	r3, [r7, #16]
90003588:	1ad3      	subs	r3, r2, r3
9000358a:	2b02      	cmp	r3, #2
9000358c:	d901      	bls.n	90003592 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
9000358e:	2303      	movs	r3, #3
90003590:	e087      	b.n	900036a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
90003592:	4b28      	ldr	r3, [pc, #160]	; (90003634 <HAL_RCC_OscConfig+0x4cc>)
90003594:	681b      	ldr	r3, [r3, #0]
90003596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
9000359a:	2b00      	cmp	r3, #0
9000359c:	d1f0      	bne.n	90003580 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
9000359e:	687b      	ldr	r3, [r7, #4]
900035a0:	69da      	ldr	r2, [r3, #28]
900035a2:	687b      	ldr	r3, [r7, #4]
900035a4:	6a1b      	ldr	r3, [r3, #32]
900035a6:	431a      	orrs	r2, r3
900035a8:	687b      	ldr	r3, [r7, #4]
900035aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900035ac:	019b      	lsls	r3, r3, #6
900035ae:	431a      	orrs	r2, r3
900035b0:	687b      	ldr	r3, [r7, #4]
900035b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900035b4:	085b      	lsrs	r3, r3, #1
900035b6:	3b01      	subs	r3, #1
900035b8:	041b      	lsls	r3, r3, #16
900035ba:	431a      	orrs	r2, r3
900035bc:	687b      	ldr	r3, [r7, #4]
900035be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900035c0:	061b      	lsls	r3, r3, #24
900035c2:	4313      	orrs	r3, r2
900035c4:	4a1b      	ldr	r2, [pc, #108]	; (90003634 <HAL_RCC_OscConfig+0x4cc>)
900035c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
900035ca:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
900035cc:	4b19      	ldr	r3, [pc, #100]	; (90003634 <HAL_RCC_OscConfig+0x4cc>)
900035ce:	681b      	ldr	r3, [r3, #0]
900035d0:	4a18      	ldr	r2, [pc, #96]	; (90003634 <HAL_RCC_OscConfig+0x4cc>)
900035d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
900035d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900035d8:	f7fe f9a8 	bl	9000192c <HAL_GetTick>
900035dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
900035de:	e008      	b.n	900035f2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
900035e0:	f7fe f9a4 	bl	9000192c <HAL_GetTick>
900035e4:	4602      	mov	r2, r0
900035e6:	693b      	ldr	r3, [r7, #16]
900035e8:	1ad3      	subs	r3, r2, r3
900035ea:	2b02      	cmp	r3, #2
900035ec:	d901      	bls.n	900035f2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
900035ee:	2303      	movs	r3, #3
900035f0:	e057      	b.n	900036a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
900035f2:	4b10      	ldr	r3, [pc, #64]	; (90003634 <HAL_RCC_OscConfig+0x4cc>)
900035f4:	681b      	ldr	r3, [r3, #0]
900035f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
900035fa:	2b00      	cmp	r3, #0
900035fc:	d0f0      	beq.n	900035e0 <HAL_RCC_OscConfig+0x478>
900035fe:	e04f      	b.n	900036a0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
90003600:	4b0c      	ldr	r3, [pc, #48]	; (90003634 <HAL_RCC_OscConfig+0x4cc>)
90003602:	681b      	ldr	r3, [r3, #0]
90003604:	4a0b      	ldr	r2, [pc, #44]	; (90003634 <HAL_RCC_OscConfig+0x4cc>)
90003606:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
9000360a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
9000360c:	f7fe f98e 	bl	9000192c <HAL_GetTick>
90003610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
90003612:	e008      	b.n	90003626 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90003614:	f7fe f98a 	bl	9000192c <HAL_GetTick>
90003618:	4602      	mov	r2, r0
9000361a:	693b      	ldr	r3, [r7, #16]
9000361c:	1ad3      	subs	r3, r2, r3
9000361e:	2b02      	cmp	r3, #2
90003620:	d901      	bls.n	90003626 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
90003622:	2303      	movs	r3, #3
90003624:	e03d      	b.n	900036a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
90003626:	4b03      	ldr	r3, [pc, #12]	; (90003634 <HAL_RCC_OscConfig+0x4cc>)
90003628:	681b      	ldr	r3, [r3, #0]
9000362a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
9000362e:	2b00      	cmp	r3, #0
90003630:	d1f0      	bne.n	90003614 <HAL_RCC_OscConfig+0x4ac>
90003632:	e035      	b.n	900036a0 <HAL_RCC_OscConfig+0x538>
90003634:	40023800 	.word	0x40023800
90003638:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
9000363c:	4b1b      	ldr	r3, [pc, #108]	; (900036ac <HAL_RCC_OscConfig+0x544>)
9000363e:	685b      	ldr	r3, [r3, #4]
90003640:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90003642:	687b      	ldr	r3, [r7, #4]
90003644:	699b      	ldr	r3, [r3, #24]
90003646:	2b01      	cmp	r3, #1
90003648:	d028      	beq.n	9000369c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
9000364a:	68fb      	ldr	r3, [r7, #12]
9000364c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
90003650:	687b      	ldr	r3, [r7, #4]
90003652:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90003654:	429a      	cmp	r2, r3
90003656:	d121      	bne.n	9000369c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
90003658:	68fb      	ldr	r3, [r7, #12]
9000365a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
9000365e:	687b      	ldr	r3, [r7, #4]
90003660:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
90003662:	429a      	cmp	r2, r3
90003664:	d11a      	bne.n	9000369c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
90003666:	68fa      	ldr	r2, [r7, #12]
90003668:	f647 73c0 	movw	r3, #32704	; 0x7fc0
9000366c:	4013      	ands	r3, r2
9000366e:	687a      	ldr	r2, [r7, #4]
90003670:	6a52      	ldr	r2, [r2, #36]	; 0x24
90003672:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
90003674:	4293      	cmp	r3, r2
90003676:	d111      	bne.n	9000369c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
90003678:	68fb      	ldr	r3, [r7, #12]
9000367a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
9000367e:	687b      	ldr	r3, [r7, #4]
90003680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90003682:	085b      	lsrs	r3, r3, #1
90003684:	3b01      	subs	r3, #1
90003686:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
90003688:	429a      	cmp	r2, r3
9000368a:	d107      	bne.n	9000369c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
9000368c:	68fb      	ldr	r3, [r7, #12]
9000368e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
90003692:	687b      	ldr	r3, [r7, #4]
90003694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90003696:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
90003698:	429a      	cmp	r2, r3
9000369a:	d001      	beq.n	900036a0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
9000369c:	2301      	movs	r3, #1
9000369e:	e000      	b.n	900036a2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
900036a0:	2300      	movs	r3, #0
}
900036a2:	4618      	mov	r0, r3
900036a4:	3718      	adds	r7, #24
900036a6:	46bd      	mov	sp, r7
900036a8:	bd80      	pop	{r7, pc}
900036aa:	bf00      	nop
900036ac:	40023800 	.word	0x40023800

900036b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
900036b0:	b580      	push	{r7, lr}
900036b2:	b084      	sub	sp, #16
900036b4:	af00      	add	r7, sp, #0
900036b6:	6078      	str	r0, [r7, #4]
900036b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
900036ba:	2300      	movs	r3, #0
900036bc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
900036be:	687b      	ldr	r3, [r7, #4]
900036c0:	2b00      	cmp	r3, #0
900036c2:	d101      	bne.n	900036c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
900036c4:	2301      	movs	r3, #1
900036c6:	e0d0      	b.n	9000386a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
900036c8:	4b6a      	ldr	r3, [pc, #424]	; (90003874 <HAL_RCC_ClockConfig+0x1c4>)
900036ca:	681b      	ldr	r3, [r3, #0]
900036cc:	f003 030f 	and.w	r3, r3, #15
900036d0:	683a      	ldr	r2, [r7, #0]
900036d2:	429a      	cmp	r2, r3
900036d4:	d910      	bls.n	900036f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
900036d6:	4b67      	ldr	r3, [pc, #412]	; (90003874 <HAL_RCC_ClockConfig+0x1c4>)
900036d8:	681b      	ldr	r3, [r3, #0]
900036da:	f023 020f 	bic.w	r2, r3, #15
900036de:	4965      	ldr	r1, [pc, #404]	; (90003874 <HAL_RCC_ClockConfig+0x1c4>)
900036e0:	683b      	ldr	r3, [r7, #0]
900036e2:	4313      	orrs	r3, r2
900036e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
900036e6:	4b63      	ldr	r3, [pc, #396]	; (90003874 <HAL_RCC_ClockConfig+0x1c4>)
900036e8:	681b      	ldr	r3, [r3, #0]
900036ea:	f003 030f 	and.w	r3, r3, #15
900036ee:	683a      	ldr	r2, [r7, #0]
900036f0:	429a      	cmp	r2, r3
900036f2:	d001      	beq.n	900036f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
900036f4:	2301      	movs	r3, #1
900036f6:	e0b8      	b.n	9000386a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
900036f8:	687b      	ldr	r3, [r7, #4]
900036fa:	681b      	ldr	r3, [r3, #0]
900036fc:	f003 0302 	and.w	r3, r3, #2
90003700:	2b00      	cmp	r3, #0
90003702:	d020      	beq.n	90003746 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
90003704:	687b      	ldr	r3, [r7, #4]
90003706:	681b      	ldr	r3, [r3, #0]
90003708:	f003 0304 	and.w	r3, r3, #4
9000370c:	2b00      	cmp	r3, #0
9000370e:	d005      	beq.n	9000371c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
90003710:	4b59      	ldr	r3, [pc, #356]	; (90003878 <HAL_RCC_ClockConfig+0x1c8>)
90003712:	689b      	ldr	r3, [r3, #8]
90003714:	4a58      	ldr	r2, [pc, #352]	; (90003878 <HAL_RCC_ClockConfig+0x1c8>)
90003716:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
9000371a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
9000371c:	687b      	ldr	r3, [r7, #4]
9000371e:	681b      	ldr	r3, [r3, #0]
90003720:	f003 0308 	and.w	r3, r3, #8
90003724:	2b00      	cmp	r3, #0
90003726:	d005      	beq.n	90003734 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
90003728:	4b53      	ldr	r3, [pc, #332]	; (90003878 <HAL_RCC_ClockConfig+0x1c8>)
9000372a:	689b      	ldr	r3, [r3, #8]
9000372c:	4a52      	ldr	r2, [pc, #328]	; (90003878 <HAL_RCC_ClockConfig+0x1c8>)
9000372e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
90003732:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
90003734:	4b50      	ldr	r3, [pc, #320]	; (90003878 <HAL_RCC_ClockConfig+0x1c8>)
90003736:	689b      	ldr	r3, [r3, #8]
90003738:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
9000373c:	687b      	ldr	r3, [r7, #4]
9000373e:	689b      	ldr	r3, [r3, #8]
90003740:	494d      	ldr	r1, [pc, #308]	; (90003878 <HAL_RCC_ClockConfig+0x1c8>)
90003742:	4313      	orrs	r3, r2
90003744:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
90003746:	687b      	ldr	r3, [r7, #4]
90003748:	681b      	ldr	r3, [r3, #0]
9000374a:	f003 0301 	and.w	r3, r3, #1
9000374e:	2b00      	cmp	r3, #0
90003750:	d040      	beq.n	900037d4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
90003752:	687b      	ldr	r3, [r7, #4]
90003754:	685b      	ldr	r3, [r3, #4]
90003756:	2b01      	cmp	r3, #1
90003758:	d107      	bne.n	9000376a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
9000375a:	4b47      	ldr	r3, [pc, #284]	; (90003878 <HAL_RCC_ClockConfig+0x1c8>)
9000375c:	681b      	ldr	r3, [r3, #0]
9000375e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90003762:	2b00      	cmp	r3, #0
90003764:	d115      	bne.n	90003792 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
90003766:	2301      	movs	r3, #1
90003768:	e07f      	b.n	9000386a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
9000376a:	687b      	ldr	r3, [r7, #4]
9000376c:	685b      	ldr	r3, [r3, #4]
9000376e:	2b02      	cmp	r3, #2
90003770:	d107      	bne.n	90003782 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
90003772:	4b41      	ldr	r3, [pc, #260]	; (90003878 <HAL_RCC_ClockConfig+0x1c8>)
90003774:	681b      	ldr	r3, [r3, #0]
90003776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
9000377a:	2b00      	cmp	r3, #0
9000377c:	d109      	bne.n	90003792 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
9000377e:	2301      	movs	r3, #1
90003780:	e073      	b.n	9000386a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
90003782:	4b3d      	ldr	r3, [pc, #244]	; (90003878 <HAL_RCC_ClockConfig+0x1c8>)
90003784:	681b      	ldr	r3, [r3, #0]
90003786:	f003 0302 	and.w	r3, r3, #2
9000378a:	2b00      	cmp	r3, #0
9000378c:	d101      	bne.n	90003792 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
9000378e:	2301      	movs	r3, #1
90003790:	e06b      	b.n	9000386a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
90003792:	4b39      	ldr	r3, [pc, #228]	; (90003878 <HAL_RCC_ClockConfig+0x1c8>)
90003794:	689b      	ldr	r3, [r3, #8]
90003796:	f023 0203 	bic.w	r2, r3, #3
9000379a:	687b      	ldr	r3, [r7, #4]
9000379c:	685b      	ldr	r3, [r3, #4]
9000379e:	4936      	ldr	r1, [pc, #216]	; (90003878 <HAL_RCC_ClockConfig+0x1c8>)
900037a0:	4313      	orrs	r3, r2
900037a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
900037a4:	f7fe f8c2 	bl	9000192c <HAL_GetTick>
900037a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
900037aa:	e00a      	b.n	900037c2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
900037ac:	f7fe f8be 	bl	9000192c <HAL_GetTick>
900037b0:	4602      	mov	r2, r0
900037b2:	68fb      	ldr	r3, [r7, #12]
900037b4:	1ad3      	subs	r3, r2, r3
900037b6:	f241 3288 	movw	r2, #5000	; 0x1388
900037ba:	4293      	cmp	r3, r2
900037bc:	d901      	bls.n	900037c2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
900037be:	2303      	movs	r3, #3
900037c0:	e053      	b.n	9000386a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
900037c2:	4b2d      	ldr	r3, [pc, #180]	; (90003878 <HAL_RCC_ClockConfig+0x1c8>)
900037c4:	689b      	ldr	r3, [r3, #8]
900037c6:	f003 020c 	and.w	r2, r3, #12
900037ca:	687b      	ldr	r3, [r7, #4]
900037cc:	685b      	ldr	r3, [r3, #4]
900037ce:	009b      	lsls	r3, r3, #2
900037d0:	429a      	cmp	r2, r3
900037d2:	d1eb      	bne.n	900037ac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
900037d4:	4b27      	ldr	r3, [pc, #156]	; (90003874 <HAL_RCC_ClockConfig+0x1c4>)
900037d6:	681b      	ldr	r3, [r3, #0]
900037d8:	f003 030f 	and.w	r3, r3, #15
900037dc:	683a      	ldr	r2, [r7, #0]
900037de:	429a      	cmp	r2, r3
900037e0:	d210      	bcs.n	90003804 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
900037e2:	4b24      	ldr	r3, [pc, #144]	; (90003874 <HAL_RCC_ClockConfig+0x1c4>)
900037e4:	681b      	ldr	r3, [r3, #0]
900037e6:	f023 020f 	bic.w	r2, r3, #15
900037ea:	4922      	ldr	r1, [pc, #136]	; (90003874 <HAL_RCC_ClockConfig+0x1c4>)
900037ec:	683b      	ldr	r3, [r7, #0]
900037ee:	4313      	orrs	r3, r2
900037f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
900037f2:	4b20      	ldr	r3, [pc, #128]	; (90003874 <HAL_RCC_ClockConfig+0x1c4>)
900037f4:	681b      	ldr	r3, [r3, #0]
900037f6:	f003 030f 	and.w	r3, r3, #15
900037fa:	683a      	ldr	r2, [r7, #0]
900037fc:	429a      	cmp	r2, r3
900037fe:	d001      	beq.n	90003804 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
90003800:	2301      	movs	r3, #1
90003802:	e032      	b.n	9000386a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
90003804:	687b      	ldr	r3, [r7, #4]
90003806:	681b      	ldr	r3, [r3, #0]
90003808:	f003 0304 	and.w	r3, r3, #4
9000380c:	2b00      	cmp	r3, #0
9000380e:	d008      	beq.n	90003822 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
90003810:	4b19      	ldr	r3, [pc, #100]	; (90003878 <HAL_RCC_ClockConfig+0x1c8>)
90003812:	689b      	ldr	r3, [r3, #8]
90003814:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
90003818:	687b      	ldr	r3, [r7, #4]
9000381a:	68db      	ldr	r3, [r3, #12]
9000381c:	4916      	ldr	r1, [pc, #88]	; (90003878 <HAL_RCC_ClockConfig+0x1c8>)
9000381e:	4313      	orrs	r3, r2
90003820:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
90003822:	687b      	ldr	r3, [r7, #4]
90003824:	681b      	ldr	r3, [r3, #0]
90003826:	f003 0308 	and.w	r3, r3, #8
9000382a:	2b00      	cmp	r3, #0
9000382c:	d009      	beq.n	90003842 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
9000382e:	4b12      	ldr	r3, [pc, #72]	; (90003878 <HAL_RCC_ClockConfig+0x1c8>)
90003830:	689b      	ldr	r3, [r3, #8]
90003832:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
90003836:	687b      	ldr	r3, [r7, #4]
90003838:	691b      	ldr	r3, [r3, #16]
9000383a:	00db      	lsls	r3, r3, #3
9000383c:	490e      	ldr	r1, [pc, #56]	; (90003878 <HAL_RCC_ClockConfig+0x1c8>)
9000383e:	4313      	orrs	r3, r2
90003840:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
90003842:	f000 f821 	bl	90003888 <HAL_RCC_GetSysClockFreq>
90003846:	4602      	mov	r2, r0
90003848:	4b0b      	ldr	r3, [pc, #44]	; (90003878 <HAL_RCC_ClockConfig+0x1c8>)
9000384a:	689b      	ldr	r3, [r3, #8]
9000384c:	091b      	lsrs	r3, r3, #4
9000384e:	f003 030f 	and.w	r3, r3, #15
90003852:	490a      	ldr	r1, [pc, #40]	; (9000387c <HAL_RCC_ClockConfig+0x1cc>)
90003854:	5ccb      	ldrb	r3, [r1, r3]
90003856:	fa22 f303 	lsr.w	r3, r2, r3
9000385a:	4a09      	ldr	r2, [pc, #36]	; (90003880 <HAL_RCC_ClockConfig+0x1d0>)
9000385c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
9000385e:	4b09      	ldr	r3, [pc, #36]	; (90003884 <HAL_RCC_ClockConfig+0x1d4>)
90003860:	681b      	ldr	r3, [r3, #0]
90003862:	4618      	mov	r0, r3
90003864:	f7fe f81e 	bl	900018a4 <HAL_InitTick>

  return HAL_OK;
90003868:	2300      	movs	r3, #0
}
9000386a:	4618      	mov	r0, r3
9000386c:	3710      	adds	r7, #16
9000386e:	46bd      	mov	sp, r7
90003870:	bd80      	pop	{r7, pc}
90003872:	bf00      	nop
90003874:	40023c00 	.word	0x40023c00
90003878:	40023800 	.word	0x40023800
9000387c:	900146e0 	.word	0x900146e0
90003880:	20000010 	.word	0x20000010
90003884:	20000014 	.word	0x20000014

90003888 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
90003888:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
9000388c:	b090      	sub	sp, #64	; 0x40
9000388e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
90003890:	2300      	movs	r3, #0
90003892:	637b      	str	r3, [r7, #52]	; 0x34
90003894:	2300      	movs	r3, #0
90003896:	63fb      	str	r3, [r7, #60]	; 0x3c
90003898:	2300      	movs	r3, #0
9000389a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
9000389c:	2300      	movs	r3, #0
9000389e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
900038a0:	4b59      	ldr	r3, [pc, #356]	; (90003a08 <HAL_RCC_GetSysClockFreq+0x180>)
900038a2:	689b      	ldr	r3, [r3, #8]
900038a4:	f003 030c 	and.w	r3, r3, #12
900038a8:	2b08      	cmp	r3, #8
900038aa:	d00d      	beq.n	900038c8 <HAL_RCC_GetSysClockFreq+0x40>
900038ac:	2b08      	cmp	r3, #8
900038ae:	f200 80a1 	bhi.w	900039f4 <HAL_RCC_GetSysClockFreq+0x16c>
900038b2:	2b00      	cmp	r3, #0
900038b4:	d002      	beq.n	900038bc <HAL_RCC_GetSysClockFreq+0x34>
900038b6:	2b04      	cmp	r3, #4
900038b8:	d003      	beq.n	900038c2 <HAL_RCC_GetSysClockFreq+0x3a>
900038ba:	e09b      	b.n	900039f4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
900038bc:	4b53      	ldr	r3, [pc, #332]	; (90003a0c <HAL_RCC_GetSysClockFreq+0x184>)
900038be:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
900038c0:	e09b      	b.n	900039fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
900038c2:	4b53      	ldr	r3, [pc, #332]	; (90003a10 <HAL_RCC_GetSysClockFreq+0x188>)
900038c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
900038c6:	e098      	b.n	900039fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
900038c8:	4b4f      	ldr	r3, [pc, #316]	; (90003a08 <HAL_RCC_GetSysClockFreq+0x180>)
900038ca:	685b      	ldr	r3, [r3, #4]
900038cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
900038d0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
900038d2:	4b4d      	ldr	r3, [pc, #308]	; (90003a08 <HAL_RCC_GetSysClockFreq+0x180>)
900038d4:	685b      	ldr	r3, [r3, #4]
900038d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
900038da:	2b00      	cmp	r3, #0
900038dc:	d028      	beq.n	90003930 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
900038de:	4b4a      	ldr	r3, [pc, #296]	; (90003a08 <HAL_RCC_GetSysClockFreq+0x180>)
900038e0:	685b      	ldr	r3, [r3, #4]
900038e2:	099b      	lsrs	r3, r3, #6
900038e4:	2200      	movs	r2, #0
900038e6:	623b      	str	r3, [r7, #32]
900038e8:	627a      	str	r2, [r7, #36]	; 0x24
900038ea:	6a3b      	ldr	r3, [r7, #32]
900038ec:	f3c3 0008 	ubfx	r0, r3, #0, #9
900038f0:	2100      	movs	r1, #0
900038f2:	4b47      	ldr	r3, [pc, #284]	; (90003a10 <HAL_RCC_GetSysClockFreq+0x188>)
900038f4:	fb03 f201 	mul.w	r2, r3, r1
900038f8:	2300      	movs	r3, #0
900038fa:	fb00 f303 	mul.w	r3, r0, r3
900038fe:	4413      	add	r3, r2
90003900:	4a43      	ldr	r2, [pc, #268]	; (90003a10 <HAL_RCC_GetSysClockFreq+0x188>)
90003902:	fba0 1202 	umull	r1, r2, r0, r2
90003906:	62fa      	str	r2, [r7, #44]	; 0x2c
90003908:	460a      	mov	r2, r1
9000390a:	62ba      	str	r2, [r7, #40]	; 0x28
9000390c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
9000390e:	4413      	add	r3, r2
90003910:	62fb      	str	r3, [r7, #44]	; 0x2c
90003912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90003914:	2200      	movs	r2, #0
90003916:	61bb      	str	r3, [r7, #24]
90003918:	61fa      	str	r2, [r7, #28]
9000391a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
9000391e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
90003922:	f7fc fcdd 	bl	900002e0 <__aeabi_uldivmod>
90003926:	4602      	mov	r2, r0
90003928:	460b      	mov	r3, r1
9000392a:	4613      	mov	r3, r2
9000392c:	63fb      	str	r3, [r7, #60]	; 0x3c
9000392e:	e053      	b.n	900039d8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
90003930:	4b35      	ldr	r3, [pc, #212]	; (90003a08 <HAL_RCC_GetSysClockFreq+0x180>)
90003932:	685b      	ldr	r3, [r3, #4]
90003934:	099b      	lsrs	r3, r3, #6
90003936:	2200      	movs	r2, #0
90003938:	613b      	str	r3, [r7, #16]
9000393a:	617a      	str	r2, [r7, #20]
9000393c:	693b      	ldr	r3, [r7, #16]
9000393e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
90003942:	f04f 0b00 	mov.w	fp, #0
90003946:	4652      	mov	r2, sl
90003948:	465b      	mov	r3, fp
9000394a:	f04f 0000 	mov.w	r0, #0
9000394e:	f04f 0100 	mov.w	r1, #0
90003952:	0159      	lsls	r1, r3, #5
90003954:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
90003958:	0150      	lsls	r0, r2, #5
9000395a:	4602      	mov	r2, r0
9000395c:	460b      	mov	r3, r1
9000395e:	ebb2 080a 	subs.w	r8, r2, sl
90003962:	eb63 090b 	sbc.w	r9, r3, fp
90003966:	f04f 0200 	mov.w	r2, #0
9000396a:	f04f 0300 	mov.w	r3, #0
9000396e:	ea4f 1389 	mov.w	r3, r9, lsl #6
90003972:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
90003976:	ea4f 1288 	mov.w	r2, r8, lsl #6
9000397a:	ebb2 0408 	subs.w	r4, r2, r8
9000397e:	eb63 0509 	sbc.w	r5, r3, r9
90003982:	f04f 0200 	mov.w	r2, #0
90003986:	f04f 0300 	mov.w	r3, #0
9000398a:	00eb      	lsls	r3, r5, #3
9000398c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
90003990:	00e2      	lsls	r2, r4, #3
90003992:	4614      	mov	r4, r2
90003994:	461d      	mov	r5, r3
90003996:	eb14 030a 	adds.w	r3, r4, sl
9000399a:	603b      	str	r3, [r7, #0]
9000399c:	eb45 030b 	adc.w	r3, r5, fp
900039a0:	607b      	str	r3, [r7, #4]
900039a2:	f04f 0200 	mov.w	r2, #0
900039a6:	f04f 0300 	mov.w	r3, #0
900039aa:	e9d7 4500 	ldrd	r4, r5, [r7]
900039ae:	4629      	mov	r1, r5
900039b0:	028b      	lsls	r3, r1, #10
900039b2:	4621      	mov	r1, r4
900039b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
900039b8:	4621      	mov	r1, r4
900039ba:	028a      	lsls	r2, r1, #10
900039bc:	4610      	mov	r0, r2
900039be:	4619      	mov	r1, r3
900039c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
900039c2:	2200      	movs	r2, #0
900039c4:	60bb      	str	r3, [r7, #8]
900039c6:	60fa      	str	r2, [r7, #12]
900039c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
900039cc:	f7fc fc88 	bl	900002e0 <__aeabi_uldivmod>
900039d0:	4602      	mov	r2, r0
900039d2:	460b      	mov	r3, r1
900039d4:	4613      	mov	r3, r2
900039d6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
900039d8:	4b0b      	ldr	r3, [pc, #44]	; (90003a08 <HAL_RCC_GetSysClockFreq+0x180>)
900039da:	685b      	ldr	r3, [r3, #4]
900039dc:	0c1b      	lsrs	r3, r3, #16
900039de:	f003 0303 	and.w	r3, r3, #3
900039e2:	3301      	adds	r3, #1
900039e4:	005b      	lsls	r3, r3, #1
900039e6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
900039e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
900039ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900039ec:	fbb2 f3f3 	udiv	r3, r2, r3
900039f0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
900039f2:	e002      	b.n	900039fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
900039f4:	4b05      	ldr	r3, [pc, #20]	; (90003a0c <HAL_RCC_GetSysClockFreq+0x184>)
900039f6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
900039f8:	bf00      	nop
    }
  }
  return sysclockfreq;
900039fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
900039fc:	4618      	mov	r0, r3
900039fe:	3740      	adds	r7, #64	; 0x40
90003a00:	46bd      	mov	sp, r7
90003a02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
90003a06:	bf00      	nop
90003a08:	40023800 	.word	0x40023800
90003a0c:	00f42400 	.word	0x00f42400
90003a10:	017d7840 	.word	0x017d7840

90003a14 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
90003a14:	b480      	push	{r7}
90003a16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
90003a18:	4b03      	ldr	r3, [pc, #12]	; (90003a28 <HAL_RCC_GetHCLKFreq+0x14>)
90003a1a:	681b      	ldr	r3, [r3, #0]
}
90003a1c:	4618      	mov	r0, r3
90003a1e:	46bd      	mov	sp, r7
90003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
90003a24:	4770      	bx	lr
90003a26:	bf00      	nop
90003a28:	20000010 	.word	0x20000010

90003a2c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
90003a2c:	b580      	push	{r7, lr}
90003a2e:	b084      	sub	sp, #16
90003a30:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
90003a32:	4b8d      	ldr	r3, [pc, #564]	; (90003c68 <MX_LWIP_Init+0x23c>)
90003a34:	22c0      	movs	r2, #192	; 0xc0
90003a36:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
90003a38:	4b8b      	ldr	r3, [pc, #556]	; (90003c68 <MX_LWIP_Init+0x23c>)
90003a3a:	22a8      	movs	r2, #168	; 0xa8
90003a3c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
90003a3e:	4b8a      	ldr	r3, [pc, #552]	; (90003c68 <MX_LWIP_Init+0x23c>)
90003a40:	2200      	movs	r2, #0
90003a42:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 123;
90003a44:	4b88      	ldr	r3, [pc, #544]	; (90003c68 <MX_LWIP_Init+0x23c>)
90003a46:	227b      	movs	r2, #123	; 0x7b
90003a48:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
90003a4a:	4b88      	ldr	r3, [pc, #544]	; (90003c6c <MX_LWIP_Init+0x240>)
90003a4c:	22ff      	movs	r2, #255	; 0xff
90003a4e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
90003a50:	4b86      	ldr	r3, [pc, #536]	; (90003c6c <MX_LWIP_Init+0x240>)
90003a52:	22ff      	movs	r2, #255	; 0xff
90003a54:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
90003a56:	4b85      	ldr	r3, [pc, #532]	; (90003c6c <MX_LWIP_Init+0x240>)
90003a58:	22ff      	movs	r2, #255	; 0xff
90003a5a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
90003a5c:	4b83      	ldr	r3, [pc, #524]	; (90003c6c <MX_LWIP_Init+0x240>)
90003a5e:	2200      	movs	r2, #0
90003a60:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
90003a62:	4b83      	ldr	r3, [pc, #524]	; (90003c70 <MX_LWIP_Init+0x244>)
90003a64:	22c0      	movs	r2, #192	; 0xc0
90003a66:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
90003a68:	4b81      	ldr	r3, [pc, #516]	; (90003c70 <MX_LWIP_Init+0x244>)
90003a6a:	22a8      	movs	r2, #168	; 0xa8
90003a6c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
90003a6e:	4b80      	ldr	r3, [pc, #512]	; (90003c70 <MX_LWIP_Init+0x244>)
90003a70:	2200      	movs	r2, #0
90003a72:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
90003a74:	4b7e      	ldr	r3, [pc, #504]	; (90003c70 <MX_LWIP_Init+0x244>)
90003a76:	2201      	movs	r2, #1
90003a78:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
90003a7a:	f002 f8f1 	bl	90005c60 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
90003a7e:	4b7a      	ldr	r3, [pc, #488]	; (90003c68 <MX_LWIP_Init+0x23c>)
90003a80:	781b      	ldrb	r3, [r3, #0]
90003a82:	061a      	lsls	r2, r3, #24
90003a84:	4b78      	ldr	r3, [pc, #480]	; (90003c68 <MX_LWIP_Init+0x23c>)
90003a86:	785b      	ldrb	r3, [r3, #1]
90003a88:	041b      	lsls	r3, r3, #16
90003a8a:	431a      	orrs	r2, r3
90003a8c:	4b76      	ldr	r3, [pc, #472]	; (90003c68 <MX_LWIP_Init+0x23c>)
90003a8e:	789b      	ldrb	r3, [r3, #2]
90003a90:	021b      	lsls	r3, r3, #8
90003a92:	4313      	orrs	r3, r2
90003a94:	4a74      	ldr	r2, [pc, #464]	; (90003c68 <MX_LWIP_Init+0x23c>)
90003a96:	78d2      	ldrb	r2, [r2, #3]
90003a98:	4313      	orrs	r3, r2
90003a9a:	061a      	lsls	r2, r3, #24
90003a9c:	4b72      	ldr	r3, [pc, #456]	; (90003c68 <MX_LWIP_Init+0x23c>)
90003a9e:	781b      	ldrb	r3, [r3, #0]
90003aa0:	0619      	lsls	r1, r3, #24
90003aa2:	4b71      	ldr	r3, [pc, #452]	; (90003c68 <MX_LWIP_Init+0x23c>)
90003aa4:	785b      	ldrb	r3, [r3, #1]
90003aa6:	041b      	lsls	r3, r3, #16
90003aa8:	4319      	orrs	r1, r3
90003aaa:	4b6f      	ldr	r3, [pc, #444]	; (90003c68 <MX_LWIP_Init+0x23c>)
90003aac:	789b      	ldrb	r3, [r3, #2]
90003aae:	021b      	lsls	r3, r3, #8
90003ab0:	430b      	orrs	r3, r1
90003ab2:	496d      	ldr	r1, [pc, #436]	; (90003c68 <MX_LWIP_Init+0x23c>)
90003ab4:	78c9      	ldrb	r1, [r1, #3]
90003ab6:	430b      	orrs	r3, r1
90003ab8:	021b      	lsls	r3, r3, #8
90003aba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
90003abe:	431a      	orrs	r2, r3
90003ac0:	4b69      	ldr	r3, [pc, #420]	; (90003c68 <MX_LWIP_Init+0x23c>)
90003ac2:	781b      	ldrb	r3, [r3, #0]
90003ac4:	0619      	lsls	r1, r3, #24
90003ac6:	4b68      	ldr	r3, [pc, #416]	; (90003c68 <MX_LWIP_Init+0x23c>)
90003ac8:	785b      	ldrb	r3, [r3, #1]
90003aca:	041b      	lsls	r3, r3, #16
90003acc:	4319      	orrs	r1, r3
90003ace:	4b66      	ldr	r3, [pc, #408]	; (90003c68 <MX_LWIP_Init+0x23c>)
90003ad0:	789b      	ldrb	r3, [r3, #2]
90003ad2:	021b      	lsls	r3, r3, #8
90003ad4:	430b      	orrs	r3, r1
90003ad6:	4964      	ldr	r1, [pc, #400]	; (90003c68 <MX_LWIP_Init+0x23c>)
90003ad8:	78c9      	ldrb	r1, [r1, #3]
90003ada:	430b      	orrs	r3, r1
90003adc:	0a1b      	lsrs	r3, r3, #8
90003ade:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90003ae2:	431a      	orrs	r2, r3
90003ae4:	4b60      	ldr	r3, [pc, #384]	; (90003c68 <MX_LWIP_Init+0x23c>)
90003ae6:	781b      	ldrb	r3, [r3, #0]
90003ae8:	0619      	lsls	r1, r3, #24
90003aea:	4b5f      	ldr	r3, [pc, #380]	; (90003c68 <MX_LWIP_Init+0x23c>)
90003aec:	785b      	ldrb	r3, [r3, #1]
90003aee:	041b      	lsls	r3, r3, #16
90003af0:	4319      	orrs	r1, r3
90003af2:	4b5d      	ldr	r3, [pc, #372]	; (90003c68 <MX_LWIP_Init+0x23c>)
90003af4:	789b      	ldrb	r3, [r3, #2]
90003af6:	021b      	lsls	r3, r3, #8
90003af8:	430b      	orrs	r3, r1
90003afa:	495b      	ldr	r1, [pc, #364]	; (90003c68 <MX_LWIP_Init+0x23c>)
90003afc:	78c9      	ldrb	r1, [r1, #3]
90003afe:	430b      	orrs	r3, r1
90003b00:	0e1b      	lsrs	r3, r3, #24
90003b02:	4313      	orrs	r3, r2
90003b04:	4a5b      	ldr	r2, [pc, #364]	; (90003c74 <MX_LWIP_Init+0x248>)
90003b06:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
90003b08:	4b58      	ldr	r3, [pc, #352]	; (90003c6c <MX_LWIP_Init+0x240>)
90003b0a:	781b      	ldrb	r3, [r3, #0]
90003b0c:	061a      	lsls	r2, r3, #24
90003b0e:	4b57      	ldr	r3, [pc, #348]	; (90003c6c <MX_LWIP_Init+0x240>)
90003b10:	785b      	ldrb	r3, [r3, #1]
90003b12:	041b      	lsls	r3, r3, #16
90003b14:	431a      	orrs	r2, r3
90003b16:	4b55      	ldr	r3, [pc, #340]	; (90003c6c <MX_LWIP_Init+0x240>)
90003b18:	789b      	ldrb	r3, [r3, #2]
90003b1a:	021b      	lsls	r3, r3, #8
90003b1c:	4313      	orrs	r3, r2
90003b1e:	4a53      	ldr	r2, [pc, #332]	; (90003c6c <MX_LWIP_Init+0x240>)
90003b20:	78d2      	ldrb	r2, [r2, #3]
90003b22:	4313      	orrs	r3, r2
90003b24:	061a      	lsls	r2, r3, #24
90003b26:	4b51      	ldr	r3, [pc, #324]	; (90003c6c <MX_LWIP_Init+0x240>)
90003b28:	781b      	ldrb	r3, [r3, #0]
90003b2a:	0619      	lsls	r1, r3, #24
90003b2c:	4b4f      	ldr	r3, [pc, #316]	; (90003c6c <MX_LWIP_Init+0x240>)
90003b2e:	785b      	ldrb	r3, [r3, #1]
90003b30:	041b      	lsls	r3, r3, #16
90003b32:	4319      	orrs	r1, r3
90003b34:	4b4d      	ldr	r3, [pc, #308]	; (90003c6c <MX_LWIP_Init+0x240>)
90003b36:	789b      	ldrb	r3, [r3, #2]
90003b38:	021b      	lsls	r3, r3, #8
90003b3a:	430b      	orrs	r3, r1
90003b3c:	494b      	ldr	r1, [pc, #300]	; (90003c6c <MX_LWIP_Init+0x240>)
90003b3e:	78c9      	ldrb	r1, [r1, #3]
90003b40:	430b      	orrs	r3, r1
90003b42:	021b      	lsls	r3, r3, #8
90003b44:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
90003b48:	431a      	orrs	r2, r3
90003b4a:	4b48      	ldr	r3, [pc, #288]	; (90003c6c <MX_LWIP_Init+0x240>)
90003b4c:	781b      	ldrb	r3, [r3, #0]
90003b4e:	0619      	lsls	r1, r3, #24
90003b50:	4b46      	ldr	r3, [pc, #280]	; (90003c6c <MX_LWIP_Init+0x240>)
90003b52:	785b      	ldrb	r3, [r3, #1]
90003b54:	041b      	lsls	r3, r3, #16
90003b56:	4319      	orrs	r1, r3
90003b58:	4b44      	ldr	r3, [pc, #272]	; (90003c6c <MX_LWIP_Init+0x240>)
90003b5a:	789b      	ldrb	r3, [r3, #2]
90003b5c:	021b      	lsls	r3, r3, #8
90003b5e:	430b      	orrs	r3, r1
90003b60:	4942      	ldr	r1, [pc, #264]	; (90003c6c <MX_LWIP_Init+0x240>)
90003b62:	78c9      	ldrb	r1, [r1, #3]
90003b64:	430b      	orrs	r3, r1
90003b66:	0a1b      	lsrs	r3, r3, #8
90003b68:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90003b6c:	431a      	orrs	r2, r3
90003b6e:	4b3f      	ldr	r3, [pc, #252]	; (90003c6c <MX_LWIP_Init+0x240>)
90003b70:	781b      	ldrb	r3, [r3, #0]
90003b72:	0619      	lsls	r1, r3, #24
90003b74:	4b3d      	ldr	r3, [pc, #244]	; (90003c6c <MX_LWIP_Init+0x240>)
90003b76:	785b      	ldrb	r3, [r3, #1]
90003b78:	041b      	lsls	r3, r3, #16
90003b7a:	4319      	orrs	r1, r3
90003b7c:	4b3b      	ldr	r3, [pc, #236]	; (90003c6c <MX_LWIP_Init+0x240>)
90003b7e:	789b      	ldrb	r3, [r3, #2]
90003b80:	021b      	lsls	r3, r3, #8
90003b82:	430b      	orrs	r3, r1
90003b84:	4939      	ldr	r1, [pc, #228]	; (90003c6c <MX_LWIP_Init+0x240>)
90003b86:	78c9      	ldrb	r1, [r1, #3]
90003b88:	430b      	orrs	r3, r1
90003b8a:	0e1b      	lsrs	r3, r3, #24
90003b8c:	4313      	orrs	r3, r2
90003b8e:	4a3a      	ldr	r2, [pc, #232]	; (90003c78 <MX_LWIP_Init+0x24c>)
90003b90:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
90003b92:	4b37      	ldr	r3, [pc, #220]	; (90003c70 <MX_LWIP_Init+0x244>)
90003b94:	781b      	ldrb	r3, [r3, #0]
90003b96:	061a      	lsls	r2, r3, #24
90003b98:	4b35      	ldr	r3, [pc, #212]	; (90003c70 <MX_LWIP_Init+0x244>)
90003b9a:	785b      	ldrb	r3, [r3, #1]
90003b9c:	041b      	lsls	r3, r3, #16
90003b9e:	431a      	orrs	r2, r3
90003ba0:	4b33      	ldr	r3, [pc, #204]	; (90003c70 <MX_LWIP_Init+0x244>)
90003ba2:	789b      	ldrb	r3, [r3, #2]
90003ba4:	021b      	lsls	r3, r3, #8
90003ba6:	4313      	orrs	r3, r2
90003ba8:	4a31      	ldr	r2, [pc, #196]	; (90003c70 <MX_LWIP_Init+0x244>)
90003baa:	78d2      	ldrb	r2, [r2, #3]
90003bac:	4313      	orrs	r3, r2
90003bae:	061a      	lsls	r2, r3, #24
90003bb0:	4b2f      	ldr	r3, [pc, #188]	; (90003c70 <MX_LWIP_Init+0x244>)
90003bb2:	781b      	ldrb	r3, [r3, #0]
90003bb4:	0619      	lsls	r1, r3, #24
90003bb6:	4b2e      	ldr	r3, [pc, #184]	; (90003c70 <MX_LWIP_Init+0x244>)
90003bb8:	785b      	ldrb	r3, [r3, #1]
90003bba:	041b      	lsls	r3, r3, #16
90003bbc:	4319      	orrs	r1, r3
90003bbe:	4b2c      	ldr	r3, [pc, #176]	; (90003c70 <MX_LWIP_Init+0x244>)
90003bc0:	789b      	ldrb	r3, [r3, #2]
90003bc2:	021b      	lsls	r3, r3, #8
90003bc4:	430b      	orrs	r3, r1
90003bc6:	492a      	ldr	r1, [pc, #168]	; (90003c70 <MX_LWIP_Init+0x244>)
90003bc8:	78c9      	ldrb	r1, [r1, #3]
90003bca:	430b      	orrs	r3, r1
90003bcc:	021b      	lsls	r3, r3, #8
90003bce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
90003bd2:	431a      	orrs	r2, r3
90003bd4:	4b26      	ldr	r3, [pc, #152]	; (90003c70 <MX_LWIP_Init+0x244>)
90003bd6:	781b      	ldrb	r3, [r3, #0]
90003bd8:	0619      	lsls	r1, r3, #24
90003bda:	4b25      	ldr	r3, [pc, #148]	; (90003c70 <MX_LWIP_Init+0x244>)
90003bdc:	785b      	ldrb	r3, [r3, #1]
90003bde:	041b      	lsls	r3, r3, #16
90003be0:	4319      	orrs	r1, r3
90003be2:	4b23      	ldr	r3, [pc, #140]	; (90003c70 <MX_LWIP_Init+0x244>)
90003be4:	789b      	ldrb	r3, [r3, #2]
90003be6:	021b      	lsls	r3, r3, #8
90003be8:	430b      	orrs	r3, r1
90003bea:	4921      	ldr	r1, [pc, #132]	; (90003c70 <MX_LWIP_Init+0x244>)
90003bec:	78c9      	ldrb	r1, [r1, #3]
90003bee:	430b      	orrs	r3, r1
90003bf0:	0a1b      	lsrs	r3, r3, #8
90003bf2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90003bf6:	431a      	orrs	r2, r3
90003bf8:	4b1d      	ldr	r3, [pc, #116]	; (90003c70 <MX_LWIP_Init+0x244>)
90003bfa:	781b      	ldrb	r3, [r3, #0]
90003bfc:	0619      	lsls	r1, r3, #24
90003bfe:	4b1c      	ldr	r3, [pc, #112]	; (90003c70 <MX_LWIP_Init+0x244>)
90003c00:	785b      	ldrb	r3, [r3, #1]
90003c02:	041b      	lsls	r3, r3, #16
90003c04:	4319      	orrs	r1, r3
90003c06:	4b1a      	ldr	r3, [pc, #104]	; (90003c70 <MX_LWIP_Init+0x244>)
90003c08:	789b      	ldrb	r3, [r3, #2]
90003c0a:	021b      	lsls	r3, r3, #8
90003c0c:	430b      	orrs	r3, r1
90003c0e:	4918      	ldr	r1, [pc, #96]	; (90003c70 <MX_LWIP_Init+0x244>)
90003c10:	78c9      	ldrb	r1, [r1, #3]
90003c12:	430b      	orrs	r3, r1
90003c14:	0e1b      	lsrs	r3, r3, #24
90003c16:	4313      	orrs	r3, r2
90003c18:	4a18      	ldr	r2, [pc, #96]	; (90003c7c <MX_LWIP_Init+0x250>)
90003c1a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
90003c1c:	4b18      	ldr	r3, [pc, #96]	; (90003c80 <MX_LWIP_Init+0x254>)
90003c1e:	9302      	str	r3, [sp, #8]
90003c20:	4b18      	ldr	r3, [pc, #96]	; (90003c84 <MX_LWIP_Init+0x258>)
90003c22:	9301      	str	r3, [sp, #4]
90003c24:	2300      	movs	r3, #0
90003c26:	9300      	str	r3, [sp, #0]
90003c28:	4b14      	ldr	r3, [pc, #80]	; (90003c7c <MX_LWIP_Init+0x250>)
90003c2a:	4a13      	ldr	r2, [pc, #76]	; (90003c78 <MX_LWIP_Init+0x24c>)
90003c2c:	4911      	ldr	r1, [pc, #68]	; (90003c74 <MX_LWIP_Init+0x248>)
90003c2e:	4816      	ldr	r0, [pc, #88]	; (90003c88 <MX_LWIP_Init+0x25c>)
90003c30:	f002 fd02 	bl	90006638 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
90003c34:	4814      	ldr	r0, [pc, #80]	; (90003c88 <MX_LWIP_Init+0x25c>)
90003c36:	f002 feb1 	bl	9000699c <netif_set_default>

  if (netif_is_link_up(&gnetif))
90003c3a:	4b13      	ldr	r3, [pc, #76]	; (90003c88 <MX_LWIP_Init+0x25c>)
90003c3c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
90003c40:	089b      	lsrs	r3, r3, #2
90003c42:	f003 0301 	and.w	r3, r3, #1
90003c46:	b2db      	uxtb	r3, r3
90003c48:	2b00      	cmp	r3, #0
90003c4a:	d003      	beq.n	90003c54 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
90003c4c:	480e      	ldr	r0, [pc, #56]	; (90003c88 <MX_LWIP_Init+0x25c>)
90003c4e:	f002 feb5 	bl	900069bc <netif_set_up>
90003c52:	e002      	b.n	90003c5a <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
90003c54:	480c      	ldr	r0, [pc, #48]	; (90003c88 <MX_LWIP_Init+0x25c>)
90003c56:	f002 ff1d 	bl	90006a94 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
90003c5a:	490c      	ldr	r1, [pc, #48]	; (90003c8c <MX_LWIP_Init+0x260>)
90003c5c:	480a      	ldr	r0, [pc, #40]	; (90003c88 <MX_LWIP_Init+0x25c>)
90003c5e:	f002 ffaf 	bl	90006bc0 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
90003c62:	bf00      	nop
90003c64:	46bd      	mov	sp, r7
90003c66:	bd80      	pop	{r7, pc}
90003c68:	20000278 	.word	0x20000278
90003c6c:	2000027c 	.word	0x2000027c
90003c70:	20000280 	.word	0x20000280
90003c74:	2000026c 	.word	0x2000026c
90003c78:	20000270 	.word	0x20000270
90003c7c:	20000274 	.word	0x20000274
90003c80:	90010279 	.word	0x90010279
90003c84:	90003fa5 	.word	0x90003fa5
90003c88:	20000238 	.word	0x20000238
90003c8c:	90003c91 	.word	0x90003c91

90003c90 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
90003c90:	b480      	push	{r7}
90003c92:	b083      	sub	sp, #12
90003c94:	af00      	add	r7, sp, #0
90003c96:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
90003c98:	bf00      	nop
90003c9a:	370c      	adds	r7, #12
90003c9c:	46bd      	mov	sp, r7
90003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
90003ca2:	4770      	bx	lr

90003ca4 <SCB_InvalidateDCache_by_Addr>:
{
90003ca4:	b480      	push	{r7}
90003ca6:	b087      	sub	sp, #28
90003ca8:	af00      	add	r7, sp, #0
90003caa:	6078      	str	r0, [r7, #4]
90003cac:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
90003cae:	683b      	ldr	r3, [r7, #0]
90003cb0:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
90003cb2:	687b      	ldr	r3, [r7, #4]
90003cb4:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
90003cb6:	2320      	movs	r3, #32
90003cb8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
90003cba:	f3bf 8f4f 	dsb	sy
}
90003cbe:	bf00      	nop
    while (op_size > 0) {
90003cc0:	e00b      	b.n	90003cda <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
90003cc2:	4a0d      	ldr	r2, [pc, #52]	; (90003cf8 <SCB_InvalidateDCache_by_Addr+0x54>)
90003cc4:	693b      	ldr	r3, [r7, #16]
90003cc6:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
90003cca:	68fb      	ldr	r3, [r7, #12]
90003ccc:	693a      	ldr	r2, [r7, #16]
90003cce:	4413      	add	r3, r2
90003cd0:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
90003cd2:	697a      	ldr	r2, [r7, #20]
90003cd4:	68fb      	ldr	r3, [r7, #12]
90003cd6:	1ad3      	subs	r3, r2, r3
90003cd8:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
90003cda:	697b      	ldr	r3, [r7, #20]
90003cdc:	2b00      	cmp	r3, #0
90003cde:	dcf0      	bgt.n	90003cc2 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
90003ce0:	f3bf 8f4f 	dsb	sy
}
90003ce4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90003ce6:	f3bf 8f6f 	isb	sy
}
90003cea:	bf00      	nop
}
90003cec:	bf00      	nop
90003cee:	371c      	adds	r7, #28
90003cf0:	46bd      	mov	sp, r7
90003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
90003cf6:	4770      	bx	lr
90003cf8:	e000ed00 	.word	0xe000ed00

90003cfc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
90003cfc:	b580      	push	{r7, lr}
90003cfe:	b084      	sub	sp, #16
90003d00:	af00      	add	r7, sp, #0
90003d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
90003d04:	2300      	movs	r3, #0
90003d06:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
90003d08:	4b40      	ldr	r3, [pc, #256]	; (90003e0c <low_level_init+0x110>)
90003d0a:	4a41      	ldr	r2, [pc, #260]	; (90003e10 <low_level_init+0x114>)
90003d0c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
90003d0e:	2300      	movs	r3, #0
90003d10:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
90003d12:	2380      	movs	r3, #128	; 0x80
90003d14:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
90003d16:	23e1      	movs	r3, #225	; 0xe1
90003d18:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
90003d1a:	2300      	movs	r3, #0
90003d1c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
90003d1e:	2300      	movs	r3, #0
90003d20:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
90003d22:	2300      	movs	r3, #0
90003d24:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
90003d26:	4a39      	ldr	r2, [pc, #228]	; (90003e0c <low_level_init+0x110>)
90003d28:	f107 0308 	add.w	r3, r7, #8
90003d2c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
90003d2e:	4b37      	ldr	r3, [pc, #220]	; (90003e0c <low_level_init+0x110>)
90003d30:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
90003d34:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
90003d36:	4b35      	ldr	r3, [pc, #212]	; (90003e0c <low_level_init+0x110>)
90003d38:	4a36      	ldr	r2, [pc, #216]	; (90003e14 <low_level_init+0x118>)
90003d3a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
90003d3c:	4b33      	ldr	r3, [pc, #204]	; (90003e0c <low_level_init+0x110>)
90003d3e:	4a36      	ldr	r2, [pc, #216]	; (90003e18 <low_level_init+0x11c>)
90003d40:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
90003d42:	4b32      	ldr	r3, [pc, #200]	; (90003e0c <low_level_init+0x110>)
90003d44:	f44f 62c0 	mov.w	r2, #1536	; 0x600
90003d48:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
90003d4a:	4830      	ldr	r0, [pc, #192]	; (90003e0c <low_level_init+0x110>)
90003d4c:	f7fd ff04 	bl	90001b58 <HAL_ETH_Init>
90003d50:	4603      	mov	r3, r0
90003d52:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
90003d54:	2238      	movs	r2, #56	; 0x38
90003d56:	2100      	movs	r1, #0
90003d58:	4830      	ldr	r0, [pc, #192]	; (90003e1c <low_level_init+0x120>)
90003d5a:	f00c fbbf 	bl	900104dc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
90003d5e:	4b2f      	ldr	r3, [pc, #188]	; (90003e1c <low_level_init+0x120>)
90003d60:	2221      	movs	r2, #33	; 0x21
90003d62:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
90003d64:	4b2d      	ldr	r3, [pc, #180]	; (90003e1c <low_level_init+0x120>)
90003d66:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
90003d6a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
90003d6c:	4b2b      	ldr	r3, [pc, #172]	; (90003e1c <low_level_init+0x120>)
90003d6e:	2200      	movs	r2, #0
90003d70:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
90003d72:	482b      	ldr	r0, [pc, #172]	; (90003e20 <low_level_init+0x124>)
90003d74:	f002 fb28 	bl	900063c8 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
90003d78:	687b      	ldr	r3, [r7, #4]
90003d7a:	2206      	movs	r2, #6
90003d7c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
90003d80:	4b22      	ldr	r3, [pc, #136]	; (90003e0c <low_level_init+0x110>)
90003d82:	685b      	ldr	r3, [r3, #4]
90003d84:	781a      	ldrb	r2, [r3, #0]
90003d86:	687b      	ldr	r3, [r7, #4]
90003d88:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
90003d8c:	4b1f      	ldr	r3, [pc, #124]	; (90003e0c <low_level_init+0x110>)
90003d8e:	685b      	ldr	r3, [r3, #4]
90003d90:	785a      	ldrb	r2, [r3, #1]
90003d92:	687b      	ldr	r3, [r7, #4]
90003d94:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
90003d98:	4b1c      	ldr	r3, [pc, #112]	; (90003e0c <low_level_init+0x110>)
90003d9a:	685b      	ldr	r3, [r3, #4]
90003d9c:	789a      	ldrb	r2, [r3, #2]
90003d9e:	687b      	ldr	r3, [r7, #4]
90003da0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
90003da4:	4b19      	ldr	r3, [pc, #100]	; (90003e0c <low_level_init+0x110>)
90003da6:	685b      	ldr	r3, [r3, #4]
90003da8:	78da      	ldrb	r2, [r3, #3]
90003daa:	687b      	ldr	r3, [r7, #4]
90003dac:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
90003db0:	4b16      	ldr	r3, [pc, #88]	; (90003e0c <low_level_init+0x110>)
90003db2:	685b      	ldr	r3, [r3, #4]
90003db4:	791a      	ldrb	r2, [r3, #4]
90003db6:	687b      	ldr	r3, [r7, #4]
90003db8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
90003dbc:	4b13      	ldr	r3, [pc, #76]	; (90003e0c <low_level_init+0x110>)
90003dbe:	685b      	ldr	r3, [r3, #4]
90003dc0:	795a      	ldrb	r2, [r3, #5]
90003dc2:	687b      	ldr	r3, [r7, #4]
90003dc4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
90003dc8:	687b      	ldr	r3, [r7, #4]
90003dca:	f240 52dc 	movw	r2, #1500	; 0x5dc
90003dce:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
90003dd0:	687b      	ldr	r3, [r7, #4]
90003dd2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
90003dd6:	f043 030a 	orr.w	r3, r3, #10
90003dda:	b2da      	uxtb	r2, r3
90003ddc:	687b      	ldr	r3, [r7, #4]
90003dde:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
90003de2:	4910      	ldr	r1, [pc, #64]	; (90003e24 <low_level_init+0x128>)
90003de4:	4810      	ldr	r0, [pc, #64]	; (90003e28 <low_level_init+0x12c>)
90003de6:	f7fd fbee 	bl	900015c6 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
90003dea:	480f      	ldr	r0, [pc, #60]	; (90003e28 <low_level_init+0x12c>)
90003dec:	f7fd fc1d 	bl	9000162a <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
90003df0:	7bfb      	ldrb	r3, [r7, #15]
90003df2:	2b00      	cmp	r3, #0
90003df4:	d103      	bne.n	90003dfe <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
90003df6:	6878      	ldr	r0, [r7, #4]
90003df8:	f000 fa0a 	bl	90004210 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
90003dfc:	e001      	b.n	90003e02 <low_level_init+0x106>
    Error_Handler();
90003dfe:	f7fd fa81 	bl	90001304 <Error_Handler>
}
90003e02:	bf00      	nop
90003e04:	3710      	adds	r7, #16
90003e06:	46bd      	mov	sp, r7
90003e08:	bd80      	pop	{r7, pc}
90003e0a:	bf00      	nop
90003e0c:	20004c10 	.word	0x20004c10
90003e10:	40028000 	.word	0x40028000
90003e14:	20000140 	.word	0x20000140
90003e18:	200000a0 	.word	0x200000a0
90003e1c:	20004cc0 	.word	0x20004cc0
90003e20:	900146f0 	.word	0x900146f0
90003e24:	2000001c 	.word	0x2000001c
90003e28:	20004cf8 	.word	0x20004cf8

90003e2c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
90003e2c:	b580      	push	{r7, lr}
90003e2e:	b092      	sub	sp, #72	; 0x48
90003e30:	af00      	add	r7, sp, #0
90003e32:	6078      	str	r0, [r7, #4]
90003e34:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
90003e36:	2300      	movs	r3, #0
90003e38:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
90003e3a:	2300      	movs	r3, #0
90003e3c:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
90003e3e:	2300      	movs	r3, #0
90003e40:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
90003e44:	f107 030c 	add.w	r3, r7, #12
90003e48:	2230      	movs	r2, #48	; 0x30
90003e4a:	2100      	movs	r1, #0
90003e4c:	4618      	mov	r0, r3
90003e4e:	f00c fb45 	bl	900104dc <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
90003e52:	f107 030c 	add.w	r3, r7, #12
90003e56:	2230      	movs	r2, #48	; 0x30
90003e58:	2100      	movs	r1, #0
90003e5a:	4618      	mov	r0, r3
90003e5c:	f00c fb3e 	bl	900104dc <memset>

  for(q = p; q != NULL; q = q->next)
90003e60:	683b      	ldr	r3, [r7, #0]
90003e62:	643b      	str	r3, [r7, #64]	; 0x40
90003e64:	e045      	b.n	90003ef2 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
90003e66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
90003e68:	2b03      	cmp	r3, #3
90003e6a:	d902      	bls.n	90003e72 <low_level_output+0x46>
      return ERR_IF;
90003e6c:	f06f 030b 	mvn.w	r3, #11
90003e70:	e055      	b.n	90003f1e <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
90003e72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
90003e74:	6859      	ldr	r1, [r3, #4]
90003e76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
90003e78:	4613      	mov	r3, r2
90003e7a:	005b      	lsls	r3, r3, #1
90003e7c:	4413      	add	r3, r2
90003e7e:	009b      	lsls	r3, r3, #2
90003e80:	3348      	adds	r3, #72	; 0x48
90003e82:	443b      	add	r3, r7
90003e84:	3b3c      	subs	r3, #60	; 0x3c
90003e86:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
90003e88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
90003e8a:	895b      	ldrh	r3, [r3, #10]
90003e8c:	4619      	mov	r1, r3
90003e8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
90003e90:	4613      	mov	r3, r2
90003e92:	005b      	lsls	r3, r3, #1
90003e94:	4413      	add	r3, r2
90003e96:	009b      	lsls	r3, r3, #2
90003e98:	3348      	adds	r3, #72	; 0x48
90003e9a:	443b      	add	r3, r7
90003e9c:	3b38      	subs	r3, #56	; 0x38
90003e9e:	6019      	str	r1, [r3, #0]

    if(i>0)
90003ea0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
90003ea2:	2b00      	cmp	r3, #0
90003ea4:	d011      	beq.n	90003eca <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
90003ea6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
90003ea8:	1e5a      	subs	r2, r3, #1
90003eaa:	f107 000c 	add.w	r0, r7, #12
90003eae:	6c79      	ldr	r1, [r7, #68]	; 0x44
90003eb0:	460b      	mov	r3, r1
90003eb2:	005b      	lsls	r3, r3, #1
90003eb4:	440b      	add	r3, r1
90003eb6:	009b      	lsls	r3, r3, #2
90003eb8:	18c1      	adds	r1, r0, r3
90003eba:	4613      	mov	r3, r2
90003ebc:	005b      	lsls	r3, r3, #1
90003ebe:	4413      	add	r3, r2
90003ec0:	009b      	lsls	r3, r3, #2
90003ec2:	3348      	adds	r3, #72	; 0x48
90003ec4:	443b      	add	r3, r7
90003ec6:	3b34      	subs	r3, #52	; 0x34
90003ec8:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
90003eca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
90003ecc:	681b      	ldr	r3, [r3, #0]
90003ece:	2b00      	cmp	r3, #0
90003ed0:	d109      	bne.n	90003ee6 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
90003ed2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
90003ed4:	4613      	mov	r3, r2
90003ed6:	005b      	lsls	r3, r3, #1
90003ed8:	4413      	add	r3, r2
90003eda:	009b      	lsls	r3, r3, #2
90003edc:	3348      	adds	r3, #72	; 0x48
90003ede:	443b      	add	r3, r7
90003ee0:	3b34      	subs	r3, #52	; 0x34
90003ee2:	2200      	movs	r2, #0
90003ee4:	601a      	str	r2, [r3, #0]
    }

    i++;
90003ee6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
90003ee8:	3301      	adds	r3, #1
90003eea:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
90003eec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
90003eee:	681b      	ldr	r3, [r3, #0]
90003ef0:	643b      	str	r3, [r7, #64]	; 0x40
90003ef2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
90003ef4:	2b00      	cmp	r3, #0
90003ef6:	d1b6      	bne.n	90003e66 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
90003ef8:	683b      	ldr	r3, [r7, #0]
90003efa:	891b      	ldrh	r3, [r3, #8]
90003efc:	461a      	mov	r2, r3
90003efe:	4b0a      	ldr	r3, [pc, #40]	; (90003f28 <low_level_output+0xfc>)
90003f00:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
90003f02:	4a09      	ldr	r2, [pc, #36]	; (90003f28 <low_level_output+0xfc>)
90003f04:	f107 030c 	add.w	r3, r7, #12
90003f08:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
90003f0a:	4a07      	ldr	r2, [pc, #28]	; (90003f28 <low_level_output+0xfc>)
90003f0c:	683b      	ldr	r3, [r7, #0]
90003f0e:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
90003f10:	2214      	movs	r2, #20
90003f12:	4905      	ldr	r1, [pc, #20]	; (90003f28 <low_level_output+0xfc>)
90003f14:	4805      	ldr	r0, [pc, #20]	; (90003f2c <low_level_output+0x100>)
90003f16:	f7fd ff53 	bl	90001dc0 <HAL_ETH_Transmit>

  return errval;
90003f1a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
90003f1e:	4618      	mov	r0, r3
90003f20:	3748      	adds	r7, #72	; 0x48
90003f22:	46bd      	mov	sp, r7
90003f24:	bd80      	pop	{r7, pc}
90003f26:	bf00      	nop
90003f28:	20004cc0 	.word	0x20004cc0
90003f2c:	20004c10 	.word	0x20004c10

90003f30 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
90003f30:	b580      	push	{r7, lr}
90003f32:	b084      	sub	sp, #16
90003f34:	af00      	add	r7, sp, #0
90003f36:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
90003f38:	2300      	movs	r3, #0
90003f3a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
90003f3c:	4b07      	ldr	r3, [pc, #28]	; (90003f5c <low_level_input+0x2c>)
90003f3e:	781b      	ldrb	r3, [r3, #0]
90003f40:	2b00      	cmp	r3, #0
90003f42:	d105      	bne.n	90003f50 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
90003f44:	f107 030c 	add.w	r3, r7, #12
90003f48:	4619      	mov	r1, r3
90003f4a:	4805      	ldr	r0, [pc, #20]	; (90003f60 <low_level_input+0x30>)
90003f4c:	f7fd ffcc 	bl	90001ee8 <HAL_ETH_ReadData>
  }

  return p;
90003f50:	68fb      	ldr	r3, [r7, #12]
}
90003f52:	4618      	mov	r0, r3
90003f54:	3710      	adds	r7, #16
90003f56:	46bd      	mov	sp, r7
90003f58:	bd80      	pop	{r7, pc}
90003f5a:	bf00      	nop
90003f5c:	20004c0c 	.word	0x20004c0c
90003f60:	20004c10 	.word	0x20004c10

90003f64 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
90003f64:	b580      	push	{r7, lr}
90003f66:	b084      	sub	sp, #16
90003f68:	af00      	add	r7, sp, #0
90003f6a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
90003f6c:	2300      	movs	r3, #0
90003f6e:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
90003f70:	6878      	ldr	r0, [r7, #4]
90003f72:	f7ff ffdd 	bl	90003f30 <low_level_input>
90003f76:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
90003f78:	68fb      	ldr	r3, [r7, #12]
90003f7a:	2b00      	cmp	r3, #0
90003f7c:	d00a      	beq.n	90003f94 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
90003f7e:	687b      	ldr	r3, [r7, #4]
90003f80:	691b      	ldr	r3, [r3, #16]
90003f82:	6879      	ldr	r1, [r7, #4]
90003f84:	68f8      	ldr	r0, [r7, #12]
90003f86:	4798      	blx	r3
90003f88:	4603      	mov	r3, r0
90003f8a:	2b00      	cmp	r3, #0
90003f8c:	d002      	beq.n	90003f94 <ethernetif_input+0x30>
      {
        pbuf_free(p);
90003f8e:	68f8      	ldr	r0, [r7, #12]
90003f90:	f003 f996 	bl	900072c0 <pbuf_free>
      }
    }
  } while(p!=NULL);
90003f94:	68fb      	ldr	r3, [r7, #12]
90003f96:	2b00      	cmp	r3, #0
90003f98:	d1ea      	bne.n	90003f70 <ethernetif_input+0xc>
}
90003f9a:	bf00      	nop
90003f9c:	bf00      	nop
90003f9e:	3710      	adds	r7, #16
90003fa0:	46bd      	mov	sp, r7
90003fa2:	bd80      	pop	{r7, pc}

90003fa4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
90003fa4:	b580      	push	{r7, lr}
90003fa6:	b082      	sub	sp, #8
90003fa8:	af00      	add	r7, sp, #0
90003faa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
90003fac:	687b      	ldr	r3, [r7, #4]
90003fae:	2b00      	cmp	r3, #0
90003fb0:	d106      	bne.n	90003fc0 <ethernetif_init+0x1c>
90003fb2:	4b0e      	ldr	r3, [pc, #56]	; (90003fec <ethernetif_init+0x48>)
90003fb4:	f44f 72bd 	mov.w	r2, #378	; 0x17a
90003fb8:	490d      	ldr	r1, [pc, #52]	; (90003ff0 <ethernetif_init+0x4c>)
90003fba:	480e      	ldr	r0, [pc, #56]	; (90003ff4 <ethernetif_init+0x50>)
90003fbc:	f00c fa96 	bl	900104ec <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
90003fc0:	687b      	ldr	r3, [r7, #4]
90003fc2:	2273      	movs	r2, #115	; 0x73
90003fc4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
90003fc8:	687b      	ldr	r3, [r7, #4]
90003fca:	2274      	movs	r2, #116	; 0x74
90003fcc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
90003fd0:	687b      	ldr	r3, [r7, #4]
90003fd2:	4a09      	ldr	r2, [pc, #36]	; (90003ff8 <ethernetif_init+0x54>)
90003fd4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
90003fd6:	687b      	ldr	r3, [r7, #4]
90003fd8:	4a08      	ldr	r2, [pc, #32]	; (90003ffc <ethernetif_init+0x58>)
90003fda:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
90003fdc:	6878      	ldr	r0, [r7, #4]
90003fde:	f7ff fe8d 	bl	90003cfc <low_level_init>

  return ERR_OK;
90003fe2:	2300      	movs	r3, #0
}
90003fe4:	4618      	mov	r0, r3
90003fe6:	3708      	adds	r7, #8
90003fe8:	46bd      	mov	sp, r7
90003fea:	bd80      	pop	{r7, pc}
90003fec:	900119d8 	.word	0x900119d8
90003ff0:	900119f4 	.word	0x900119f4
90003ff4:	90011a04 	.word	0x90011a04
90003ff8:	9000e731 	.word	0x9000e731
90003ffc:	90003e2d 	.word	0x90003e2d

90004000 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
90004000:	b580      	push	{r7, lr}
90004002:	b084      	sub	sp, #16
90004004:	af00      	add	r7, sp, #0
90004006:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
90004008:	687b      	ldr	r3, [r7, #4]
9000400a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
9000400c:	68f9      	ldr	r1, [r7, #12]
9000400e:	4807      	ldr	r0, [pc, #28]	; (9000402c <pbuf_free_custom+0x2c>)
90004010:	f002 fabc 	bl	9000658c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
90004014:	4b06      	ldr	r3, [pc, #24]	; (90004030 <pbuf_free_custom+0x30>)
90004016:	781b      	ldrb	r3, [r3, #0]
90004018:	2b01      	cmp	r3, #1
9000401a:	d102      	bne.n	90004022 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
9000401c:	4b04      	ldr	r3, [pc, #16]	; (90004030 <pbuf_free_custom+0x30>)
9000401e:	2200      	movs	r2, #0
90004020:	701a      	strb	r2, [r3, #0]
  }
}
90004022:	bf00      	nop
90004024:	3710      	adds	r7, #16
90004026:	46bd      	mov	sp, r7
90004028:	bd80      	pop	{r7, pc}
9000402a:	bf00      	nop
9000402c:	900146f0 	.word	0x900146f0
90004030:	20004c0c 	.word	0x20004c0c

90004034 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
90004034:	b580      	push	{r7, lr}
90004036:	af00      	add	r7, sp, #0
  return HAL_GetTick();
90004038:	f7fd fc78 	bl	9000192c <HAL_GetTick>
9000403c:	4603      	mov	r3, r0
}
9000403e:	4618      	mov	r0, r3
90004040:	bd80      	pop	{r7, pc}
	...

90004044 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
90004044:	b580      	push	{r7, lr}
90004046:	b08e      	sub	sp, #56	; 0x38
90004048:	af00      	add	r7, sp, #0
9000404a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
9000404c:	f107 0324 	add.w	r3, r7, #36	; 0x24
90004050:	2200      	movs	r2, #0
90004052:	601a      	str	r2, [r3, #0]
90004054:	605a      	str	r2, [r3, #4]
90004056:	609a      	str	r2, [r3, #8]
90004058:	60da      	str	r2, [r3, #12]
9000405a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
9000405c:	687b      	ldr	r3, [r7, #4]
9000405e:	681b      	ldr	r3, [r3, #0]
90004060:	4a3f      	ldr	r2, [pc, #252]	; (90004160 <HAL_ETH_MspInit+0x11c>)
90004062:	4293      	cmp	r3, r2
90004064:	d178      	bne.n	90004158 <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
90004066:	4b3f      	ldr	r3, [pc, #252]	; (90004164 <HAL_ETH_MspInit+0x120>)
90004068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000406a:	4a3e      	ldr	r2, [pc, #248]	; (90004164 <HAL_ETH_MspInit+0x120>)
9000406c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
90004070:	6313      	str	r3, [r2, #48]	; 0x30
90004072:	4b3c      	ldr	r3, [pc, #240]	; (90004164 <HAL_ETH_MspInit+0x120>)
90004074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90004076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
9000407a:	623b      	str	r3, [r7, #32]
9000407c:	6a3b      	ldr	r3, [r7, #32]
9000407e:	4b39      	ldr	r3, [pc, #228]	; (90004164 <HAL_ETH_MspInit+0x120>)
90004080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90004082:	4a38      	ldr	r2, [pc, #224]	; (90004164 <HAL_ETH_MspInit+0x120>)
90004084:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
90004088:	6313      	str	r3, [r2, #48]	; 0x30
9000408a:	4b36      	ldr	r3, [pc, #216]	; (90004164 <HAL_ETH_MspInit+0x120>)
9000408c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000408e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
90004092:	61fb      	str	r3, [r7, #28]
90004094:	69fb      	ldr	r3, [r7, #28]
90004096:	4b33      	ldr	r3, [pc, #204]	; (90004164 <HAL_ETH_MspInit+0x120>)
90004098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000409a:	4a32      	ldr	r2, [pc, #200]	; (90004164 <HAL_ETH_MspInit+0x120>)
9000409c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
900040a0:	6313      	str	r3, [r2, #48]	; 0x30
900040a2:	4b30      	ldr	r3, [pc, #192]	; (90004164 <HAL_ETH_MspInit+0x120>)
900040a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900040a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
900040aa:	61bb      	str	r3, [r7, #24]
900040ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
900040ae:	4b2d      	ldr	r3, [pc, #180]	; (90004164 <HAL_ETH_MspInit+0x120>)
900040b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900040b2:	4a2c      	ldr	r2, [pc, #176]	; (90004164 <HAL_ETH_MspInit+0x120>)
900040b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
900040b8:	6313      	str	r3, [r2, #48]	; 0x30
900040ba:	4b2a      	ldr	r3, [pc, #168]	; (90004164 <HAL_ETH_MspInit+0x120>)
900040bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900040be:	f003 0340 	and.w	r3, r3, #64	; 0x40
900040c2:	617b      	str	r3, [r7, #20]
900040c4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
900040c6:	4b27      	ldr	r3, [pc, #156]	; (90004164 <HAL_ETH_MspInit+0x120>)
900040c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900040ca:	4a26      	ldr	r2, [pc, #152]	; (90004164 <HAL_ETH_MspInit+0x120>)
900040cc:	f043 0304 	orr.w	r3, r3, #4
900040d0:	6313      	str	r3, [r2, #48]	; 0x30
900040d2:	4b24      	ldr	r3, [pc, #144]	; (90004164 <HAL_ETH_MspInit+0x120>)
900040d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900040d6:	f003 0304 	and.w	r3, r3, #4
900040da:	613b      	str	r3, [r7, #16]
900040dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
900040de:	4b21      	ldr	r3, [pc, #132]	; (90004164 <HAL_ETH_MspInit+0x120>)
900040e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900040e2:	4a20      	ldr	r2, [pc, #128]	; (90004164 <HAL_ETH_MspInit+0x120>)
900040e4:	f043 0301 	orr.w	r3, r3, #1
900040e8:	6313      	str	r3, [r2, #48]	; 0x30
900040ea:	4b1e      	ldr	r3, [pc, #120]	; (90004164 <HAL_ETH_MspInit+0x120>)
900040ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900040ee:	f003 0301 	and.w	r3, r3, #1
900040f2:	60fb      	str	r3, [r7, #12]
900040f4:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
900040f6:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
900040fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
900040fc:	2302      	movs	r3, #2
900040fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90004100:	2300      	movs	r3, #0
90004102:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90004104:	2303      	movs	r3, #3
90004106:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
90004108:	230b      	movs	r3, #11
9000410a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
9000410c:	f107 0324 	add.w	r3, r7, #36	; 0x24
90004110:	4619      	mov	r1, r3
90004112:	4815      	ldr	r0, [pc, #84]	; (90004168 <HAL_ETH_MspInit+0x124>)
90004114:	f7fe fe12 	bl	90002d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
90004118:	2332      	movs	r3, #50	; 0x32
9000411a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000411c:	2302      	movs	r3, #2
9000411e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90004120:	2300      	movs	r3, #0
90004122:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90004124:	2303      	movs	r3, #3
90004126:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
90004128:	230b      	movs	r3, #11
9000412a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
9000412c:	f107 0324 	add.w	r3, r7, #36	; 0x24
90004130:	4619      	mov	r1, r3
90004132:	480e      	ldr	r0, [pc, #56]	; (9000416c <HAL_ETH_MspInit+0x128>)
90004134:	f7fe fe02 	bl	90002d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
90004138:	2386      	movs	r3, #134	; 0x86
9000413a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000413c:	2302      	movs	r3, #2
9000413e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90004140:	2300      	movs	r3, #0
90004142:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90004144:	2303      	movs	r3, #3
90004146:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
90004148:	230b      	movs	r3, #11
9000414a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
9000414c:	f107 0324 	add.w	r3, r7, #36	; 0x24
90004150:	4619      	mov	r1, r3
90004152:	4807      	ldr	r0, [pc, #28]	; (90004170 <HAL_ETH_MspInit+0x12c>)
90004154:	f7fe fdf2 	bl	90002d3c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
90004158:	bf00      	nop
9000415a:	3738      	adds	r7, #56	; 0x38
9000415c:	46bd      	mov	sp, r7
9000415e:	bd80      	pop	{r7, pc}
90004160:	40028000 	.word	0x40028000
90004164:	40023800 	.word	0x40023800
90004168:	40021800 	.word	0x40021800
9000416c:	40020800 	.word	0x40020800
90004170:	40020000 	.word	0x40020000

90004174 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
90004174:	b580      	push	{r7, lr}
90004176:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
90004178:	4802      	ldr	r0, [pc, #8]	; (90004184 <ETH_PHY_IO_Init+0x10>)
9000417a:	f7fe f985 	bl	90002488 <HAL_ETH_SetMDIOClockRange>

  return 0;
9000417e:	2300      	movs	r3, #0
}
90004180:	4618      	mov	r0, r3
90004182:	bd80      	pop	{r7, pc}
90004184:	20004c10 	.word	0x20004c10

90004188 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
90004188:	b480      	push	{r7}
9000418a:	af00      	add	r7, sp, #0
  return 0;
9000418c:	2300      	movs	r3, #0
}
9000418e:	4618      	mov	r0, r3
90004190:	46bd      	mov	sp, r7
90004192:	f85d 7b04 	ldr.w	r7, [sp], #4
90004196:	4770      	bx	lr

90004198 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
90004198:	b580      	push	{r7, lr}
9000419a:	b084      	sub	sp, #16
9000419c:	af00      	add	r7, sp, #0
9000419e:	60f8      	str	r0, [r7, #12]
900041a0:	60b9      	str	r1, [r7, #8]
900041a2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
900041a4:	687b      	ldr	r3, [r7, #4]
900041a6:	68ba      	ldr	r2, [r7, #8]
900041a8:	68f9      	ldr	r1, [r7, #12]
900041aa:	4807      	ldr	r0, [pc, #28]	; (900041c8 <ETH_PHY_IO_ReadReg+0x30>)
900041ac:	f7fd ffd4 	bl	90002158 <HAL_ETH_ReadPHYRegister>
900041b0:	4603      	mov	r3, r0
900041b2:	2b00      	cmp	r3, #0
900041b4:	d002      	beq.n	900041bc <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
900041b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
900041ba:	e000      	b.n	900041be <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
900041bc:	2300      	movs	r3, #0
}
900041be:	4618      	mov	r0, r3
900041c0:	3710      	adds	r7, #16
900041c2:	46bd      	mov	sp, r7
900041c4:	bd80      	pop	{r7, pc}
900041c6:	bf00      	nop
900041c8:	20004c10 	.word	0x20004c10

900041cc <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
900041cc:	b580      	push	{r7, lr}
900041ce:	b084      	sub	sp, #16
900041d0:	af00      	add	r7, sp, #0
900041d2:	60f8      	str	r0, [r7, #12]
900041d4:	60b9      	str	r1, [r7, #8]
900041d6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
900041d8:	687b      	ldr	r3, [r7, #4]
900041da:	68ba      	ldr	r2, [r7, #8]
900041dc:	68f9      	ldr	r1, [r7, #12]
900041de:	4807      	ldr	r0, [pc, #28]	; (900041fc <ETH_PHY_IO_WriteReg+0x30>)
900041e0:	f7fe f805 	bl	900021ee <HAL_ETH_WritePHYRegister>
900041e4:	4603      	mov	r3, r0
900041e6:	2b00      	cmp	r3, #0
900041e8:	d002      	beq.n	900041f0 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
900041ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
900041ee:	e000      	b.n	900041f2 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
900041f0:	2300      	movs	r3, #0
}
900041f2:	4618      	mov	r0, r3
900041f4:	3710      	adds	r7, #16
900041f6:	46bd      	mov	sp, r7
900041f8:	bd80      	pop	{r7, pc}
900041fa:	bf00      	nop
900041fc:	20004c10 	.word	0x20004c10

90004200 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
90004200:	b580      	push	{r7, lr}
90004202:	af00      	add	r7, sp, #0
  return HAL_GetTick();
90004204:	f7fd fb92 	bl	9000192c <HAL_GetTick>
90004208:	4603      	mov	r3, r0
}
9000420a:	4618      	mov	r0, r3
9000420c:	bd80      	pop	{r7, pc}
	...

90004210 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
90004210:	b580      	push	{r7, lr}
90004212:	b0a0      	sub	sp, #128	; 0x80
90004214:	af00      	add	r7, sp, #0
90004216:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
90004218:	f107 030c 	add.w	r3, r7, #12
9000421c:	2264      	movs	r2, #100	; 0x64
9000421e:	2100      	movs	r1, #0
90004220:	4618      	mov	r0, r3
90004222:	f00c f95b 	bl	900104dc <memset>
  int32_t PHYLinkState = 0;
90004226:	2300      	movs	r3, #0
90004228:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
9000422a:	2300      	movs	r3, #0
9000422c:	67fb      	str	r3, [r7, #124]	; 0x7c
9000422e:	2300      	movs	r3, #0
90004230:	67bb      	str	r3, [r7, #120]	; 0x78
90004232:	2300      	movs	r3, #0
90004234:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
90004236:	483a      	ldr	r0, [pc, #232]	; (90004320 <ethernet_link_check_state+0x110>)
90004238:	f7fd fa9f 	bl	9000177a <LAN8742_GetLinkState>
9000423c:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
9000423e:	687b      	ldr	r3, [r7, #4]
90004240:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
90004244:	089b      	lsrs	r3, r3, #2
90004246:	f003 0301 	and.w	r3, r3, #1
9000424a:	b2db      	uxtb	r3, r3
9000424c:	2b00      	cmp	r3, #0
9000424e:	d00c      	beq.n	9000426a <ethernet_link_check_state+0x5a>
90004250:	6f3b      	ldr	r3, [r7, #112]	; 0x70
90004252:	2b01      	cmp	r3, #1
90004254:	dc09      	bgt.n	9000426a <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
90004256:	4833      	ldr	r0, [pc, #204]	; (90004324 <ethernet_link_check_state+0x114>)
90004258:	f7fd fd59 	bl	90001d0e <HAL_ETH_Stop>
    netif_set_down(netif);
9000425c:	6878      	ldr	r0, [r7, #4]
9000425e:	f002 fc19 	bl	90006a94 <netif_set_down>
    netif_set_link_down(netif);
90004262:	6878      	ldr	r0, [r7, #4]
90004264:	f002 fc7c 	bl	90006b60 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
90004268:	e055      	b.n	90004316 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
9000426a:	687b      	ldr	r3, [r7, #4]
9000426c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
90004270:	f003 0304 	and.w	r3, r3, #4
90004274:	2b00      	cmp	r3, #0
90004276:	d14e      	bne.n	90004316 <ethernet_link_check_state+0x106>
90004278:	6f3b      	ldr	r3, [r7, #112]	; 0x70
9000427a:	2b01      	cmp	r3, #1
9000427c:	dd4b      	ble.n	90004316 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
9000427e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
90004280:	3b02      	subs	r3, #2
90004282:	2b03      	cmp	r3, #3
90004284:	d82a      	bhi.n	900042dc <ethernet_link_check_state+0xcc>
90004286:	a201      	add	r2, pc, #4	; (adr r2, 9000428c <ethernet_link_check_state+0x7c>)
90004288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000428c:	9000429d 	.word	0x9000429d
90004290:	900042af 	.word	0x900042af
90004294:	900042bf 	.word	0x900042bf
90004298:	900042cf 	.word	0x900042cf
      duplex = ETH_FULLDUPLEX_MODE;
9000429c:	f44f 6300 	mov.w	r3, #2048	; 0x800
900042a0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
900042a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
900042a6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
900042a8:	2301      	movs	r3, #1
900042aa:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
900042ac:	e017      	b.n	900042de <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
900042ae:	2300      	movs	r3, #0
900042b0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
900042b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
900042b6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
900042b8:	2301      	movs	r3, #1
900042ba:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
900042bc:	e00f      	b.n	900042de <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
900042be:	f44f 6300 	mov.w	r3, #2048	; 0x800
900042c2:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
900042c4:	2300      	movs	r3, #0
900042c6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
900042c8:	2301      	movs	r3, #1
900042ca:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
900042cc:	e007      	b.n	900042de <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
900042ce:	2300      	movs	r3, #0
900042d0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
900042d2:	2300      	movs	r3, #0
900042d4:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
900042d6:	2301      	movs	r3, #1
900042d8:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
900042da:	e000      	b.n	900042de <ethernet_link_check_state+0xce>
      break;
900042dc:	bf00      	nop
    if(linkchanged)
900042de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
900042e0:	2b00      	cmp	r3, #0
900042e2:	d018      	beq.n	90004316 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
900042e4:	f107 030c 	add.w	r3, r7, #12
900042e8:	4619      	mov	r1, r3
900042ea:	480e      	ldr	r0, [pc, #56]	; (90004324 <ethernet_link_check_state+0x114>)
900042ec:	f7fd ffc8 	bl	90002280 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
900042f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
900042f2:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
900042f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
900042f6:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
900042f8:	f107 030c 	add.w	r3, r7, #12
900042fc:	4619      	mov	r1, r3
900042fe:	4809      	ldr	r0, [pc, #36]	; (90004324 <ethernet_link_check_state+0x114>)
90004300:	f7fe f8a8 	bl	90002454 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
90004304:	4807      	ldr	r0, [pc, #28]	; (90004324 <ethernet_link_check_state+0x114>)
90004306:	f7fd fca3 	bl	90001c50 <HAL_ETH_Start>
      netif_set_up(netif);
9000430a:	6878      	ldr	r0, [r7, #4]
9000430c:	f002 fb56 	bl	900069bc <netif_set_up>
      netif_set_link_up(netif);
90004310:	6878      	ldr	r0, [r7, #4]
90004312:	f002 fbf1 	bl	90006af8 <netif_set_link_up>
}
90004316:	bf00      	nop
90004318:	3780      	adds	r7, #128	; 0x80
9000431a:	46bd      	mov	sp, r7
9000431c:	bd80      	pop	{r7, pc}
9000431e:	bf00      	nop
90004320:	20004cf8 	.word	0x20004cf8
90004324:	20004c10 	.word	0x20004c10

90004328 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
90004328:	b580      	push	{r7, lr}
9000432a:	b086      	sub	sp, #24
9000432c:	af02      	add	r7, sp, #8
9000432e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
90004330:	4812      	ldr	r0, [pc, #72]	; (9000437c <HAL_ETH_RxAllocateCallback+0x54>)
90004332:	f002 f8bd 	bl	900064b0 <memp_malloc_pool>
90004336:	60f8      	str	r0, [r7, #12]
  if (p)
90004338:	68fb      	ldr	r3, [r7, #12]
9000433a:	2b00      	cmp	r3, #0
9000433c:	d014      	beq.n	90004368 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
9000433e:	68fb      	ldr	r3, [r7, #12]
90004340:	f103 0220 	add.w	r2, r3, #32
90004344:	687b      	ldr	r3, [r7, #4]
90004346:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
90004348:	68fb      	ldr	r3, [r7, #12]
9000434a:	4a0d      	ldr	r2, [pc, #52]	; (90004380 <HAL_ETH_RxAllocateCallback+0x58>)
9000434c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
9000434e:	687b      	ldr	r3, [r7, #4]
90004350:	681b      	ldr	r3, [r3, #0]
90004352:	f44f 62c0 	mov.w	r2, #1536	; 0x600
90004356:	9201      	str	r2, [sp, #4]
90004358:	9300      	str	r3, [sp, #0]
9000435a:	68fb      	ldr	r3, [r7, #12]
9000435c:	2241      	movs	r2, #65	; 0x41
9000435e:	2100      	movs	r1, #0
90004360:	2000      	movs	r0, #0
90004362:	f002 fdf3 	bl	90006f4c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
90004366:	e005      	b.n	90004374 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
90004368:	4b06      	ldr	r3, [pc, #24]	; (90004384 <HAL_ETH_RxAllocateCallback+0x5c>)
9000436a:	2201      	movs	r2, #1
9000436c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
9000436e:	687b      	ldr	r3, [r7, #4]
90004370:	2200      	movs	r2, #0
90004372:	601a      	str	r2, [r3, #0]
}
90004374:	bf00      	nop
90004376:	3710      	adds	r7, #16
90004378:	46bd      	mov	sp, r7
9000437a:	bd80      	pop	{r7, pc}
9000437c:	900146f0 	.word	0x900146f0
90004380:	90004001 	.word	0x90004001
90004384:	20004c0c 	.word	0x20004c0c

90004388 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
90004388:	b580      	push	{r7, lr}
9000438a:	b088      	sub	sp, #32
9000438c:	af00      	add	r7, sp, #0
9000438e:	60f8      	str	r0, [r7, #12]
90004390:	60b9      	str	r1, [r7, #8]
90004392:	607a      	str	r2, [r7, #4]
90004394:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
90004396:	68fb      	ldr	r3, [r7, #12]
90004398:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
9000439a:	68bb      	ldr	r3, [r7, #8]
9000439c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
9000439e:	2300      	movs	r3, #0
900043a0:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
900043a2:	687b      	ldr	r3, [r7, #4]
900043a4:	3b20      	subs	r3, #32
900043a6:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
900043a8:	69fb      	ldr	r3, [r7, #28]
900043aa:	2200      	movs	r2, #0
900043ac:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
900043ae:	69fb      	ldr	r3, [r7, #28]
900043b0:	2200      	movs	r2, #0
900043b2:	811a      	strh	r2, [r3, #8]
  p->len = Length;
900043b4:	69fb      	ldr	r3, [r7, #28]
900043b6:	887a      	ldrh	r2, [r7, #2]
900043b8:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
900043ba:	69bb      	ldr	r3, [r7, #24]
900043bc:	681b      	ldr	r3, [r3, #0]
900043be:	2b00      	cmp	r3, #0
900043c0:	d103      	bne.n	900043ca <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
900043c2:	69bb      	ldr	r3, [r7, #24]
900043c4:	69fa      	ldr	r2, [r7, #28]
900043c6:	601a      	str	r2, [r3, #0]
900043c8:	e003      	b.n	900043d2 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
900043ca:	697b      	ldr	r3, [r7, #20]
900043cc:	681b      	ldr	r3, [r3, #0]
900043ce:	69fa      	ldr	r2, [r7, #28]
900043d0:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
900043d2:	697b      	ldr	r3, [r7, #20]
900043d4:	69fa      	ldr	r2, [r7, #28]
900043d6:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
900043d8:	69bb      	ldr	r3, [r7, #24]
900043da:	681b      	ldr	r3, [r3, #0]
900043dc:	61fb      	str	r3, [r7, #28]
900043de:	e009      	b.n	900043f4 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
900043e0:	69fb      	ldr	r3, [r7, #28]
900043e2:	891a      	ldrh	r2, [r3, #8]
900043e4:	887b      	ldrh	r3, [r7, #2]
900043e6:	4413      	add	r3, r2
900043e8:	b29a      	uxth	r2, r3
900043ea:	69fb      	ldr	r3, [r7, #28]
900043ec:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
900043ee:	69fb      	ldr	r3, [r7, #28]
900043f0:	681b      	ldr	r3, [r3, #0]
900043f2:	61fb      	str	r3, [r7, #28]
900043f4:	69fb      	ldr	r3, [r7, #28]
900043f6:	2b00      	cmp	r3, #0
900043f8:	d1f2      	bne.n	900043e0 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
900043fa:	887b      	ldrh	r3, [r7, #2]
900043fc:	4619      	mov	r1, r3
900043fe:	6878      	ldr	r0, [r7, #4]
90004400:	f7ff fc50 	bl	90003ca4 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
90004404:	bf00      	nop
90004406:	3720      	adds	r7, #32
90004408:	46bd      	mov	sp, r7
9000440a:	bd80      	pop	{r7, pc}

9000440c <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
9000440c:	b580      	push	{r7, lr}
9000440e:	b084      	sub	sp, #16
90004410:	af00      	add	r7, sp, #0
90004412:	6078      	str	r0, [r7, #4]
90004414:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
90004416:	687b      	ldr	r3, [r7, #4]
90004418:	2b00      	cmp	r3, #0
9000441a:	d002      	beq.n	90004422 <fs_open+0x16>
9000441c:	683b      	ldr	r3, [r7, #0]
9000441e:	2b00      	cmp	r3, #0
90004420:	d102      	bne.n	90004428 <fs_open+0x1c>
    return ERR_ARG;
90004422:	f06f 030f 	mvn.w	r3, #15
90004426:	e028      	b.n	9000447a <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
90004428:	4b16      	ldr	r3, [pc, #88]	; (90004484 <fs_open+0x78>)
9000442a:	60fb      	str	r3, [r7, #12]
9000442c:	e020      	b.n	90004470 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
9000442e:	68fb      	ldr	r3, [r7, #12]
90004430:	685b      	ldr	r3, [r3, #4]
90004432:	4619      	mov	r1, r3
90004434:	6838      	ldr	r0, [r7, #0]
90004436:	f7fb feeb 	bl	90000210 <strcmp>
9000443a:	4603      	mov	r3, r0
9000443c:	2b00      	cmp	r3, #0
9000443e:	d114      	bne.n	9000446a <fs_open+0x5e>
      file->data = (const char *)f->data;
90004440:	68fb      	ldr	r3, [r7, #12]
90004442:	689a      	ldr	r2, [r3, #8]
90004444:	687b      	ldr	r3, [r7, #4]
90004446:	601a      	str	r2, [r3, #0]
      file->len = f->len;
90004448:	68fb      	ldr	r3, [r7, #12]
9000444a:	68da      	ldr	r2, [r3, #12]
9000444c:	687b      	ldr	r3, [r7, #4]
9000444e:	605a      	str	r2, [r3, #4]
      file->index = f->len;
90004450:	68fb      	ldr	r3, [r7, #12]
90004452:	68da      	ldr	r2, [r3, #12]
90004454:	687b      	ldr	r3, [r7, #4]
90004456:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
90004458:	687b      	ldr	r3, [r7, #4]
9000445a:	2200      	movs	r2, #0
9000445c:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
9000445e:	68fb      	ldr	r3, [r7, #12]
90004460:	7c1a      	ldrb	r2, [r3, #16]
90004462:	687b      	ldr	r3, [r7, #4]
90004464:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
90004466:	2300      	movs	r3, #0
90004468:	e007      	b.n	9000447a <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
9000446a:	68fb      	ldr	r3, [r7, #12]
9000446c:	681b      	ldr	r3, [r3, #0]
9000446e:	60fb      	str	r3, [r7, #12]
90004470:	68fb      	ldr	r3, [r7, #12]
90004472:	2b00      	cmp	r3, #0
90004474:	d1db      	bne.n	9000442e <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
90004476:	f06f 0305 	mvn.w	r3, #5
}
9000447a:	4618      	mov	r0, r3
9000447c:	3710      	adds	r7, #16
9000447e:	46bd      	mov	sp, r7
90004480:	bd80      	pop	{r7, pc}
90004482:	bf00      	nop
90004484:	900159f8 	.word	0x900159f8

90004488 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
90004488:	b480      	push	{r7}
9000448a:	b083      	sub	sp, #12
9000448c:	af00      	add	r7, sp, #0
9000448e:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
90004490:	bf00      	nop
90004492:	370c      	adds	r7, #12
90004494:	46bd      	mov	sp, r7
90004496:	f85d 7b04 	ldr.w	r7, [sp], #4
9000449a:	4770      	bx	lr

9000449c <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
9000449c:	b480      	push	{r7}
9000449e:	b083      	sub	sp, #12
900044a0:	af00      	add	r7, sp, #0
900044a2:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
900044a4:	687b      	ldr	r3, [r7, #4]
900044a6:	685a      	ldr	r2, [r3, #4]
900044a8:	687b      	ldr	r3, [r7, #4]
900044aa:	689b      	ldr	r3, [r3, #8]
900044ac:	1ad3      	subs	r3, r2, r3
}
900044ae:	4618      	mov	r0, r3
900044b0:	370c      	adds	r7, #12
900044b2:	46bd      	mov	sp, r7
900044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
900044b8:	4770      	bx	lr

900044ba <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state *
http_ssi_state_alloc(void)
{
900044ba:	b580      	push	{r7, lr}
900044bc:	b082      	sub	sp, #8
900044be:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
900044c0:	20e0      	movs	r0, #224	; 0xe0
900044c2:	f001 fe87 	bl	900061d4 <mem_malloc>
900044c6:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(1);
    ret = HTTP_ALLOC_SSI_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
900044c8:	687b      	ldr	r3, [r7, #4]
900044ca:	2b00      	cmp	r3, #0
900044cc:	d004      	beq.n	900044d8 <http_ssi_state_alloc+0x1e>
    memset(ret, 0, sizeof(struct http_ssi_state));
900044ce:	22e0      	movs	r2, #224	; 0xe0
900044d0:	2100      	movs	r1, #0
900044d2:	6878      	ldr	r0, [r7, #4]
900044d4:	f00c f802 	bl	900104dc <memset>
  }
  return ret;
900044d8:	687b      	ldr	r3, [r7, #4]
}
900044da:	4618      	mov	r0, r3
900044dc:	3708      	adds	r7, #8
900044de:	46bd      	mov	sp, r7
900044e0:	bd80      	pop	{r7, pc}

900044e2 <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
900044e2:	b580      	push	{r7, lr}
900044e4:	b082      	sub	sp, #8
900044e6:	af00      	add	r7, sp, #0
900044e8:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
900044ea:	687b      	ldr	r3, [r7, #4]
900044ec:	2b00      	cmp	r3, #0
900044ee:	d002      	beq.n	900044f6 <http_ssi_state_free+0x14>
    HTTP_FREE_SSI_STATE(ssi);
900044f0:	6878      	ldr	r0, [r7, #4]
900044f2:	f001 fd09 	bl	90005f08 <mem_free>
  }
}
900044f6:	bf00      	nop
900044f8:	3708      	adds	r7, #8
900044fa:	46bd      	mov	sp, r7
900044fc:	bd80      	pop	{r7, pc}

900044fe <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
900044fe:	b580      	push	{r7, lr}
90004500:	b082      	sub	sp, #8
90004502:	af00      	add	r7, sp, #0
90004504:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
90004506:	22b0      	movs	r2, #176	; 0xb0
90004508:	2100      	movs	r1, #0
9000450a:	6878      	ldr	r0, [r7, #4]
9000450c:	f00b ffe6 	bl	900104dc <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
90004510:	bf00      	nop
90004512:	3708      	adds	r7, #8
90004514:	46bd      	mov	sp, r7
90004516:	bd80      	pop	{r7, pc}

90004518 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
90004518:	b580      	push	{r7, lr}
9000451a:	b082      	sub	sp, #8
9000451c:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
9000451e:	20b0      	movs	r0, #176	; 0xb0
90004520:	f001 fe58 	bl	900061d4 <mem_malloc>
90004524:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
90004526:	687b      	ldr	r3, [r7, #4]
90004528:	2b00      	cmp	r3, #0
9000452a:	d002      	beq.n	90004532 <http_state_alloc+0x1a>
    http_state_init(ret);
9000452c:	6878      	ldr	r0, [r7, #4]
9000452e:	f7ff ffe6 	bl	900044fe <http_state_init>
    http_add_connection(ret);
  }
  return ret;
90004532:	687b      	ldr	r3, [r7, #4]
}
90004534:	4618      	mov	r0, r3
90004536:	3708      	adds	r7, #8
90004538:	46bd      	mov	sp, r7
9000453a:	bd80      	pop	{r7, pc}

9000453c <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
9000453c:	b580      	push	{r7, lr}
9000453e:	b082      	sub	sp, #8
90004540:	af00      	add	r7, sp, #0
90004542:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
90004544:	687b      	ldr	r3, [r7, #4]
90004546:	695b      	ldr	r3, [r3, #20]
90004548:	2b00      	cmp	r3, #0
9000454a:	d007      	beq.n	9000455c <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
9000454c:	687b      	ldr	r3, [r7, #4]
9000454e:	695b      	ldr	r3, [r3, #20]
90004550:	4618      	mov	r0, r3
90004552:	f7ff ff99 	bl	90004488 <fs_close>
    hs->handle = NULL;
90004556:	687b      	ldr	r3, [r7, #4]
90004558:	2200      	movs	r2, #0
9000455a:	615a      	str	r2, [r3, #20]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
9000455c:	687b      	ldr	r3, [r7, #4]
9000455e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90004560:	2b00      	cmp	r3, #0
90004562:	d007      	beq.n	90004574 <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
90004564:	687b      	ldr	r3, [r7, #4]
90004566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90004568:	4618      	mov	r0, r3
9000456a:	f7ff ffba 	bl	900044e2 <http_ssi_state_free>
    hs->ssi = NULL;
9000456e:	687b      	ldr	r3, [r7, #4]
90004570:	2200      	movs	r2, #0
90004572:	62da      	str	r2, [r3, #44]	; 0x2c
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
90004574:	687b      	ldr	r3, [r7, #4]
90004576:	6a1b      	ldr	r3, [r3, #32]
90004578:	2b00      	cmp	r3, #0
9000457a:	d007      	beq.n	9000458c <http_state_eof+0x50>
    pbuf_free(hs->req);
9000457c:	687b      	ldr	r3, [r7, #4]
9000457e:	6a1b      	ldr	r3, [r3, #32]
90004580:	4618      	mov	r0, r3
90004582:	f002 fe9d 	bl	900072c0 <pbuf_free>
    hs->req = NULL;
90004586:	687b      	ldr	r3, [r7, #4]
90004588:	2200      	movs	r2, #0
9000458a:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
9000458c:	bf00      	nop
9000458e:	3708      	adds	r7, #8
90004590:	46bd      	mov	sp, r7
90004592:	bd80      	pop	{r7, pc}

90004594 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
90004594:	b580      	push	{r7, lr}
90004596:	b082      	sub	sp, #8
90004598:	af00      	add	r7, sp, #0
9000459a:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
9000459c:	687b      	ldr	r3, [r7, #4]
9000459e:	2b00      	cmp	r3, #0
900045a0:	d005      	beq.n	900045ae <http_state_free+0x1a>
    http_state_eof(hs);
900045a2:	6878      	ldr	r0, [r7, #4]
900045a4:	f7ff ffca 	bl	9000453c <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
900045a8:	6878      	ldr	r0, [r7, #4]
900045aa:	f001 fcad 	bl	90005f08 <mem_free>
  }
}
900045ae:	bf00      	nop
900045b0:	3708      	adds	r7, #8
900045b2:	46bd      	mov	sp, r7
900045b4:	bd80      	pop	{r7, pc}
	...

900045b8 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
900045b8:	b580      	push	{r7, lr}
900045ba:	b086      	sub	sp, #24
900045bc:	af00      	add	r7, sp, #0
900045be:	60f8      	str	r0, [r7, #12]
900045c0:	60b9      	str	r1, [r7, #8]
900045c2:	607a      	str	r2, [r7, #4]
900045c4:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
900045c6:	687b      	ldr	r3, [r7, #4]
900045c8:	2b00      	cmp	r3, #0
900045ca:	d106      	bne.n	900045da <http_write+0x22>
900045cc:	4b2c      	ldr	r3, [pc, #176]	; (90004680 <http_write+0xc8>)
900045ce:	f240 2219 	movw	r2, #537	; 0x219
900045d2:	492c      	ldr	r1, [pc, #176]	; (90004684 <http_write+0xcc>)
900045d4:	482c      	ldr	r0, [pc, #176]	; (90004688 <http_write+0xd0>)
900045d6:	f00b ff89 	bl	900104ec <iprintf>
  len = *length;
900045da:	687b      	ldr	r3, [r7, #4]
900045dc:	881b      	ldrh	r3, [r3, #0]
900045de:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
900045e0:	8afb      	ldrh	r3, [r7, #22]
900045e2:	2b00      	cmp	r3, #0
900045e4:	d101      	bne.n	900045ea <http_write+0x32>
    return ERR_OK;
900045e6:	2300      	movs	r3, #0
900045e8:	e045      	b.n	90004676 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
900045ea:	68fb      	ldr	r3, [r7, #12]
900045ec:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
900045f0:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
900045f2:	8aba      	ldrh	r2, [r7, #20]
900045f4:	8afb      	ldrh	r3, [r7, #22]
900045f6:	429a      	cmp	r2, r3
900045f8:	d201      	bcs.n	900045fe <http_write+0x46>
    len = max_len;
900045fa:	8abb      	ldrh	r3, [r7, #20]
900045fc:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
900045fe:	68fb      	ldr	r3, [r7, #12]
90004600:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
90004602:	005b      	lsls	r3, r3, #1
90004604:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
90004606:	8afa      	ldrh	r2, [r7, #22]
90004608:	8abb      	ldrh	r3, [r7, #20]
9000460a:	429a      	cmp	r2, r3
9000460c:	d901      	bls.n	90004612 <http_write+0x5a>
    len = max_len;
9000460e:	8abb      	ldrh	r3, [r7, #20]
90004610:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
90004612:	78fb      	ldrb	r3, [r7, #3]
90004614:	8afa      	ldrh	r2, [r7, #22]
90004616:	68b9      	ldr	r1, [r7, #8]
90004618:	68f8      	ldr	r0, [r7, #12]
9000461a:	f007 fbd9 	bl	9000bdd0 <tcp_write>
9000461e:	4603      	mov	r3, r0
90004620:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
90004622:	f997 3013 	ldrsb.w	r3, [r7, #19]
90004626:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
9000462a:	d10f      	bne.n	9000464c <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
9000462c:	68fb      	ldr	r3, [r7, #12]
9000462e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
90004632:	2b00      	cmp	r3, #0
90004634:	d004      	beq.n	90004640 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
90004636:	68fb      	ldr	r3, [r7, #12]
90004638:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
9000463c:	2b08      	cmp	r3, #8
9000463e:	d902      	bls.n	90004646 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
90004640:	2301      	movs	r3, #1
90004642:	82fb      	strh	r3, [r7, #22]
90004644:	e002      	b.n	9000464c <http_write+0x94>
      } else {
        len /= 2;
90004646:	8afb      	ldrh	r3, [r7, #22]
90004648:	085b      	lsrs	r3, r3, #1
9000464a:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
9000464c:	f997 3013 	ldrsb.w	r3, [r7, #19]
90004650:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
90004654:	d102      	bne.n	9000465c <http_write+0xa4>
90004656:	8afb      	ldrh	r3, [r7, #22]
90004658:	2b01      	cmp	r3, #1
9000465a:	d8da      	bhi.n	90004612 <http_write+0x5a>

  if (err == ERR_OK) {
9000465c:	f997 3013 	ldrsb.w	r3, [r7, #19]
90004660:	2b00      	cmp	r3, #0
90004662:	d103      	bne.n	9000466c <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
90004664:	687b      	ldr	r3, [r7, #4]
90004666:	8afa      	ldrh	r2, [r7, #22]
90004668:	801a      	strh	r2, [r3, #0]
9000466a:	e002      	b.n	90004672 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
9000466c:	687b      	ldr	r3, [r7, #4]
9000466e:	2200      	movs	r2, #0
90004670:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
90004672:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
90004676:	4618      	mov	r0, r3
90004678:	3718      	adds	r7, #24
9000467a:	46bd      	mov	sp, r7
9000467c:	bd80      	pop	{r7, pc}
9000467e:	bf00      	nop
90004680:	90011aa8 	.word	0x90011aa8
90004684:	90011ae0 	.word	0x90011ae0
90004688:	90011af0 	.word	0x90011af0

9000468c <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
9000468c:	b580      	push	{r7, lr}
9000468e:	b086      	sub	sp, #24
90004690:	af00      	add	r7, sp, #0
90004692:	60f8      	str	r0, [r7, #12]
90004694:	60b9      	str	r1, [r7, #8]
90004696:	4613      	mov	r3, r2
90004698:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
9000469a:	2100      	movs	r1, #0
9000469c:	68f8      	ldr	r0, [r7, #12]
9000469e:	f004 fc55 	bl	90008f4c <tcp_arg>
  altcp_recv(pcb, NULL);
900046a2:	2100      	movs	r1, #0
900046a4:	68f8      	ldr	r0, [r7, #12]
900046a6:	f004 fc63 	bl	90008f70 <tcp_recv>
  altcp_err(pcb, NULL);
900046aa:	2100      	movs	r1, #0
900046ac:	68f8      	ldr	r0, [r7, #12]
900046ae:	f004 fca3 	bl	90008ff8 <tcp_err>
  altcp_poll(pcb, NULL, 0);
900046b2:	2200      	movs	r2, #0
900046b4:	2100      	movs	r1, #0
900046b6:	68f8      	ldr	r0, [r7, #12]
900046b8:	f004 fcd8 	bl	9000906c <tcp_poll>
  altcp_sent(pcb, NULL);
900046bc:	2100      	movs	r1, #0
900046be:	68f8      	ldr	r0, [r7, #12]
900046c0:	f004 fc78 	bl	90008fb4 <tcp_sent>
  if (hs != NULL) {
900046c4:	68bb      	ldr	r3, [r7, #8]
900046c6:	2b00      	cmp	r3, #0
900046c8:	d002      	beq.n	900046d0 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
900046ca:	68b8      	ldr	r0, [r7, #8]
900046cc:	f7ff ff62 	bl	90004594 <http_state_free>
  }

  if (abort_conn) {
900046d0:	79fb      	ldrb	r3, [r7, #7]
900046d2:	2b00      	cmp	r3, #0
900046d4:	d004      	beq.n	900046e0 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
900046d6:	68f8      	ldr	r0, [r7, #12]
900046d8:	f003 fb7a 	bl	90007dd0 <tcp_abort>
    return ERR_OK;
900046dc:	2300      	movs	r3, #0
900046de:	e00f      	b.n	90004700 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
900046e0:	68f8      	ldr	r0, [r7, #12]
900046e2:	f003 fa8b 	bl	90007bfc <tcp_close>
900046e6:	4603      	mov	r3, r0
900046e8:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
900046ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
900046ee:	2b00      	cmp	r3, #0
900046f0:	d004      	beq.n	900046fc <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
900046f2:	2204      	movs	r2, #4
900046f4:	4904      	ldr	r1, [pc, #16]	; (90004708 <http_close_or_abort_conn+0x7c>)
900046f6:	68f8      	ldr	r0, [r7, #12]
900046f8:	f004 fcb8 	bl	9000906c <tcp_poll>
  }
  return err;
900046fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
90004700:	4618      	mov	r0, r3
90004702:	3718      	adds	r7, #24
90004704:	46bd      	mov	sp, r7
90004706:	bd80      	pop	{r7, pc}
90004708:	9000577f 	.word	0x9000577f

9000470c <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
9000470c:	b580      	push	{r7, lr}
9000470e:	b082      	sub	sp, #8
90004710:	af00      	add	r7, sp, #0
90004712:	6078      	str	r0, [r7, #4]
90004714:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
90004716:	2200      	movs	r2, #0
90004718:	6839      	ldr	r1, [r7, #0]
9000471a:	6878      	ldr	r0, [r7, #4]
9000471c:	f7ff ffb6 	bl	9000468c <http_close_or_abort_conn>
90004720:	4603      	mov	r3, r0
}
90004722:	4618      	mov	r0, r3
90004724:	3708      	adds	r7, #8
90004726:	46bd      	mov	sp, r7
90004728:	bd80      	pop	{r7, pc}

9000472a <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
9000472a:	b580      	push	{r7, lr}
9000472c:	b082      	sub	sp, #8
9000472e:	af00      	add	r7, sp, #0
90004730:	6078      	str	r0, [r7, #4]
90004732:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
90004734:	6839      	ldr	r1, [r7, #0]
90004736:	6878      	ldr	r0, [r7, #4]
90004738:	f7ff ffe8 	bl	9000470c <http_close_conn>
  }
}
9000473c:	bf00      	nop
9000473e:	3708      	adds	r7, #8
90004740:	46bd      	mov	sp, r7
90004742:	bd80      	pop	{r7, pc}

90004744 <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
90004744:	b580      	push	{r7, lr}
90004746:	b086      	sub	sp, #24
90004748:	af00      	add	r7, sp, #0
9000474a:	6078      	str	r0, [r7, #4]
9000474c:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if (!params || (params[0] == '\0')) {
9000474e:	683b      	ldr	r3, [r7, #0]
90004750:	2b00      	cmp	r3, #0
90004752:	d003      	beq.n	9000475c <extract_uri_parameters+0x18>
90004754:	683b      	ldr	r3, [r7, #0]
90004756:	781b      	ldrb	r3, [r3, #0]
90004758:	2b00      	cmp	r3, #0
9000475a:	d101      	bne.n	90004760 <extract_uri_parameters+0x1c>
    return (0);
9000475c:	2300      	movs	r3, #0
9000475e:	e04b      	b.n	900047f8 <extract_uri_parameters+0xb4>
  }

  /* Get a pointer to our first parameter */
  pair = params;
90004760:	683b      	ldr	r3, [r7, #0]
90004762:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
90004764:	2300      	movs	r3, #0
90004766:	613b      	str	r3, [r7, #16]
90004768:	e03f      	b.n	900047ea <extract_uri_parameters+0xa6>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
9000476a:	687b      	ldr	r3, [r7, #4]
9000476c:	693a      	ldr	r2, [r7, #16]
9000476e:	320c      	adds	r2, #12
90004770:	6979      	ldr	r1, [r7, #20]
90004772:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Remember the start of this name=value pair */
    equals = pair;
90004776:	697b      	ldr	r3, [r7, #20]
90004778:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
9000477a:	2126      	movs	r1, #38	; 0x26
9000477c:	6978      	ldr	r0, [r7, #20]
9000477e:	f00b ff3a 	bl	900105f6 <strchr>
90004782:	6178      	str	r0, [r7, #20]
    if (pair) {
90004784:	697b      	ldr	r3, [r7, #20]
90004786:	2b00      	cmp	r3, #0
90004788:	d006      	beq.n	90004798 <extract_uri_parameters+0x54>
      *pair = '\0';
9000478a:	697b      	ldr	r3, [r7, #20]
9000478c:	2200      	movs	r2, #0
9000478e:	701a      	strb	r2, [r3, #0]
      pair++;
90004790:	697b      	ldr	r3, [r7, #20]
90004792:	3301      	adds	r3, #1
90004794:	617b      	str	r3, [r7, #20]
90004796:	e00c      	b.n	900047b2 <extract_uri_parameters+0x6e>
    } else {
      /* We didn't find a new parameter so find the end of the URI and
       * replace the space with a '\0' */
      pair = strchr(equals, ' ');
90004798:	2120      	movs	r1, #32
9000479a:	68f8      	ldr	r0, [r7, #12]
9000479c:	f00b ff2b 	bl	900105f6 <strchr>
900047a0:	6178      	str	r0, [r7, #20]
      if (pair) {
900047a2:	697b      	ldr	r3, [r7, #20]
900047a4:	2b00      	cmp	r3, #0
900047a6:	d002      	beq.n	900047ae <extract_uri_parameters+0x6a>
        *pair = '\0';
900047a8:	697b      	ldr	r3, [r7, #20]
900047aa:	2200      	movs	r2, #0
900047ac:	701a      	strb	r2, [r3, #0]
      }

      /* Revert to NULL so that we exit the loop as expected. */
      pair = NULL;
900047ae:	2300      	movs	r3, #0
900047b0:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
900047b2:	213d      	movs	r1, #61	; 0x3d
900047b4:	68f8      	ldr	r0, [r7, #12]
900047b6:	f00b ff1e 	bl	900105f6 <strchr>
900047ba:	60f8      	str	r0, [r7, #12]
    if (equals) {
900047bc:	68fb      	ldr	r3, [r7, #12]
900047be:	2b00      	cmp	r3, #0
900047c0:	d00a      	beq.n	900047d8 <extract_uri_parameters+0x94>
      *equals = '\0';
900047c2:	68fb      	ldr	r3, [r7, #12]
900047c4:	2200      	movs	r2, #0
900047c6:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
900047c8:	68fb      	ldr	r3, [r7, #12]
900047ca:	1c59      	adds	r1, r3, #1
900047cc:	687b      	ldr	r3, [r7, #4]
900047ce:	693a      	ldr	r2, [r7, #16]
900047d0:	321c      	adds	r2, #28
900047d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
900047d6:	e005      	b.n	900047e4 <extract_uri_parameters+0xa0>
    } else {
      http_cgi_param_vals[loop] = NULL;
900047d8:	687b      	ldr	r3, [r7, #4]
900047da:	693a      	ldr	r2, [r7, #16]
900047dc:	321c      	adds	r2, #28
900047de:	2100      	movs	r1, #0
900047e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
900047e4:	693b      	ldr	r3, [r7, #16]
900047e6:	3301      	adds	r3, #1
900047e8:	613b      	str	r3, [r7, #16]
900047ea:	693b      	ldr	r3, [r7, #16]
900047ec:	2b0f      	cmp	r3, #15
900047ee:	dc02      	bgt.n	900047f6 <extract_uri_parameters+0xb2>
900047f0:	697b      	ldr	r3, [r7, #20]
900047f2:	2b00      	cmp	r3, #0
900047f4:	d1b9      	bne.n	9000476a <extract_uri_parameters+0x26>
    }
  }

  return loop;
900047f6:	693b      	ldr	r3, [r7, #16]
}
900047f8:	4618      	mov	r0, r3
900047fa:	3718      	adds	r7, #24
900047fc:	46bd      	mov	sp, r7
900047fe:	bd80      	pop	{r7, pc}

90004800 <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
90004800:	b580      	push	{r7, lr}
90004802:	b086      	sub	sp, #24
90004804:	af00      	add	r7, sp, #0
90004806:	6078      	str	r0, [r7, #4]
  struct http_ssi_state *ssi;
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  LWIP_ASSERT("hs != NULL", hs != NULL);
90004808:	687b      	ldr	r3, [r7, #4]
9000480a:	2b00      	cmp	r3, #0
9000480c:	d106      	bne.n	9000481c <get_tag_insert+0x1c>
9000480e:	4b51      	ldr	r3, [pc, #324]	; (90004954 <get_tag_insert+0x154>)
90004810:	f44f 7241 	mov.w	r2, #772	; 0x304
90004814:	4950      	ldr	r1, [pc, #320]	; (90004958 <get_tag_insert+0x158>)
90004816:	4851      	ldr	r0, [pc, #324]	; (9000495c <get_tag_insert+0x15c>)
90004818:	f00b fe68 	bl	900104ec <iprintf>
  ssi = hs->ssi;
9000481c:	687b      	ldr	r3, [r7, #4]
9000481e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90004820:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
90004822:	693b      	ldr	r3, [r7, #16]
90004824:	2b00      	cmp	r3, #0
90004826:	d106      	bne.n	90004836 <get_tag_insert+0x36>
90004828:	4b4a      	ldr	r3, [pc, #296]	; (90004954 <get_tag_insert+0x154>)
9000482a:	f240 3206 	movw	r2, #774	; 0x306
9000482e:	494c      	ldr	r1, [pc, #304]	; (90004960 <get_tag_insert+0x160>)
90004830:	484a      	ldr	r0, [pc, #296]	; (9000495c <get_tag_insert+0x15c>)
90004832:	f00b fe5b 	bl	900104ec <iprintf>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_SSI_RAW
  tag = ssi->tag_name;
#endif

  if (httpd_ssi_handler
90004836:	4b4b      	ldr	r3, [pc, #300]	; (90004964 <get_tag_insert+0x164>)
90004838:	681b      	ldr	r3, [r3, #0]
9000483a:	2b00      	cmp	r3, #0
9000483c:	d02e      	beq.n	9000489c <get_tag_insert+0x9c>
#if !LWIP_HTTPD_SSI_RAW
      && httpd_tags && httpd_num_tags
9000483e:	4b4a      	ldr	r3, [pc, #296]	; (90004968 <get_tag_insert+0x168>)
90004840:	681b      	ldr	r3, [r3, #0]
90004842:	2b00      	cmp	r3, #0
90004844:	d02a      	beq.n	9000489c <get_tag_insert+0x9c>
90004846:	4b49      	ldr	r3, [pc, #292]	; (9000496c <get_tag_insert+0x16c>)
90004848:	681b      	ldr	r3, [r3, #0]
9000484a:	2b00      	cmp	r3, #0
9000484c:	d026      	beq.n	9000489c <get_tag_insert+0x9c>

    /* Find this tag in the list we have been provided. */
#if LWIP_HTTPD_SSI_RAW
    {
#else /* LWIP_HTTPD_SSI_RAW */
    for (tag = 0; tag < httpd_num_tags; tag++) {
9000484e:	2300      	movs	r3, #0
90004850:	617b      	str	r3, [r7, #20]
90004852:	e01e      	b.n	90004892 <get_tag_insert+0x92>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
90004854:	693b      	ldr	r3, [r7, #16]
90004856:	f103 0012 	add.w	r0, r3, #18
9000485a:	4b43      	ldr	r3, [pc, #268]	; (90004968 <get_tag_insert+0x168>)
9000485c:	681a      	ldr	r2, [r3, #0]
9000485e:	697b      	ldr	r3, [r7, #20]
90004860:	009b      	lsls	r3, r3, #2
90004862:	4413      	add	r3, r2
90004864:	681b      	ldr	r3, [r3, #0]
90004866:	4619      	mov	r1, r3
90004868:	f7fb fcd2 	bl	90000210 <strcmp>
9000486c:	4603      	mov	r3, r0
9000486e:	2b00      	cmp	r3, #0
90004870:	d10c      	bne.n	9000488c <get_tag_insert+0x8c>
#endif /* LWIP_HTTPD_SSI_RAW */
      {
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
90004872:	4b3c      	ldr	r3, [pc, #240]	; (90004964 <get_tag_insert+0x164>)
90004874:	681b      	ldr	r3, [r3, #0]
90004876:	693a      	ldr	r2, [r7, #16]
90004878:	f102 011b 	add.w	r1, r2, #27
9000487c:	22c0      	movs	r2, #192	; 0xc0
9000487e:	6978      	ldr	r0, [r7, #20]
90004880:	4798      	blx	r3
90004882:	4603      	mov	r3, r0
90004884:	461a      	mov	r2, r3
90004886:	693b      	ldr	r3, [r7, #16]
90004888:	81da      	strh	r2, [r3, #14]
                                             );
#if LWIP_HTTPD_SSI_RAW
        if (ssi->tag_insert_len != HTTPD_SSI_TAG_UNKNOWN)
#endif /* LWIP_HTTPD_SSI_RAW */
        {
          return;
9000488a:	e060      	b.n	9000494e <get_tag_insert+0x14e>
    for (tag = 0; tag < httpd_num_tags; tag++) {
9000488c:	697b      	ldr	r3, [r7, #20]
9000488e:	3301      	adds	r3, #1
90004890:	617b      	str	r3, [r7, #20]
90004892:	4b36      	ldr	r3, [pc, #216]	; (9000496c <get_tag_insert+0x16c>)
90004894:	681b      	ldr	r3, [r3, #0]
90004896:	697a      	ldr	r2, [r7, #20]
90004898:	429a      	cmp	r2, r3
9000489a:	dbdb      	blt.n	90004854 <get_tag_insert+0x54>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
9000489c:	693b      	ldr	r3, [r7, #16]
9000489e:	3312      	adds	r3, #18
900048a0:	4618      	mov	r0, r3
900048a2:	f7fb fcbf 	bl	90000224 <strlen>
900048a6:	4603      	mov	r3, r0
900048a8:	2ba6      	cmp	r3, #166	; 0xa6
900048aa:	d818      	bhi.n	900048de <get_tag_insert+0xde>
900048ac:	693b      	ldr	r3, [r7, #16]
900048ae:	3312      	adds	r3, #18
900048b0:	4618      	mov	r0, r3
900048b2:	f7fb fcb7 	bl	90000224 <strlen>
900048b6:	4603      	mov	r3, r0
900048b8:	2b09      	cmp	r3, #9
900048ba:	d810      	bhi.n	900048de <get_tag_insert+0xde>
900048bc:	693b      	ldr	r3, [r7, #16]
900048be:	3312      	adds	r3, #18
900048c0:	4618      	mov	r0, r3
900048c2:	f7fb fcaf 	bl	90000224 <strlen>
900048c6:	4603      	mov	r3, r0
900048c8:	2ba6      	cmp	r3, #166	; 0xa6
900048ca:	d806      	bhi.n	900048da <get_tag_insert+0xda>
900048cc:	693b      	ldr	r3, [r7, #16]
900048ce:	3312      	adds	r3, #18
900048d0:	4618      	mov	r0, r3
900048d2:	f7fb fca7 	bl	90000224 <strlen>
900048d6:	4603      	mov	r3, r0
900048d8:	e002      	b.n	900048e0 <get_tag_insert+0xe0>
900048da:	23a7      	movs	r3, #167	; 0xa7
900048dc:	e000      	b.n	900048e0 <get_tag_insert+0xe0>
900048de:	2309      	movs	r3, #9
900048e0:	60fb      	str	r3, [r7, #12]
                 LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN)));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
900048e2:	693b      	ldr	r3, [r7, #16]
900048e4:	331b      	adds	r3, #27
900048e6:	2212      	movs	r2, #18
900048e8:	4921      	ldr	r1, [pc, #132]	; (90004970 <get_tag_insert+0x170>)
900048ea:	4618      	mov	r0, r3
900048ec:	f00b fdce 	bl	9001048c <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
900048f0:	693b      	ldr	r3, [r7, #16]
900048f2:	f103 002d 	add.w	r0, r3, #45	; 0x2d
900048f6:	693b      	ldr	r3, [r7, #16]
900048f8:	3312      	adds	r3, #18
900048fa:	68fa      	ldr	r2, [r7, #12]
900048fc:	4619      	mov	r1, r3
900048fe:	f00b fdc5 	bl	9001048c <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
90004902:	68fb      	ldr	r3, [r7, #12]
90004904:	3312      	adds	r3, #18
90004906:	3318      	adds	r3, #24
90004908:	693a      	ldr	r2, [r7, #16]
9000490a:	4413      	add	r3, r2
9000490c:	3303      	adds	r3, #3
9000490e:	2207      	movs	r2, #7
90004910:	4918      	ldr	r1, [pc, #96]	; (90004974 <get_tag_insert+0x174>)
90004912:	4618      	mov	r0, r3
90004914:	f00b fdba 	bl	9001048c <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
90004918:	68fb      	ldr	r3, [r7, #12]
9000491a:	3319      	adds	r3, #25
9000491c:	693a      	ldr	r2, [r7, #16]
9000491e:	4413      	add	r3, r2
90004920:	2200      	movs	r2, #0
90004922:	76da      	strb	r2, [r3, #27]

  len = strlen(ssi->tag_insert);
90004924:	693b      	ldr	r3, [r7, #16]
90004926:	331b      	adds	r3, #27
90004928:	4618      	mov	r0, r3
9000492a:	f7fb fc7b 	bl	90000224 <strlen>
9000492e:	60f8      	str	r0, [r7, #12]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
90004930:	68fb      	ldr	r3, [r7, #12]
90004932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90004936:	d306      	bcc.n	90004946 <get_tag_insert+0x146>
90004938:	4b06      	ldr	r3, [pc, #24]	; (90004954 <get_tag_insert+0x154>)
9000493a:	f240 323f 	movw	r2, #831	; 0x33f
9000493e:	490e      	ldr	r1, [pc, #56]	; (90004978 <get_tag_insert+0x178>)
90004940:	4806      	ldr	r0, [pc, #24]	; (9000495c <get_tag_insert+0x15c>)
90004942:	f00b fdd3 	bl	900104ec <iprintf>
  ssi->tag_insert_len = (u16_t)len;
90004946:	68fb      	ldr	r3, [r7, #12]
90004948:	b29a      	uxth	r2, r3
9000494a:	693b      	ldr	r3, [r7, #16]
9000494c:	81da      	strh	r2, [r3, #14]
}
9000494e:	3718      	adds	r7, #24
90004950:	46bd      	mov	sp, r7
90004952:	bd80      	pop	{r7, pc}
90004954:	90011aa8 	.word	0x90011aa8
90004958:	90011b18 	.word	0x90011b18
9000495c:	90011af0 	.word	0x90011af0
90004960:	90011b24 	.word	0x90011b24
90004964:	20005158 	.word	0x20005158
90004968:	20005160 	.word	0x20005160
9000496c:	2000515c 	.word	0x2000515c
90004970:	90011b30 	.word	0x90011b30
90004974:	90011b44 	.word	0x90011b44
90004978:	90011b4c 	.word	0x90011b4c

9000497c <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
9000497c:	b580      	push	{r7, lr}
9000497e:	b084      	sub	sp, #16
90004980:	af00      	add	r7, sp, #0
90004982:	6078      	str	r0, [r7, #4]
90004984:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
90004986:	683b      	ldr	r3, [r7, #0]
90004988:	695b      	ldr	r3, [r3, #20]
9000498a:	2b00      	cmp	r3, #0
9000498c:	d105      	bne.n	9000499a <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
9000498e:	6839      	ldr	r1, [r7, #0]
90004990:	6878      	ldr	r0, [r7, #4]
90004992:	f7ff feca 	bl	9000472a <http_eof>
    return 0;
90004996:	2300      	movs	r3, #0
90004998:	e016      	b.n	900049c8 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
9000499a:	683b      	ldr	r3, [r7, #0]
9000499c:	695b      	ldr	r3, [r3, #20]
9000499e:	4618      	mov	r0, r3
900049a0:	f7ff fd7c 	bl	9000449c <fs_bytes_left>
900049a4:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
900049a6:	68fb      	ldr	r3, [r7, #12]
900049a8:	2b00      	cmp	r3, #0
900049aa:	dc05      	bgt.n	900049b8 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
900049ac:	6839      	ldr	r1, [r7, #0]
900049ae:	6878      	ldr	r0, [r7, #4]
900049b0:	f7ff febb 	bl	9000472a <http_eof>
    return 0;
900049b4:	2300      	movs	r3, #0
900049b6:	e007      	b.n	900049c8 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
900049b8:	4b05      	ldr	r3, [pc, #20]	; (900049d0 <http_check_eof+0x54>)
900049ba:	f240 429d 	movw	r2, #1181	; 0x49d
900049be:	4905      	ldr	r1, [pc, #20]	; (900049d4 <http_check_eof+0x58>)
900049c0:	4805      	ldr	r0, [pc, #20]	; (900049d8 <http_check_eof+0x5c>)
900049c2:	f00b fd93 	bl	900104ec <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
900049c6:	2301      	movs	r3, #1
}
900049c8:	4618      	mov	r0, r3
900049ca:	3710      	adds	r7, #16
900049cc:	46bd      	mov	sp, r7
900049ce:	bd80      	pop	{r7, pc}
900049d0:	90011aa8 	.word	0x90011aa8
900049d4:	90011b5c 	.word	0x90011b5c
900049d8:	90011af0 	.word	0x90011af0

900049dc <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
900049dc:	b580      	push	{r7, lr}
900049de:	b084      	sub	sp, #16
900049e0:	af00      	add	r7, sp, #0
900049e2:	6078      	str	r0, [r7, #4]
900049e4:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
900049e6:	2300      	movs	r3, #0
900049e8:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
900049ea:	683b      	ldr	r3, [r7, #0]
900049ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900049ee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
900049f2:	4293      	cmp	r3, r2
900049f4:	d803      	bhi.n	900049fe <http_send_data_nonssi+0x22>
900049f6:	683b      	ldr	r3, [r7, #0]
900049f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900049fa:	b29b      	uxth	r3, r3
900049fc:	e001      	b.n	90004a02 <http_send_data_nonssi+0x26>
900049fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
90004a02:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
90004a04:	683b      	ldr	r3, [r7, #0]
90004a06:	6999      	ldr	r1, [r3, #24]
90004a08:	f107 020c 	add.w	r2, r7, #12
90004a0c:	2300      	movs	r3, #0
90004a0e:	6878      	ldr	r0, [r7, #4]
90004a10:	f7ff fdd2 	bl	900045b8 <http_write>
90004a14:	4603      	mov	r3, r0
90004a16:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
90004a18:	f997 300e 	ldrsb.w	r3, [r7, #14]
90004a1c:	2b00      	cmp	r3, #0
90004a1e:	d10d      	bne.n	90004a3c <http_send_data_nonssi+0x60>
    data_to_send = 1;
90004a20:	2301      	movs	r3, #1
90004a22:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
90004a24:	683b      	ldr	r3, [r7, #0]
90004a26:	699b      	ldr	r3, [r3, #24]
90004a28:	89ba      	ldrh	r2, [r7, #12]
90004a2a:	441a      	add	r2, r3
90004a2c:	683b      	ldr	r3, [r7, #0]
90004a2e:	619a      	str	r2, [r3, #24]
    hs->left -= len;
90004a30:	683b      	ldr	r3, [r7, #0]
90004a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90004a34:	89ba      	ldrh	r2, [r7, #12]
90004a36:	1a9a      	subs	r2, r3, r2
90004a38:	683b      	ldr	r3, [r7, #0]
90004a3a:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
90004a3c:	7bfb      	ldrb	r3, [r7, #15]
}
90004a3e:	4618      	mov	r0, r3
90004a40:	3710      	adds	r7, #16
90004a42:	46bd      	mov	sp, r7
90004a44:	bd80      	pop	{r7, pc}
	...

90004a48 <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct altcp_pcb *pcb, struct http_state *hs)
{
90004a48:	b580      	push	{r7, lr}
90004a4a:	b086      	sub	sp, #24
90004a4c:	af00      	add	r7, sp, #0
90004a4e:	6078      	str	r0, [r7, #4]
90004a50:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
90004a52:	2300      	movs	r3, #0
90004a54:	75fb      	strb	r3, [r7, #23]
  u16_t len;
  u8_t data_to_send = 0;
90004a56:	2300      	movs	r3, #0
90004a58:	75bb      	strb	r3, [r7, #22]
  u8_t tag_type;

  struct http_ssi_state *ssi = hs->ssi;
90004a5a:	683b      	ldr	r3, [r7, #0]
90004a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90004a5e:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
90004a60:	693b      	ldr	r3, [r7, #16]
90004a62:	2b00      	cmp	r3, #0
90004a64:	d106      	bne.n	90004a74 <http_send_data_ssi+0x2c>
90004a66:	4b87      	ldr	r3, [pc, #540]	; (90004c84 <http_send_data_ssi+0x23c>)
90004a68:	f240 42cb 	movw	r2, #1227	; 0x4cb
90004a6c:	4986      	ldr	r1, [pc, #536]	; (90004c88 <http_send_data_ssi+0x240>)
90004a6e:	4887      	ldr	r0, [pc, #540]	; (90004c8c <http_send_data_ssi+0x244>)
90004a70:	f00b fd3c 	bl	900104ec <iprintf>
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = altcp_sndbuf(pcb);
90004a74:	687b      	ldr	r3, [r7, #4]
90004a76:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
90004a7a:	81fb      	strh	r3, [r7, #14]

  /* Do we have remaining data to send before parsing more? */
  if (ssi->parsed > hs->file) {
90004a7c:	693b      	ldr	r3, [r7, #16]
90004a7e:	681a      	ldr	r2, [r3, #0]
90004a80:	683b      	ldr	r3, [r7, #0]
90004a82:	699b      	ldr	r3, [r3, #24]
90004a84:	429a      	cmp	r2, r3
90004a86:	f240 826f 	bls.w	90004f68 <http_send_data_ssi+0x520>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
90004a8a:	693b      	ldr	r3, [r7, #16]
90004a8c:	681a      	ldr	r2, [r3, #0]
90004a8e:	683b      	ldr	r3, [r7, #0]
90004a90:	699b      	ldr	r3, [r3, #24]
90004a92:	1ad3      	subs	r3, r2, r3
90004a94:	f64f 72fe 	movw	r2, #65534	; 0xfffe
90004a98:	4293      	cmp	r3, r2
90004a9a:	dc06      	bgt.n	90004aaa <http_send_data_ssi+0x62>
90004a9c:	693b      	ldr	r3, [r7, #16]
90004a9e:	681a      	ldr	r2, [r3, #0]
90004aa0:	683b      	ldr	r3, [r7, #0]
90004aa2:	699b      	ldr	r3, [r3, #24]
90004aa4:	1ad3      	subs	r3, r2, r3
90004aa6:	b29b      	uxth	r3, r3
90004aa8:	e001      	b.n	90004aae <http_send_data_ssi+0x66>
90004aaa:	f64f 73ff 	movw	r3, #65535	; 0xffff
90004aae:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
90004ab0:	683b      	ldr	r3, [r7, #0]
90004ab2:	6999      	ldr	r1, [r3, #24]
90004ab4:	f107 020e 	add.w	r2, r7, #14
90004ab8:	2300      	movs	r3, #0
90004aba:	6878      	ldr	r0, [r7, #4]
90004abc:	f7ff fd7c 	bl	900045b8 <http_write>
90004ac0:	4603      	mov	r3, r0
90004ac2:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
90004ac4:	f997 3017 	ldrsb.w	r3, [r7, #23]
90004ac8:	2b00      	cmp	r3, #0
90004aca:	d10d      	bne.n	90004ae8 <http_send_data_ssi+0xa0>
      data_to_send = 1;
90004acc:	2301      	movs	r3, #1
90004ace:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
90004ad0:	683b      	ldr	r3, [r7, #0]
90004ad2:	699b      	ldr	r3, [r3, #24]
90004ad4:	89fa      	ldrh	r2, [r7, #14]
90004ad6:	441a      	add	r2, r3
90004ad8:	683b      	ldr	r3, [r7, #0]
90004ada:	619a      	str	r2, [r3, #24]
      hs->left -= len;
90004adc:	683b      	ldr	r3, [r7, #0]
90004ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90004ae0:	89fa      	ldrh	r2, [r7, #14]
90004ae2:	1a9a      	subs	r2, r3, r2
90004ae4:	683b      	ldr	r3, [r7, #0]
90004ae6:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* If the send buffer is full, return now. */
    if (altcp_sndbuf(pcb) == 0) {
90004ae8:	687b      	ldr	r3, [r7, #4]
90004aea:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
90004aee:	2b00      	cmp	r3, #0
90004af0:	f040 823a 	bne.w	90004f68 <http_send_data_ssi+0x520>
      return data_to_send;
90004af4:	7dbb      	ldrb	r3, [r7, #22]
90004af6:	e280      	b.n	90004ffa <http_send_data_ssi+0x5b2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("State %d, %d left\n", ssi->tag_state, (int)ssi->parse_left));

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
    if (len == 0) {
90004af8:	89fb      	ldrh	r3, [r7, #14]
90004afa:	2b00      	cmp	r3, #0
90004afc:	d101      	bne.n	90004b02 <http_send_data_ssi+0xba>
      return data_to_send;
90004afe:	7dbb      	ldrb	r3, [r7, #22]
90004b00:	e27b      	b.n	90004ffa <http_send_data_ssi+0x5b2>
    }
    switch (ssi->tag_state) {
90004b02:	693b      	ldr	r3, [r7, #16]
90004b04:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
90004b08:	2b04      	cmp	r3, #4
90004b0a:	f200 822c 	bhi.w	90004f66 <http_send_data_ssi+0x51e>
90004b0e:	a201      	add	r2, pc, #4	; (adr r2, 90004b14 <http_send_data_ssi+0xcc>)
90004b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90004b14:	90004b29 	.word	0x90004b29
90004b18:	90004b7b 	.word	0x90004b7b
90004b1c:	90004bed 	.word	0x90004bed
90004b20:	90004d35 	.word	0x90004d35
90004b24:	90004e7d 	.word	0x90004e7d
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
90004b28:	2300      	movs	r3, #0
90004b2a:	757b      	strb	r3, [r7, #21]
90004b2c:	e017      	b.n	90004b5e <http_send_data_ssi+0x116>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
90004b2e:	693b      	ldr	r3, [r7, #16]
90004b30:	681b      	ldr	r3, [r3, #0]
90004b32:	781a      	ldrb	r2, [r3, #0]
90004b34:	7d7b      	ldrb	r3, [r7, #21]
90004b36:	4956      	ldr	r1, [pc, #344]	; (90004c90 <http_send_data_ssi+0x248>)
90004b38:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
90004b3c:	781b      	ldrb	r3, [r3, #0]
90004b3e:	429a      	cmp	r2, r3
90004b40:	d10a      	bne.n	90004b58 <http_send_data_ssi+0x110>
            /* We found what could be the lead-in for a new tag so change
             * state appropriately. */
            ssi->tag_type = tag_type;
90004b42:	693b      	ldr	r3, [r7, #16]
90004b44:	7d7a      	ldrb	r2, [r7, #21]
90004b46:	741a      	strb	r2, [r3, #16]
            ssi->tag_state = TAG_LEADIN;
90004b48:	693b      	ldr	r3, [r7, #16]
90004b4a:	2201      	movs	r2, #1
90004b4c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            ssi->tag_index = 1;
90004b50:	693b      	ldr	r3, [r7, #16]
90004b52:	2201      	movs	r2, #1
90004b54:	819a      	strh	r2, [r3, #12]
  #if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->tag_started = ssi->parsed;
  #endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
            break;
90004b56:	e005      	b.n	90004b64 <http_send_data_ssi+0x11c>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
90004b58:	7d7b      	ldrb	r3, [r7, #21]
90004b5a:	3301      	adds	r3, #1
90004b5c:	757b      	strb	r3, [r7, #21]
90004b5e:	7d7b      	ldrb	r3, [r7, #21]
90004b60:	2b01      	cmp	r3, #1
90004b62:	d9e4      	bls.n	90004b2e <http_send_data_ssi+0xe6>
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
90004b64:	693b      	ldr	r3, [r7, #16]
90004b66:	689b      	ldr	r3, [r3, #8]
90004b68:	1e5a      	subs	r2, r3, #1
90004b6a:	693b      	ldr	r3, [r7, #16]
90004b6c:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
90004b6e:	693b      	ldr	r3, [r7, #16]
90004b70:	681b      	ldr	r3, [r3, #0]
90004b72:	1c5a      	adds	r2, r3, #1
90004b74:	693b      	ldr	r3, [r7, #16]
90004b76:	601a      	str	r2, [r3, #0]
        break;
90004b78:	e1f6      	b.n	90004f68 <http_send_data_ssi+0x520>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
90004b7a:	693b      	ldr	r3, [r7, #16]
90004b7c:	7c1b      	ldrb	r3, [r3, #16]
90004b7e:	461a      	mov	r2, r3
90004b80:	4b43      	ldr	r3, [pc, #268]	; (90004c90 <http_send_data_ssi+0x248>)
90004b82:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
90004b86:	693a      	ldr	r2, [r7, #16]
90004b88:	8992      	ldrh	r2, [r2, #12]
90004b8a:	4413      	add	r3, r2
90004b8c:	781b      	ldrb	r3, [r3, #0]
90004b8e:	2b00      	cmp	r3, #0
90004b90:	d107      	bne.n	90004ba2 <http_send_data_ssi+0x15a>
          ssi->tag_index = 0;
90004b92:	693b      	ldr	r3, [r7, #16]
90004b94:	2200      	movs	r2, #0
90004b96:	819a      	strh	r2, [r3, #12]
          ssi->tag_state = TAG_FOUND;
90004b98:	693b      	ldr	r3, [r7, #16]
90004b9a:	2202      	movs	r2, #2
90004b9c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
90004ba0:	e1e2      	b.n	90004f68 <http_send_data_ssi+0x520>
        } else {
          /* Have we found the next character we expect for the tag leadin? */
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
90004ba2:	693b      	ldr	r3, [r7, #16]
90004ba4:	681b      	ldr	r3, [r3, #0]
90004ba6:	781a      	ldrb	r2, [r3, #0]
90004ba8:	693b      	ldr	r3, [r7, #16]
90004baa:	7c1b      	ldrb	r3, [r3, #16]
90004bac:	4619      	mov	r1, r3
90004bae:	4b38      	ldr	r3, [pc, #224]	; (90004c90 <http_send_data_ssi+0x248>)
90004bb0:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
90004bb4:	6939      	ldr	r1, [r7, #16]
90004bb6:	8989      	ldrh	r1, [r1, #12]
90004bb8:	440b      	add	r3, r1
90004bba:	781b      	ldrb	r3, [r3, #0]
90004bbc:	429a      	cmp	r2, r3
90004bbe:	d106      	bne.n	90004bce <http_send_data_ssi+0x186>
            /* Yes - move to the next one unless we have found the complete
             * leadin, in which case we start looking for the tag itself */
            ssi->tag_index++;
90004bc0:	693b      	ldr	r3, [r7, #16]
90004bc2:	899b      	ldrh	r3, [r3, #12]
90004bc4:	3301      	adds	r3, #1
90004bc6:	b29a      	uxth	r2, r3
90004bc8:	693b      	ldr	r3, [r7, #16]
90004bca:	819a      	strh	r2, [r3, #12]
90004bcc:	e003      	b.n	90004bd6 <http_send_data_ssi+0x18e>
          } else {
            /* We found an unexpected character so this is not a tag. Move
             * back to idle state. */
            ssi->tag_state = TAG_NONE;
90004bce:	693b      	ldr	r3, [r7, #16]
90004bd0:	2200      	movs	r2, #0
90004bd2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
          }

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
90004bd6:	693b      	ldr	r3, [r7, #16]
90004bd8:	689b      	ldr	r3, [r3, #8]
90004bda:	1e5a      	subs	r2, r3, #1
90004bdc:	693b      	ldr	r3, [r7, #16]
90004bde:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
90004be0:	693b      	ldr	r3, [r7, #16]
90004be2:	681b      	ldr	r3, [r3, #0]
90004be4:	1c5a      	adds	r2, r3, #1
90004be6:	693b      	ldr	r3, [r7, #16]
90004be8:	601a      	str	r2, [r3, #0]
        }
        break;
90004bea:	e1bd      	b.n	90004f68 <http_send_data_ssi+0x520>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
90004bec:	693b      	ldr	r3, [r7, #16]
90004bee:	899b      	ldrh	r3, [r3, #12]
90004bf0:	2b00      	cmp	r3, #0
90004bf2:	d11e      	bne.n	90004c32 <http_send_data_ssi+0x1ea>
90004bf4:	693b      	ldr	r3, [r7, #16]
90004bf6:	681b      	ldr	r3, [r3, #0]
90004bf8:	781b      	ldrb	r3, [r3, #0]
90004bfa:	2b20      	cmp	r3, #32
90004bfc:	d00e      	beq.n	90004c1c <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
90004bfe:	693b      	ldr	r3, [r7, #16]
90004c00:	681b      	ldr	r3, [r3, #0]
90004c02:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
90004c04:	2b09      	cmp	r3, #9
90004c06:	d009      	beq.n	90004c1c <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
90004c08:	693b      	ldr	r3, [r7, #16]
90004c0a:	681b      	ldr	r3, [r3, #0]
90004c0c:	781b      	ldrb	r3, [r3, #0]
90004c0e:	2b0a      	cmp	r3, #10
90004c10:	d004      	beq.n	90004c1c <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\r'))) {
90004c12:	693b      	ldr	r3, [r7, #16]
90004c14:	681b      	ldr	r3, [r3, #0]
90004c16:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
90004c18:	2b0d      	cmp	r3, #13
90004c1a:	d10a      	bne.n	90004c32 <http_send_data_ssi+0x1ea>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
90004c1c:	693b      	ldr	r3, [r7, #16]
90004c1e:	689b      	ldr	r3, [r3, #8]
90004c20:	1e5a      	subs	r2, r3, #1
90004c22:	693b      	ldr	r3, [r7, #16]
90004c24:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
90004c26:	693b      	ldr	r3, [r7, #16]
90004c28:	681b      	ldr	r3, [r3, #0]
90004c2a:	1c5a      	adds	r2, r3, #1
90004c2c:	693b      	ldr	r3, [r7, #16]
90004c2e:	601a      	str	r2, [r3, #0]
          break;
90004c30:	e19a      	b.n	90004f68 <http_send_data_ssi+0x520>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
90004c32:	693b      	ldr	r3, [r7, #16]
90004c34:	681b      	ldr	r3, [r3, #0]
90004c36:	781a      	ldrb	r2, [r3, #0]
90004c38:	693b      	ldr	r3, [r7, #16]
90004c3a:	7c1b      	ldrb	r3, [r3, #16]
90004c3c:	4914      	ldr	r1, [pc, #80]	; (90004c90 <http_send_data_ssi+0x248>)
90004c3e:	00db      	lsls	r3, r3, #3
90004c40:	440b      	add	r3, r1
90004c42:	685b      	ldr	r3, [r3, #4]
90004c44:	781b      	ldrb	r3, [r3, #0]
90004c46:	429a      	cmp	r2, r3
90004c48:	d013      	beq.n	90004c72 <http_send_data_ssi+0x22a>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
90004c4a:	693b      	ldr	r3, [r7, #16]
90004c4c:	681b      	ldr	r3, [r3, #0]
90004c4e:	781b      	ldrb	r3, [r3, #0]
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
90004c50:	2b20      	cmp	r3, #32
90004c52:	d00e      	beq.n	90004c72 <http_send_data_ssi+0x22a>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
90004c54:	693b      	ldr	r3, [r7, #16]
90004c56:	681b      	ldr	r3, [r3, #0]
90004c58:	781b      	ldrb	r3, [r3, #0]
90004c5a:	2b09      	cmp	r3, #9
90004c5c:	d009      	beq.n	90004c72 <http_send_data_ssi+0x22a>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
90004c5e:	693b      	ldr	r3, [r7, #16]
90004c60:	681b      	ldr	r3, [r3, #0]
90004c62:	781b      	ldrb	r3, [r3, #0]
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
90004c64:	2b0a      	cmp	r3, #10
90004c66:	d004      	beq.n	90004c72 <http_send_data_ssi+0x22a>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
90004c68:	693b      	ldr	r3, [r7, #16]
90004c6a:	681b      	ldr	r3, [r3, #0]
90004c6c:	781b      	ldrb	r3, [r3, #0]
90004c6e:	2b0d      	cmp	r3, #13
90004c70:	d13f      	bne.n	90004cf2 <http_send_data_ssi+0x2aa>

          if (ssi->tag_index == 0) {
90004c72:	693b      	ldr	r3, [r7, #16]
90004c74:	899b      	ldrh	r3, [r3, #12]
90004c76:	2b00      	cmp	r3, #0
90004c78:	d10c      	bne.n	90004c94 <http_send_data_ssi+0x24c>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
90004c7a:	693b      	ldr	r3, [r7, #16]
90004c7c:	2200      	movs	r2, #0
90004c7e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
          if (ssi->tag_index == 0) {
90004c82:	e04c      	b.n	90004d1e <http_send_data_ssi+0x2d6>
90004c84:	90011aa8 	.word	0x90011aa8
90004c88:	90011b24 	.word	0x90011b24
90004c8c:	90011af0 	.word	0x90011af0
90004c90:	90015a48 	.word	0x90015a48
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
90004c94:	693b      	ldr	r3, [r7, #16]
90004c96:	2203      	movs	r2, #3
90004c98:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
90004c9c:	693b      	ldr	r3, [r7, #16]
90004c9e:	899b      	ldrh	r3, [r3, #12]
90004ca0:	2bff      	cmp	r3, #255	; 0xff
90004ca2:	d906      	bls.n	90004cb2 <http_send_data_ssi+0x26a>
90004ca4:	4b93      	ldr	r3, [pc, #588]	; (90004ef4 <http_send_data_ssi+0x4ac>)
90004ca6:	f240 523a 	movw	r2, #1338	; 0x53a
90004caa:	4993      	ldr	r1, [pc, #588]	; (90004ef8 <http_send_data_ssi+0x4b0>)
90004cac:	4893      	ldr	r0, [pc, #588]	; (90004efc <http_send_data_ssi+0x4b4>)
90004cae:	f00b fc1d 	bl	900104ec <iprintf>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
90004cb2:	693b      	ldr	r3, [r7, #16]
90004cb4:	899b      	ldrh	r3, [r3, #12]
90004cb6:	b2da      	uxtb	r2, r3
90004cb8:	693b      	ldr	r3, [r7, #16]
90004cba:	745a      	strb	r2, [r3, #17]
            ssi->tag_name[ssi->tag_index] = '\0';
90004cbc:	693b      	ldr	r3, [r7, #16]
90004cbe:	899b      	ldrh	r3, [r3, #12]
90004cc0:	461a      	mov	r2, r3
90004cc2:	693b      	ldr	r3, [r7, #16]
90004cc4:	4413      	add	r3, r2
90004cc6:	2200      	movs	r2, #0
90004cc8:	749a      	strb	r2, [r3, #18]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
90004cca:	693b      	ldr	r3, [r7, #16]
90004ccc:	681b      	ldr	r3, [r3, #0]
90004cce:	781a      	ldrb	r2, [r3, #0]
90004cd0:	693b      	ldr	r3, [r7, #16]
90004cd2:	7c1b      	ldrb	r3, [r3, #16]
90004cd4:	498a      	ldr	r1, [pc, #552]	; (90004f00 <http_send_data_ssi+0x4b8>)
90004cd6:	00db      	lsls	r3, r3, #3
90004cd8:	440b      	add	r3, r1
90004cda:	685b      	ldr	r3, [r3, #4]
90004cdc:	781b      	ldrb	r3, [r3, #0]
90004cde:	429a      	cmp	r2, r3
90004ce0:	d103      	bne.n	90004cea <http_send_data_ssi+0x2a2>
              ssi->tag_index = 1;
90004ce2:	693b      	ldr	r3, [r7, #16]
90004ce4:	2201      	movs	r2, #1
90004ce6:	819a      	strh	r2, [r3, #12]
          if (ssi->tag_index == 0) {
90004ce8:	e019      	b.n	90004d1e <http_send_data_ssi+0x2d6>
            } else {
              ssi->tag_index = 0;
90004cea:	693b      	ldr	r3, [r7, #16]
90004cec:	2200      	movs	r2, #0
90004cee:	819a      	strh	r2, [r3, #12]
          if (ssi->tag_index == 0) {
90004cf0:	e015      	b.n	90004d1e <http_send_data_ssi+0x2d6>
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
90004cf2:	693b      	ldr	r3, [r7, #16]
90004cf4:	899b      	ldrh	r3, [r3, #12]
90004cf6:	2b07      	cmp	r3, #7
90004cf8:	d80d      	bhi.n	90004d16 <http_send_data_ssi+0x2ce>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
90004cfa:	693b      	ldr	r3, [r7, #16]
90004cfc:	681a      	ldr	r2, [r3, #0]
90004cfe:	693b      	ldr	r3, [r7, #16]
90004d00:	899b      	ldrh	r3, [r3, #12]
90004d02:	1c59      	adds	r1, r3, #1
90004d04:	b288      	uxth	r0, r1
90004d06:	6939      	ldr	r1, [r7, #16]
90004d08:	8188      	strh	r0, [r1, #12]
90004d0a:	4619      	mov	r1, r3
90004d0c:	7812      	ldrb	r2, [r2, #0]
90004d0e:	693b      	ldr	r3, [r7, #16]
90004d10:	440b      	add	r3, r1
90004d12:	749a      	strb	r2, [r3, #18]
90004d14:	e003      	b.n	90004d1e <http_send_data_ssi+0x2d6>
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
90004d16:	693b      	ldr	r3, [r7, #16]
90004d18:	2200      	movs	r2, #0
90004d1a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
90004d1e:	693b      	ldr	r3, [r7, #16]
90004d20:	689b      	ldr	r3, [r3, #8]
90004d22:	1e5a      	subs	r2, r3, #1
90004d24:	693b      	ldr	r3, [r7, #16]
90004d26:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
90004d28:	693b      	ldr	r3, [r7, #16]
90004d2a:	681b      	ldr	r3, [r3, #0]
90004d2c:	1c5a      	adds	r2, r3, #1
90004d2e:	693b      	ldr	r3, [r7, #16]
90004d30:	601a      	str	r2, [r3, #0]

        break;
90004d32:	e119      	b.n	90004f68 <http_send_data_ssi+0x520>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
90004d34:	693b      	ldr	r3, [r7, #16]
90004d36:	899b      	ldrh	r3, [r3, #12]
90004d38:	2b00      	cmp	r3, #0
90004d3a:	d11e      	bne.n	90004d7a <http_send_data_ssi+0x332>
90004d3c:	693b      	ldr	r3, [r7, #16]
90004d3e:	681b      	ldr	r3, [r3, #0]
90004d40:	781b      	ldrb	r3, [r3, #0]
90004d42:	2b20      	cmp	r3, #32
90004d44:	d00e      	beq.n	90004d64 <http_send_data_ssi+0x31c>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
90004d46:	693b      	ldr	r3, [r7, #16]
90004d48:	681b      	ldr	r3, [r3, #0]
90004d4a:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
90004d4c:	2b09      	cmp	r3, #9
90004d4e:	d009      	beq.n	90004d64 <http_send_data_ssi+0x31c>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
90004d50:	693b      	ldr	r3, [r7, #16]
90004d52:	681b      	ldr	r3, [r3, #0]
90004d54:	781b      	ldrb	r3, [r3, #0]
90004d56:	2b0a      	cmp	r3, #10
90004d58:	d004      	beq.n	90004d64 <http_send_data_ssi+0x31c>
                                      (*ssi->parsed == '\r'))) {
90004d5a:	693b      	ldr	r3, [r7, #16]
90004d5c:	681b      	ldr	r3, [r3, #0]
90004d5e:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
90004d60:	2b0d      	cmp	r3, #13
90004d62:	d10a      	bne.n	90004d7a <http_send_data_ssi+0x332>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
90004d64:	693b      	ldr	r3, [r7, #16]
90004d66:	689b      	ldr	r3, [r3, #8]
90004d68:	1e5a      	subs	r2, r3, #1
90004d6a:	693b      	ldr	r3, [r7, #16]
90004d6c:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
90004d6e:	693b      	ldr	r3, [r7, #16]
90004d70:	681b      	ldr	r3, [r3, #0]
90004d72:	1c5a      	adds	r2, r3, #1
90004d74:	693b      	ldr	r3, [r7, #16]
90004d76:	601a      	str	r2, [r3, #0]
          break;
90004d78:	e0f6      	b.n	90004f68 <http_send_data_ssi+0x520>
        }

        /* Have we found the next character we expect for the tag leadout? */
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
90004d7a:	693b      	ldr	r3, [r7, #16]
90004d7c:	681b      	ldr	r3, [r3, #0]
90004d7e:	781a      	ldrb	r2, [r3, #0]
90004d80:	693b      	ldr	r3, [r7, #16]
90004d82:	7c1b      	ldrb	r3, [r3, #16]
90004d84:	495e      	ldr	r1, [pc, #376]	; (90004f00 <http_send_data_ssi+0x4b8>)
90004d86:	00db      	lsls	r3, r3, #3
90004d88:	440b      	add	r3, r1
90004d8a:	685b      	ldr	r3, [r3, #4]
90004d8c:	6939      	ldr	r1, [r7, #16]
90004d8e:	8989      	ldrh	r1, [r1, #12]
90004d90:	440b      	add	r3, r1
90004d92:	781b      	ldrb	r3, [r3, #0]
90004d94:	429a      	cmp	r2, r3
90004d96:	d162      	bne.n	90004e5e <http_send_data_ssi+0x416>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
90004d98:	693b      	ldr	r3, [r7, #16]
90004d9a:	689b      	ldr	r3, [r3, #8]
90004d9c:	1e5a      	subs	r2, r3, #1
90004d9e:	693b      	ldr	r3, [r7, #16]
90004da0:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
90004da2:	693b      	ldr	r3, [r7, #16]
90004da4:	681b      	ldr	r3, [r3, #0]
90004da6:	1c5a      	adds	r2, r3, #1
90004da8:	693b      	ldr	r3, [r7, #16]
90004daa:	601a      	str	r2, [r3, #0]
          ssi->tag_index++;
90004dac:	693b      	ldr	r3, [r7, #16]
90004dae:	899b      	ldrh	r3, [r3, #12]
90004db0:	3301      	adds	r3, #1
90004db2:	b29a      	uxth	r2, r3
90004db4:	693b      	ldr	r3, [r7, #16]
90004db6:	819a      	strh	r2, [r3, #12]

          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
90004db8:	693b      	ldr	r3, [r7, #16]
90004dba:	7c1b      	ldrb	r3, [r3, #16]
90004dbc:	4a50      	ldr	r2, [pc, #320]	; (90004f00 <http_send_data_ssi+0x4b8>)
90004dbe:	00db      	lsls	r3, r3, #3
90004dc0:	4413      	add	r3, r2
90004dc2:	685b      	ldr	r3, [r3, #4]
90004dc4:	693a      	ldr	r2, [r7, #16]
90004dc6:	8992      	ldrh	r2, [r2, #12]
90004dc8:	4413      	add	r3, r2
90004dca:	781b      	ldrb	r3, [r3, #0]
90004dcc:	2b00      	cmp	r3, #0
90004dce:	f040 80cb 	bne.w	90004f68 <http_send_data_ssi+0x520>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
90004dd2:	6838      	ldr	r0, [r7, #0]
90004dd4:	f7ff fd14 	bl	90004800 <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
90004dd8:	693b      	ldr	r3, [r7, #16]
90004dda:	2200      	movs	r2, #0
90004ddc:	819a      	strh	r2, [r3, #12]
            ssi->tag_state = TAG_SENDING;
90004dde:	693b      	ldr	r3, [r7, #16]
90004de0:	2204      	movs	r2, #4
90004de2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            ssi->tag_end = ssi->parsed;
90004de6:	693b      	ldr	r3, [r7, #16]
90004de8:	681a      	ldr	r2, [r3, #0]
90004dea:	693b      	ldr	r3, [r7, #16]
90004dec:	605a      	str	r2, [r3, #4]
            ssi->parsed = ssi->tag_started;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
90004dee:	693b      	ldr	r3, [r7, #16]
90004df0:	685a      	ldr	r2, [r3, #4]
90004df2:	683b      	ldr	r3, [r7, #0]
90004df4:	699b      	ldr	r3, [r3, #24]
90004df6:	429a      	cmp	r2, r3
90004df8:	f240 80b6 	bls.w	90004f68 <http_send_data_ssi+0x520>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
90004dfc:	693b      	ldr	r3, [r7, #16]
90004dfe:	685a      	ldr	r2, [r3, #4]
90004e00:	683b      	ldr	r3, [r7, #0]
90004e02:	699b      	ldr	r3, [r3, #24]
90004e04:	1ad3      	subs	r3, r2, r3
90004e06:	f64f 72fe 	movw	r2, #65534	; 0xfffe
90004e0a:	4293      	cmp	r3, r2
90004e0c:	dc06      	bgt.n	90004e1c <http_send_data_ssi+0x3d4>
90004e0e:	693b      	ldr	r3, [r7, #16]
90004e10:	685a      	ldr	r2, [r3, #4]
90004e12:	683b      	ldr	r3, [r7, #0]
90004e14:	699b      	ldr	r3, [r3, #24]
90004e16:	1ad3      	subs	r3, r2, r3
90004e18:	b29b      	uxth	r3, r3
90004e1a:	e001      	b.n	90004e20 <http_send_data_ssi+0x3d8>
90004e1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
90004e20:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
              /* we would include the tag in sending */
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
90004e22:	683b      	ldr	r3, [r7, #0]
90004e24:	6999      	ldr	r1, [r3, #24]
90004e26:	f107 020e 	add.w	r2, r7, #14
90004e2a:	2300      	movs	r3, #0
90004e2c:	6878      	ldr	r0, [r7, #4]
90004e2e:	f7ff fbc3 	bl	900045b8 <http_write>
90004e32:	4603      	mov	r3, r0
90004e34:	75fb      	strb	r3, [r7, #23]
              if (err == ERR_OK) {
90004e36:	f997 3017 	ldrsb.w	r3, [r7, #23]
90004e3a:	2b00      	cmp	r3, #0
90004e3c:	f040 8094 	bne.w	90004f68 <http_send_data_ssi+0x520>
                data_to_send = 1;
90004e40:	2301      	movs	r3, #1
90004e42:	75bb      	strb	r3, [r7, #22]
                if (ssi->tag_started <= hs->file) {
                  /* pretend to have sent the tag, too */
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
90004e44:	683b      	ldr	r3, [r7, #0]
90004e46:	699b      	ldr	r3, [r3, #24]
90004e48:	89fa      	ldrh	r2, [r7, #14]
90004e4a:	441a      	add	r2, r3
90004e4c:	683b      	ldr	r3, [r7, #0]
90004e4e:	619a      	str	r2, [r3, #24]
                hs->left -= len;
90004e50:	683b      	ldr	r3, [r7, #0]
90004e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90004e54:	89fa      	ldrh	r2, [r7, #14]
90004e56:	1a9a      	subs	r2, r3, r2
90004e58:	683b      	ldr	r3, [r7, #0]
90004e5a:	625a      	str	r2, [r3, #36]	; 0x24
90004e5c:	e084      	b.n	90004f68 <http_send_data_ssi+0x520>
            }
          }
        } else {
          /* We found an unexpected character so this is not a tag. Move
           * back to idle state. */
          ssi->parse_left--;
90004e5e:	693b      	ldr	r3, [r7, #16]
90004e60:	689b      	ldr	r3, [r3, #8]
90004e62:	1e5a      	subs	r2, r3, #1
90004e64:	693b      	ldr	r3, [r7, #16]
90004e66:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
90004e68:	693b      	ldr	r3, [r7, #16]
90004e6a:	681b      	ldr	r3, [r3, #0]
90004e6c:	1c5a      	adds	r2, r3, #1
90004e6e:	693b      	ldr	r3, [r7, #16]
90004e70:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
90004e72:	693b      	ldr	r3, [r7, #16]
90004e74:	2200      	movs	r2, #0
90004e76:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
        }
        break;
90004e7a:	e075      	b.n	90004f68 <http_send_data_ssi+0x520>
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if (ssi->tag_end > hs->file) {
90004e7c:	693b      	ldr	r3, [r7, #16]
90004e7e:	685a      	ldr	r2, [r3, #4]
90004e80:	683b      	ldr	r3, [r7, #0]
90004e82:	699b      	ldr	r3, [r3, #24]
90004e84:	429a      	cmp	r2, r3
90004e86:	d93d      	bls.n	90004f04 <http_send_data_ssi+0x4bc>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
90004e88:	693b      	ldr	r3, [r7, #16]
90004e8a:	685a      	ldr	r2, [r3, #4]
90004e8c:	683b      	ldr	r3, [r7, #0]
90004e8e:	699b      	ldr	r3, [r3, #24]
90004e90:	1ad3      	subs	r3, r2, r3
90004e92:	f64f 72fe 	movw	r2, #65534	; 0xfffe
90004e96:	4293      	cmp	r3, r2
90004e98:	dc06      	bgt.n	90004ea8 <http_send_data_ssi+0x460>
90004e9a:	693b      	ldr	r3, [r7, #16]
90004e9c:	685a      	ldr	r2, [r3, #4]
90004e9e:	683b      	ldr	r3, [r7, #0]
90004ea0:	699b      	ldr	r3, [r3, #24]
90004ea2:	1ad3      	subs	r3, r2, r3
90004ea4:	b29b      	uxth	r3, r3
90004ea6:	e001      	b.n	90004eac <http_send_data_ssi+0x464>
90004ea8:	f64f 73ff 	movw	r3, #65535	; 0xffff
90004eac:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
          /* we would include the tag in sending */
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
90004eae:	89fb      	ldrh	r3, [r7, #14]
90004eb0:	2b00      	cmp	r3, #0
90004eb2:	d00a      	beq.n	90004eca <http_send_data_ssi+0x482>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
90004eb4:	683b      	ldr	r3, [r7, #0]
90004eb6:	6999      	ldr	r1, [r3, #24]
90004eb8:	f107 020e 	add.w	r2, r7, #14
90004ebc:	2300      	movs	r3, #0
90004ebe:	6878      	ldr	r0, [r7, #4]
90004ec0:	f7ff fb7a 	bl	900045b8 <http_write>
90004ec4:	4603      	mov	r3, r0
90004ec6:	75fb      	strb	r3, [r7, #23]
90004ec8:	e001      	b.n	90004ece <http_send_data_ssi+0x486>
          } else {
            err = ERR_OK;
90004eca:	2300      	movs	r3, #0
90004ecc:	75fb      	strb	r3, [r7, #23]
          }
          if (err == ERR_OK) {
90004ece:	f997 3017 	ldrsb.w	r3, [r7, #23]
90004ed2:	2b00      	cmp	r3, #0
90004ed4:	d148      	bne.n	90004f68 <http_send_data_ssi+0x520>
            data_to_send = 1;
90004ed6:	2301      	movs	r3, #1
90004ed8:	75bb      	strb	r3, [r7, #22]
            if (ssi->tag_started <= hs->file) {
              /* pretend to have sent the tag, too */
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
90004eda:	683b      	ldr	r3, [r7, #0]
90004edc:	699b      	ldr	r3, [r3, #24]
90004ede:	89fa      	ldrh	r2, [r7, #14]
90004ee0:	441a      	add	r2, r3
90004ee2:	683b      	ldr	r3, [r7, #0]
90004ee4:	619a      	str	r2, [r3, #24]
            hs->left -= len;
90004ee6:	683b      	ldr	r3, [r7, #0]
90004ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90004eea:	89fa      	ldrh	r2, [r7, #14]
90004eec:	1a9a      	subs	r2, r3, r2
90004eee:	683b      	ldr	r3, [r7, #0]
90004ef0:	625a      	str	r2, [r3, #36]	; 0x24
90004ef2:	e039      	b.n	90004f68 <http_send_data_ssi+0x520>
90004ef4:	90011aa8 	.word	0x90011aa8
90004ef8:	90011b94 	.word	0x90011b94
90004efc:	90011af0 	.word	0x90011af0
90004f00:	90015a48 	.word	0x90015a48
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if (ssi->tag_index < ssi->tag_insert_len) {
90004f04:	693b      	ldr	r3, [r7, #16]
90004f06:	899a      	ldrh	r2, [r3, #12]
90004f08:	693b      	ldr	r3, [r7, #16]
90004f0a:	89db      	ldrh	r3, [r3, #14]
90004f0c:	429a      	cmp	r2, r3
90004f0e:	d222      	bcs.n	90004f56 <http_send_data_ssi+0x50e>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            len = (ssi->tag_insert_len - ssi->tag_index);
90004f10:	693b      	ldr	r3, [r7, #16]
90004f12:	89da      	ldrh	r2, [r3, #14]
90004f14:	693b      	ldr	r3, [r7, #16]
90004f16:	899b      	ldrh	r3, [r3, #12]
90004f18:	1ad3      	subs	r3, r2, r3
90004f1a:	b29b      	uxth	r3, r3
90004f1c:	81fb      	strh	r3, [r7, #14]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
90004f1e:	693b      	ldr	r3, [r7, #16]
90004f20:	899b      	ldrh	r3, [r3, #12]
90004f22:	3318      	adds	r3, #24
90004f24:	693a      	ldr	r2, [r7, #16]
90004f26:	4413      	add	r3, r2
90004f28:	1cd9      	adds	r1, r3, #3
90004f2a:	f107 020e 	add.w	r2, r7, #14
90004f2e:	2301      	movs	r3, #1
90004f30:	6878      	ldr	r0, [r7, #4]
90004f32:	f7ff fb41 	bl	900045b8 <http_write>
90004f36:	4603      	mov	r3, r0
90004f38:	75fb      	strb	r3, [r7, #23]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
90004f3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
90004f3e:	2b00      	cmp	r3, #0
90004f40:	d112      	bne.n	90004f68 <http_send_data_ssi+0x520>
              data_to_send = 1;
90004f42:	2301      	movs	r3, #1
90004f44:	75bb      	strb	r3, [r7, #22]
              ssi->tag_index += len;
90004f46:	693b      	ldr	r3, [r7, #16]
90004f48:	899a      	ldrh	r2, [r3, #12]
90004f4a:	89fb      	ldrh	r3, [r7, #14]
90004f4c:	4413      	add	r3, r2
90004f4e:	b29a      	uxth	r2, r3
90004f50:	693b      	ldr	r3, [r7, #16]
90004f52:	819a      	strh	r2, [r3, #12]
90004f54:	e008      	b.n	90004f68 <http_send_data_ssi+0x520>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            {
              /* We have sent all the insert data so go back to looking for
               * a new tag. */
              LWIP_DEBUGF(HTTPD_DEBUG, ("Everything sent.\n"));
              ssi->tag_index = 0;
90004f56:	693b      	ldr	r3, [r7, #16]
90004f58:	2200      	movs	r2, #0
90004f5a:	819a      	strh	r2, [r3, #12]
              ssi->tag_state = TAG_NONE;
90004f5c:	693b      	ldr	r3, [r7, #16]
90004f5e:	2200      	movs	r2, #0
90004f60:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
90004f64:	e000      	b.n	90004f68 <http_send_data_ssi+0x520>
        default:
          break;
90004f66:	bf00      	nop
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
90004f68:	693b      	ldr	r3, [r7, #16]
90004f6a:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
90004f6e:	2b04      	cmp	r3, #4
90004f70:	d003      	beq.n	90004f7a <http_send_data_ssi+0x532>
90004f72:	693b      	ldr	r3, [r7, #16]
90004f74:	689b      	ldr	r3, [r3, #8]
90004f76:	2b00      	cmp	r3, #0
90004f78:	d004      	beq.n	90004f84 <http_send_data_ssi+0x53c>
90004f7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
90004f7e:	2b00      	cmp	r3, #0
90004f80:	f43f adba 	beq.w	90004af8 <http_send_data_ssi+0xb0>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
90004f84:	693b      	ldr	r3, [r7, #16]
90004f86:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
90004f8a:	2b04      	cmp	r3, #4
90004f8c:	d034      	beq.n	90004ff8 <http_send_data_ssi+0x5b0>
90004f8e:	693b      	ldr	r3, [r7, #16]
90004f90:	681a      	ldr	r2, [r3, #0]
90004f92:	683b      	ldr	r3, [r7, #0]
90004f94:	699b      	ldr	r3, [r3, #24]
90004f96:	429a      	cmp	r2, r3
90004f98:	d92e      	bls.n	90004ff8 <http_send_data_ssi+0x5b0>
      ssi->parsed = ssi->tag_started;
      ssi->tag_started = hs->buf;
    } else
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ && !LWIP_HTTPD_SSI_INCLUDE_TAG */
    {
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
90004f9a:	693b      	ldr	r3, [r7, #16]
90004f9c:	681a      	ldr	r2, [r3, #0]
90004f9e:	683b      	ldr	r3, [r7, #0]
90004fa0:	699b      	ldr	r3, [r3, #24]
90004fa2:	1ad3      	subs	r3, r2, r3
90004fa4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
90004fa8:	4293      	cmp	r3, r2
90004faa:	dc06      	bgt.n	90004fba <http_send_data_ssi+0x572>
90004fac:	693b      	ldr	r3, [r7, #16]
90004fae:	681a      	ldr	r2, [r3, #0]
90004fb0:	683b      	ldr	r3, [r7, #0]
90004fb2:	699b      	ldr	r3, [r3, #24]
90004fb4:	1ad3      	subs	r3, r2, r3
90004fb6:	b29b      	uxth	r3, r3
90004fb8:	e001      	b.n	90004fbe <http_send_data_ssi+0x576>
90004fba:	f64f 73ff 	movw	r3, #65535	; 0xffff
90004fbe:	81fb      	strh	r3, [r7, #14]
    }

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
90004fc0:	683b      	ldr	r3, [r7, #0]
90004fc2:	6999      	ldr	r1, [r3, #24]
90004fc4:	f107 020e 	add.w	r2, r7, #14
90004fc8:	2300      	movs	r3, #0
90004fca:	6878      	ldr	r0, [r7, #4]
90004fcc:	f7ff faf4 	bl	900045b8 <http_write>
90004fd0:	4603      	mov	r3, r0
90004fd2:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
90004fd4:	f997 3017 	ldrsb.w	r3, [r7, #23]
90004fd8:	2b00      	cmp	r3, #0
90004fda:	d10d      	bne.n	90004ff8 <http_send_data_ssi+0x5b0>
      data_to_send = 1;
90004fdc:	2301      	movs	r3, #1
90004fde:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
90004fe0:	683b      	ldr	r3, [r7, #0]
90004fe2:	699b      	ldr	r3, [r3, #24]
90004fe4:	89fa      	ldrh	r2, [r7, #14]
90004fe6:	441a      	add	r2, r3
90004fe8:	683b      	ldr	r3, [r7, #0]
90004fea:	619a      	str	r2, [r3, #24]
      hs->left -= len;
90004fec:	683b      	ldr	r3, [r7, #0]
90004fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90004ff0:	89fa      	ldrh	r2, [r7, #14]
90004ff2:	1a9a      	subs	r2, r3, r2
90004ff4:	683b      	ldr	r3, [r7, #0]
90004ff6:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }
  return data_to_send;
90004ff8:	7dbb      	ldrb	r3, [r7, #22]
}
90004ffa:	4618      	mov	r0, r3
90004ffc:	3718      	adds	r7, #24
90004ffe:	46bd      	mov	sp, r7
90005000:	bd80      	pop	{r7, pc}
90005002:	bf00      	nop

90005004 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
90005004:	b580      	push	{r7, lr}
90005006:	b084      	sub	sp, #16
90005008:	af00      	add	r7, sp, #0
9000500a:	6078      	str	r0, [r7, #4]
9000500c:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
9000500e:	2300      	movs	r3, #0
90005010:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
90005012:	683b      	ldr	r3, [r7, #0]
90005014:	2b00      	cmp	r3, #0
90005016:	d101      	bne.n	9000501c <http_send+0x18>
    return 0;
90005018:	2300      	movs	r3, #0
9000501a:	e030      	b.n	9000507e <http_send+0x7a>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
9000501c:	683b      	ldr	r3, [r7, #0]
9000501e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90005020:	2b00      	cmp	r3, #0
90005022:	d108      	bne.n	90005036 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
90005024:	6839      	ldr	r1, [r7, #0]
90005026:	6878      	ldr	r0, [r7, #4]
90005028:	f7ff fca8 	bl	9000497c <http_check_eof>
9000502c:	4603      	mov	r3, r0
9000502e:	2b00      	cmp	r3, #0
90005030:	d101      	bne.n	90005036 <http_send+0x32>
      return 0;
90005032:	2300      	movs	r3, #0
90005034:	e023      	b.n	9000507e <http_send+0x7a>
    }
  }

#if LWIP_HTTPD_SSI
  if (hs->ssi) {
90005036:	683b      	ldr	r3, [r7, #0]
90005038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000503a:	2b00      	cmp	r3, #0
9000503c:	d006      	beq.n	9000504c <http_send+0x48>
    data_to_send = http_send_data_ssi(pcb, hs);
9000503e:	6839      	ldr	r1, [r7, #0]
90005040:	6878      	ldr	r0, [r7, #4]
90005042:	f7ff fd01 	bl	90004a48 <http_send_data_ssi>
90005046:	4603      	mov	r3, r0
90005048:	73fb      	strb	r3, [r7, #15]
9000504a:	e005      	b.n	90005058 <http_send+0x54>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
9000504c:	6839      	ldr	r1, [r7, #0]
9000504e:	6878      	ldr	r0, [r7, #4]
90005050:	f7ff fcc4 	bl	900049dc <http_send_data_nonssi>
90005054:	4603      	mov	r3, r0
90005056:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
90005058:	683b      	ldr	r3, [r7, #0]
9000505a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000505c:	2b00      	cmp	r3, #0
9000505e:	d10d      	bne.n	9000507c <http_send+0x78>
90005060:	683b      	ldr	r3, [r7, #0]
90005062:	695b      	ldr	r3, [r3, #20]
90005064:	4618      	mov	r0, r3
90005066:	f7ff fa19 	bl	9000449c <fs_bytes_left>
9000506a:	4603      	mov	r3, r0
9000506c:	2b00      	cmp	r3, #0
9000506e:	dc05      	bgt.n	9000507c <http_send+0x78>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
90005070:	6839      	ldr	r1, [r7, #0]
90005072:	6878      	ldr	r0, [r7, #4]
90005074:	f7ff fb59 	bl	9000472a <http_eof>
    return 0;
90005078:	2300      	movs	r3, #0
9000507a:	e000      	b.n	9000507e <http_send+0x7a>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
9000507c:	7bfb      	ldrb	r3, [r7, #15]
}
9000507e:	4618      	mov	r0, r3
90005080:	3710      	adds	r7, #16
90005082:	46bd      	mov	sp, r7
90005084:	bd80      	pop	{r7, pc}
	...

90005088 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
90005088:	b580      	push	{r7, lr}
9000508a:	b084      	sub	sp, #16
9000508c:	af00      	add	r7, sp, #0
9000508e:	6078      	str	r0, [r7, #4]
90005090:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
90005092:	683b      	ldr	r3, [r7, #0]
90005094:	4a1c      	ldr	r2, [pc, #112]	; (90005108 <http_get_404_file+0x80>)
90005096:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
90005098:	687a      	ldr	r2, [r7, #4]
9000509a:	683b      	ldr	r3, [r7, #0]
9000509c:	681b      	ldr	r3, [r3, #0]
9000509e:	4619      	mov	r1, r3
900050a0:	4610      	mov	r0, r2
900050a2:	f7ff f9b3 	bl	9000440c <fs_open>
900050a6:	4603      	mov	r3, r0
900050a8:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
900050aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
900050ae:	2b00      	cmp	r3, #0
900050b0:	d024      	beq.n	900050fc <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
900050b2:	683b      	ldr	r3, [r7, #0]
900050b4:	4a15      	ldr	r2, [pc, #84]	; (9000510c <http_get_404_file+0x84>)
900050b6:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
900050b8:	687a      	ldr	r2, [r7, #4]
900050ba:	683b      	ldr	r3, [r7, #0]
900050bc:	681b      	ldr	r3, [r3, #0]
900050be:	4619      	mov	r1, r3
900050c0:	4610      	mov	r0, r2
900050c2:	f7ff f9a3 	bl	9000440c <fs_open>
900050c6:	4603      	mov	r3, r0
900050c8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
900050ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
900050ce:	2b00      	cmp	r3, #0
900050d0:	d014      	beq.n	900050fc <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
900050d2:	683b      	ldr	r3, [r7, #0]
900050d4:	4a0e      	ldr	r2, [pc, #56]	; (90005110 <http_get_404_file+0x88>)
900050d6:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
900050d8:	687a      	ldr	r2, [r7, #4]
900050da:	683b      	ldr	r3, [r7, #0]
900050dc:	681b      	ldr	r3, [r3, #0]
900050de:	4619      	mov	r1, r3
900050e0:	4610      	mov	r0, r2
900050e2:	f7ff f993 	bl	9000440c <fs_open>
900050e6:	4603      	mov	r3, r0
900050e8:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
900050ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
900050ee:	2b00      	cmp	r3, #0
900050f0:	d004      	beq.n	900050fc <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
900050f2:	683b      	ldr	r3, [r7, #0]
900050f4:	2200      	movs	r2, #0
900050f6:	601a      	str	r2, [r3, #0]
        return NULL;
900050f8:	2300      	movs	r3, #0
900050fa:	e000      	b.n	900050fe <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
900050fc:	687b      	ldr	r3, [r7, #4]
}
900050fe:	4618      	mov	r0, r3
90005100:	3710      	adds	r7, #16
90005102:	46bd      	mov	sp, r7
90005104:	bd80      	pop	{r7, pc}
90005106:	bf00      	nop
90005108:	90011bac 	.word	0x90011bac
9000510c:	90011bb8 	.word	0x90011bb8
90005110:	90011bc4 	.word	0x90011bc4

90005114 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
90005114:	b580      	push	{r7, lr}
90005116:	b08e      	sub	sp, #56	; 0x38
90005118:	af00      	add	r7, sp, #0
9000511a:	60f8      	str	r0, [r7, #12]
9000511c:	60b9      	str	r1, [r7, #8]
9000511e:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
90005120:	68fb      	ldr	r3, [r7, #12]
90005122:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
90005124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90005126:	2b00      	cmp	r3, #0
90005128:	d106      	bne.n	90005138 <http_parse_request+0x24>
9000512a:	4b65      	ldr	r3, [pc, #404]	; (900052c0 <http_parse_request+0x1ac>)
9000512c:	f240 72ae 	movw	r2, #1966	; 0x7ae
90005130:	4964      	ldr	r1, [pc, #400]	; (900052c4 <http_parse_request+0x1b0>)
90005132:	4865      	ldr	r0, [pc, #404]	; (900052c8 <http_parse_request+0x1b4>)
90005134:	f00b f9da 	bl	900104ec <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
90005138:	68bb      	ldr	r3, [r7, #8]
9000513a:	2b00      	cmp	r3, #0
9000513c:	d106      	bne.n	9000514c <http_parse_request+0x38>
9000513e:	4b60      	ldr	r3, [pc, #384]	; (900052c0 <http_parse_request+0x1ac>)
90005140:	f240 72af 	movw	r2, #1967	; 0x7af
90005144:	4961      	ldr	r1, [pc, #388]	; (900052cc <http_parse_request+0x1b8>)
90005146:	4860      	ldr	r0, [pc, #384]	; (900052c8 <http_parse_request+0x1b4>)
90005148:	f00b f9d0 	bl	900104ec <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
9000514c:	68bb      	ldr	r3, [r7, #8]
9000514e:	695b      	ldr	r3, [r3, #20]
90005150:	2b00      	cmp	r3, #0
90005152:	d103      	bne.n	9000515c <http_parse_request+0x48>
90005154:	68bb      	ldr	r3, [r7, #8]
90005156:	699b      	ldr	r3, [r3, #24]
90005158:	2b00      	cmp	r3, #0
9000515a:	d002      	beq.n	90005162 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
9000515c:	f06f 0307 	mvn.w	r3, #7
90005160:	e0a9      	b.n	900052b6 <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
90005162:	68bb      	ldr	r3, [r7, #8]
90005164:	6a1b      	ldr	r3, [r3, #32]
90005166:	2b00      	cmp	r3, #0
90005168:	d103      	bne.n	90005172 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
9000516a:	68bb      	ldr	r3, [r7, #8]
9000516c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
9000516e:	621a      	str	r2, [r3, #32]
90005170:	e005      	b.n	9000517e <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
90005172:	68bb      	ldr	r3, [r7, #8]
90005174:	6a1b      	ldr	r3, [r3, #32]
90005176:	6a79      	ldr	r1, [r7, #36]	; 0x24
90005178:	4618      	mov	r0, r3
9000517a:	f002 f963 	bl	90007444 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
9000517e:	6a78      	ldr	r0, [r7, #36]	; 0x24
90005180:	f002 f93e 	bl	90007400 <pbuf_ref>

  if (hs->req->next != NULL) {
90005184:	68bb      	ldr	r3, [r7, #8]
90005186:	6a1b      	ldr	r3, [r3, #32]
90005188:	681b      	ldr	r3, [r3, #0]
9000518a:	2b00      	cmp	r3, #0
9000518c:	d012      	beq.n	900051b4 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
9000518e:	68bb      	ldr	r3, [r7, #8]
90005190:	6a1b      	ldr	r3, [r3, #32]
90005192:	891b      	ldrh	r3, [r3, #8]
90005194:	f240 32ff 	movw	r2, #1023	; 0x3ff
90005198:	4293      	cmp	r3, r2
9000519a:	bf28      	it	cs
9000519c:	4613      	movcs	r3, r2
9000519e:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
900051a0:	68bb      	ldr	r3, [r7, #8]
900051a2:	6a18      	ldr	r0, [r3, #32]
900051a4:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
900051a6:	2300      	movs	r3, #0
900051a8:	4949      	ldr	r1, [pc, #292]	; (900052d0 <http_parse_request+0x1bc>)
900051aa:	f002 fa73 	bl	90007694 <pbuf_copy_partial>
    data = httpd_req_buf;
900051ae:	4b48      	ldr	r3, [pc, #288]	; (900052d0 <http_parse_request+0x1bc>)
900051b0:	637b      	str	r3, [r7, #52]	; 0x34
900051b2:	e005      	b.n	900051c0 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
900051b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900051b6:	685b      	ldr	r3, [r3, #4]
900051b8:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
900051ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900051bc:	895b      	ldrh	r3, [r3, #10]
900051be:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
900051c0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
900051c2:	2b06      	cmp	r3, #6
900051c4:	d962      	bls.n	9000528c <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
900051c6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
900051c8:	461a      	mov	r2, r3
900051ca:	4942      	ldr	r1, [pc, #264]	; (900052d4 <http_parse_request+0x1c0>)
900051cc:	6b78      	ldr	r0, [r7, #52]	; 0x34
900051ce:	f000 fcdd 	bl	90005b8c <lwip_strnstr>
900051d2:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
900051d4:	6a3b      	ldr	r3, [r7, #32]
900051d6:	2b00      	cmp	r3, #0
900051d8:	d058      	beq.n	9000528c <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
900051da:	2300      	movs	r3, #0
900051dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
900051de:	2204      	movs	r2, #4
900051e0:	493d      	ldr	r1, [pc, #244]	; (900052d8 <http_parse_request+0x1c4>)
900051e2:	6b78      	ldr	r0, [r7, #52]	; 0x34
900051e4:	f00b fa1c 	bl	90010620 <strncmp>
900051e8:	4603      	mov	r3, r0
900051ea:	2b00      	cmp	r3, #0
900051ec:	d116      	bne.n	9000521c <http_parse_request+0x108>
        sp1 = data + 3;
900051ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
900051f0:	3303      	adds	r3, #3
900051f2:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
900051f4:	69fb      	ldr	r3, [r7, #28]
900051f6:	1c5a      	adds	r2, r3, #1
900051f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
900051fa:	1ad3      	subs	r3, r2, r3
900051fc:	b29b      	uxth	r3, r3
900051fe:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
90005200:	1ad3      	subs	r3, r2, r3
90005202:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
90005204:	69fb      	ldr	r3, [r7, #28]
90005206:	3301      	adds	r3, #1
90005208:	8b7a      	ldrh	r2, [r7, #26]
9000520a:	4934      	ldr	r1, [pc, #208]	; (900052dc <http_parse_request+0x1c8>)
9000520c:	4618      	mov	r0, r3
9000520e:	f000 fcbd 	bl	90005b8c <lwip_strnstr>
90005212:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
90005214:	6abb      	ldr	r3, [r7, #40]	; 0x28
90005216:	2b00      	cmp	r3, #0
90005218:	d111      	bne.n	9000523e <http_parse_request+0x12a>
9000521a:	e006      	b.n	9000522a <http_parse_request+0x116>
        data[4] = 0;
9000521c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000521e:	3304      	adds	r3, #4
90005220:	2200      	movs	r2, #0
90005222:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
90005224:	f06f 030f 	mvn.w	r3, #15
90005228:	e045      	b.n	900052b6 <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
9000522a:	69fb      	ldr	r3, [r7, #28]
9000522c:	3301      	adds	r3, #1
9000522e:	8b7a      	ldrh	r2, [r7, #26]
90005230:	4928      	ldr	r1, [pc, #160]	; (900052d4 <http_parse_request+0x1c0>)
90005232:	4618      	mov	r0, r3
90005234:	f000 fcaa 	bl	90005b8c <lwip_strnstr>
90005238:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
9000523a:	2301      	movs	r3, #1
9000523c:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
9000523e:	69fb      	ldr	r3, [r7, #28]
90005240:	3301      	adds	r3, #1
90005242:	6aba      	ldr	r2, [r7, #40]	; 0x28
90005244:	1ad3      	subs	r3, r2, r3
90005246:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
90005248:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000524a:	2b00      	cmp	r3, #0
9000524c:	d01e      	beq.n	9000528c <http_parse_request+0x178>
9000524e:	6aba      	ldr	r2, [r7, #40]	; 0x28
90005250:	69fb      	ldr	r3, [r7, #28]
90005252:	429a      	cmp	r2, r3
90005254:	d91a      	bls.n	9000528c <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
90005256:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
90005258:	461a      	mov	r2, r3
9000525a:	4921      	ldr	r1, [pc, #132]	; (900052e0 <http_parse_request+0x1cc>)
9000525c:	6b78      	ldr	r0, [r7, #52]	; 0x34
9000525e:	f000 fc95 	bl	90005b8c <lwip_strnstr>
90005262:	4603      	mov	r3, r0
90005264:	2b00      	cmp	r3, #0
90005266:	d011      	beq.n	9000528c <http_parse_request+0x178>
          char *uri = sp1 + 1;
90005268:	69fb      	ldr	r3, [r7, #28]
9000526a:	3301      	adds	r3, #1
9000526c:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
9000526e:	69fb      	ldr	r3, [r7, #28]
90005270:	2200      	movs	r2, #0
90005272:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
90005274:	8b3b      	ldrh	r3, [r7, #24]
90005276:	697a      	ldr	r2, [r7, #20]
90005278:	4413      	add	r3, r2
9000527a:	2200      	movs	r2, #0
9000527c:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
9000527e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
90005280:	6979      	ldr	r1, [r7, #20]
90005282:	68b8      	ldr	r0, [r7, #8]
90005284:	f000 f880 	bl	90005388 <http_find_file>
90005288:	4603      	mov	r3, r0
9000528a:	e014      	b.n	900052b6 <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
9000528c:	68bb      	ldr	r3, [r7, #8]
9000528e:	6a1b      	ldr	r3, [r3, #32]
90005290:	4618      	mov	r0, r3
90005292:	f002 f89d 	bl	900073d0 <pbuf_clen>
90005296:	4603      	mov	r3, r0
90005298:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
9000529a:	68bb      	ldr	r3, [r7, #8]
9000529c:	6a1b      	ldr	r3, [r3, #32]
9000529e:	891b      	ldrh	r3, [r3, #8]
900052a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
900052a4:	d205      	bcs.n	900052b2 <http_parse_request+0x19e>
900052a6:	8a7b      	ldrh	r3, [r7, #18]
900052a8:	2b05      	cmp	r3, #5
900052aa:	d802      	bhi.n	900052b2 <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
900052ac:	f06f 0304 	mvn.w	r3, #4
900052b0:	e001      	b.n	900052b6 <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
900052b2:	f06f 030f 	mvn.w	r3, #15
  }
}
900052b6:	4618      	mov	r0, r3
900052b8:	3738      	adds	r7, #56	; 0x38
900052ba:	46bd      	mov	sp, r7
900052bc:	bd80      	pop	{r7, pc}
900052be:	bf00      	nop
900052c0:	90011aa8 	.word	0x90011aa8
900052c4:	90011bd0 	.word	0x90011bd0
900052c8:	90011af0 	.word	0x90011af0
900052cc:	90011b18 	.word	0x90011b18
900052d0:	20004d18 	.word	0x20004d18
900052d4:	90011bdc 	.word	0x90011bdc
900052d8:	90011be0 	.word	0x90011be0
900052dc:	90011be8 	.word	0x90011be8
900052e0:	90011bec 	.word	0x90011bec

900052e4 <http_uri_is_ssi>:
 *
 * @return 1 for SSI, 0 for standard files
 */
static u8_t
http_uri_is_ssi(struct fs_file *file, const char *uri)
{
900052e4:	b580      	push	{r7, lr}
900052e6:	b088      	sub	sp, #32
900052e8:	af00      	add	r7, sp, #0
900052ea:	6078      	str	r0, [r7, #4]
900052ec:	6039      	str	r1, [r7, #0]
  size_t loop;
  u8_t tag_check = 0;
900052ee:	2300      	movs	r3, #0
900052f0:	76fb      	strb	r3, [r7, #27]
  if (file != NULL) {
900052f2:	687b      	ldr	r3, [r7, #4]
900052f4:	2b00      	cmp	r3, #0
900052f6:	d040      	beq.n	9000537a <http_uri_is_ssi+0x96>
    /* See if we have been asked for an shtml file and, if so,
        enable tag checking. */
    const char *ext = NULL, *sub;
900052f8:	2300      	movs	r3, #0
900052fa:	617b      	str	r3, [r7, #20]
    char *param = (char *)strstr(uri, "?");
900052fc:	213f      	movs	r1, #63	; 0x3f
900052fe:	6838      	ldr	r0, [r7, #0]
90005300:	f00b f979 	bl	900105f6 <strchr>
90005304:	60f8      	str	r0, [r7, #12]
    if (param != NULL) {
90005306:	68fb      	ldr	r3, [r7, #12]
90005308:	2b00      	cmp	r3, #0
9000530a:	d002      	beq.n	90005312 <http_uri_is_ssi+0x2e>
      /* separate uri from parameters for now, set back later */
      *param = 0;
9000530c:	68fb      	ldr	r3, [r7, #12]
9000530e:	2200      	movs	r2, #0
90005310:	701a      	strb	r2, [r3, #0]
    }
    sub = uri;
90005312:	683b      	ldr	r3, [r7, #0]
90005314:	613b      	str	r3, [r7, #16]
    ext = uri;
90005316:	683b      	ldr	r3, [r7, #0]
90005318:	617b      	str	r3, [r7, #20]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
9000531a:	212e      	movs	r1, #46	; 0x2e
9000531c:	6938      	ldr	r0, [r7, #16]
9000531e:	f00b f96a 	bl	900105f6 <strchr>
90005322:	6138      	str	r0, [r7, #16]
90005324:	e009      	b.n	9000533a <http_uri_is_ssi+0x56>
      ext = sub;
90005326:	693b      	ldr	r3, [r7, #16]
90005328:	617b      	str	r3, [r7, #20]
      sub++;
9000532a:	693b      	ldr	r3, [r7, #16]
9000532c:	3301      	adds	r3, #1
9000532e:	613b      	str	r3, [r7, #16]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
90005330:	212e      	movs	r1, #46	; 0x2e
90005332:	6938      	ldr	r0, [r7, #16]
90005334:	f00b f95f 	bl	900105f6 <strchr>
90005338:	6138      	str	r0, [r7, #16]
9000533a:	693b      	ldr	r3, [r7, #16]
9000533c:	2b00      	cmp	r3, #0
9000533e:	d1f2      	bne.n	90005326 <http_uri_is_ssi+0x42>
    }
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
90005340:	2300      	movs	r3, #0
90005342:	61fb      	str	r3, [r7, #28]
90005344:	e010      	b.n	90005368 <http_uri_is_ssi+0x84>
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
90005346:	4a0f      	ldr	r2, [pc, #60]	; (90005384 <http_uri_is_ssi+0xa0>)
90005348:	69fb      	ldr	r3, [r7, #28]
9000534a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
9000534e:	4619      	mov	r1, r3
90005350:	6978      	ldr	r0, [r7, #20]
90005352:	f000 fc51 	bl	90005bf8 <lwip_stricmp>
90005356:	4603      	mov	r3, r0
90005358:	2b00      	cmp	r3, #0
9000535a:	d102      	bne.n	90005362 <http_uri_is_ssi+0x7e>
        tag_check = 1;
9000535c:	2301      	movs	r3, #1
9000535e:	76fb      	strb	r3, [r7, #27]
        break;
90005360:	e005      	b.n	9000536e <http_uri_is_ssi+0x8a>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
90005362:	69fb      	ldr	r3, [r7, #28]
90005364:	3301      	adds	r3, #1
90005366:	61fb      	str	r3, [r7, #28]
90005368:	69fb      	ldr	r3, [r7, #28]
9000536a:	2b04      	cmp	r3, #4
9000536c:	d9eb      	bls.n	90005346 <http_uri_is_ssi+0x62>
      }
    }
    if (param != NULL) {
9000536e:	68fb      	ldr	r3, [r7, #12]
90005370:	2b00      	cmp	r3, #0
90005372:	d002      	beq.n	9000537a <http_uri_is_ssi+0x96>
      *param = '?';
90005374:	68fb      	ldr	r3, [r7, #12]
90005376:	223f      	movs	r2, #63	; 0x3f
90005378:	701a      	strb	r2, [r3, #0]
    }
  }
  return tag_check;
9000537a:	7efb      	ldrb	r3, [r7, #27]
}
9000537c:	4618      	mov	r0, r3
9000537e:	3720      	adds	r7, #32
90005380:	46bd      	mov	sp, r7
90005382:	bd80      	pop	{r7, pc}
90005384:	90015a0c 	.word	0x90015a0c

90005388 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
90005388:	b590      	push	{r4, r7, lr}
9000538a:	b093      	sub	sp, #76	; 0x4c
9000538c:	af02      	add	r7, sp, #8
9000538e:	60f8      	str	r0, [r7, #12]
90005390:	60b9      	str	r1, [r7, #8]
90005392:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
90005394:	2300      	movs	r3, #0
90005396:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
90005398:	2300      	movs	r3, #0
9000539a:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
9000539c:	2300      	movs	r3, #0
9000539e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
900053a2:	68bb      	ldr	r3, [r7, #8]
900053a4:	4618      	mov	r0, r3
900053a6:	f7fa ff3d 	bl	90000224 <strlen>
900053aa:	6278      	str	r0, [r7, #36]	; 0x24
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
900053ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900053ae:	2b00      	cmp	r3, #0
900053b0:	d072      	beq.n	90005498 <http_find_file+0x110>
900053b2:	68ba      	ldr	r2, [r7, #8]
900053b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900053b6:	3b01      	subs	r3, #1
900053b8:	4413      	add	r3, r2
900053ba:	781b      	ldrb	r3, [r3, #0]
900053bc:	2b2f      	cmp	r3, #47	; 0x2f
900053be:	d16b      	bne.n	90005498 <http_find_file+0x110>
      ((uri != http_uri_buf) || (uri_len == 1))) {
900053c0:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
900053c2:	4a80      	ldr	r2, [pc, #512]	; (900055c4 <http_find_file+0x23c>)
900053c4:	4293      	cmp	r3, r2
900053c6:	d102      	bne.n	900053ce <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
900053c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900053ca:	2b01      	cmp	r3, #1
900053cc:	d164      	bne.n	90005498 <http_find_file+0x110>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
900053ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900053d0:	3b01      	subs	r3, #1
900053d2:	2b3f      	cmp	r3, #63	; 0x3f
900053d4:	bf28      	it	cs
900053d6:	233f      	movcs	r3, #63	; 0x3f
900053d8:	623b      	str	r3, [r7, #32]
    if (copy_len > 0) {
900053da:	6a3b      	ldr	r3, [r7, #32]
900053dc:	2b00      	cmp	r3, #0
900053de:	d00a      	beq.n	900053f6 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
900053e0:	68bb      	ldr	r3, [r7, #8]
900053e2:	6a3a      	ldr	r2, [r7, #32]
900053e4:	4619      	mov	r1, r3
900053e6:	4877      	ldr	r0, [pc, #476]	; (900055c4 <http_find_file+0x23c>)
900053e8:	f00b f850 	bl	9001048c <memcpy>
      http_uri_buf[copy_len] = 0;
900053ec:	4a75      	ldr	r2, [pc, #468]	; (900055c4 <http_find_file+0x23c>)
900053ee:	6a3b      	ldr	r3, [r7, #32]
900053f0:	4413      	add	r3, r2
900053f2:	2200      	movs	r2, #0
900053f4:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
900053f6:	2300      	movs	r3, #0
900053f8:	63fb      	str	r3, [r7, #60]	; 0x3c
900053fa:	e04a      	b.n	90005492 <http_find_file+0x10a>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
900053fc:	6a3b      	ldr	r3, [r7, #32]
900053fe:	2b00      	cmp	r3, #0
90005400:	d028      	beq.n	90005454 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
90005402:	6a3b      	ldr	r3, [r7, #32]
90005404:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
90005408:	61fb      	str	r3, [r7, #28]
        if (len_left > 0) {
9000540a:	69fb      	ldr	r3, [r7, #28]
9000540c:	2b00      	cmp	r3, #0
9000540e:	d01e      	beq.n	9000544e <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
90005410:	4a6d      	ldr	r2, [pc, #436]	; (900055c8 <http_find_file+0x240>)
90005412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90005414:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
90005418:	4618      	mov	r0, r3
9000541a:	f7fa ff03 	bl	90000224 <strlen>
9000541e:	61b8      	str	r0, [r7, #24]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
90005420:	69ba      	ldr	r2, [r7, #24]
90005422:	69fb      	ldr	r3, [r7, #28]
90005424:	4293      	cmp	r3, r2
90005426:	bf28      	it	cs
90005428:	4613      	movcs	r3, r2
9000542a:	617b      	str	r3, [r7, #20]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
9000542c:	6a3b      	ldr	r3, [r7, #32]
9000542e:	4a65      	ldr	r2, [pc, #404]	; (900055c4 <http_find_file+0x23c>)
90005430:	1898      	adds	r0, r3, r2
90005432:	4a65      	ldr	r2, [pc, #404]	; (900055c8 <http_find_file+0x240>)
90005434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90005436:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
9000543a:	697a      	ldr	r2, [r7, #20]
9000543c:	4619      	mov	r1, r3
9000543e:	f00b f825 	bl	9001048c <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
90005442:	6a3a      	ldr	r2, [r7, #32]
90005444:	697b      	ldr	r3, [r7, #20]
90005446:	4413      	add	r3, r2
90005448:	4a5e      	ldr	r2, [pc, #376]	; (900055c4 <http_find_file+0x23c>)
9000544a:	2100      	movs	r1, #0
9000544c:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
9000544e:	4b5d      	ldr	r3, [pc, #372]	; (900055c4 <http_find_file+0x23c>)
90005450:	62bb      	str	r3, [r7, #40]	; 0x28
90005452:	e004      	b.n	9000545e <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
90005454:	4a5c      	ldr	r2, [pc, #368]	; (900055c8 <http_find_file+0x240>)
90005456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90005458:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
9000545c:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
9000545e:	68fb      	ldr	r3, [r7, #12]
90005460:	6ab9      	ldr	r1, [r7, #40]	; 0x28
90005462:	4618      	mov	r0, r3
90005464:	f7fe ffd2 	bl	9000440c <fs_open>
90005468:	4603      	mov	r3, r0
9000546a:	74fb      	strb	r3, [r7, #19]
      if (err == ERR_OK) {
9000546c:	f997 3013 	ldrsb.w	r3, [r7, #19]
90005470:	2b00      	cmp	r3, #0
90005472:	d10b      	bne.n	9000548c <http_find_file+0x104>
        uri = file_name;
90005474:	6abb      	ldr	r3, [r7, #40]	; 0x28
90005476:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
90005478:	68fb      	ldr	r3, [r7, #12]
9000547a:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
9000547c:	4a52      	ldr	r2, [pc, #328]	; (900055c8 <http_find_file+0x240>)
9000547e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90005480:	00db      	lsls	r3, r3, #3
90005482:	4413      	add	r3, r2
90005484:	791b      	ldrb	r3, [r3, #4]
90005486:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI */
        break;
9000548a:	e005      	b.n	90005498 <http_find_file+0x110>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
9000548c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000548e:	3301      	adds	r3, #1
90005490:	63fb      	str	r3, [r7, #60]	; 0x3c
90005492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90005494:	2b04      	cmp	r3, #4
90005496:	d9b1      	bls.n	900053fc <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
90005498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000549a:	2b00      	cmp	r3, #0
9000549c:	d176      	bne.n	9000558c <http_find_file+0x204>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
9000549e:	68bb      	ldr	r3, [r7, #8]
900054a0:	213f      	movs	r1, #63	; 0x3f
900054a2:	4618      	mov	r0, r3
900054a4:	f00b f8a7 	bl	900105f6 <strchr>
900054a8:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
900054aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
900054ac:	2b00      	cmp	r3, #0
900054ae:	d005      	beq.n	900054bc <http_find_file+0x134>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
900054b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
900054b2:	2200      	movs	r2, #0
900054b4:	701a      	strb	r2, [r3, #0]
      params++;
900054b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
900054b8:	3301      	adds	r3, #1
900054ba:	637b      	str	r3, [r7, #52]	; 0x34
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
900054bc:	4b43      	ldr	r3, [pc, #268]	; (900055cc <http_find_file+0x244>)
900054be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
900054c2:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (httpd_num_cgis && httpd_cgis) {
900054c4:	4b42      	ldr	r3, [pc, #264]	; (900055d0 <http_find_file+0x248>)
900054c6:	681b      	ldr	r3, [r3, #0]
900054c8:	2b00      	cmp	r3, #0
900054ca:	d034      	beq.n	90005536 <http_find_file+0x1ae>
900054cc:	4b41      	ldr	r3, [pc, #260]	; (900055d4 <http_find_file+0x24c>)
900054ce:	681b      	ldr	r3, [r3, #0]
900054d0:	2b00      	cmp	r3, #0
900054d2:	d030      	beq.n	90005536 <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
900054d4:	2300      	movs	r3, #0
900054d6:	633b      	str	r3, [r7, #48]	; 0x30
900054d8:	e028      	b.n	9000552c <http_find_file+0x1a4>
        if (strcmp(uri, httpd_cgis[i].pcCGIName) == 0) {
900054da:	68b8      	ldr	r0, [r7, #8]
900054dc:	4b3d      	ldr	r3, [pc, #244]	; (900055d4 <http_find_file+0x24c>)
900054de:	681a      	ldr	r2, [r3, #0]
900054e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900054e2:	00db      	lsls	r3, r3, #3
900054e4:	4413      	add	r3, r2
900054e6:	681b      	ldr	r3, [r3, #0]
900054e8:	4619      	mov	r1, r3
900054ea:	f7fa fe91 	bl	90000210 <strcmp>
900054ee:	4603      	mov	r3, r0
900054f0:	2b00      	cmp	r3, #0
900054f2:	d118      	bne.n	90005526 <http_find_file+0x19e>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
          http_cgi_paramcount = extract_uri_parameters(hs, params);
900054f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
900054f6:	68f8      	ldr	r0, [r7, #12]
900054f8:	f7ff f924 	bl	90004744 <extract_uri_parameters>
900054fc:	4603      	mov	r3, r0
900054fe:	4a33      	ldr	r2, [pc, #204]	; (900055cc <http_find_file+0x244>)
90005500:	6013      	str	r3, [r2, #0]
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
90005502:	4b34      	ldr	r3, [pc, #208]	; (900055d4 <http_find_file+0x24c>)
90005504:	681a      	ldr	r2, [r3, #0]
90005506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90005508:	00db      	lsls	r3, r3, #3
9000550a:	4413      	add	r3, r2
9000550c:	685c      	ldr	r4, [r3, #4]
9000550e:	4b2f      	ldr	r3, [pc, #188]	; (900055cc <http_find_file+0x244>)
90005510:	6819      	ldr	r1, [r3, #0]
90005512:	68fb      	ldr	r3, [r7, #12]
90005514:	f103 0230 	add.w	r2, r3, #48	; 0x30
                                         hs->param_vals);
90005518:	68fb      	ldr	r3, [r7, #12]
9000551a:	3370      	adds	r3, #112	; 0x70
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
9000551c:	6b38      	ldr	r0, [r7, #48]	; 0x30
9000551e:	47a0      	blx	r4
90005520:	4603      	mov	r3, r0
90005522:	60bb      	str	r3, [r7, #8]
          break;
90005524:	e007      	b.n	90005536 <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
90005526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90005528:	3301      	adds	r3, #1
9000552a:	633b      	str	r3, [r7, #48]	; 0x30
9000552c:	4b28      	ldr	r3, [pc, #160]	; (900055d0 <http_find_file+0x248>)
9000552e:	681b      	ldr	r3, [r3, #0]
90005530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
90005532:	429a      	cmp	r2, r3
90005534:	dbd1      	blt.n	900054da <http_find_file+0x152>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
90005536:	68fb      	ldr	r3, [r7, #12]
90005538:	68ba      	ldr	r2, [r7, #8]
9000553a:	4611      	mov	r1, r2
9000553c:	4618      	mov	r0, r3
9000553e:	f7fe ff65 	bl	9000440c <fs_open>
90005542:	4603      	mov	r3, r0
90005544:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_OK) {
90005546:	f997 3013 	ldrsb.w	r3, [r7, #19]
9000554a:	2b00      	cmp	r3, #0
9000554c:	d102      	bne.n	90005554 <http_find_file+0x1cc>
      file = &hs->file_handle;
9000554e:	68fb      	ldr	r3, [r7, #12]
90005550:	63bb      	str	r3, [r7, #56]	; 0x38
90005552:	e006      	b.n	90005562 <http_find_file+0x1da>
    } else {
      file = http_get_404_file(hs, &uri);
90005554:	f107 0308 	add.w	r3, r7, #8
90005558:	4619      	mov	r1, r3
9000555a:	68f8      	ldr	r0, [r7, #12]
9000555c:	f7ff fd94 	bl	90005088 <http_get_404_file>
90005560:	63b8      	str	r0, [r7, #56]	; 0x38
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
90005562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90005564:	2b00      	cmp	r3, #0
90005566:	d011      	beq.n	9000558c <http_find_file+0x204>
      if (file->flags & FS_FILE_FLAGS_SSI) {
90005568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000556a:	7c1b      	ldrb	r3, [r3, #16]
9000556c:	f003 0308 	and.w	r3, r3, #8
90005570:	2b00      	cmp	r3, #0
90005572:	d003      	beq.n	9000557c <http_find_file+0x1f4>
        tag_check = 1;
90005574:	2301      	movs	r3, #1
90005576:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
9000557a:	e007      	b.n	9000558c <http_find_file+0x204>
      } else {
#if LWIP_HTTPD_SSI_BY_FILE_EXTENSION
        tag_check = http_uri_is_ssi(file, uri);
9000557c:	68bb      	ldr	r3, [r7, #8]
9000557e:	4619      	mov	r1, r3
90005580:	6bb8      	ldr	r0, [r7, #56]	; 0x38
90005582:	f7ff feaf 	bl	900052e4 <http_uri_is_ssi>
90005586:	4603      	mov	r3, r0
90005588:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
9000558c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000558e:	2b00      	cmp	r3, #0
90005590:	d106      	bne.n	900055a0 <http_find_file+0x218>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
90005592:	f107 0308 	add.w	r3, r7, #8
90005596:	4619      	mov	r1, r3
90005598:	68f8      	ldr	r0, [r7, #12]
9000559a:	f7ff fd75 	bl	90005088 <http_get_404_file>
9000559e:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
900055a0:	68ba      	ldr	r2, [r7, #8]
900055a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
900055a4:	9301      	str	r3, [sp, #4]
900055a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
900055aa:	9300      	str	r3, [sp, #0]
900055ac:	4613      	mov	r3, r2
900055ae:	687a      	ldr	r2, [r7, #4]
900055b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
900055b2:	68f8      	ldr	r0, [r7, #12]
900055b4:	f000 f810 	bl	900055d8 <http_init_file>
900055b8:	4603      	mov	r3, r0
}
900055ba:	4618      	mov	r0, r3
900055bc:	3744      	adds	r7, #68	; 0x44
900055be:	46bd      	mov	sp, r7
900055c0:	bd90      	pop	{r4, r7, pc}
900055c2:	bf00      	nop
900055c4:	20005118 	.word	0x20005118
900055c8:	90015a20 	.word	0x90015a20
900055cc:	2000516c 	.word	0x2000516c
900055d0:	20005168 	.word	0x20005168
900055d4:	20005164 	.word	0x20005164

900055d8 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
900055d8:	b580      	push	{r7, lr}
900055da:	b088      	sub	sp, #32
900055dc:	af00      	add	r7, sp, #0
900055de:	60f8      	str	r0, [r7, #12]
900055e0:	60b9      	str	r1, [r7, #8]
900055e2:	607a      	str	r2, [r7, #4]
900055e4:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
900055e6:	68bb      	ldr	r3, [r7, #8]
900055e8:	2b00      	cmp	r3, #0
900055ea:	d07d      	beq.n	900056e8 <http_init_file+0x110>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
900055ec:	68bb      	ldr	r3, [r7, #8]
900055ee:	681b      	ldr	r3, [r3, #0]
900055f0:	2b00      	cmp	r3, #0
900055f2:	d106      	bne.n	90005602 <http_init_file+0x2a>
900055f4:	4b45      	ldr	r3, [pc, #276]	; (9000570c <http_init_file+0x134>)
900055f6:	f640 120b 	movw	r2, #2315	; 0x90b
900055fa:	4945      	ldr	r1, [pc, #276]	; (90005710 <http_init_file+0x138>)
900055fc:	4845      	ldr	r0, [pc, #276]	; (90005714 <http_init_file+0x13c>)
900055fe:	f00a ff75 	bl	900104ec <iprintf>
#endif

#if LWIP_HTTPD_SSI
    if (tag_check) {
90005602:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
90005606:	2b00      	cmp	r3, #0
90005608:	d01c      	beq.n	90005644 <http_init_file+0x6c>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
9000560a:	f7fe ff56 	bl	900044ba <http_ssi_state_alloc>
9000560e:	61f8      	str	r0, [r7, #28]
      if (ssi != NULL) {
90005610:	69fb      	ldr	r3, [r7, #28]
90005612:	2b00      	cmp	r3, #0
90005614:	d016      	beq.n	90005644 <http_init_file+0x6c>
        ssi->tag_index = 0;
90005616:	69fb      	ldr	r3, [r7, #28]
90005618:	2200      	movs	r2, #0
9000561a:	819a      	strh	r2, [r3, #12]
        ssi->tag_state = TAG_NONE;
9000561c:	69fb      	ldr	r3, [r7, #28]
9000561e:	2200      	movs	r2, #0
90005620:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
        ssi->parsed = file->data;
90005624:	68bb      	ldr	r3, [r7, #8]
90005626:	681a      	ldr	r2, [r3, #0]
90005628:	69fb      	ldr	r3, [r7, #28]
9000562a:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
9000562c:	68bb      	ldr	r3, [r7, #8]
9000562e:	685b      	ldr	r3, [r3, #4]
90005630:	461a      	mov	r2, r3
90005632:	69fb      	ldr	r3, [r7, #28]
90005634:	609a      	str	r2, [r3, #8]
        ssi->tag_end = file->data;
90005636:	68bb      	ldr	r3, [r7, #8]
90005638:	681a      	ldr	r2, [r3, #0]
9000563a:	69fb      	ldr	r3, [r7, #28]
9000563c:	605a      	str	r2, [r3, #4]
        hs->ssi = ssi;
9000563e:	68fb      	ldr	r3, [r7, #12]
90005640:	69fa      	ldr	r2, [r7, #28]
90005642:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
90005644:	68fb      	ldr	r3, [r7, #12]
90005646:	68ba      	ldr	r2, [r7, #8]
90005648:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
9000564a:	68bb      	ldr	r3, [r7, #8]
9000564c:	681a      	ldr	r2, [r3, #0]
9000564e:	68fb      	ldr	r3, [r7, #12]
90005650:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
90005652:	68bb      	ldr	r3, [r7, #8]
90005654:	685b      	ldr	r3, [r3, #4]
90005656:	2b00      	cmp	r3, #0
90005658:	da06      	bge.n	90005668 <http_init_file+0x90>
9000565a:	4b2c      	ldr	r3, [pc, #176]	; (9000570c <http_init_file+0x134>)
9000565c:	f640 1234 	movw	r2, #2356	; 0x934
90005660:	492d      	ldr	r1, [pc, #180]	; (90005718 <http_init_file+0x140>)
90005662:	482c      	ldr	r0, [pc, #176]	; (90005714 <http_init_file+0x13c>)
90005664:	f00a ff42 	bl	900104ec <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
90005668:	68bb      	ldr	r3, [r7, #8]
9000566a:	685b      	ldr	r3, [r3, #4]
9000566c:	461a      	mov	r2, r3
9000566e:	68fb      	ldr	r3, [r7, #12]
90005670:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
90005672:	68fb      	ldr	r3, [r7, #12]
90005674:	2200      	movs	r2, #0
90005676:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
9000567a:	68fb      	ldr	r3, [r7, #12]
9000567c:	695b      	ldr	r3, [r3, #20]
9000567e:	7c1b      	ldrb	r3, [r3, #16]
90005680:	f003 0301 	and.w	r3, r3, #1
90005684:	2b00      	cmp	r3, #0
90005686:	d106      	bne.n	90005696 <http_init_file+0xbe>
90005688:	4b20      	ldr	r3, [pc, #128]	; (9000570c <http_init_file+0x134>)
9000568a:	f640 1243 	movw	r2, #2371	; 0x943
9000568e:	4923      	ldr	r1, [pc, #140]	; (9000571c <http_init_file+0x144>)
90005690:	4820      	ldr	r0, [pc, #128]	; (90005714 <http_init_file+0x13c>)
90005692:	f00a ff2b 	bl	900104ec <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
90005696:	687b      	ldr	r3, [r7, #4]
90005698:	2b00      	cmp	r3, #0
9000569a:	d032      	beq.n	90005702 <http_init_file+0x12a>
9000569c:	68fb      	ldr	r3, [r7, #12]
9000569e:	695b      	ldr	r3, [r3, #20]
900056a0:	7c1b      	ldrb	r3, [r3, #16]
900056a2:	f003 0301 	and.w	r3, r3, #1
900056a6:	2b00      	cmp	r3, #0
900056a8:	d02b      	beq.n	90005702 <http_init_file+0x12a>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
900056aa:	68fb      	ldr	r3, [r7, #12]
900056ac:	6998      	ldr	r0, [r3, #24]
900056ae:	68fb      	ldr	r3, [r7, #12]
900056b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900056b2:	461a      	mov	r2, r3
900056b4:	491a      	ldr	r1, [pc, #104]	; (90005720 <http_init_file+0x148>)
900056b6:	f000 fa69 	bl	90005b8c <lwip_strnstr>
900056ba:	61b8      	str	r0, [r7, #24]
      if (file_start != NULL) {
900056bc:	69bb      	ldr	r3, [r7, #24]
900056be:	2b00      	cmp	r3, #0
900056c0:	d01f      	beq.n	90005702 <http_init_file+0x12a>
        int diff = file_start + 4 - hs->file;
900056c2:	69bb      	ldr	r3, [r7, #24]
900056c4:	1d1a      	adds	r2, r3, #4
900056c6:	68fb      	ldr	r3, [r7, #12]
900056c8:	699b      	ldr	r3, [r3, #24]
900056ca:	1ad3      	subs	r3, r2, r3
900056cc:	617b      	str	r3, [r7, #20]
        hs->file += diff;
900056ce:	68fb      	ldr	r3, [r7, #12]
900056d0:	699a      	ldr	r2, [r3, #24]
900056d2:	697b      	ldr	r3, [r7, #20]
900056d4:	441a      	add	r2, r3
900056d6:	68fb      	ldr	r3, [r7, #12]
900056d8:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
900056da:	68fb      	ldr	r3, [r7, #12]
900056dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
900056de:	697b      	ldr	r3, [r7, #20]
900056e0:	1ad2      	subs	r2, r2, r3
900056e2:	68fb      	ldr	r3, [r7, #12]
900056e4:	625a      	str	r2, [r3, #36]	; 0x24
900056e6:	e00c      	b.n	90005702 <http_init_file+0x12a>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
900056e8:	68fb      	ldr	r3, [r7, #12]
900056ea:	2200      	movs	r2, #0
900056ec:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
900056ee:	68fb      	ldr	r3, [r7, #12]
900056f0:	2200      	movs	r2, #0
900056f2:	619a      	str	r2, [r3, #24]
    hs->left = 0;
900056f4:	68fb      	ldr	r3, [r7, #12]
900056f6:	2200      	movs	r2, #0
900056f8:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
900056fa:	68fb      	ldr	r3, [r7, #12]
900056fc:	2200      	movs	r2, #0
900056fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
90005702:	2300      	movs	r3, #0
}
90005704:	4618      	mov	r0, r3
90005706:	3720      	adds	r7, #32
90005708:	46bd      	mov	sp, r7
9000570a:	bd80      	pop	{r7, pc}
9000570c:	90011aa8 	.word	0x90011aa8
90005710:	90011bf4 	.word	0x90011bf4
90005714:	90011af0 	.word	0x90011af0
90005718:	90011c08 	.word	0x90011c08
9000571c:	90011c28 	.word	0x90011c28
90005720:	90011bec 	.word	0x90011bec

90005724 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
90005724:	b580      	push	{r7, lr}
90005726:	b084      	sub	sp, #16
90005728:	af00      	add	r7, sp, #0
9000572a:	6078      	str	r0, [r7, #4]
9000572c:	460b      	mov	r3, r1
9000572e:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
90005730:	687b      	ldr	r3, [r7, #4]
90005732:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
90005734:	68fb      	ldr	r3, [r7, #12]
90005736:	2b00      	cmp	r3, #0
90005738:	d002      	beq.n	90005740 <http_err+0x1c>
    http_state_free(hs);
9000573a:	68f8      	ldr	r0, [r7, #12]
9000573c:	f7fe ff2a 	bl	90004594 <http_state_free>
  }
}
90005740:	bf00      	nop
90005742:	3710      	adds	r7, #16
90005744:	46bd      	mov	sp, r7
90005746:	bd80      	pop	{r7, pc}

90005748 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
90005748:	b580      	push	{r7, lr}
9000574a:	b086      	sub	sp, #24
9000574c:	af00      	add	r7, sp, #0
9000574e:	60f8      	str	r0, [r7, #12]
90005750:	60b9      	str	r1, [r7, #8]
90005752:	4613      	mov	r3, r2
90005754:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
90005756:	68fb      	ldr	r3, [r7, #12]
90005758:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
9000575a:	697b      	ldr	r3, [r7, #20]
9000575c:	2b00      	cmp	r3, #0
9000575e:	d101      	bne.n	90005764 <http_sent+0x1c>
    return ERR_OK;
90005760:	2300      	movs	r3, #0
90005762:	e008      	b.n	90005776 <http_sent+0x2e>
  }

  hs->retries = 0;
90005764:	697b      	ldr	r3, [r7, #20]
90005766:	2200      	movs	r2, #0
90005768:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
9000576c:	6979      	ldr	r1, [r7, #20]
9000576e:	68b8      	ldr	r0, [r7, #8]
90005770:	f7ff fc48 	bl	90005004 <http_send>

  return ERR_OK;
90005774:	2300      	movs	r3, #0
}
90005776:	4618      	mov	r0, r3
90005778:	3718      	adds	r7, #24
9000577a:	46bd      	mov	sp, r7
9000577c:	bd80      	pop	{r7, pc}

9000577e <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
9000577e:	b580      	push	{r7, lr}
90005780:	b084      	sub	sp, #16
90005782:	af00      	add	r7, sp, #0
90005784:	6078      	str	r0, [r7, #4]
90005786:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
90005788:	687b      	ldr	r3, [r7, #4]
9000578a:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
9000578c:	68fb      	ldr	r3, [r7, #12]
9000578e:	2b00      	cmp	r3, #0
90005790:	d107      	bne.n	900057a2 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
90005792:	2100      	movs	r1, #0
90005794:	6838      	ldr	r0, [r7, #0]
90005796:	f7fe ffb9 	bl	9000470c <http_close_conn>
9000579a:	4603      	mov	r3, r0
9000579c:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
9000579e:	2300      	movs	r3, #0
900057a0:	e021      	b.n	900057e6 <http_poll+0x68>
  } else {
    hs->retries++;
900057a2:	68fb      	ldr	r3, [r7, #12]
900057a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
900057a8:	3301      	adds	r3, #1
900057aa:	b2da      	uxtb	r2, r3
900057ac:	68fb      	ldr	r3, [r7, #12]
900057ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
900057b2:	68fb      	ldr	r3, [r7, #12]
900057b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
900057b8:	2b04      	cmp	r3, #4
900057ba:	d105      	bne.n	900057c8 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
900057bc:	68f9      	ldr	r1, [r7, #12]
900057be:	6838      	ldr	r0, [r7, #0]
900057c0:	f7fe ffa4 	bl	9000470c <http_close_conn>
      return ERR_OK;
900057c4:	2300      	movs	r3, #0
900057c6:	e00e      	b.n	900057e6 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
900057c8:	68fb      	ldr	r3, [r7, #12]
900057ca:	695b      	ldr	r3, [r3, #20]
900057cc:	2b00      	cmp	r3, #0
900057ce:	d009      	beq.n	900057e4 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
900057d0:	68f9      	ldr	r1, [r7, #12]
900057d2:	6838      	ldr	r0, [r7, #0]
900057d4:	f7ff fc16 	bl	90005004 <http_send>
900057d8:	4603      	mov	r3, r0
900057da:	2b00      	cmp	r3, #0
900057dc:	d002      	beq.n	900057e4 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
900057de:	6838      	ldr	r0, [r7, #0]
900057e0:	f007 f8e0 	bl	9000c9a4 <tcp_output>
      }
    }
  }

  return ERR_OK;
900057e4:	2300      	movs	r3, #0
}
900057e6:	4618      	mov	r0, r3
900057e8:	3710      	adds	r7, #16
900057ea:	46bd      	mov	sp, r7
900057ec:	bd80      	pop	{r7, pc}
	...

900057f0 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
900057f0:	b580      	push	{r7, lr}
900057f2:	b086      	sub	sp, #24
900057f4:	af00      	add	r7, sp, #0
900057f6:	60f8      	str	r0, [r7, #12]
900057f8:	60b9      	str	r1, [r7, #8]
900057fa:	607a      	str	r2, [r7, #4]
900057fc:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
900057fe:	68fb      	ldr	r3, [r7, #12]
90005800:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
90005802:	f997 3003 	ldrsb.w	r3, [r7, #3]
90005806:	2b00      	cmp	r3, #0
90005808:	d105      	bne.n	90005816 <http_recv+0x26>
9000580a:	687b      	ldr	r3, [r7, #4]
9000580c:	2b00      	cmp	r3, #0
9000580e:	d002      	beq.n	90005816 <http_recv+0x26>
90005810:	697b      	ldr	r3, [r7, #20]
90005812:	2b00      	cmp	r3, #0
90005814:	d111      	bne.n	9000583a <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
90005816:	687b      	ldr	r3, [r7, #4]
90005818:	2b00      	cmp	r3, #0
9000581a:	d008      	beq.n	9000582e <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
9000581c:	687b      	ldr	r3, [r7, #4]
9000581e:	891b      	ldrh	r3, [r3, #8]
90005820:	4619      	mov	r1, r3
90005822:	68b8      	ldr	r0, [r7, #8]
90005824:	f002 fcae 	bl	90008184 <tcp_recved>
      pbuf_free(p);
90005828:	6878      	ldr	r0, [r7, #4]
9000582a:	f001 fd49 	bl	900072c0 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
9000582e:	6979      	ldr	r1, [r7, #20]
90005830:	68b8      	ldr	r0, [r7, #8]
90005832:	f7fe ff6b 	bl	9000470c <http_close_conn>
    return ERR_OK;
90005836:	2300      	movs	r3, #0
90005838:	e055      	b.n	900058e6 <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
9000583a:	687b      	ldr	r3, [r7, #4]
9000583c:	891b      	ldrh	r3, [r3, #8]
9000583e:	4619      	mov	r1, r3
90005840:	68b8      	ldr	r0, [r7, #8]
90005842:	f002 fc9f 	bl	90008184 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
90005846:	697b      	ldr	r3, [r7, #20]
90005848:	695b      	ldr	r3, [r3, #20]
9000584a:	2b00      	cmp	r3, #0
9000584c:	d147      	bne.n	900058de <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
9000584e:	68ba      	ldr	r2, [r7, #8]
90005850:	6979      	ldr	r1, [r7, #20]
90005852:	6878      	ldr	r0, [r7, #4]
90005854:	f7ff fc5e 	bl	90005114 <http_parse_request>
90005858:	4603      	mov	r3, r0
9000585a:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
9000585c:	f997 3013 	ldrsb.w	r3, [r7, #19]
90005860:	2b00      	cmp	r3, #0
90005862:	d015      	beq.n	90005890 <http_recv+0xa0>
90005864:	f997 3013 	ldrsb.w	r3, [r7, #19]
90005868:	f113 0f05 	cmn.w	r3, #5
9000586c:	d010      	beq.n	90005890 <http_recv+0xa0>
9000586e:	f997 3013 	ldrsb.w	r3, [r7, #19]
90005872:	f113 0f10 	cmn.w	r3, #16
90005876:	d00b      	beq.n	90005890 <http_recv+0xa0>
90005878:	f997 3013 	ldrsb.w	r3, [r7, #19]
9000587c:	f113 0f08 	cmn.w	r3, #8
90005880:	d006      	beq.n	90005890 <http_recv+0xa0>
90005882:	4b1b      	ldr	r3, [pc, #108]	; (900058f0 <http_recv+0x100>)
90005884:	f640 2204 	movw	r2, #2564	; 0xa04
90005888:	491a      	ldr	r1, [pc, #104]	; (900058f4 <http_recv+0x104>)
9000588a:	481b      	ldr	r0, [pc, #108]	; (900058f8 <http_recv+0x108>)
9000588c:	f00a fe2e 	bl	900104ec <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
90005890:	f997 3013 	ldrsb.w	r3, [r7, #19]
90005894:	f113 0f05 	cmn.w	r3, #5
90005898:	d00b      	beq.n	900058b2 <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
9000589a:	697b      	ldr	r3, [r7, #20]
9000589c:	6a1b      	ldr	r3, [r3, #32]
9000589e:	2b00      	cmp	r3, #0
900058a0:	d007      	beq.n	900058b2 <http_recv+0xc2>
          pbuf_free(hs->req);
900058a2:	697b      	ldr	r3, [r7, #20]
900058a4:	6a1b      	ldr	r3, [r3, #32]
900058a6:	4618      	mov	r0, r3
900058a8:	f001 fd0a 	bl	900072c0 <pbuf_free>
          hs->req = NULL;
900058ac:	697b      	ldr	r3, [r7, #20]
900058ae:	2200      	movs	r2, #0
900058b0:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
900058b2:	6878      	ldr	r0, [r7, #4]
900058b4:	f001 fd04 	bl	900072c0 <pbuf_free>
      if (parsed == ERR_OK) {
900058b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
900058bc:	2b00      	cmp	r3, #0
900058be:	d104      	bne.n	900058ca <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
900058c0:	6979      	ldr	r1, [r7, #20]
900058c2:	68b8      	ldr	r0, [r7, #8]
900058c4:	f7ff fb9e 	bl	90005004 <http_send>
900058c8:	e00c      	b.n	900058e4 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
900058ca:	f997 3013 	ldrsb.w	r3, [r7, #19]
900058ce:	f113 0f10 	cmn.w	r3, #16
900058d2:	d107      	bne.n	900058e4 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
900058d4:	6979      	ldr	r1, [r7, #20]
900058d6:	68b8      	ldr	r0, [r7, #8]
900058d8:	f7fe ff18 	bl	9000470c <http_close_conn>
900058dc:	e002      	b.n	900058e4 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
900058de:	6878      	ldr	r0, [r7, #4]
900058e0:	f001 fcee 	bl	900072c0 <pbuf_free>
    }
  }
  return ERR_OK;
900058e4:	2300      	movs	r3, #0
}
900058e6:	4618      	mov	r0, r3
900058e8:	3718      	adds	r7, #24
900058ea:	46bd      	mov	sp, r7
900058ec:	bd80      	pop	{r7, pc}
900058ee:	bf00      	nop
900058f0:	90011aa8 	.word	0x90011aa8
900058f4:	90011c54 	.word	0x90011c54
900058f8:	90011af0 	.word	0x90011af0

900058fc <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
900058fc:	b580      	push	{r7, lr}
900058fe:	b086      	sub	sp, #24
90005900:	af00      	add	r7, sp, #0
90005902:	60f8      	str	r0, [r7, #12]
90005904:	60b9      	str	r1, [r7, #8]
90005906:	4613      	mov	r3, r2
90005908:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
9000590a:	f997 3007 	ldrsb.w	r3, [r7, #7]
9000590e:	2b00      	cmp	r3, #0
90005910:	d102      	bne.n	90005918 <http_accept+0x1c>
90005912:	68bb      	ldr	r3, [r7, #8]
90005914:	2b00      	cmp	r3, #0
90005916:	d102      	bne.n	9000591e <http_accept+0x22>
    return ERR_VAL;
90005918:	f06f 0305 	mvn.w	r3, #5
9000591c:	e025      	b.n	9000596a <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
9000591e:	2101      	movs	r1, #1
90005920:	68b8      	ldr	r0, [r7, #8]
90005922:	f003 f913 	bl	90008b4c <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
90005926:	f7fe fdf7 	bl	90004518 <http_state_alloc>
9000592a:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
9000592c:	697b      	ldr	r3, [r7, #20]
9000592e:	2b00      	cmp	r3, #0
90005930:	d102      	bne.n	90005938 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
90005932:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90005936:	e018      	b.n	9000596a <http_accept+0x6e>
  }
  hs->pcb = pcb;
90005938:	697b      	ldr	r3, [r7, #20]
9000593a:	68ba      	ldr	r2, [r7, #8]
9000593c:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
9000593e:	6979      	ldr	r1, [r7, #20]
90005940:	68b8      	ldr	r0, [r7, #8]
90005942:	f003 fb03 	bl	90008f4c <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
90005946:	490b      	ldr	r1, [pc, #44]	; (90005974 <http_accept+0x78>)
90005948:	68b8      	ldr	r0, [r7, #8]
9000594a:	f003 fb11 	bl	90008f70 <tcp_recv>
  altcp_err(pcb, http_err);
9000594e:	490a      	ldr	r1, [pc, #40]	; (90005978 <http_accept+0x7c>)
90005950:	68b8      	ldr	r0, [r7, #8]
90005952:	f003 fb51 	bl	90008ff8 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
90005956:	2204      	movs	r2, #4
90005958:	4908      	ldr	r1, [pc, #32]	; (9000597c <http_accept+0x80>)
9000595a:	68b8      	ldr	r0, [r7, #8]
9000595c:	f003 fb86 	bl	9000906c <tcp_poll>
  altcp_sent(pcb, http_sent);
90005960:	4907      	ldr	r1, [pc, #28]	; (90005980 <http_accept+0x84>)
90005962:	68b8      	ldr	r0, [r7, #8]
90005964:	f003 fb26 	bl	90008fb4 <tcp_sent>

  return ERR_OK;
90005968:	2300      	movs	r3, #0
}
9000596a:	4618      	mov	r0, r3
9000596c:	3718      	adds	r7, #24
9000596e:	46bd      	mov	sp, r7
90005970:	bd80      	pop	{r7, pc}
90005972:	bf00      	nop
90005974:	900057f1 	.word	0x900057f1
90005978:	90005725 	.word	0x90005725
9000597c:	9000577f 	.word	0x9000577f
90005980:	90005749 	.word	0x90005749

90005984 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
90005984:	b580      	push	{r7, lr}
90005986:	b084      	sub	sp, #16
90005988:	af00      	add	r7, sp, #0
9000598a:	6078      	str	r0, [r7, #4]
9000598c:	460b      	mov	r3, r1
9000598e:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
90005990:	687b      	ldr	r3, [r7, #4]
90005992:	2b00      	cmp	r3, #0
90005994:	d029      	beq.n	900059ea <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
90005996:	2101      	movs	r1, #1
90005998:	6878      	ldr	r0, [r7, #4]
9000599a:	f003 f8d7 	bl	90008b4c <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
9000599e:	887b      	ldrh	r3, [r7, #2]
900059a0:	461a      	mov	r2, r3
900059a2:	4914      	ldr	r1, [pc, #80]	; (900059f4 <httpd_init_pcb+0x70>)
900059a4:	6878      	ldr	r0, [r7, #4]
900059a6:	f002 fa1f 	bl	90007de8 <tcp_bind>
900059aa:	4603      	mov	r3, r0
900059ac:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
900059ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
900059b2:	2b00      	cmp	r3, #0
900059b4:	d006      	beq.n	900059c4 <httpd_init_pcb+0x40>
900059b6:	4b10      	ldr	r3, [pc, #64]	; (900059f8 <httpd_init_pcb+0x74>)
900059b8:	f640 2257 	movw	r2, #2647	; 0xa57
900059bc:	490f      	ldr	r1, [pc, #60]	; (900059fc <httpd_init_pcb+0x78>)
900059be:	4810      	ldr	r0, [pc, #64]	; (90005a00 <httpd_init_pcb+0x7c>)
900059c0:	f00a fd94 	bl	900104ec <iprintf>
    pcb = altcp_listen(pcb);
900059c4:	21ff      	movs	r1, #255	; 0xff
900059c6:	6878      	ldr	r0, [r7, #4]
900059c8:	f002 fac6 	bl	90007f58 <tcp_listen_with_backlog>
900059cc:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
900059ce:	687b      	ldr	r3, [r7, #4]
900059d0:	2b00      	cmp	r3, #0
900059d2:	d106      	bne.n	900059e2 <httpd_init_pcb+0x5e>
900059d4:	4b08      	ldr	r3, [pc, #32]	; (900059f8 <httpd_init_pcb+0x74>)
900059d6:	f640 2259 	movw	r2, #2649	; 0xa59
900059da:	490a      	ldr	r1, [pc, #40]	; (90005a04 <httpd_init_pcb+0x80>)
900059dc:	4808      	ldr	r0, [pc, #32]	; (90005a00 <httpd_init_pcb+0x7c>)
900059de:	f00a fd85 	bl	900104ec <iprintf>
    altcp_accept(pcb, http_accept);
900059e2:	4909      	ldr	r1, [pc, #36]	; (90005a08 <httpd_init_pcb+0x84>)
900059e4:	6878      	ldr	r0, [r7, #4]
900059e6:	f003 fb29 	bl	9000903c <tcp_accept>
  }
}
900059ea:	bf00      	nop
900059ec:	3710      	adds	r7, #16
900059ee:	46bd      	mov	sp, r7
900059f0:	bd80      	pop	{r7, pc}
900059f2:	bf00      	nop
900059f4:	90015b28 	.word	0x90015b28
900059f8:	90011aa8 	.word	0x90011aa8
900059fc:	90011c80 	.word	0x90011c80
90005a00:	90011af0 	.word	0x90011af0
90005a04:	90011c9c 	.word	0x90011c9c
90005a08:	900058fd 	.word	0x900058fd

90005a0c <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
90005a0c:	b580      	push	{r7, lr}
90005a0e:	b082      	sub	sp, #8
90005a10:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
90005a12:	202e      	movs	r0, #46	; 0x2e
90005a14:	f003 fa8c 	bl	90008f30 <tcp_new_ip_type>
90005a18:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
90005a1a:	687b      	ldr	r3, [r7, #4]
90005a1c:	2b00      	cmp	r3, #0
90005a1e:	d106      	bne.n	90005a2e <httpd_init+0x22>
90005a20:	4b07      	ldr	r3, [pc, #28]	; (90005a40 <httpd_init+0x34>)
90005a22:	f640 2272 	movw	r2, #2674	; 0xa72
90005a26:	4907      	ldr	r1, [pc, #28]	; (90005a44 <httpd_init+0x38>)
90005a28:	4807      	ldr	r0, [pc, #28]	; (90005a48 <httpd_init+0x3c>)
90005a2a:	f00a fd5f 	bl	900104ec <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
90005a2e:	2150      	movs	r1, #80	; 0x50
90005a30:	6878      	ldr	r0, [r7, #4]
90005a32:	f7ff ffa7 	bl	90005984 <httpd_init_pcb>
}
90005a36:	bf00      	nop
90005a38:	3708      	adds	r7, #8
90005a3a:	46bd      	mov	sp, r7
90005a3c:	bd80      	pop	{r7, pc}
90005a3e:	bf00      	nop
90005a40:	90011aa8 	.word	0x90011aa8
90005a44:	90011cbc 	.word	0x90011cbc
90005a48:	90011af0 	.word	0x90011af0

90005a4c <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
90005a4c:	b580      	push	{r7, lr}
90005a4e:	b084      	sub	sp, #16
90005a50:	af00      	add	r7, sp, #0
90005a52:	60f8      	str	r0, [r7, #12]
90005a54:	60b9      	str	r1, [r7, #8]
90005a56:	607a      	str	r2, [r7, #4]
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
90005a58:	68fb      	ldr	r3, [r7, #12]
90005a5a:	2b00      	cmp	r3, #0
90005a5c:	d106      	bne.n	90005a6c <http_set_ssi_handler+0x20>
90005a5e:	4b14      	ldr	r3, [pc, #80]	; (90005ab0 <http_set_ssi_handler+0x64>)
90005a60:	f640 2297 	movw	r2, #2711	; 0xa97
90005a64:	4913      	ldr	r1, [pc, #76]	; (90005ab4 <http_set_ssi_handler+0x68>)
90005a66:	4814      	ldr	r0, [pc, #80]	; (90005ab8 <http_set_ssi_handler+0x6c>)
90005a68:	f00a fd40 	bl	900104ec <iprintf>
  httpd_ssi_handler = ssi_handler;
90005a6c:	4a13      	ldr	r2, [pc, #76]	; (90005abc <http_set_ssi_handler+0x70>)
90005a6e:	68fb      	ldr	r3, [r7, #12]
90005a70:	6013      	str	r3, [r2, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
90005a72:	68bb      	ldr	r3, [r7, #8]
90005a74:	2b00      	cmp	r3, #0
90005a76:	d106      	bne.n	90005a86 <http_set_ssi_handler+0x3a>
90005a78:	4b0d      	ldr	r3, [pc, #52]	; (90005ab0 <http_set_ssi_handler+0x64>)
90005a7a:	f640 229e 	movw	r2, #2718	; 0xa9e
90005a7e:	4910      	ldr	r1, [pc, #64]	; (90005ac0 <http_set_ssi_handler+0x74>)
90005a80:	480d      	ldr	r0, [pc, #52]	; (90005ab8 <http_set_ssi_handler+0x6c>)
90005a82:	f00a fd33 	bl	900104ec <iprintf>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
90005a86:	687b      	ldr	r3, [r7, #4]
90005a88:	2b00      	cmp	r3, #0
90005a8a:	dc06      	bgt.n	90005a9a <http_set_ssi_handler+0x4e>
90005a8c:	4b08      	ldr	r3, [pc, #32]	; (90005ab0 <http_set_ssi_handler+0x64>)
90005a8e:	f640 229f 	movw	r2, #2719	; 0xa9f
90005a92:	490c      	ldr	r1, [pc, #48]	; (90005ac4 <http_set_ssi_handler+0x78>)
90005a94:	4808      	ldr	r0, [pc, #32]	; (90005ab8 <http_set_ssi_handler+0x6c>)
90005a96:	f00a fd29 	bl	900104ec <iprintf>

  httpd_tags = tags;
90005a9a:	4a0b      	ldr	r2, [pc, #44]	; (90005ac8 <http_set_ssi_handler+0x7c>)
90005a9c:	68bb      	ldr	r3, [r7, #8]
90005a9e:	6013      	str	r3, [r2, #0]
  httpd_num_tags = num_tags;
90005aa0:	4a0a      	ldr	r2, [pc, #40]	; (90005acc <http_set_ssi_handler+0x80>)
90005aa2:	687b      	ldr	r3, [r7, #4]
90005aa4:	6013      	str	r3, [r2, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
90005aa6:	bf00      	nop
90005aa8:	3710      	adds	r7, #16
90005aaa:	46bd      	mov	sp, r7
90005aac:	bd80      	pop	{r7, pc}
90005aae:	bf00      	nop
90005ab0:	90011aa8 	.word	0x90011aa8
90005ab4:	90011cd8 	.word	0x90011cd8
90005ab8:	90011af0 	.word	0x90011af0
90005abc:	20005158 	.word	0x20005158
90005ac0:	90011cf0 	.word	0x90011cf0
90005ac4:	90011d00 	.word	0x90011d00
90005ac8:	20005160 	.word	0x20005160
90005acc:	2000515c 	.word	0x2000515c

90005ad0 <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
90005ad0:	b580      	push	{r7, lr}
90005ad2:	b082      	sub	sp, #8
90005ad4:	af00      	add	r7, sp, #0
90005ad6:	6078      	str	r0, [r7, #4]
90005ad8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
90005ada:	687b      	ldr	r3, [r7, #4]
90005adc:	2b00      	cmp	r3, #0
90005ade:	d106      	bne.n	90005aee <http_set_cgi_handlers+0x1e>
90005ae0:	4b0d      	ldr	r3, [pc, #52]	; (90005b18 <http_set_cgi_handlers+0x48>)
90005ae2:	f640 22b2 	movw	r2, #2738	; 0xab2
90005ae6:	490d      	ldr	r1, [pc, #52]	; (90005b1c <http_set_cgi_handlers+0x4c>)
90005ae8:	480d      	ldr	r0, [pc, #52]	; (90005b20 <http_set_cgi_handlers+0x50>)
90005aea:	f00a fcff 	bl	900104ec <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
90005aee:	683b      	ldr	r3, [r7, #0]
90005af0:	2b00      	cmp	r3, #0
90005af2:	dc06      	bgt.n	90005b02 <http_set_cgi_handlers+0x32>
90005af4:	4b08      	ldr	r3, [pc, #32]	; (90005b18 <http_set_cgi_handlers+0x48>)
90005af6:	f640 22b3 	movw	r2, #2739	; 0xab3
90005afa:	490a      	ldr	r1, [pc, #40]	; (90005b24 <http_set_cgi_handlers+0x54>)
90005afc:	4808      	ldr	r0, [pc, #32]	; (90005b20 <http_set_cgi_handlers+0x50>)
90005afe:	f00a fcf5 	bl	900104ec <iprintf>

  httpd_cgis = cgis;
90005b02:	4a09      	ldr	r2, [pc, #36]	; (90005b28 <http_set_cgi_handlers+0x58>)
90005b04:	687b      	ldr	r3, [r7, #4]
90005b06:	6013      	str	r3, [r2, #0]
  httpd_num_cgis = num_handlers;
90005b08:	4a08      	ldr	r2, [pc, #32]	; (90005b2c <http_set_cgi_handlers+0x5c>)
90005b0a:	683b      	ldr	r3, [r7, #0]
90005b0c:	6013      	str	r3, [r2, #0]
}
90005b0e:	bf00      	nop
90005b10:	3708      	adds	r7, #8
90005b12:	46bd      	mov	sp, r7
90005b14:	bd80      	pop	{r7, pc}
90005b16:	bf00      	nop
90005b18:	90011aa8 	.word	0x90011aa8
90005b1c:	90011d18 	.word	0x90011d18
90005b20:	90011af0 	.word	0x90011af0
90005b24:	90011d28 	.word	0x90011d28
90005b28:	20005164 	.word	0x20005164
90005b2c:	20005168 	.word	0x20005168

90005b30 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
90005b30:	b480      	push	{r7}
90005b32:	b083      	sub	sp, #12
90005b34:	af00      	add	r7, sp, #0
90005b36:	4603      	mov	r3, r0
90005b38:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
90005b3a:	88fb      	ldrh	r3, [r7, #6]
90005b3c:	021b      	lsls	r3, r3, #8
90005b3e:	b21a      	sxth	r2, r3
90005b40:	88fb      	ldrh	r3, [r7, #6]
90005b42:	0a1b      	lsrs	r3, r3, #8
90005b44:	b29b      	uxth	r3, r3
90005b46:	b21b      	sxth	r3, r3
90005b48:	4313      	orrs	r3, r2
90005b4a:	b21b      	sxth	r3, r3
90005b4c:	b29b      	uxth	r3, r3
}
90005b4e:	4618      	mov	r0, r3
90005b50:	370c      	adds	r7, #12
90005b52:	46bd      	mov	sp, r7
90005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
90005b58:	4770      	bx	lr

90005b5a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
90005b5a:	b480      	push	{r7}
90005b5c:	b083      	sub	sp, #12
90005b5e:	af00      	add	r7, sp, #0
90005b60:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
90005b62:	687b      	ldr	r3, [r7, #4]
90005b64:	061a      	lsls	r2, r3, #24
90005b66:	687b      	ldr	r3, [r7, #4]
90005b68:	021b      	lsls	r3, r3, #8
90005b6a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
90005b6e:	431a      	orrs	r2, r3
90005b70:	687b      	ldr	r3, [r7, #4]
90005b72:	0a1b      	lsrs	r3, r3, #8
90005b74:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90005b78:	431a      	orrs	r2, r3
90005b7a:	687b      	ldr	r3, [r7, #4]
90005b7c:	0e1b      	lsrs	r3, r3, #24
90005b7e:	4313      	orrs	r3, r2
}
90005b80:	4618      	mov	r0, r3
90005b82:	370c      	adds	r7, #12
90005b84:	46bd      	mov	sp, r7
90005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
90005b8a:	4770      	bx	lr

90005b8c <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
90005b8c:	b580      	push	{r7, lr}
90005b8e:	b086      	sub	sp, #24
90005b90:	af00      	add	r7, sp, #0
90005b92:	60f8      	str	r0, [r7, #12]
90005b94:	60b9      	str	r1, [r7, #8]
90005b96:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
90005b98:	68b8      	ldr	r0, [r7, #8]
90005b9a:	f7fa fb43 	bl	90000224 <strlen>
90005b9e:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
90005ba0:	693b      	ldr	r3, [r7, #16]
90005ba2:	2b00      	cmp	r3, #0
90005ba4:	d101      	bne.n	90005baa <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
90005ba6:	68fb      	ldr	r3, [r7, #12]
90005ba8:	e022      	b.n	90005bf0 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
90005baa:	68fb      	ldr	r3, [r7, #12]
90005bac:	617b      	str	r3, [r7, #20]
90005bae:	e012      	b.n	90005bd6 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
90005bb0:	697b      	ldr	r3, [r7, #20]
90005bb2:	781a      	ldrb	r2, [r3, #0]
90005bb4:	68bb      	ldr	r3, [r7, #8]
90005bb6:	781b      	ldrb	r3, [r3, #0]
90005bb8:	429a      	cmp	r2, r3
90005bba:	d109      	bne.n	90005bd0 <lwip_strnstr+0x44>
90005bbc:	693a      	ldr	r2, [r7, #16]
90005bbe:	68b9      	ldr	r1, [r7, #8]
90005bc0:	6978      	ldr	r0, [r7, #20]
90005bc2:	f00a fd2d 	bl	90010620 <strncmp>
90005bc6:	4603      	mov	r3, r0
90005bc8:	2b00      	cmp	r3, #0
90005bca:	d101      	bne.n	90005bd0 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
90005bcc:	697b      	ldr	r3, [r7, #20]
90005bce:	e00f      	b.n	90005bf0 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
90005bd0:	697b      	ldr	r3, [r7, #20]
90005bd2:	3301      	adds	r3, #1
90005bd4:	617b      	str	r3, [r7, #20]
90005bd6:	697b      	ldr	r3, [r7, #20]
90005bd8:	781b      	ldrb	r3, [r3, #0]
90005bda:	2b00      	cmp	r3, #0
90005bdc:	d007      	beq.n	90005bee <lwip_strnstr+0x62>
90005bde:	697a      	ldr	r2, [r7, #20]
90005be0:	693b      	ldr	r3, [r7, #16]
90005be2:	441a      	add	r2, r3
90005be4:	68f9      	ldr	r1, [r7, #12]
90005be6:	687b      	ldr	r3, [r7, #4]
90005be8:	440b      	add	r3, r1
90005bea:	429a      	cmp	r2, r3
90005bec:	d9e0      	bls.n	90005bb0 <lwip_strnstr+0x24>
    }
  }
  return NULL;
90005bee:	2300      	movs	r3, #0
}
90005bf0:	4618      	mov	r0, r3
90005bf2:	3718      	adds	r7, #24
90005bf4:	46bd      	mov	sp, r7
90005bf6:	bd80      	pop	{r7, pc}

90005bf8 <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char *str1, const char *str2)
{
90005bf8:	b480      	push	{r7}
90005bfa:	b085      	sub	sp, #20
90005bfc:	af00      	add	r7, sp, #0
90005bfe:	6078      	str	r0, [r7, #4]
90005c00:	6039      	str	r1, [r7, #0]
  char c1, c2;

  do {
    c1 = *str1++;
90005c02:	687b      	ldr	r3, [r7, #4]
90005c04:	1c5a      	adds	r2, r3, #1
90005c06:	607a      	str	r2, [r7, #4]
90005c08:	781b      	ldrb	r3, [r3, #0]
90005c0a:	73fb      	strb	r3, [r7, #15]
    c2 = *str2++;
90005c0c:	683b      	ldr	r3, [r7, #0]
90005c0e:	1c5a      	adds	r2, r3, #1
90005c10:	603a      	str	r2, [r7, #0]
90005c12:	781b      	ldrb	r3, [r3, #0]
90005c14:	73bb      	strb	r3, [r7, #14]
    if (c1 != c2) {
90005c16:	7bfa      	ldrb	r2, [r7, #15]
90005c18:	7bbb      	ldrb	r3, [r7, #14]
90005c1a:	429a      	cmp	r2, r3
90005c1c:	d016      	beq.n	90005c4c <lwip_stricmp+0x54>
      char c1_upc = c1 | 0x20;
90005c1e:	7bfb      	ldrb	r3, [r7, #15]
90005c20:	f043 0320 	orr.w	r3, r3, #32
90005c24:	737b      	strb	r3, [r7, #13]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
90005c26:	7b7b      	ldrb	r3, [r7, #13]
90005c28:	2b60      	cmp	r3, #96	; 0x60
90005c2a:	d90c      	bls.n	90005c46 <lwip_stricmp+0x4e>
90005c2c:	7b7b      	ldrb	r3, [r7, #13]
90005c2e:	2b7a      	cmp	r3, #122	; 0x7a
90005c30:	d809      	bhi.n	90005c46 <lwip_stricmp+0x4e>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
90005c32:	7bbb      	ldrb	r3, [r7, #14]
90005c34:	f043 0320 	orr.w	r3, r3, #32
90005c38:	733b      	strb	r3, [r7, #12]
        if (c1_upc != c2_upc) {
90005c3a:	7b7a      	ldrb	r2, [r7, #13]
90005c3c:	7b3b      	ldrb	r3, [r7, #12]
90005c3e:	429a      	cmp	r2, r3
90005c40:	d003      	beq.n	90005c4a <lwip_stricmp+0x52>
          /* still not equal */
          /* don't care for < or > */
          return 1;
90005c42:	2301      	movs	r3, #1
90005c44:	e006      	b.n	90005c54 <lwip_stricmp+0x5c>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
90005c46:	2301      	movs	r3, #1
90005c48:	e004      	b.n	90005c54 <lwip_stricmp+0x5c>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
90005c4a:	bf00      	nop
      }
    }
  } while (c1 != 0);
90005c4c:	7bfb      	ldrb	r3, [r7, #15]
90005c4e:	2b00      	cmp	r3, #0
90005c50:	d1d7      	bne.n	90005c02 <lwip_stricmp+0xa>
  return 0;
90005c52:	2300      	movs	r3, #0
}
90005c54:	4618      	mov	r0, r3
90005c56:	3714      	adds	r7, #20
90005c58:	46bd      	mov	sp, r7
90005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
90005c5e:	4770      	bx	lr

90005c60 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
90005c60:	b580      	push	{r7, lr}
90005c62:	b082      	sub	sp, #8
90005c64:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
90005c66:	2300      	movs	r3, #0
90005c68:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
90005c6a:	f000 f8d5 	bl	90005e18 <mem_init>
  memp_init();
90005c6e:	f000 fbdb 	bl	90006428 <memp_init>
  pbuf_init();
  netif_init();
90005c72:	f000 fcd9 	bl	90006628 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
90005c76:	f007 ff55 	bl	9000db24 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
90005c7a:	f001 fdaf 	bl	900077dc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
90005c7e:	f007 fec7 	bl	9000da10 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
90005c82:	bf00      	nop
90005c84:	3708      	adds	r7, #8
90005c86:	46bd      	mov	sp, r7
90005c88:	bd80      	pop	{r7, pc}
	...

90005c8c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
90005c8c:	b480      	push	{r7}
90005c8e:	b083      	sub	sp, #12
90005c90:	af00      	add	r7, sp, #0
90005c92:	4603      	mov	r3, r0
90005c94:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
90005c96:	4b05      	ldr	r3, [pc, #20]	; (90005cac <ptr_to_mem+0x20>)
90005c98:	681a      	ldr	r2, [r3, #0]
90005c9a:	88fb      	ldrh	r3, [r7, #6]
90005c9c:	4413      	add	r3, r2
}
90005c9e:	4618      	mov	r0, r3
90005ca0:	370c      	adds	r7, #12
90005ca2:	46bd      	mov	sp, r7
90005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
90005ca8:	4770      	bx	lr
90005caa:	bf00      	nop
90005cac:	2000799c 	.word	0x2000799c

90005cb0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
90005cb0:	b480      	push	{r7}
90005cb2:	b083      	sub	sp, #12
90005cb4:	af00      	add	r7, sp, #0
90005cb6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
90005cb8:	4b05      	ldr	r3, [pc, #20]	; (90005cd0 <mem_to_ptr+0x20>)
90005cba:	681b      	ldr	r3, [r3, #0]
90005cbc:	687a      	ldr	r2, [r7, #4]
90005cbe:	1ad3      	subs	r3, r2, r3
90005cc0:	b29b      	uxth	r3, r3
}
90005cc2:	4618      	mov	r0, r3
90005cc4:	370c      	adds	r7, #12
90005cc6:	46bd      	mov	sp, r7
90005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
90005ccc:	4770      	bx	lr
90005cce:	bf00      	nop
90005cd0:	2000799c 	.word	0x2000799c

90005cd4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
90005cd4:	b590      	push	{r4, r7, lr}
90005cd6:	b085      	sub	sp, #20
90005cd8:	af00      	add	r7, sp, #0
90005cda:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
90005cdc:	4b45      	ldr	r3, [pc, #276]	; (90005df4 <plug_holes+0x120>)
90005cde:	681b      	ldr	r3, [r3, #0]
90005ce0:	687a      	ldr	r2, [r7, #4]
90005ce2:	429a      	cmp	r2, r3
90005ce4:	d206      	bcs.n	90005cf4 <plug_holes+0x20>
90005ce6:	4b44      	ldr	r3, [pc, #272]	; (90005df8 <plug_holes+0x124>)
90005ce8:	f240 12df 	movw	r2, #479	; 0x1df
90005cec:	4943      	ldr	r1, [pc, #268]	; (90005dfc <plug_holes+0x128>)
90005cee:	4844      	ldr	r0, [pc, #272]	; (90005e00 <plug_holes+0x12c>)
90005cf0:	f00a fbfc 	bl	900104ec <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
90005cf4:	4b43      	ldr	r3, [pc, #268]	; (90005e04 <plug_holes+0x130>)
90005cf6:	681b      	ldr	r3, [r3, #0]
90005cf8:	687a      	ldr	r2, [r7, #4]
90005cfa:	429a      	cmp	r2, r3
90005cfc:	d306      	bcc.n	90005d0c <plug_holes+0x38>
90005cfe:	4b3e      	ldr	r3, [pc, #248]	; (90005df8 <plug_holes+0x124>)
90005d00:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
90005d04:	4940      	ldr	r1, [pc, #256]	; (90005e08 <plug_holes+0x134>)
90005d06:	483e      	ldr	r0, [pc, #248]	; (90005e00 <plug_holes+0x12c>)
90005d08:	f00a fbf0 	bl	900104ec <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
90005d0c:	687b      	ldr	r3, [r7, #4]
90005d0e:	791b      	ldrb	r3, [r3, #4]
90005d10:	2b00      	cmp	r3, #0
90005d12:	d006      	beq.n	90005d22 <plug_holes+0x4e>
90005d14:	4b38      	ldr	r3, [pc, #224]	; (90005df8 <plug_holes+0x124>)
90005d16:	f240 12e1 	movw	r2, #481	; 0x1e1
90005d1a:	493c      	ldr	r1, [pc, #240]	; (90005e0c <plug_holes+0x138>)
90005d1c:	4838      	ldr	r0, [pc, #224]	; (90005e00 <plug_holes+0x12c>)
90005d1e:	f00a fbe5 	bl	900104ec <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
90005d22:	687b      	ldr	r3, [r7, #4]
90005d24:	881b      	ldrh	r3, [r3, #0]
90005d26:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
90005d2a:	d906      	bls.n	90005d3a <plug_holes+0x66>
90005d2c:	4b32      	ldr	r3, [pc, #200]	; (90005df8 <plug_holes+0x124>)
90005d2e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
90005d32:	4937      	ldr	r1, [pc, #220]	; (90005e10 <plug_holes+0x13c>)
90005d34:	4832      	ldr	r0, [pc, #200]	; (90005e00 <plug_holes+0x12c>)
90005d36:	f00a fbd9 	bl	900104ec <iprintf>

  nmem = ptr_to_mem(mem->next);
90005d3a:	687b      	ldr	r3, [r7, #4]
90005d3c:	881b      	ldrh	r3, [r3, #0]
90005d3e:	4618      	mov	r0, r3
90005d40:	f7ff ffa4 	bl	90005c8c <ptr_to_mem>
90005d44:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
90005d46:	687a      	ldr	r2, [r7, #4]
90005d48:	68fb      	ldr	r3, [r7, #12]
90005d4a:	429a      	cmp	r2, r3
90005d4c:	d024      	beq.n	90005d98 <plug_holes+0xc4>
90005d4e:	68fb      	ldr	r3, [r7, #12]
90005d50:	791b      	ldrb	r3, [r3, #4]
90005d52:	2b00      	cmp	r3, #0
90005d54:	d120      	bne.n	90005d98 <plug_holes+0xc4>
90005d56:	4b2b      	ldr	r3, [pc, #172]	; (90005e04 <plug_holes+0x130>)
90005d58:	681b      	ldr	r3, [r3, #0]
90005d5a:	68fa      	ldr	r2, [r7, #12]
90005d5c:	429a      	cmp	r2, r3
90005d5e:	d01b      	beq.n	90005d98 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
90005d60:	4b2c      	ldr	r3, [pc, #176]	; (90005e14 <plug_holes+0x140>)
90005d62:	681b      	ldr	r3, [r3, #0]
90005d64:	68fa      	ldr	r2, [r7, #12]
90005d66:	429a      	cmp	r2, r3
90005d68:	d102      	bne.n	90005d70 <plug_holes+0x9c>
      lfree = mem;
90005d6a:	4a2a      	ldr	r2, [pc, #168]	; (90005e14 <plug_holes+0x140>)
90005d6c:	687b      	ldr	r3, [r7, #4]
90005d6e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
90005d70:	68fb      	ldr	r3, [r7, #12]
90005d72:	881a      	ldrh	r2, [r3, #0]
90005d74:	687b      	ldr	r3, [r7, #4]
90005d76:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
90005d78:	68fb      	ldr	r3, [r7, #12]
90005d7a:	881b      	ldrh	r3, [r3, #0]
90005d7c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
90005d80:	d00a      	beq.n	90005d98 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
90005d82:	68fb      	ldr	r3, [r7, #12]
90005d84:	881b      	ldrh	r3, [r3, #0]
90005d86:	4618      	mov	r0, r3
90005d88:	f7ff ff80 	bl	90005c8c <ptr_to_mem>
90005d8c:	4604      	mov	r4, r0
90005d8e:	6878      	ldr	r0, [r7, #4]
90005d90:	f7ff ff8e 	bl	90005cb0 <mem_to_ptr>
90005d94:	4603      	mov	r3, r0
90005d96:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
90005d98:	687b      	ldr	r3, [r7, #4]
90005d9a:	885b      	ldrh	r3, [r3, #2]
90005d9c:	4618      	mov	r0, r3
90005d9e:	f7ff ff75 	bl	90005c8c <ptr_to_mem>
90005da2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
90005da4:	68ba      	ldr	r2, [r7, #8]
90005da6:	687b      	ldr	r3, [r7, #4]
90005da8:	429a      	cmp	r2, r3
90005daa:	d01f      	beq.n	90005dec <plug_holes+0x118>
90005dac:	68bb      	ldr	r3, [r7, #8]
90005dae:	791b      	ldrb	r3, [r3, #4]
90005db0:	2b00      	cmp	r3, #0
90005db2:	d11b      	bne.n	90005dec <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
90005db4:	4b17      	ldr	r3, [pc, #92]	; (90005e14 <plug_holes+0x140>)
90005db6:	681b      	ldr	r3, [r3, #0]
90005db8:	687a      	ldr	r2, [r7, #4]
90005dba:	429a      	cmp	r2, r3
90005dbc:	d102      	bne.n	90005dc4 <plug_holes+0xf0>
      lfree = pmem;
90005dbe:	4a15      	ldr	r2, [pc, #84]	; (90005e14 <plug_holes+0x140>)
90005dc0:	68bb      	ldr	r3, [r7, #8]
90005dc2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
90005dc4:	687b      	ldr	r3, [r7, #4]
90005dc6:	881a      	ldrh	r2, [r3, #0]
90005dc8:	68bb      	ldr	r3, [r7, #8]
90005dca:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
90005dcc:	687b      	ldr	r3, [r7, #4]
90005dce:	881b      	ldrh	r3, [r3, #0]
90005dd0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
90005dd4:	d00a      	beq.n	90005dec <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
90005dd6:	687b      	ldr	r3, [r7, #4]
90005dd8:	881b      	ldrh	r3, [r3, #0]
90005dda:	4618      	mov	r0, r3
90005ddc:	f7ff ff56 	bl	90005c8c <ptr_to_mem>
90005de0:	4604      	mov	r4, r0
90005de2:	68b8      	ldr	r0, [r7, #8]
90005de4:	f7ff ff64 	bl	90005cb0 <mem_to_ptr>
90005de8:	4603      	mov	r3, r0
90005dea:	8063      	strh	r3, [r4, #2]
    }
  }
}
90005dec:	bf00      	nop
90005dee:	3714      	adds	r7, #20
90005df0:	46bd      	mov	sp, r7
90005df2:	bd90      	pop	{r4, r7, pc}
90005df4:	2000799c 	.word	0x2000799c
90005df8:	90011d44 	.word	0x90011d44
90005dfc:	90011d74 	.word	0x90011d74
90005e00:	90011d8c 	.word	0x90011d8c
90005e04:	200079a0 	.word	0x200079a0
90005e08:	90011db4 	.word	0x90011db4
90005e0c:	90011dd0 	.word	0x90011dd0
90005e10:	90011dec 	.word	0x90011dec
90005e14:	200079a4 	.word	0x200079a4

90005e18 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
90005e18:	b580      	push	{r7, lr}
90005e1a:	b082      	sub	sp, #8
90005e1c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
90005e1e:	4b18      	ldr	r3, [pc, #96]	; (90005e80 <mem_init+0x68>)
90005e20:	3303      	adds	r3, #3
90005e22:	f023 0303 	bic.w	r3, r3, #3
90005e26:	461a      	mov	r2, r3
90005e28:	4b16      	ldr	r3, [pc, #88]	; (90005e84 <mem_init+0x6c>)
90005e2a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
90005e2c:	4b15      	ldr	r3, [pc, #84]	; (90005e84 <mem_init+0x6c>)
90005e2e:	681b      	ldr	r3, [r3, #0]
90005e30:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
90005e32:	687b      	ldr	r3, [r7, #4]
90005e34:	f44f 5220 	mov.w	r2, #10240	; 0x2800
90005e38:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
90005e3a:	687b      	ldr	r3, [r7, #4]
90005e3c:	2200      	movs	r2, #0
90005e3e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
90005e40:	687b      	ldr	r3, [r7, #4]
90005e42:	2200      	movs	r2, #0
90005e44:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
90005e46:	f44f 5020 	mov.w	r0, #10240	; 0x2800
90005e4a:	f7ff ff1f 	bl	90005c8c <ptr_to_mem>
90005e4e:	4603      	mov	r3, r0
90005e50:	4a0d      	ldr	r2, [pc, #52]	; (90005e88 <mem_init+0x70>)
90005e52:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
90005e54:	4b0c      	ldr	r3, [pc, #48]	; (90005e88 <mem_init+0x70>)
90005e56:	681b      	ldr	r3, [r3, #0]
90005e58:	2201      	movs	r2, #1
90005e5a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
90005e5c:	4b0a      	ldr	r3, [pc, #40]	; (90005e88 <mem_init+0x70>)
90005e5e:	681b      	ldr	r3, [r3, #0]
90005e60:	f44f 5220 	mov.w	r2, #10240	; 0x2800
90005e64:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
90005e66:	4b08      	ldr	r3, [pc, #32]	; (90005e88 <mem_init+0x70>)
90005e68:	681b      	ldr	r3, [r3, #0]
90005e6a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
90005e6e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
90005e70:	4b04      	ldr	r3, [pc, #16]	; (90005e84 <mem_init+0x6c>)
90005e72:	681b      	ldr	r3, [r3, #0]
90005e74:	4a05      	ldr	r2, [pc, #20]	; (90005e8c <mem_init+0x74>)
90005e76:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
90005e78:	bf00      	nop
90005e7a:	3708      	adds	r7, #8
90005e7c:	46bd      	mov	sp, r7
90005e7e:	bd80      	pop	{r7, pc}
90005e80:	20005188 	.word	0x20005188
90005e84:	2000799c 	.word	0x2000799c
90005e88:	200079a0 	.word	0x200079a0
90005e8c:	200079a4 	.word	0x200079a4

90005e90 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
90005e90:	b580      	push	{r7, lr}
90005e92:	b086      	sub	sp, #24
90005e94:	af00      	add	r7, sp, #0
90005e96:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
90005e98:	6878      	ldr	r0, [r7, #4]
90005e9a:	f7ff ff09 	bl	90005cb0 <mem_to_ptr>
90005e9e:	4603      	mov	r3, r0
90005ea0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
90005ea2:	687b      	ldr	r3, [r7, #4]
90005ea4:	881b      	ldrh	r3, [r3, #0]
90005ea6:	4618      	mov	r0, r3
90005ea8:	f7ff fef0 	bl	90005c8c <ptr_to_mem>
90005eac:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
90005eae:	687b      	ldr	r3, [r7, #4]
90005eb0:	885b      	ldrh	r3, [r3, #2]
90005eb2:	4618      	mov	r0, r3
90005eb4:	f7ff feea 	bl	90005c8c <ptr_to_mem>
90005eb8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
90005eba:	687b      	ldr	r3, [r7, #4]
90005ebc:	881b      	ldrh	r3, [r3, #0]
90005ebe:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
90005ec2:	d818      	bhi.n	90005ef6 <mem_link_valid+0x66>
90005ec4:	687b      	ldr	r3, [r7, #4]
90005ec6:	885b      	ldrh	r3, [r3, #2]
90005ec8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
90005ecc:	d813      	bhi.n	90005ef6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
90005ece:	687b      	ldr	r3, [r7, #4]
90005ed0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
90005ed2:	8afa      	ldrh	r2, [r7, #22]
90005ed4:	429a      	cmp	r2, r3
90005ed6:	d004      	beq.n	90005ee2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
90005ed8:	68fb      	ldr	r3, [r7, #12]
90005eda:	881b      	ldrh	r3, [r3, #0]
90005edc:	8afa      	ldrh	r2, [r7, #22]
90005ede:	429a      	cmp	r2, r3
90005ee0:	d109      	bne.n	90005ef6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
90005ee2:	4b08      	ldr	r3, [pc, #32]	; (90005f04 <mem_link_valid+0x74>)
90005ee4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
90005ee6:	693a      	ldr	r2, [r7, #16]
90005ee8:	429a      	cmp	r2, r3
90005eea:	d006      	beq.n	90005efa <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
90005eec:	693b      	ldr	r3, [r7, #16]
90005eee:	885b      	ldrh	r3, [r3, #2]
90005ef0:	8afa      	ldrh	r2, [r7, #22]
90005ef2:	429a      	cmp	r2, r3
90005ef4:	d001      	beq.n	90005efa <mem_link_valid+0x6a>
    return 0;
90005ef6:	2300      	movs	r3, #0
90005ef8:	e000      	b.n	90005efc <mem_link_valid+0x6c>
  }
  return 1;
90005efa:	2301      	movs	r3, #1
}
90005efc:	4618      	mov	r0, r3
90005efe:	3718      	adds	r7, #24
90005f00:	46bd      	mov	sp, r7
90005f02:	bd80      	pop	{r7, pc}
90005f04:	200079a0 	.word	0x200079a0

90005f08 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
90005f08:	b580      	push	{r7, lr}
90005f0a:	b084      	sub	sp, #16
90005f0c:	af00      	add	r7, sp, #0
90005f0e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
90005f10:	687b      	ldr	r3, [r7, #4]
90005f12:	2b00      	cmp	r3, #0
90005f14:	d04c      	beq.n	90005fb0 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
90005f16:	687b      	ldr	r3, [r7, #4]
90005f18:	f003 0303 	and.w	r3, r3, #3
90005f1c:	2b00      	cmp	r3, #0
90005f1e:	d007      	beq.n	90005f30 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
90005f20:	4b25      	ldr	r3, [pc, #148]	; (90005fb8 <mem_free+0xb0>)
90005f22:	f240 2273 	movw	r2, #627	; 0x273
90005f26:	4925      	ldr	r1, [pc, #148]	; (90005fbc <mem_free+0xb4>)
90005f28:	4825      	ldr	r0, [pc, #148]	; (90005fc0 <mem_free+0xb8>)
90005f2a:	f00a fadf 	bl	900104ec <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
90005f2e:	e040      	b.n	90005fb2 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
90005f30:	687b      	ldr	r3, [r7, #4]
90005f32:	3b08      	subs	r3, #8
90005f34:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
90005f36:	4b23      	ldr	r3, [pc, #140]	; (90005fc4 <mem_free+0xbc>)
90005f38:	681b      	ldr	r3, [r3, #0]
90005f3a:	68fa      	ldr	r2, [r7, #12]
90005f3c:	429a      	cmp	r2, r3
90005f3e:	d306      	bcc.n	90005f4e <mem_free+0x46>
90005f40:	687b      	ldr	r3, [r7, #4]
90005f42:	f103 020c 	add.w	r2, r3, #12
90005f46:	4b20      	ldr	r3, [pc, #128]	; (90005fc8 <mem_free+0xc0>)
90005f48:	681b      	ldr	r3, [r3, #0]
90005f4a:	429a      	cmp	r2, r3
90005f4c:	d907      	bls.n	90005f5e <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
90005f4e:	4b1a      	ldr	r3, [pc, #104]	; (90005fb8 <mem_free+0xb0>)
90005f50:	f240 227f 	movw	r2, #639	; 0x27f
90005f54:	491d      	ldr	r1, [pc, #116]	; (90005fcc <mem_free+0xc4>)
90005f56:	481a      	ldr	r0, [pc, #104]	; (90005fc0 <mem_free+0xb8>)
90005f58:	f00a fac8 	bl	900104ec <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
90005f5c:	e029      	b.n	90005fb2 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
90005f5e:	68fb      	ldr	r3, [r7, #12]
90005f60:	791b      	ldrb	r3, [r3, #4]
90005f62:	2b00      	cmp	r3, #0
90005f64:	d107      	bne.n	90005f76 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
90005f66:	4b14      	ldr	r3, [pc, #80]	; (90005fb8 <mem_free+0xb0>)
90005f68:	f44f 7223 	mov.w	r2, #652	; 0x28c
90005f6c:	4918      	ldr	r1, [pc, #96]	; (90005fd0 <mem_free+0xc8>)
90005f6e:	4814      	ldr	r0, [pc, #80]	; (90005fc0 <mem_free+0xb8>)
90005f70:	f00a fabc 	bl	900104ec <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
90005f74:	e01d      	b.n	90005fb2 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
90005f76:	68f8      	ldr	r0, [r7, #12]
90005f78:	f7ff ff8a 	bl	90005e90 <mem_link_valid>
90005f7c:	4603      	mov	r3, r0
90005f7e:	2b00      	cmp	r3, #0
90005f80:	d107      	bne.n	90005f92 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
90005f82:	4b0d      	ldr	r3, [pc, #52]	; (90005fb8 <mem_free+0xb0>)
90005f84:	f240 2295 	movw	r2, #661	; 0x295
90005f88:	4912      	ldr	r1, [pc, #72]	; (90005fd4 <mem_free+0xcc>)
90005f8a:	480d      	ldr	r0, [pc, #52]	; (90005fc0 <mem_free+0xb8>)
90005f8c:	f00a faae 	bl	900104ec <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
90005f90:	e00f      	b.n	90005fb2 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
90005f92:	68fb      	ldr	r3, [r7, #12]
90005f94:	2200      	movs	r2, #0
90005f96:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
90005f98:	4b0f      	ldr	r3, [pc, #60]	; (90005fd8 <mem_free+0xd0>)
90005f9a:	681b      	ldr	r3, [r3, #0]
90005f9c:	68fa      	ldr	r2, [r7, #12]
90005f9e:	429a      	cmp	r2, r3
90005fa0:	d202      	bcs.n	90005fa8 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
90005fa2:	4a0d      	ldr	r2, [pc, #52]	; (90005fd8 <mem_free+0xd0>)
90005fa4:	68fb      	ldr	r3, [r7, #12]
90005fa6:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
90005fa8:	68f8      	ldr	r0, [r7, #12]
90005faa:	f7ff fe93 	bl	90005cd4 <plug_holes>
90005fae:	e000      	b.n	90005fb2 <mem_free+0xaa>
    return;
90005fb0:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
90005fb2:	3710      	adds	r7, #16
90005fb4:	46bd      	mov	sp, r7
90005fb6:	bd80      	pop	{r7, pc}
90005fb8:	90011d44 	.word	0x90011d44
90005fbc:	90011e18 	.word	0x90011e18
90005fc0:	90011d8c 	.word	0x90011d8c
90005fc4:	2000799c 	.word	0x2000799c
90005fc8:	200079a0 	.word	0x200079a0
90005fcc:	90011e3c 	.word	0x90011e3c
90005fd0:	90011e58 	.word	0x90011e58
90005fd4:	90011e80 	.word	0x90011e80
90005fd8:	200079a4 	.word	0x200079a4

90005fdc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
90005fdc:	b580      	push	{r7, lr}
90005fde:	b088      	sub	sp, #32
90005fe0:	af00      	add	r7, sp, #0
90005fe2:	6078      	str	r0, [r7, #4]
90005fe4:	460b      	mov	r3, r1
90005fe6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
90005fe8:	887b      	ldrh	r3, [r7, #2]
90005fea:	3303      	adds	r3, #3
90005fec:	b29b      	uxth	r3, r3
90005fee:	f023 0303 	bic.w	r3, r3, #3
90005ff2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
90005ff4:	8bfb      	ldrh	r3, [r7, #30]
90005ff6:	2b0b      	cmp	r3, #11
90005ff8:	d801      	bhi.n	90005ffe <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
90005ffa:	230c      	movs	r3, #12
90005ffc:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
90005ffe:	8bfb      	ldrh	r3, [r7, #30]
90006000:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
90006004:	d803      	bhi.n	9000600e <mem_trim+0x32>
90006006:	8bfa      	ldrh	r2, [r7, #30]
90006008:	887b      	ldrh	r3, [r7, #2]
9000600a:	429a      	cmp	r2, r3
9000600c:	d201      	bcs.n	90006012 <mem_trim+0x36>
    return NULL;
9000600e:	2300      	movs	r3, #0
90006010:	e0cc      	b.n	900061ac <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
90006012:	4b68      	ldr	r3, [pc, #416]	; (900061b4 <mem_trim+0x1d8>)
90006014:	681b      	ldr	r3, [r3, #0]
90006016:	687a      	ldr	r2, [r7, #4]
90006018:	429a      	cmp	r2, r3
9000601a:	d304      	bcc.n	90006026 <mem_trim+0x4a>
9000601c:	4b66      	ldr	r3, [pc, #408]	; (900061b8 <mem_trim+0x1dc>)
9000601e:	681b      	ldr	r3, [r3, #0]
90006020:	687a      	ldr	r2, [r7, #4]
90006022:	429a      	cmp	r2, r3
90006024:	d306      	bcc.n	90006034 <mem_trim+0x58>
90006026:	4b65      	ldr	r3, [pc, #404]	; (900061bc <mem_trim+0x1e0>)
90006028:	f240 22d1 	movw	r2, #721	; 0x2d1
9000602c:	4964      	ldr	r1, [pc, #400]	; (900061c0 <mem_trim+0x1e4>)
9000602e:	4865      	ldr	r0, [pc, #404]	; (900061c4 <mem_trim+0x1e8>)
90006030:	f00a fa5c 	bl	900104ec <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
90006034:	4b5f      	ldr	r3, [pc, #380]	; (900061b4 <mem_trim+0x1d8>)
90006036:	681b      	ldr	r3, [r3, #0]
90006038:	687a      	ldr	r2, [r7, #4]
9000603a:	429a      	cmp	r2, r3
9000603c:	d304      	bcc.n	90006048 <mem_trim+0x6c>
9000603e:	4b5e      	ldr	r3, [pc, #376]	; (900061b8 <mem_trim+0x1dc>)
90006040:	681b      	ldr	r3, [r3, #0]
90006042:	687a      	ldr	r2, [r7, #4]
90006044:	429a      	cmp	r2, r3
90006046:	d301      	bcc.n	9000604c <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
90006048:	687b      	ldr	r3, [r7, #4]
9000604a:	e0af      	b.n	900061ac <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
9000604c:	687b      	ldr	r3, [r7, #4]
9000604e:	3b08      	subs	r3, #8
90006050:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
90006052:	69b8      	ldr	r0, [r7, #24]
90006054:	f7ff fe2c 	bl	90005cb0 <mem_to_ptr>
90006058:	4603      	mov	r3, r0
9000605a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
9000605c:	69bb      	ldr	r3, [r7, #24]
9000605e:	881a      	ldrh	r2, [r3, #0]
90006060:	8afb      	ldrh	r3, [r7, #22]
90006062:	1ad3      	subs	r3, r2, r3
90006064:	b29b      	uxth	r3, r3
90006066:	3b08      	subs	r3, #8
90006068:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
9000606a:	8bfa      	ldrh	r2, [r7, #30]
9000606c:	8abb      	ldrh	r3, [r7, #20]
9000606e:	429a      	cmp	r2, r3
90006070:	d906      	bls.n	90006080 <mem_trim+0xa4>
90006072:	4b52      	ldr	r3, [pc, #328]	; (900061bc <mem_trim+0x1e0>)
90006074:	f44f 7239 	mov.w	r2, #740	; 0x2e4
90006078:	4953      	ldr	r1, [pc, #332]	; (900061c8 <mem_trim+0x1ec>)
9000607a:	4852      	ldr	r0, [pc, #328]	; (900061c4 <mem_trim+0x1e8>)
9000607c:	f00a fa36 	bl	900104ec <iprintf>
  if (newsize > size) {
90006080:	8bfa      	ldrh	r2, [r7, #30]
90006082:	8abb      	ldrh	r3, [r7, #20]
90006084:	429a      	cmp	r2, r3
90006086:	d901      	bls.n	9000608c <mem_trim+0xb0>
    /* not supported */
    return NULL;
90006088:	2300      	movs	r3, #0
9000608a:	e08f      	b.n	900061ac <mem_trim+0x1d0>
  }
  if (newsize == size) {
9000608c:	8bfa      	ldrh	r2, [r7, #30]
9000608e:	8abb      	ldrh	r3, [r7, #20]
90006090:	429a      	cmp	r2, r3
90006092:	d101      	bne.n	90006098 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
90006094:	687b      	ldr	r3, [r7, #4]
90006096:	e089      	b.n	900061ac <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
90006098:	69bb      	ldr	r3, [r7, #24]
9000609a:	881b      	ldrh	r3, [r3, #0]
9000609c:	4618      	mov	r0, r3
9000609e:	f7ff fdf5 	bl	90005c8c <ptr_to_mem>
900060a2:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
900060a4:	693b      	ldr	r3, [r7, #16]
900060a6:	791b      	ldrb	r3, [r3, #4]
900060a8:	2b00      	cmp	r3, #0
900060aa:	d13f      	bne.n	9000612c <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
900060ac:	69bb      	ldr	r3, [r7, #24]
900060ae:	881b      	ldrh	r3, [r3, #0]
900060b0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
900060b4:	d106      	bne.n	900060c4 <mem_trim+0xe8>
900060b6:	4b41      	ldr	r3, [pc, #260]	; (900061bc <mem_trim+0x1e0>)
900060b8:	f240 22f5 	movw	r2, #757	; 0x2f5
900060bc:	4943      	ldr	r1, [pc, #268]	; (900061cc <mem_trim+0x1f0>)
900060be:	4841      	ldr	r0, [pc, #260]	; (900061c4 <mem_trim+0x1e8>)
900060c0:	f00a fa14 	bl	900104ec <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
900060c4:	693b      	ldr	r3, [r7, #16]
900060c6:	881b      	ldrh	r3, [r3, #0]
900060c8:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
900060ca:	8afa      	ldrh	r2, [r7, #22]
900060cc:	8bfb      	ldrh	r3, [r7, #30]
900060ce:	4413      	add	r3, r2
900060d0:	b29b      	uxth	r3, r3
900060d2:	3308      	adds	r3, #8
900060d4:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
900060d6:	4b3e      	ldr	r3, [pc, #248]	; (900061d0 <mem_trim+0x1f4>)
900060d8:	681b      	ldr	r3, [r3, #0]
900060da:	693a      	ldr	r2, [r7, #16]
900060dc:	429a      	cmp	r2, r3
900060de:	d106      	bne.n	900060ee <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
900060e0:	89fb      	ldrh	r3, [r7, #14]
900060e2:	4618      	mov	r0, r3
900060e4:	f7ff fdd2 	bl	90005c8c <ptr_to_mem>
900060e8:	4603      	mov	r3, r0
900060ea:	4a39      	ldr	r2, [pc, #228]	; (900061d0 <mem_trim+0x1f4>)
900060ec:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
900060ee:	89fb      	ldrh	r3, [r7, #14]
900060f0:	4618      	mov	r0, r3
900060f2:	f7ff fdcb 	bl	90005c8c <ptr_to_mem>
900060f6:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
900060f8:	693b      	ldr	r3, [r7, #16]
900060fa:	2200      	movs	r2, #0
900060fc:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
900060fe:	693b      	ldr	r3, [r7, #16]
90006100:	89ba      	ldrh	r2, [r7, #12]
90006102:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
90006104:	693b      	ldr	r3, [r7, #16]
90006106:	8afa      	ldrh	r2, [r7, #22]
90006108:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
9000610a:	69bb      	ldr	r3, [r7, #24]
9000610c:	89fa      	ldrh	r2, [r7, #14]
9000610e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
90006110:	693b      	ldr	r3, [r7, #16]
90006112:	881b      	ldrh	r3, [r3, #0]
90006114:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
90006118:	d047      	beq.n	900061aa <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
9000611a:	693b      	ldr	r3, [r7, #16]
9000611c:	881b      	ldrh	r3, [r3, #0]
9000611e:	4618      	mov	r0, r3
90006120:	f7ff fdb4 	bl	90005c8c <ptr_to_mem>
90006124:	4602      	mov	r2, r0
90006126:	89fb      	ldrh	r3, [r7, #14]
90006128:	8053      	strh	r3, [r2, #2]
9000612a:	e03e      	b.n	900061aa <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
9000612c:	8bfb      	ldrh	r3, [r7, #30]
9000612e:	f103 0214 	add.w	r2, r3, #20
90006132:	8abb      	ldrh	r3, [r7, #20]
90006134:	429a      	cmp	r2, r3
90006136:	d838      	bhi.n	900061aa <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
90006138:	8afa      	ldrh	r2, [r7, #22]
9000613a:	8bfb      	ldrh	r3, [r7, #30]
9000613c:	4413      	add	r3, r2
9000613e:	b29b      	uxth	r3, r3
90006140:	3308      	adds	r3, #8
90006142:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
90006144:	69bb      	ldr	r3, [r7, #24]
90006146:	881b      	ldrh	r3, [r3, #0]
90006148:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
9000614c:	d106      	bne.n	9000615c <mem_trim+0x180>
9000614e:	4b1b      	ldr	r3, [pc, #108]	; (900061bc <mem_trim+0x1e0>)
90006150:	f240 3216 	movw	r2, #790	; 0x316
90006154:	491d      	ldr	r1, [pc, #116]	; (900061cc <mem_trim+0x1f0>)
90006156:	481b      	ldr	r0, [pc, #108]	; (900061c4 <mem_trim+0x1e8>)
90006158:	f00a f9c8 	bl	900104ec <iprintf>
    mem2 = ptr_to_mem(ptr2);
9000615c:	89fb      	ldrh	r3, [r7, #14]
9000615e:	4618      	mov	r0, r3
90006160:	f7ff fd94 	bl	90005c8c <ptr_to_mem>
90006164:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
90006166:	4b1a      	ldr	r3, [pc, #104]	; (900061d0 <mem_trim+0x1f4>)
90006168:	681b      	ldr	r3, [r3, #0]
9000616a:	693a      	ldr	r2, [r7, #16]
9000616c:	429a      	cmp	r2, r3
9000616e:	d202      	bcs.n	90006176 <mem_trim+0x19a>
      lfree = mem2;
90006170:	4a17      	ldr	r2, [pc, #92]	; (900061d0 <mem_trim+0x1f4>)
90006172:	693b      	ldr	r3, [r7, #16]
90006174:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
90006176:	693b      	ldr	r3, [r7, #16]
90006178:	2200      	movs	r2, #0
9000617a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
9000617c:	69bb      	ldr	r3, [r7, #24]
9000617e:	881a      	ldrh	r2, [r3, #0]
90006180:	693b      	ldr	r3, [r7, #16]
90006182:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
90006184:	693b      	ldr	r3, [r7, #16]
90006186:	8afa      	ldrh	r2, [r7, #22]
90006188:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
9000618a:	69bb      	ldr	r3, [r7, #24]
9000618c:	89fa      	ldrh	r2, [r7, #14]
9000618e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
90006190:	693b      	ldr	r3, [r7, #16]
90006192:	881b      	ldrh	r3, [r3, #0]
90006194:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
90006198:	d007      	beq.n	900061aa <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
9000619a:	693b      	ldr	r3, [r7, #16]
9000619c:	881b      	ldrh	r3, [r3, #0]
9000619e:	4618      	mov	r0, r3
900061a0:	f7ff fd74 	bl	90005c8c <ptr_to_mem>
900061a4:	4602      	mov	r2, r0
900061a6:	89fb      	ldrh	r3, [r7, #14]
900061a8:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
900061aa:	687b      	ldr	r3, [r7, #4]
}
900061ac:	4618      	mov	r0, r3
900061ae:	3720      	adds	r7, #32
900061b0:	46bd      	mov	sp, r7
900061b2:	bd80      	pop	{r7, pc}
900061b4:	2000799c 	.word	0x2000799c
900061b8:	200079a0 	.word	0x200079a0
900061bc:	90011d44 	.word	0x90011d44
900061c0:	90011eb4 	.word	0x90011eb4
900061c4:	90011d8c 	.word	0x90011d8c
900061c8:	90011ecc 	.word	0x90011ecc
900061cc:	90011eec 	.word	0x90011eec
900061d0:	200079a4 	.word	0x200079a4

900061d4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
900061d4:	b580      	push	{r7, lr}
900061d6:	b088      	sub	sp, #32
900061d8:	af00      	add	r7, sp, #0
900061da:	4603      	mov	r3, r0
900061dc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
900061de:	88fb      	ldrh	r3, [r7, #6]
900061e0:	2b00      	cmp	r3, #0
900061e2:	d101      	bne.n	900061e8 <mem_malloc+0x14>
    return NULL;
900061e4:	2300      	movs	r3, #0
900061e6:	e0d9      	b.n	9000639c <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
900061e8:	88fb      	ldrh	r3, [r7, #6]
900061ea:	3303      	adds	r3, #3
900061ec:	b29b      	uxth	r3, r3
900061ee:	f023 0303 	bic.w	r3, r3, #3
900061f2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
900061f4:	8bbb      	ldrh	r3, [r7, #28]
900061f6:	2b0b      	cmp	r3, #11
900061f8:	d801      	bhi.n	900061fe <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
900061fa:	230c      	movs	r3, #12
900061fc:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
900061fe:	8bbb      	ldrh	r3, [r7, #28]
90006200:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
90006204:	d803      	bhi.n	9000620e <mem_malloc+0x3a>
90006206:	8bba      	ldrh	r2, [r7, #28]
90006208:	88fb      	ldrh	r3, [r7, #6]
9000620a:	429a      	cmp	r2, r3
9000620c:	d201      	bcs.n	90006212 <mem_malloc+0x3e>
    return NULL;
9000620e:	2300      	movs	r3, #0
90006210:	e0c4      	b.n	9000639c <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
90006212:	4b64      	ldr	r3, [pc, #400]	; (900063a4 <mem_malloc+0x1d0>)
90006214:	681b      	ldr	r3, [r3, #0]
90006216:	4618      	mov	r0, r3
90006218:	f7ff fd4a 	bl	90005cb0 <mem_to_ptr>
9000621c:	4603      	mov	r3, r0
9000621e:	83fb      	strh	r3, [r7, #30]
90006220:	e0b4      	b.n	9000638c <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
90006222:	8bfb      	ldrh	r3, [r7, #30]
90006224:	4618      	mov	r0, r3
90006226:	f7ff fd31 	bl	90005c8c <ptr_to_mem>
9000622a:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
9000622c:	697b      	ldr	r3, [r7, #20]
9000622e:	791b      	ldrb	r3, [r3, #4]
90006230:	2b00      	cmp	r3, #0
90006232:	f040 80a4 	bne.w	9000637e <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
90006236:	697b      	ldr	r3, [r7, #20]
90006238:	881b      	ldrh	r3, [r3, #0]
9000623a:	461a      	mov	r2, r3
9000623c:	8bfb      	ldrh	r3, [r7, #30]
9000623e:	1ad3      	subs	r3, r2, r3
90006240:	f1a3 0208 	sub.w	r2, r3, #8
90006244:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
90006246:	429a      	cmp	r2, r3
90006248:	f0c0 8099 	bcc.w	9000637e <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
9000624c:	697b      	ldr	r3, [r7, #20]
9000624e:	881b      	ldrh	r3, [r3, #0]
90006250:	461a      	mov	r2, r3
90006252:	8bfb      	ldrh	r3, [r7, #30]
90006254:	1ad3      	subs	r3, r2, r3
90006256:	f1a3 0208 	sub.w	r2, r3, #8
9000625a:	8bbb      	ldrh	r3, [r7, #28]
9000625c:	3314      	adds	r3, #20
9000625e:	429a      	cmp	r2, r3
90006260:	d333      	bcc.n	900062ca <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
90006262:	8bfa      	ldrh	r2, [r7, #30]
90006264:	8bbb      	ldrh	r3, [r7, #28]
90006266:	4413      	add	r3, r2
90006268:	b29b      	uxth	r3, r3
9000626a:	3308      	adds	r3, #8
9000626c:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
9000626e:	8a7b      	ldrh	r3, [r7, #18]
90006270:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
90006274:	d106      	bne.n	90006284 <mem_malloc+0xb0>
90006276:	4b4c      	ldr	r3, [pc, #304]	; (900063a8 <mem_malloc+0x1d4>)
90006278:	f240 3287 	movw	r2, #903	; 0x387
9000627c:	494b      	ldr	r1, [pc, #300]	; (900063ac <mem_malloc+0x1d8>)
9000627e:	484c      	ldr	r0, [pc, #304]	; (900063b0 <mem_malloc+0x1dc>)
90006280:	f00a f934 	bl	900104ec <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
90006284:	8a7b      	ldrh	r3, [r7, #18]
90006286:	4618      	mov	r0, r3
90006288:	f7ff fd00 	bl	90005c8c <ptr_to_mem>
9000628c:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
9000628e:	68fb      	ldr	r3, [r7, #12]
90006290:	2200      	movs	r2, #0
90006292:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
90006294:	697b      	ldr	r3, [r7, #20]
90006296:	881a      	ldrh	r2, [r3, #0]
90006298:	68fb      	ldr	r3, [r7, #12]
9000629a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
9000629c:	68fb      	ldr	r3, [r7, #12]
9000629e:	8bfa      	ldrh	r2, [r7, #30]
900062a0:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
900062a2:	697b      	ldr	r3, [r7, #20]
900062a4:	8a7a      	ldrh	r2, [r7, #18]
900062a6:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
900062a8:	697b      	ldr	r3, [r7, #20]
900062aa:	2201      	movs	r2, #1
900062ac:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
900062ae:	68fb      	ldr	r3, [r7, #12]
900062b0:	881b      	ldrh	r3, [r3, #0]
900062b2:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
900062b6:	d00b      	beq.n	900062d0 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
900062b8:	68fb      	ldr	r3, [r7, #12]
900062ba:	881b      	ldrh	r3, [r3, #0]
900062bc:	4618      	mov	r0, r3
900062be:	f7ff fce5 	bl	90005c8c <ptr_to_mem>
900062c2:	4602      	mov	r2, r0
900062c4:	8a7b      	ldrh	r3, [r7, #18]
900062c6:	8053      	strh	r3, [r2, #2]
900062c8:	e002      	b.n	900062d0 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
900062ca:	697b      	ldr	r3, [r7, #20]
900062cc:	2201      	movs	r2, #1
900062ce:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
900062d0:	4b34      	ldr	r3, [pc, #208]	; (900063a4 <mem_malloc+0x1d0>)
900062d2:	681b      	ldr	r3, [r3, #0]
900062d4:	697a      	ldr	r2, [r7, #20]
900062d6:	429a      	cmp	r2, r3
900062d8:	d127      	bne.n	9000632a <mem_malloc+0x156>
          struct mem *cur = lfree;
900062da:	4b32      	ldr	r3, [pc, #200]	; (900063a4 <mem_malloc+0x1d0>)
900062dc:	681b      	ldr	r3, [r3, #0]
900062de:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
900062e0:	e005      	b.n	900062ee <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
900062e2:	69bb      	ldr	r3, [r7, #24]
900062e4:	881b      	ldrh	r3, [r3, #0]
900062e6:	4618      	mov	r0, r3
900062e8:	f7ff fcd0 	bl	90005c8c <ptr_to_mem>
900062ec:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
900062ee:	69bb      	ldr	r3, [r7, #24]
900062f0:	791b      	ldrb	r3, [r3, #4]
900062f2:	2b00      	cmp	r3, #0
900062f4:	d004      	beq.n	90006300 <mem_malloc+0x12c>
900062f6:	4b2f      	ldr	r3, [pc, #188]	; (900063b4 <mem_malloc+0x1e0>)
900062f8:	681b      	ldr	r3, [r3, #0]
900062fa:	69ba      	ldr	r2, [r7, #24]
900062fc:	429a      	cmp	r2, r3
900062fe:	d1f0      	bne.n	900062e2 <mem_malloc+0x10e>
          }
          lfree = cur;
90006300:	4a28      	ldr	r2, [pc, #160]	; (900063a4 <mem_malloc+0x1d0>)
90006302:	69bb      	ldr	r3, [r7, #24]
90006304:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
90006306:	4b27      	ldr	r3, [pc, #156]	; (900063a4 <mem_malloc+0x1d0>)
90006308:	681a      	ldr	r2, [r3, #0]
9000630a:	4b2a      	ldr	r3, [pc, #168]	; (900063b4 <mem_malloc+0x1e0>)
9000630c:	681b      	ldr	r3, [r3, #0]
9000630e:	429a      	cmp	r2, r3
90006310:	d00b      	beq.n	9000632a <mem_malloc+0x156>
90006312:	4b24      	ldr	r3, [pc, #144]	; (900063a4 <mem_malloc+0x1d0>)
90006314:	681b      	ldr	r3, [r3, #0]
90006316:	791b      	ldrb	r3, [r3, #4]
90006318:	2b00      	cmp	r3, #0
9000631a:	d006      	beq.n	9000632a <mem_malloc+0x156>
9000631c:	4b22      	ldr	r3, [pc, #136]	; (900063a8 <mem_malloc+0x1d4>)
9000631e:	f240 32b5 	movw	r2, #949	; 0x3b5
90006322:	4925      	ldr	r1, [pc, #148]	; (900063b8 <mem_malloc+0x1e4>)
90006324:	4822      	ldr	r0, [pc, #136]	; (900063b0 <mem_malloc+0x1dc>)
90006326:	f00a f8e1 	bl	900104ec <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
9000632a:	8bba      	ldrh	r2, [r7, #28]
9000632c:	697b      	ldr	r3, [r7, #20]
9000632e:	4413      	add	r3, r2
90006330:	3308      	adds	r3, #8
90006332:	4a20      	ldr	r2, [pc, #128]	; (900063b4 <mem_malloc+0x1e0>)
90006334:	6812      	ldr	r2, [r2, #0]
90006336:	4293      	cmp	r3, r2
90006338:	d906      	bls.n	90006348 <mem_malloc+0x174>
9000633a:	4b1b      	ldr	r3, [pc, #108]	; (900063a8 <mem_malloc+0x1d4>)
9000633c:	f240 32b9 	movw	r2, #953	; 0x3b9
90006340:	491e      	ldr	r1, [pc, #120]	; (900063bc <mem_malloc+0x1e8>)
90006342:	481b      	ldr	r0, [pc, #108]	; (900063b0 <mem_malloc+0x1dc>)
90006344:	f00a f8d2 	bl	900104ec <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
90006348:	697b      	ldr	r3, [r7, #20]
9000634a:	f003 0303 	and.w	r3, r3, #3
9000634e:	2b00      	cmp	r3, #0
90006350:	d006      	beq.n	90006360 <mem_malloc+0x18c>
90006352:	4b15      	ldr	r3, [pc, #84]	; (900063a8 <mem_malloc+0x1d4>)
90006354:	f240 32bb 	movw	r2, #955	; 0x3bb
90006358:	4919      	ldr	r1, [pc, #100]	; (900063c0 <mem_malloc+0x1ec>)
9000635a:	4815      	ldr	r0, [pc, #84]	; (900063b0 <mem_malloc+0x1dc>)
9000635c:	f00a f8c6 	bl	900104ec <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
90006360:	697b      	ldr	r3, [r7, #20]
90006362:	f003 0303 	and.w	r3, r3, #3
90006366:	2b00      	cmp	r3, #0
90006368:	d006      	beq.n	90006378 <mem_malloc+0x1a4>
9000636a:	4b0f      	ldr	r3, [pc, #60]	; (900063a8 <mem_malloc+0x1d4>)
9000636c:	f240 32bd 	movw	r2, #957	; 0x3bd
90006370:	4914      	ldr	r1, [pc, #80]	; (900063c4 <mem_malloc+0x1f0>)
90006372:	480f      	ldr	r0, [pc, #60]	; (900063b0 <mem_malloc+0x1dc>)
90006374:	f00a f8ba 	bl	900104ec <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
90006378:	697b      	ldr	r3, [r7, #20]
9000637a:	3308      	adds	r3, #8
9000637c:	e00e      	b.n	9000639c <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
9000637e:	8bfb      	ldrh	r3, [r7, #30]
90006380:	4618      	mov	r0, r3
90006382:	f7ff fc83 	bl	90005c8c <ptr_to_mem>
90006386:	4603      	mov	r3, r0
90006388:	881b      	ldrh	r3, [r3, #0]
9000638a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
9000638c:	8bfa      	ldrh	r2, [r7, #30]
9000638e:	8bbb      	ldrh	r3, [r7, #28]
90006390:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
90006394:	429a      	cmp	r2, r3
90006396:	f4ff af44 	bcc.w	90006222 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
9000639a:	2300      	movs	r3, #0
}
9000639c:	4618      	mov	r0, r3
9000639e:	3720      	adds	r7, #32
900063a0:	46bd      	mov	sp, r7
900063a2:	bd80      	pop	{r7, pc}
900063a4:	200079a4 	.word	0x200079a4
900063a8:	90011d44 	.word	0x90011d44
900063ac:	90011eec 	.word	0x90011eec
900063b0:	90011d8c 	.word	0x90011d8c
900063b4:	200079a0 	.word	0x200079a0
900063b8:	90011f00 	.word	0x90011f00
900063bc:	90011f1c 	.word	0x90011f1c
900063c0:	90011f4c 	.word	0x90011f4c
900063c4:	90011f7c 	.word	0x90011f7c

900063c8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
900063c8:	b480      	push	{r7}
900063ca:	b085      	sub	sp, #20
900063cc:	af00      	add	r7, sp, #0
900063ce:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
900063d0:	687b      	ldr	r3, [r7, #4]
900063d2:	689b      	ldr	r3, [r3, #8]
900063d4:	2200      	movs	r2, #0
900063d6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
900063d8:	687b      	ldr	r3, [r7, #4]
900063da:	685b      	ldr	r3, [r3, #4]
900063dc:	3303      	adds	r3, #3
900063de:	f023 0303 	bic.w	r3, r3, #3
900063e2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
900063e4:	2300      	movs	r3, #0
900063e6:	60fb      	str	r3, [r7, #12]
900063e8:	e011      	b.n	9000640e <memp_init_pool+0x46>
    memp->next = *desc->tab;
900063ea:	687b      	ldr	r3, [r7, #4]
900063ec:	689b      	ldr	r3, [r3, #8]
900063ee:	681a      	ldr	r2, [r3, #0]
900063f0:	68bb      	ldr	r3, [r7, #8]
900063f2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
900063f4:	687b      	ldr	r3, [r7, #4]
900063f6:	689b      	ldr	r3, [r3, #8]
900063f8:	68ba      	ldr	r2, [r7, #8]
900063fa:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
900063fc:	687b      	ldr	r3, [r7, #4]
900063fe:	881b      	ldrh	r3, [r3, #0]
90006400:	461a      	mov	r2, r3
90006402:	68bb      	ldr	r3, [r7, #8]
90006404:	4413      	add	r3, r2
90006406:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
90006408:	68fb      	ldr	r3, [r7, #12]
9000640a:	3301      	adds	r3, #1
9000640c:	60fb      	str	r3, [r7, #12]
9000640e:	687b      	ldr	r3, [r7, #4]
90006410:	885b      	ldrh	r3, [r3, #2]
90006412:	461a      	mov	r2, r3
90006414:	68fb      	ldr	r3, [r7, #12]
90006416:	4293      	cmp	r3, r2
90006418:	dbe7      	blt.n	900063ea <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
9000641a:	bf00      	nop
9000641c:	bf00      	nop
9000641e:	3714      	adds	r7, #20
90006420:	46bd      	mov	sp, r7
90006422:	f85d 7b04 	ldr.w	r7, [sp], #4
90006426:	4770      	bx	lr

90006428 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
90006428:	b580      	push	{r7, lr}
9000642a:	b082      	sub	sp, #8
9000642c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
9000642e:	2300      	movs	r3, #0
90006430:	80fb      	strh	r3, [r7, #6]
90006432:	e009      	b.n	90006448 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
90006434:	88fb      	ldrh	r3, [r7, #6]
90006436:	4a08      	ldr	r2, [pc, #32]	; (90006458 <memp_init+0x30>)
90006438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
9000643c:	4618      	mov	r0, r3
9000643e:	f7ff ffc3 	bl	900063c8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
90006442:	88fb      	ldrh	r3, [r7, #6]
90006444:	3301      	adds	r3, #1
90006446:	80fb      	strh	r3, [r7, #6]
90006448:	88fb      	ldrh	r3, [r7, #6]
9000644a:	2b08      	cmp	r3, #8
9000644c:	d9f2      	bls.n	90006434 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
9000644e:	bf00      	nop
90006450:	bf00      	nop
90006452:	3708      	adds	r7, #8
90006454:	46bd      	mov	sp, r7
90006456:	bd80      	pop	{r7, pc}
90006458:	90015ac4 	.word	0x90015ac4

9000645c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
9000645c:	b580      	push	{r7, lr}
9000645e:	b084      	sub	sp, #16
90006460:	af00      	add	r7, sp, #0
90006462:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
90006464:	687b      	ldr	r3, [r7, #4]
90006466:	689b      	ldr	r3, [r3, #8]
90006468:	681b      	ldr	r3, [r3, #0]
9000646a:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
9000646c:	68fb      	ldr	r3, [r7, #12]
9000646e:	2b00      	cmp	r3, #0
90006470:	d012      	beq.n	90006498 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
90006472:	687b      	ldr	r3, [r7, #4]
90006474:	689b      	ldr	r3, [r3, #8]
90006476:	68fa      	ldr	r2, [r7, #12]
90006478:	6812      	ldr	r2, [r2, #0]
9000647a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
9000647c:	68fb      	ldr	r3, [r7, #12]
9000647e:	f003 0303 	and.w	r3, r3, #3
90006482:	2b00      	cmp	r3, #0
90006484:	d006      	beq.n	90006494 <do_memp_malloc_pool+0x38>
90006486:	4b07      	ldr	r3, [pc, #28]	; (900064a4 <do_memp_malloc_pool+0x48>)
90006488:	f44f 728c 	mov.w	r2, #280	; 0x118
9000648c:	4906      	ldr	r1, [pc, #24]	; (900064a8 <do_memp_malloc_pool+0x4c>)
9000648e:	4807      	ldr	r0, [pc, #28]	; (900064ac <do_memp_malloc_pool+0x50>)
90006490:	f00a f82c 	bl	900104ec <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
90006494:	68fb      	ldr	r3, [r7, #12]
90006496:	e000      	b.n	9000649a <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
90006498:	2300      	movs	r3, #0
}
9000649a:	4618      	mov	r0, r3
9000649c:	3710      	adds	r7, #16
9000649e:	46bd      	mov	sp, r7
900064a0:	bd80      	pop	{r7, pc}
900064a2:	bf00      	nop
900064a4:	90011fa0 	.word	0x90011fa0
900064a8:	90011fd0 	.word	0x90011fd0
900064ac:	90011ff4 	.word	0x90011ff4

900064b0 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
900064b0:	b580      	push	{r7, lr}
900064b2:	b082      	sub	sp, #8
900064b4:	af00      	add	r7, sp, #0
900064b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
900064b8:	687b      	ldr	r3, [r7, #4]
900064ba:	2b00      	cmp	r3, #0
900064bc:	d106      	bne.n	900064cc <memp_malloc_pool+0x1c>
900064be:	4b0a      	ldr	r3, [pc, #40]	; (900064e8 <memp_malloc_pool+0x38>)
900064c0:	f44f 729e 	mov.w	r2, #316	; 0x13c
900064c4:	4909      	ldr	r1, [pc, #36]	; (900064ec <memp_malloc_pool+0x3c>)
900064c6:	480a      	ldr	r0, [pc, #40]	; (900064f0 <memp_malloc_pool+0x40>)
900064c8:	f00a f810 	bl	900104ec <iprintf>
  if (desc == NULL) {
900064cc:	687b      	ldr	r3, [r7, #4]
900064ce:	2b00      	cmp	r3, #0
900064d0:	d101      	bne.n	900064d6 <memp_malloc_pool+0x26>
    return NULL;
900064d2:	2300      	movs	r3, #0
900064d4:	e003      	b.n	900064de <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
900064d6:	6878      	ldr	r0, [r7, #4]
900064d8:	f7ff ffc0 	bl	9000645c <do_memp_malloc_pool>
900064dc:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
900064de:	4618      	mov	r0, r3
900064e0:	3708      	adds	r7, #8
900064e2:	46bd      	mov	sp, r7
900064e4:	bd80      	pop	{r7, pc}
900064e6:	bf00      	nop
900064e8:	90011fa0 	.word	0x90011fa0
900064ec:	9001201c 	.word	0x9001201c
900064f0:	90011ff4 	.word	0x90011ff4

900064f4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
900064f4:	b580      	push	{r7, lr}
900064f6:	b084      	sub	sp, #16
900064f8:	af00      	add	r7, sp, #0
900064fa:	4603      	mov	r3, r0
900064fc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
900064fe:	79fb      	ldrb	r3, [r7, #7]
90006500:	2b08      	cmp	r3, #8
90006502:	d908      	bls.n	90006516 <memp_malloc+0x22>
90006504:	4b0a      	ldr	r3, [pc, #40]	; (90006530 <memp_malloc+0x3c>)
90006506:	f240 1257 	movw	r2, #343	; 0x157
9000650a:	490a      	ldr	r1, [pc, #40]	; (90006534 <memp_malloc+0x40>)
9000650c:	480a      	ldr	r0, [pc, #40]	; (90006538 <memp_malloc+0x44>)
9000650e:	f009 ffed 	bl	900104ec <iprintf>
90006512:	2300      	movs	r3, #0
90006514:	e008      	b.n	90006528 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
90006516:	79fb      	ldrb	r3, [r7, #7]
90006518:	4a08      	ldr	r2, [pc, #32]	; (9000653c <memp_malloc+0x48>)
9000651a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
9000651e:	4618      	mov	r0, r3
90006520:	f7ff ff9c 	bl	9000645c <do_memp_malloc_pool>
90006524:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
90006526:	68fb      	ldr	r3, [r7, #12]
}
90006528:	4618      	mov	r0, r3
9000652a:	3710      	adds	r7, #16
9000652c:	46bd      	mov	sp, r7
9000652e:	bd80      	pop	{r7, pc}
90006530:	90011fa0 	.word	0x90011fa0
90006534:	90012030 	.word	0x90012030
90006538:	90011ff4 	.word	0x90011ff4
9000653c:	90015ac4 	.word	0x90015ac4

90006540 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
90006540:	b580      	push	{r7, lr}
90006542:	b084      	sub	sp, #16
90006544:	af00      	add	r7, sp, #0
90006546:	6078      	str	r0, [r7, #4]
90006548:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
9000654a:	683b      	ldr	r3, [r7, #0]
9000654c:	f003 0303 	and.w	r3, r3, #3
90006550:	2b00      	cmp	r3, #0
90006552:	d006      	beq.n	90006562 <do_memp_free_pool+0x22>
90006554:	4b0a      	ldr	r3, [pc, #40]	; (90006580 <do_memp_free_pool+0x40>)
90006556:	f44f 72b6 	mov.w	r2, #364	; 0x16c
9000655a:	490a      	ldr	r1, [pc, #40]	; (90006584 <do_memp_free_pool+0x44>)
9000655c:	480a      	ldr	r0, [pc, #40]	; (90006588 <do_memp_free_pool+0x48>)
9000655e:	f009 ffc5 	bl	900104ec <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
90006562:	683b      	ldr	r3, [r7, #0]
90006564:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
90006566:	687b      	ldr	r3, [r7, #4]
90006568:	689b      	ldr	r3, [r3, #8]
9000656a:	681a      	ldr	r2, [r3, #0]
9000656c:	68fb      	ldr	r3, [r7, #12]
9000656e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
90006570:	687b      	ldr	r3, [r7, #4]
90006572:	689b      	ldr	r3, [r3, #8]
90006574:	68fa      	ldr	r2, [r7, #12]
90006576:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
90006578:	bf00      	nop
9000657a:	3710      	adds	r7, #16
9000657c:	46bd      	mov	sp, r7
9000657e:	bd80      	pop	{r7, pc}
90006580:	90011fa0 	.word	0x90011fa0
90006584:	90012050 	.word	0x90012050
90006588:	90011ff4 	.word	0x90011ff4

9000658c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
9000658c:	b580      	push	{r7, lr}
9000658e:	b082      	sub	sp, #8
90006590:	af00      	add	r7, sp, #0
90006592:	6078      	str	r0, [r7, #4]
90006594:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
90006596:	687b      	ldr	r3, [r7, #4]
90006598:	2b00      	cmp	r3, #0
9000659a:	d106      	bne.n	900065aa <memp_free_pool+0x1e>
9000659c:	4b0a      	ldr	r3, [pc, #40]	; (900065c8 <memp_free_pool+0x3c>)
9000659e:	f240 1295 	movw	r2, #405	; 0x195
900065a2:	490a      	ldr	r1, [pc, #40]	; (900065cc <memp_free_pool+0x40>)
900065a4:	480a      	ldr	r0, [pc, #40]	; (900065d0 <memp_free_pool+0x44>)
900065a6:	f009 ffa1 	bl	900104ec <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
900065aa:	687b      	ldr	r3, [r7, #4]
900065ac:	2b00      	cmp	r3, #0
900065ae:	d007      	beq.n	900065c0 <memp_free_pool+0x34>
900065b0:	683b      	ldr	r3, [r7, #0]
900065b2:	2b00      	cmp	r3, #0
900065b4:	d004      	beq.n	900065c0 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
900065b6:	6839      	ldr	r1, [r7, #0]
900065b8:	6878      	ldr	r0, [r7, #4]
900065ba:	f7ff ffc1 	bl	90006540 <do_memp_free_pool>
900065be:	e000      	b.n	900065c2 <memp_free_pool+0x36>
    return;
900065c0:	bf00      	nop
}
900065c2:	3708      	adds	r7, #8
900065c4:	46bd      	mov	sp, r7
900065c6:	bd80      	pop	{r7, pc}
900065c8:	90011fa0 	.word	0x90011fa0
900065cc:	9001201c 	.word	0x9001201c
900065d0:	90011ff4 	.word	0x90011ff4

900065d4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
900065d4:	b580      	push	{r7, lr}
900065d6:	b082      	sub	sp, #8
900065d8:	af00      	add	r7, sp, #0
900065da:	4603      	mov	r3, r0
900065dc:	6039      	str	r1, [r7, #0]
900065de:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
900065e0:	79fb      	ldrb	r3, [r7, #7]
900065e2:	2b08      	cmp	r3, #8
900065e4:	d907      	bls.n	900065f6 <memp_free+0x22>
900065e6:	4b0c      	ldr	r3, [pc, #48]	; (90006618 <memp_free+0x44>)
900065e8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
900065ec:	490b      	ldr	r1, [pc, #44]	; (9000661c <memp_free+0x48>)
900065ee:	480c      	ldr	r0, [pc, #48]	; (90006620 <memp_free+0x4c>)
900065f0:	f009 ff7c 	bl	900104ec <iprintf>
900065f4:	e00c      	b.n	90006610 <memp_free+0x3c>

  if (mem == NULL) {
900065f6:	683b      	ldr	r3, [r7, #0]
900065f8:	2b00      	cmp	r3, #0
900065fa:	d008      	beq.n	9000660e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
900065fc:	79fb      	ldrb	r3, [r7, #7]
900065fe:	4a09      	ldr	r2, [pc, #36]	; (90006624 <memp_free+0x50>)
90006600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90006604:	6839      	ldr	r1, [r7, #0]
90006606:	4618      	mov	r0, r3
90006608:	f7ff ff9a 	bl	90006540 <do_memp_free_pool>
9000660c:	e000      	b.n	90006610 <memp_free+0x3c>
    return;
9000660e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
90006610:	3708      	adds	r7, #8
90006612:	46bd      	mov	sp, r7
90006614:	bd80      	pop	{r7, pc}
90006616:	bf00      	nop
90006618:	90011fa0 	.word	0x90011fa0
9000661c:	90012070 	.word	0x90012070
90006620:	90011ff4 	.word	0x90011ff4
90006624:	90015ac4 	.word	0x90015ac4

90006628 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
90006628:	b480      	push	{r7}
9000662a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
9000662c:	bf00      	nop
9000662e:	46bd      	mov	sp, r7
90006630:	f85d 7b04 	ldr.w	r7, [sp], #4
90006634:	4770      	bx	lr
	...

90006638 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
90006638:	b580      	push	{r7, lr}
9000663a:	b086      	sub	sp, #24
9000663c:	af00      	add	r7, sp, #0
9000663e:	60f8      	str	r0, [r7, #12]
90006640:	60b9      	str	r1, [r7, #8]
90006642:	607a      	str	r2, [r7, #4]
90006644:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
90006646:	68fb      	ldr	r3, [r7, #12]
90006648:	2b00      	cmp	r3, #0
9000664a:	d108      	bne.n	9000665e <netif_add+0x26>
9000664c:	4b57      	ldr	r3, [pc, #348]	; (900067ac <netif_add+0x174>)
9000664e:	f240 1227 	movw	r2, #295	; 0x127
90006652:	4957      	ldr	r1, [pc, #348]	; (900067b0 <netif_add+0x178>)
90006654:	4857      	ldr	r0, [pc, #348]	; (900067b4 <netif_add+0x17c>)
90006656:	f009 ff49 	bl	900104ec <iprintf>
9000665a:	2300      	movs	r3, #0
9000665c:	e0a2      	b.n	900067a4 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
9000665e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90006660:	2b00      	cmp	r3, #0
90006662:	d108      	bne.n	90006676 <netif_add+0x3e>
90006664:	4b51      	ldr	r3, [pc, #324]	; (900067ac <netif_add+0x174>)
90006666:	f44f 7294 	mov.w	r2, #296	; 0x128
9000666a:	4953      	ldr	r1, [pc, #332]	; (900067b8 <netif_add+0x180>)
9000666c:	4851      	ldr	r0, [pc, #324]	; (900067b4 <netif_add+0x17c>)
9000666e:	f009 ff3d 	bl	900104ec <iprintf>
90006672:	2300      	movs	r3, #0
90006674:	e096      	b.n	900067a4 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
90006676:	68bb      	ldr	r3, [r7, #8]
90006678:	2b00      	cmp	r3, #0
9000667a:	d101      	bne.n	90006680 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
9000667c:	4b4f      	ldr	r3, [pc, #316]	; (900067bc <netif_add+0x184>)
9000667e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
90006680:	687b      	ldr	r3, [r7, #4]
90006682:	2b00      	cmp	r3, #0
90006684:	d101      	bne.n	9000668a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
90006686:	4b4d      	ldr	r3, [pc, #308]	; (900067bc <netif_add+0x184>)
90006688:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
9000668a:	683b      	ldr	r3, [r7, #0]
9000668c:	2b00      	cmp	r3, #0
9000668e:	d101      	bne.n	90006694 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
90006690:	4b4a      	ldr	r3, [pc, #296]	; (900067bc <netif_add+0x184>)
90006692:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
90006694:	68fb      	ldr	r3, [r7, #12]
90006696:	2200      	movs	r2, #0
90006698:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
9000669a:	68fb      	ldr	r3, [r7, #12]
9000669c:	2200      	movs	r2, #0
9000669e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
900066a0:	68fb      	ldr	r3, [r7, #12]
900066a2:	2200      	movs	r2, #0
900066a4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
900066a6:	68fb      	ldr	r3, [r7, #12]
900066a8:	4a45      	ldr	r2, [pc, #276]	; (900067c0 <netif_add+0x188>)
900066aa:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
900066ac:	68fb      	ldr	r3, [r7, #12]
900066ae:	2200      	movs	r2, #0
900066b0:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
900066b2:	68fb      	ldr	r3, [r7, #12]
900066b4:	2200      	movs	r2, #0
900066b6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
900066ba:	68fb      	ldr	r3, [r7, #12]
900066bc:	2200      	movs	r2, #0
900066be:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
900066c0:	68fb      	ldr	r3, [r7, #12]
900066c2:	6a3a      	ldr	r2, [r7, #32]
900066c4:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
900066c6:	4b3f      	ldr	r3, [pc, #252]	; (900067c4 <netif_add+0x18c>)
900066c8:	781a      	ldrb	r2, [r3, #0]
900066ca:	68fb      	ldr	r3, [r7, #12]
900066cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
900066d0:	68fb      	ldr	r3, [r7, #12]
900066d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
900066d4:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
900066d6:	683b      	ldr	r3, [r7, #0]
900066d8:	687a      	ldr	r2, [r7, #4]
900066da:	68b9      	ldr	r1, [r7, #8]
900066dc:	68f8      	ldr	r0, [r7, #12]
900066de:	f000 f913 	bl	90006908 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
900066e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900066e4:	68f8      	ldr	r0, [r7, #12]
900066e6:	4798      	blx	r3
900066e8:	4603      	mov	r3, r0
900066ea:	2b00      	cmp	r3, #0
900066ec:	d001      	beq.n	900066f2 <netif_add+0xba>
    return NULL;
900066ee:	2300      	movs	r3, #0
900066f0:	e058      	b.n	900067a4 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
900066f2:	68fb      	ldr	r3, [r7, #12]
900066f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
900066f8:	2bff      	cmp	r3, #255	; 0xff
900066fa:	d103      	bne.n	90006704 <netif_add+0xcc>
        netif->num = 0;
900066fc:	68fb      	ldr	r3, [r7, #12]
900066fe:	2200      	movs	r2, #0
90006700:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
90006704:	2300      	movs	r3, #0
90006706:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
90006708:	4b2f      	ldr	r3, [pc, #188]	; (900067c8 <netif_add+0x190>)
9000670a:	681b      	ldr	r3, [r3, #0]
9000670c:	617b      	str	r3, [r7, #20]
9000670e:	e02b      	b.n	90006768 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
90006710:	697a      	ldr	r2, [r7, #20]
90006712:	68fb      	ldr	r3, [r7, #12]
90006714:	429a      	cmp	r2, r3
90006716:	d106      	bne.n	90006726 <netif_add+0xee>
90006718:	4b24      	ldr	r3, [pc, #144]	; (900067ac <netif_add+0x174>)
9000671a:	f240 128b 	movw	r2, #395	; 0x18b
9000671e:	492b      	ldr	r1, [pc, #172]	; (900067cc <netif_add+0x194>)
90006720:	4824      	ldr	r0, [pc, #144]	; (900067b4 <netif_add+0x17c>)
90006722:	f009 fee3 	bl	900104ec <iprintf>
        num_netifs++;
90006726:	693b      	ldr	r3, [r7, #16]
90006728:	3301      	adds	r3, #1
9000672a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
9000672c:	693b      	ldr	r3, [r7, #16]
9000672e:	2bff      	cmp	r3, #255	; 0xff
90006730:	dd06      	ble.n	90006740 <netif_add+0x108>
90006732:	4b1e      	ldr	r3, [pc, #120]	; (900067ac <netif_add+0x174>)
90006734:	f240 128d 	movw	r2, #397	; 0x18d
90006738:	4925      	ldr	r1, [pc, #148]	; (900067d0 <netif_add+0x198>)
9000673a:	481e      	ldr	r0, [pc, #120]	; (900067b4 <netif_add+0x17c>)
9000673c:	f009 fed6 	bl	900104ec <iprintf>
        if (netif2->num == netif->num) {
90006740:	697b      	ldr	r3, [r7, #20]
90006742:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
90006746:	68fb      	ldr	r3, [r7, #12]
90006748:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
9000674c:	429a      	cmp	r2, r3
9000674e:	d108      	bne.n	90006762 <netif_add+0x12a>
          netif->num++;
90006750:	68fb      	ldr	r3, [r7, #12]
90006752:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
90006756:	3301      	adds	r3, #1
90006758:	b2da      	uxtb	r2, r3
9000675a:	68fb      	ldr	r3, [r7, #12]
9000675c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
90006760:	e005      	b.n	9000676e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
90006762:	697b      	ldr	r3, [r7, #20]
90006764:	681b      	ldr	r3, [r3, #0]
90006766:	617b      	str	r3, [r7, #20]
90006768:	697b      	ldr	r3, [r7, #20]
9000676a:	2b00      	cmp	r3, #0
9000676c:	d1d0      	bne.n	90006710 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
9000676e:	697b      	ldr	r3, [r7, #20]
90006770:	2b00      	cmp	r3, #0
90006772:	d1be      	bne.n	900066f2 <netif_add+0xba>
  }
  if (netif->num == 254) {
90006774:	68fb      	ldr	r3, [r7, #12]
90006776:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
9000677a:	2bfe      	cmp	r3, #254	; 0xfe
9000677c:	d103      	bne.n	90006786 <netif_add+0x14e>
    netif_num = 0;
9000677e:	4b11      	ldr	r3, [pc, #68]	; (900067c4 <netif_add+0x18c>)
90006780:	2200      	movs	r2, #0
90006782:	701a      	strb	r2, [r3, #0]
90006784:	e006      	b.n	90006794 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
90006786:	68fb      	ldr	r3, [r7, #12]
90006788:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
9000678c:	3301      	adds	r3, #1
9000678e:	b2da      	uxtb	r2, r3
90006790:	4b0c      	ldr	r3, [pc, #48]	; (900067c4 <netif_add+0x18c>)
90006792:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
90006794:	4b0c      	ldr	r3, [pc, #48]	; (900067c8 <netif_add+0x190>)
90006796:	681a      	ldr	r2, [r3, #0]
90006798:	68fb      	ldr	r3, [r7, #12]
9000679a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
9000679c:	4a0a      	ldr	r2, [pc, #40]	; (900067c8 <netif_add+0x190>)
9000679e:	68fb      	ldr	r3, [r7, #12]
900067a0:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
900067a2:	68fb      	ldr	r3, [r7, #12]
}
900067a4:	4618      	mov	r0, r3
900067a6:	3718      	adds	r7, #24
900067a8:	46bd      	mov	sp, r7
900067aa:	bd80      	pop	{r7, pc}
900067ac:	9001208c 	.word	0x9001208c
900067b0:	90012120 	.word	0x90012120
900067b4:	900120dc 	.word	0x900120dc
900067b8:	9001213c 	.word	0x9001213c
900067bc:	90015b28 	.word	0x90015b28
900067c0:	90006be3 	.word	0x90006be3
900067c4:	2000a89c 	.word	0x2000a89c
900067c8:	2000a894 	.word	0x2000a894
900067cc:	90012160 	.word	0x90012160
900067d0:	90012174 	.word	0x90012174

900067d4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
900067d4:	b580      	push	{r7, lr}
900067d6:	b082      	sub	sp, #8
900067d8:	af00      	add	r7, sp, #0
900067da:	6078      	str	r0, [r7, #4]
900067dc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
900067de:	6839      	ldr	r1, [r7, #0]
900067e0:	6878      	ldr	r0, [r7, #4]
900067e2:	f002 fde9 	bl	900093b8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
900067e6:	6839      	ldr	r1, [r7, #0]
900067e8:	6878      	ldr	r0, [r7, #4]
900067ea:	f007 fb25 	bl	9000de38 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
900067ee:	bf00      	nop
900067f0:	3708      	adds	r7, #8
900067f2:	46bd      	mov	sp, r7
900067f4:	bd80      	pop	{r7, pc}
	...

900067f8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
900067f8:	b580      	push	{r7, lr}
900067fa:	b086      	sub	sp, #24
900067fc:	af00      	add	r7, sp, #0
900067fe:	60f8      	str	r0, [r7, #12]
90006800:	60b9      	str	r1, [r7, #8]
90006802:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
90006804:	68bb      	ldr	r3, [r7, #8]
90006806:	2b00      	cmp	r3, #0
90006808:	d106      	bne.n	90006818 <netif_do_set_ipaddr+0x20>
9000680a:	4b1d      	ldr	r3, [pc, #116]	; (90006880 <netif_do_set_ipaddr+0x88>)
9000680c:	f240 12cb 	movw	r2, #459	; 0x1cb
90006810:	491c      	ldr	r1, [pc, #112]	; (90006884 <netif_do_set_ipaddr+0x8c>)
90006812:	481d      	ldr	r0, [pc, #116]	; (90006888 <netif_do_set_ipaddr+0x90>)
90006814:	f009 fe6a 	bl	900104ec <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
90006818:	687b      	ldr	r3, [r7, #4]
9000681a:	2b00      	cmp	r3, #0
9000681c:	d106      	bne.n	9000682c <netif_do_set_ipaddr+0x34>
9000681e:	4b18      	ldr	r3, [pc, #96]	; (90006880 <netif_do_set_ipaddr+0x88>)
90006820:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
90006824:	4917      	ldr	r1, [pc, #92]	; (90006884 <netif_do_set_ipaddr+0x8c>)
90006826:	4818      	ldr	r0, [pc, #96]	; (90006888 <netif_do_set_ipaddr+0x90>)
90006828:	f009 fe60 	bl	900104ec <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
9000682c:	68bb      	ldr	r3, [r7, #8]
9000682e:	681a      	ldr	r2, [r3, #0]
90006830:	68fb      	ldr	r3, [r7, #12]
90006832:	3304      	adds	r3, #4
90006834:	681b      	ldr	r3, [r3, #0]
90006836:	429a      	cmp	r2, r3
90006838:	d01c      	beq.n	90006874 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
9000683a:	68bb      	ldr	r3, [r7, #8]
9000683c:	681b      	ldr	r3, [r3, #0]
9000683e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
90006840:	68fb      	ldr	r3, [r7, #12]
90006842:	3304      	adds	r3, #4
90006844:	681a      	ldr	r2, [r3, #0]
90006846:	687b      	ldr	r3, [r7, #4]
90006848:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
9000684a:	f107 0314 	add.w	r3, r7, #20
9000684e:	4619      	mov	r1, r3
90006850:	6878      	ldr	r0, [r7, #4]
90006852:	f7ff ffbf 	bl	900067d4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
90006856:	68bb      	ldr	r3, [r7, #8]
90006858:	2b00      	cmp	r3, #0
9000685a:	d002      	beq.n	90006862 <netif_do_set_ipaddr+0x6a>
9000685c:	68bb      	ldr	r3, [r7, #8]
9000685e:	681b      	ldr	r3, [r3, #0]
90006860:	e000      	b.n	90006864 <netif_do_set_ipaddr+0x6c>
90006862:	2300      	movs	r3, #0
90006864:	68fa      	ldr	r2, [r7, #12]
90006866:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
90006868:	2101      	movs	r1, #1
9000686a:	68f8      	ldr	r0, [r7, #12]
9000686c:	f000 f8d2 	bl	90006a14 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
90006870:	2301      	movs	r3, #1
90006872:	e000      	b.n	90006876 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
90006874:	2300      	movs	r3, #0
}
90006876:	4618      	mov	r0, r3
90006878:	3718      	adds	r7, #24
9000687a:	46bd      	mov	sp, r7
9000687c:	bd80      	pop	{r7, pc}
9000687e:	bf00      	nop
90006880:	9001208c 	.word	0x9001208c
90006884:	900121a4 	.word	0x900121a4
90006888:	900120dc 	.word	0x900120dc

9000688c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
9000688c:	b480      	push	{r7}
9000688e:	b085      	sub	sp, #20
90006890:	af00      	add	r7, sp, #0
90006892:	60f8      	str	r0, [r7, #12]
90006894:	60b9      	str	r1, [r7, #8]
90006896:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
90006898:	68bb      	ldr	r3, [r7, #8]
9000689a:	681a      	ldr	r2, [r3, #0]
9000689c:	68fb      	ldr	r3, [r7, #12]
9000689e:	3308      	adds	r3, #8
900068a0:	681b      	ldr	r3, [r3, #0]
900068a2:	429a      	cmp	r2, r3
900068a4:	d00a      	beq.n	900068bc <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
900068a6:	68bb      	ldr	r3, [r7, #8]
900068a8:	2b00      	cmp	r3, #0
900068aa:	d002      	beq.n	900068b2 <netif_do_set_netmask+0x26>
900068ac:	68bb      	ldr	r3, [r7, #8]
900068ae:	681b      	ldr	r3, [r3, #0]
900068b0:	e000      	b.n	900068b4 <netif_do_set_netmask+0x28>
900068b2:	2300      	movs	r3, #0
900068b4:	68fa      	ldr	r2, [r7, #12]
900068b6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
900068b8:	2301      	movs	r3, #1
900068ba:	e000      	b.n	900068be <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
900068bc:	2300      	movs	r3, #0
}
900068be:	4618      	mov	r0, r3
900068c0:	3714      	adds	r7, #20
900068c2:	46bd      	mov	sp, r7
900068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
900068c8:	4770      	bx	lr

900068ca <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
900068ca:	b480      	push	{r7}
900068cc:	b085      	sub	sp, #20
900068ce:	af00      	add	r7, sp, #0
900068d0:	60f8      	str	r0, [r7, #12]
900068d2:	60b9      	str	r1, [r7, #8]
900068d4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
900068d6:	68bb      	ldr	r3, [r7, #8]
900068d8:	681a      	ldr	r2, [r3, #0]
900068da:	68fb      	ldr	r3, [r7, #12]
900068dc:	330c      	adds	r3, #12
900068de:	681b      	ldr	r3, [r3, #0]
900068e0:	429a      	cmp	r2, r3
900068e2:	d00a      	beq.n	900068fa <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
900068e4:	68bb      	ldr	r3, [r7, #8]
900068e6:	2b00      	cmp	r3, #0
900068e8:	d002      	beq.n	900068f0 <netif_do_set_gw+0x26>
900068ea:	68bb      	ldr	r3, [r7, #8]
900068ec:	681b      	ldr	r3, [r3, #0]
900068ee:	e000      	b.n	900068f2 <netif_do_set_gw+0x28>
900068f0:	2300      	movs	r3, #0
900068f2:	68fa      	ldr	r2, [r7, #12]
900068f4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
900068f6:	2301      	movs	r3, #1
900068f8:	e000      	b.n	900068fc <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
900068fa:	2300      	movs	r3, #0
}
900068fc:	4618      	mov	r0, r3
900068fe:	3714      	adds	r7, #20
90006900:	46bd      	mov	sp, r7
90006902:	f85d 7b04 	ldr.w	r7, [sp], #4
90006906:	4770      	bx	lr

90006908 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
90006908:	b580      	push	{r7, lr}
9000690a:	b088      	sub	sp, #32
9000690c:	af00      	add	r7, sp, #0
9000690e:	60f8      	str	r0, [r7, #12]
90006910:	60b9      	str	r1, [r7, #8]
90006912:	607a      	str	r2, [r7, #4]
90006914:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
90006916:	2300      	movs	r3, #0
90006918:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
9000691a:	2300      	movs	r3, #0
9000691c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
9000691e:	68bb      	ldr	r3, [r7, #8]
90006920:	2b00      	cmp	r3, #0
90006922:	d101      	bne.n	90006928 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
90006924:	4b1c      	ldr	r3, [pc, #112]	; (90006998 <netif_set_addr+0x90>)
90006926:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
90006928:	687b      	ldr	r3, [r7, #4]
9000692a:	2b00      	cmp	r3, #0
9000692c:	d101      	bne.n	90006932 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
9000692e:	4b1a      	ldr	r3, [pc, #104]	; (90006998 <netif_set_addr+0x90>)
90006930:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
90006932:	683b      	ldr	r3, [r7, #0]
90006934:	2b00      	cmp	r3, #0
90006936:	d101      	bne.n	9000693c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
90006938:	4b17      	ldr	r3, [pc, #92]	; (90006998 <netif_set_addr+0x90>)
9000693a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
9000693c:	68bb      	ldr	r3, [r7, #8]
9000693e:	2b00      	cmp	r3, #0
90006940:	d003      	beq.n	9000694a <netif_set_addr+0x42>
90006942:	68bb      	ldr	r3, [r7, #8]
90006944:	681b      	ldr	r3, [r3, #0]
90006946:	2b00      	cmp	r3, #0
90006948:	d101      	bne.n	9000694e <netif_set_addr+0x46>
9000694a:	2301      	movs	r3, #1
9000694c:	e000      	b.n	90006950 <netif_set_addr+0x48>
9000694e:	2300      	movs	r3, #0
90006950:	617b      	str	r3, [r7, #20]
  if (remove) {
90006952:	697b      	ldr	r3, [r7, #20]
90006954:	2b00      	cmp	r3, #0
90006956:	d006      	beq.n	90006966 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
90006958:	f107 0310 	add.w	r3, r7, #16
9000695c:	461a      	mov	r2, r3
9000695e:	68b9      	ldr	r1, [r7, #8]
90006960:	68f8      	ldr	r0, [r7, #12]
90006962:	f7ff ff49 	bl	900067f8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
90006966:	69fa      	ldr	r2, [r7, #28]
90006968:	6879      	ldr	r1, [r7, #4]
9000696a:	68f8      	ldr	r0, [r7, #12]
9000696c:	f7ff ff8e 	bl	9000688c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
90006970:	69ba      	ldr	r2, [r7, #24]
90006972:	6839      	ldr	r1, [r7, #0]
90006974:	68f8      	ldr	r0, [r7, #12]
90006976:	f7ff ffa8 	bl	900068ca <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
9000697a:	697b      	ldr	r3, [r7, #20]
9000697c:	2b00      	cmp	r3, #0
9000697e:	d106      	bne.n	9000698e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
90006980:	f107 0310 	add.w	r3, r7, #16
90006984:	461a      	mov	r2, r3
90006986:	68b9      	ldr	r1, [r7, #8]
90006988:	68f8      	ldr	r0, [r7, #12]
9000698a:	f7ff ff35 	bl	900067f8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
9000698e:	bf00      	nop
90006990:	3720      	adds	r7, #32
90006992:	46bd      	mov	sp, r7
90006994:	bd80      	pop	{r7, pc}
90006996:	bf00      	nop
90006998:	90015b28 	.word	0x90015b28

9000699c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
9000699c:	b480      	push	{r7}
9000699e:	b083      	sub	sp, #12
900069a0:	af00      	add	r7, sp, #0
900069a2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
900069a4:	4a04      	ldr	r2, [pc, #16]	; (900069b8 <netif_set_default+0x1c>)
900069a6:	687b      	ldr	r3, [r7, #4]
900069a8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
900069aa:	bf00      	nop
900069ac:	370c      	adds	r7, #12
900069ae:	46bd      	mov	sp, r7
900069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
900069b4:	4770      	bx	lr
900069b6:	bf00      	nop
900069b8:	2000a898 	.word	0x2000a898

900069bc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
900069bc:	b580      	push	{r7, lr}
900069be:	b082      	sub	sp, #8
900069c0:	af00      	add	r7, sp, #0
900069c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
900069c4:	687b      	ldr	r3, [r7, #4]
900069c6:	2b00      	cmp	r3, #0
900069c8:	d107      	bne.n	900069da <netif_set_up+0x1e>
900069ca:	4b0f      	ldr	r3, [pc, #60]	; (90006a08 <netif_set_up+0x4c>)
900069cc:	f44f 7254 	mov.w	r2, #848	; 0x350
900069d0:	490e      	ldr	r1, [pc, #56]	; (90006a0c <netif_set_up+0x50>)
900069d2:	480f      	ldr	r0, [pc, #60]	; (90006a10 <netif_set_up+0x54>)
900069d4:	f009 fd8a 	bl	900104ec <iprintf>
900069d8:	e013      	b.n	90006a02 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
900069da:	687b      	ldr	r3, [r7, #4]
900069dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
900069e0:	f003 0301 	and.w	r3, r3, #1
900069e4:	2b00      	cmp	r3, #0
900069e6:	d10c      	bne.n	90006a02 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
900069e8:	687b      	ldr	r3, [r7, #4]
900069ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
900069ee:	f043 0301 	orr.w	r3, r3, #1
900069f2:	b2da      	uxtb	r2, r3
900069f4:	687b      	ldr	r3, [r7, #4]
900069f6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
900069fa:	2103      	movs	r1, #3
900069fc:	6878      	ldr	r0, [r7, #4]
900069fe:	f000 f809 	bl	90006a14 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
90006a02:	3708      	adds	r7, #8
90006a04:	46bd      	mov	sp, r7
90006a06:	bd80      	pop	{r7, pc}
90006a08:	9001208c 	.word	0x9001208c
90006a0c:	90012214 	.word	0x90012214
90006a10:	900120dc 	.word	0x900120dc

90006a14 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
90006a14:	b580      	push	{r7, lr}
90006a16:	b082      	sub	sp, #8
90006a18:	af00      	add	r7, sp, #0
90006a1a:	6078      	str	r0, [r7, #4]
90006a1c:	460b      	mov	r3, r1
90006a1e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
90006a20:	687b      	ldr	r3, [r7, #4]
90006a22:	2b00      	cmp	r3, #0
90006a24:	d106      	bne.n	90006a34 <netif_issue_reports+0x20>
90006a26:	4b18      	ldr	r3, [pc, #96]	; (90006a88 <netif_issue_reports+0x74>)
90006a28:	f240 326d 	movw	r2, #877	; 0x36d
90006a2c:	4917      	ldr	r1, [pc, #92]	; (90006a8c <netif_issue_reports+0x78>)
90006a2e:	4818      	ldr	r0, [pc, #96]	; (90006a90 <netif_issue_reports+0x7c>)
90006a30:	f009 fd5c 	bl	900104ec <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
90006a34:	687b      	ldr	r3, [r7, #4]
90006a36:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
90006a3a:	f003 0304 	and.w	r3, r3, #4
90006a3e:	2b00      	cmp	r3, #0
90006a40:	d01e      	beq.n	90006a80 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
90006a42:	687b      	ldr	r3, [r7, #4]
90006a44:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
90006a48:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
90006a4c:	2b00      	cmp	r3, #0
90006a4e:	d017      	beq.n	90006a80 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
90006a50:	78fb      	ldrb	r3, [r7, #3]
90006a52:	f003 0301 	and.w	r3, r3, #1
90006a56:	2b00      	cmp	r3, #0
90006a58:	d013      	beq.n	90006a82 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
90006a5a:	687b      	ldr	r3, [r7, #4]
90006a5c:	3304      	adds	r3, #4
90006a5e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
90006a60:	2b00      	cmp	r3, #0
90006a62:	d00e      	beq.n	90006a82 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
90006a64:	687b      	ldr	r3, [r7, #4]
90006a66:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
90006a6a:	f003 0308 	and.w	r3, r3, #8
90006a6e:	2b00      	cmp	r3, #0
90006a70:	d007      	beq.n	90006a82 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
90006a72:	687b      	ldr	r3, [r7, #4]
90006a74:	3304      	adds	r3, #4
90006a76:	4619      	mov	r1, r3
90006a78:	6878      	ldr	r0, [r7, #4]
90006a7a:	f008 f947 	bl	9000ed0c <etharp_request>
90006a7e:	e000      	b.n	90006a82 <netif_issue_reports+0x6e>
    return;
90006a80:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
90006a82:	3708      	adds	r7, #8
90006a84:	46bd      	mov	sp, r7
90006a86:	bd80      	pop	{r7, pc}
90006a88:	9001208c 	.word	0x9001208c
90006a8c:	90012230 	.word	0x90012230
90006a90:	900120dc 	.word	0x900120dc

90006a94 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
90006a94:	b580      	push	{r7, lr}
90006a96:	b082      	sub	sp, #8
90006a98:	af00      	add	r7, sp, #0
90006a9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
90006a9c:	687b      	ldr	r3, [r7, #4]
90006a9e:	2b00      	cmp	r3, #0
90006aa0:	d107      	bne.n	90006ab2 <netif_set_down+0x1e>
90006aa2:	4b12      	ldr	r3, [pc, #72]	; (90006aec <netif_set_down+0x58>)
90006aa4:	f240 329b 	movw	r2, #923	; 0x39b
90006aa8:	4911      	ldr	r1, [pc, #68]	; (90006af0 <netif_set_down+0x5c>)
90006aaa:	4812      	ldr	r0, [pc, #72]	; (90006af4 <netif_set_down+0x60>)
90006aac:	f009 fd1e 	bl	900104ec <iprintf>
90006ab0:	e019      	b.n	90006ae6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
90006ab2:	687b      	ldr	r3, [r7, #4]
90006ab4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
90006ab8:	f003 0301 	and.w	r3, r3, #1
90006abc:	2b00      	cmp	r3, #0
90006abe:	d012      	beq.n	90006ae6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
90006ac0:	687b      	ldr	r3, [r7, #4]
90006ac2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
90006ac6:	f023 0301 	bic.w	r3, r3, #1
90006aca:	b2da      	uxtb	r2, r3
90006acc:	687b      	ldr	r3, [r7, #4]
90006ace:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
90006ad2:	687b      	ldr	r3, [r7, #4]
90006ad4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
90006ad8:	f003 0308 	and.w	r3, r3, #8
90006adc:	2b00      	cmp	r3, #0
90006ade:	d002      	beq.n	90006ae6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
90006ae0:	6878      	ldr	r0, [r7, #4]
90006ae2:	f007 fcd1 	bl	9000e488 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
90006ae6:	3708      	adds	r7, #8
90006ae8:	46bd      	mov	sp, r7
90006aea:	bd80      	pop	{r7, pc}
90006aec:	9001208c 	.word	0x9001208c
90006af0:	90012254 	.word	0x90012254
90006af4:	900120dc 	.word	0x900120dc

90006af8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
90006af8:	b580      	push	{r7, lr}
90006afa:	b082      	sub	sp, #8
90006afc:	af00      	add	r7, sp, #0
90006afe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
90006b00:	687b      	ldr	r3, [r7, #4]
90006b02:	2b00      	cmp	r3, #0
90006b04:	d107      	bne.n	90006b16 <netif_set_link_up+0x1e>
90006b06:	4b13      	ldr	r3, [pc, #76]	; (90006b54 <netif_set_link_up+0x5c>)
90006b08:	f44f 7278 	mov.w	r2, #992	; 0x3e0
90006b0c:	4912      	ldr	r1, [pc, #72]	; (90006b58 <netif_set_link_up+0x60>)
90006b0e:	4813      	ldr	r0, [pc, #76]	; (90006b5c <netif_set_link_up+0x64>)
90006b10:	f009 fcec 	bl	900104ec <iprintf>
90006b14:	e01b      	b.n	90006b4e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
90006b16:	687b      	ldr	r3, [r7, #4]
90006b18:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
90006b1c:	f003 0304 	and.w	r3, r3, #4
90006b20:	2b00      	cmp	r3, #0
90006b22:	d114      	bne.n	90006b4e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
90006b24:	687b      	ldr	r3, [r7, #4]
90006b26:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
90006b2a:	f043 0304 	orr.w	r3, r3, #4
90006b2e:	b2da      	uxtb	r2, r3
90006b30:	687b      	ldr	r3, [r7, #4]
90006b32:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
90006b36:	2103      	movs	r1, #3
90006b38:	6878      	ldr	r0, [r7, #4]
90006b3a:	f7ff ff6b 	bl	90006a14 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
90006b3e:	687b      	ldr	r3, [r7, #4]
90006b40:	69db      	ldr	r3, [r3, #28]
90006b42:	2b00      	cmp	r3, #0
90006b44:	d003      	beq.n	90006b4e <netif_set_link_up+0x56>
90006b46:	687b      	ldr	r3, [r7, #4]
90006b48:	69db      	ldr	r3, [r3, #28]
90006b4a:	6878      	ldr	r0, [r7, #4]
90006b4c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
90006b4e:	3708      	adds	r7, #8
90006b50:	46bd      	mov	sp, r7
90006b52:	bd80      	pop	{r7, pc}
90006b54:	9001208c 	.word	0x9001208c
90006b58:	90012274 	.word	0x90012274
90006b5c:	900120dc 	.word	0x900120dc

90006b60 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
90006b60:	b580      	push	{r7, lr}
90006b62:	b082      	sub	sp, #8
90006b64:	af00      	add	r7, sp, #0
90006b66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
90006b68:	687b      	ldr	r3, [r7, #4]
90006b6a:	2b00      	cmp	r3, #0
90006b6c:	d107      	bne.n	90006b7e <netif_set_link_down+0x1e>
90006b6e:	4b11      	ldr	r3, [pc, #68]	; (90006bb4 <netif_set_link_down+0x54>)
90006b70:	f240 4206 	movw	r2, #1030	; 0x406
90006b74:	4910      	ldr	r1, [pc, #64]	; (90006bb8 <netif_set_link_down+0x58>)
90006b76:	4811      	ldr	r0, [pc, #68]	; (90006bbc <netif_set_link_down+0x5c>)
90006b78:	f009 fcb8 	bl	900104ec <iprintf>
90006b7c:	e017      	b.n	90006bae <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
90006b7e:	687b      	ldr	r3, [r7, #4]
90006b80:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
90006b84:	f003 0304 	and.w	r3, r3, #4
90006b88:	2b00      	cmp	r3, #0
90006b8a:	d010      	beq.n	90006bae <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
90006b8c:	687b      	ldr	r3, [r7, #4]
90006b8e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
90006b92:	f023 0304 	bic.w	r3, r3, #4
90006b96:	b2da      	uxtb	r2, r3
90006b98:	687b      	ldr	r3, [r7, #4]
90006b9a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
90006b9e:	687b      	ldr	r3, [r7, #4]
90006ba0:	69db      	ldr	r3, [r3, #28]
90006ba2:	2b00      	cmp	r3, #0
90006ba4:	d003      	beq.n	90006bae <netif_set_link_down+0x4e>
90006ba6:	687b      	ldr	r3, [r7, #4]
90006ba8:	69db      	ldr	r3, [r3, #28]
90006baa:	6878      	ldr	r0, [r7, #4]
90006bac:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
90006bae:	3708      	adds	r7, #8
90006bb0:	46bd      	mov	sp, r7
90006bb2:	bd80      	pop	{r7, pc}
90006bb4:	9001208c 	.word	0x9001208c
90006bb8:	90012298 	.word	0x90012298
90006bbc:	900120dc 	.word	0x900120dc

90006bc0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
90006bc0:	b480      	push	{r7}
90006bc2:	b083      	sub	sp, #12
90006bc4:	af00      	add	r7, sp, #0
90006bc6:	6078      	str	r0, [r7, #4]
90006bc8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
90006bca:	687b      	ldr	r3, [r7, #4]
90006bcc:	2b00      	cmp	r3, #0
90006bce:	d002      	beq.n	90006bd6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
90006bd0:	687b      	ldr	r3, [r7, #4]
90006bd2:	683a      	ldr	r2, [r7, #0]
90006bd4:	61da      	str	r2, [r3, #28]
  }
}
90006bd6:	bf00      	nop
90006bd8:	370c      	adds	r7, #12
90006bda:	46bd      	mov	sp, r7
90006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
90006be0:	4770      	bx	lr

90006be2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
90006be2:	b480      	push	{r7}
90006be4:	b085      	sub	sp, #20
90006be6:	af00      	add	r7, sp, #0
90006be8:	60f8      	str	r0, [r7, #12]
90006bea:	60b9      	str	r1, [r7, #8]
90006bec:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
90006bee:	f06f 030b 	mvn.w	r3, #11
}
90006bf2:	4618      	mov	r0, r3
90006bf4:	3714      	adds	r7, #20
90006bf6:	46bd      	mov	sp, r7
90006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
90006bfc:	4770      	bx	lr
	...

90006c00 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
90006c00:	b480      	push	{r7}
90006c02:	b085      	sub	sp, #20
90006c04:	af00      	add	r7, sp, #0
90006c06:	4603      	mov	r3, r0
90006c08:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
90006c0a:	79fb      	ldrb	r3, [r7, #7]
90006c0c:	2b00      	cmp	r3, #0
90006c0e:	d013      	beq.n	90006c38 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
90006c10:	4b0d      	ldr	r3, [pc, #52]	; (90006c48 <netif_get_by_index+0x48>)
90006c12:	681b      	ldr	r3, [r3, #0]
90006c14:	60fb      	str	r3, [r7, #12]
90006c16:	e00c      	b.n	90006c32 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
90006c18:	68fb      	ldr	r3, [r7, #12]
90006c1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
90006c1e:	3301      	adds	r3, #1
90006c20:	b2db      	uxtb	r3, r3
90006c22:	79fa      	ldrb	r2, [r7, #7]
90006c24:	429a      	cmp	r2, r3
90006c26:	d101      	bne.n	90006c2c <netif_get_by_index+0x2c>
        return netif; /* found! */
90006c28:	68fb      	ldr	r3, [r7, #12]
90006c2a:	e006      	b.n	90006c3a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
90006c2c:	68fb      	ldr	r3, [r7, #12]
90006c2e:	681b      	ldr	r3, [r3, #0]
90006c30:	60fb      	str	r3, [r7, #12]
90006c32:	68fb      	ldr	r3, [r7, #12]
90006c34:	2b00      	cmp	r3, #0
90006c36:	d1ef      	bne.n	90006c18 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
90006c38:	2300      	movs	r3, #0
}
90006c3a:	4618      	mov	r0, r3
90006c3c:	3714      	adds	r7, #20
90006c3e:	46bd      	mov	sp, r7
90006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
90006c44:	4770      	bx	lr
90006c46:	bf00      	nop
90006c48:	2000a894 	.word	0x2000a894

90006c4c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
90006c4c:	b580      	push	{r7, lr}
90006c4e:	b082      	sub	sp, #8
90006c50:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
90006c52:	4b0c      	ldr	r3, [pc, #48]	; (90006c84 <pbuf_free_ooseq+0x38>)
90006c54:	2200      	movs	r2, #0
90006c56:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
90006c58:	4b0b      	ldr	r3, [pc, #44]	; (90006c88 <pbuf_free_ooseq+0x3c>)
90006c5a:	681b      	ldr	r3, [r3, #0]
90006c5c:	607b      	str	r3, [r7, #4]
90006c5e:	e00a      	b.n	90006c76 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
90006c60:	687b      	ldr	r3, [r7, #4]
90006c62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90006c64:	2b00      	cmp	r3, #0
90006c66:	d003      	beq.n	90006c70 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
90006c68:	6878      	ldr	r0, [r7, #4]
90006c6a:	f002 fbe3 	bl	90009434 <tcp_free_ooseq>
      return;
90006c6e:	e005      	b.n	90006c7c <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
90006c70:	687b      	ldr	r3, [r7, #4]
90006c72:	68db      	ldr	r3, [r3, #12]
90006c74:	607b      	str	r3, [r7, #4]
90006c76:	687b      	ldr	r3, [r7, #4]
90006c78:	2b00      	cmp	r3, #0
90006c7a:	d1f1      	bne.n	90006c60 <pbuf_free_ooseq+0x14>
    }
  }
}
90006c7c:	3708      	adds	r7, #8
90006c7e:	46bd      	mov	sp, r7
90006c80:	bd80      	pop	{r7, pc}
90006c82:	bf00      	nop
90006c84:	2000a89d 	.word	0x2000a89d
90006c88:	2000a8ac 	.word	0x2000a8ac

90006c8c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
90006c8c:	b480      	push	{r7}
90006c8e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
90006c90:	4b03      	ldr	r3, [pc, #12]	; (90006ca0 <pbuf_pool_is_empty+0x14>)
90006c92:	2201      	movs	r2, #1
90006c94:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
90006c96:	bf00      	nop
90006c98:	46bd      	mov	sp, r7
90006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
90006c9e:	4770      	bx	lr
90006ca0:	2000a89d 	.word	0x2000a89d

90006ca4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
90006ca4:	b480      	push	{r7}
90006ca6:	b085      	sub	sp, #20
90006ca8:	af00      	add	r7, sp, #0
90006caa:	60f8      	str	r0, [r7, #12]
90006cac:	60b9      	str	r1, [r7, #8]
90006cae:	4611      	mov	r1, r2
90006cb0:	461a      	mov	r2, r3
90006cb2:	460b      	mov	r3, r1
90006cb4:	80fb      	strh	r3, [r7, #6]
90006cb6:	4613      	mov	r3, r2
90006cb8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
90006cba:	68fb      	ldr	r3, [r7, #12]
90006cbc:	2200      	movs	r2, #0
90006cbe:	601a      	str	r2, [r3, #0]
  p->payload = payload;
90006cc0:	68fb      	ldr	r3, [r7, #12]
90006cc2:	68ba      	ldr	r2, [r7, #8]
90006cc4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
90006cc6:	68fb      	ldr	r3, [r7, #12]
90006cc8:	88fa      	ldrh	r2, [r7, #6]
90006cca:	811a      	strh	r2, [r3, #8]
  p->len = len;
90006ccc:	68fb      	ldr	r3, [r7, #12]
90006cce:	88ba      	ldrh	r2, [r7, #4]
90006cd0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
90006cd2:	8b3b      	ldrh	r3, [r7, #24]
90006cd4:	b2da      	uxtb	r2, r3
90006cd6:	68fb      	ldr	r3, [r7, #12]
90006cd8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
90006cda:	68fb      	ldr	r3, [r7, #12]
90006cdc:	7f3a      	ldrb	r2, [r7, #28]
90006cde:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
90006ce0:	68fb      	ldr	r3, [r7, #12]
90006ce2:	2201      	movs	r2, #1
90006ce4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
90006ce6:	68fb      	ldr	r3, [r7, #12]
90006ce8:	2200      	movs	r2, #0
90006cea:	73da      	strb	r2, [r3, #15]
}
90006cec:	bf00      	nop
90006cee:	3714      	adds	r7, #20
90006cf0:	46bd      	mov	sp, r7
90006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
90006cf6:	4770      	bx	lr

90006cf8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
90006cf8:	b580      	push	{r7, lr}
90006cfa:	b08c      	sub	sp, #48	; 0x30
90006cfc:	af02      	add	r7, sp, #8
90006cfe:	4603      	mov	r3, r0
90006d00:	71fb      	strb	r3, [r7, #7]
90006d02:	460b      	mov	r3, r1
90006d04:	80bb      	strh	r3, [r7, #4]
90006d06:	4613      	mov	r3, r2
90006d08:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
90006d0a:	79fb      	ldrb	r3, [r7, #7]
90006d0c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
90006d0e:	887b      	ldrh	r3, [r7, #2]
90006d10:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
90006d14:	d07f      	beq.n	90006e16 <pbuf_alloc+0x11e>
90006d16:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
90006d1a:	f300 80c8 	bgt.w	90006eae <pbuf_alloc+0x1b6>
90006d1e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
90006d22:	d010      	beq.n	90006d46 <pbuf_alloc+0x4e>
90006d24:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
90006d28:	f300 80c1 	bgt.w	90006eae <pbuf_alloc+0x1b6>
90006d2c:	2b01      	cmp	r3, #1
90006d2e:	d002      	beq.n	90006d36 <pbuf_alloc+0x3e>
90006d30:	2b41      	cmp	r3, #65	; 0x41
90006d32:	f040 80bc 	bne.w	90006eae <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
90006d36:	887a      	ldrh	r2, [r7, #2]
90006d38:	88bb      	ldrh	r3, [r7, #4]
90006d3a:	4619      	mov	r1, r3
90006d3c:	2000      	movs	r0, #0
90006d3e:	f000 f8d1 	bl	90006ee4 <pbuf_alloc_reference>
90006d42:	6278      	str	r0, [r7, #36]	; 0x24
      break;
90006d44:	e0bd      	b.n	90006ec2 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
90006d46:	2300      	movs	r3, #0
90006d48:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
90006d4a:	2300      	movs	r3, #0
90006d4c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
90006d4e:	88bb      	ldrh	r3, [r7, #4]
90006d50:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
90006d52:	2008      	movs	r0, #8
90006d54:	f7ff fbce 	bl	900064f4 <memp_malloc>
90006d58:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
90006d5a:	693b      	ldr	r3, [r7, #16]
90006d5c:	2b00      	cmp	r3, #0
90006d5e:	d109      	bne.n	90006d74 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
90006d60:	f7ff ff94 	bl	90006c8c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
90006d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90006d66:	2b00      	cmp	r3, #0
90006d68:	d002      	beq.n	90006d70 <pbuf_alloc+0x78>
            pbuf_free(p);
90006d6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
90006d6c:	f000 faa8 	bl	900072c0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
90006d70:	2300      	movs	r3, #0
90006d72:	e0a7      	b.n	90006ec4 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
90006d74:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
90006d76:	3303      	adds	r3, #3
90006d78:	b29b      	uxth	r3, r3
90006d7a:	f023 0303 	bic.w	r3, r3, #3
90006d7e:	b29b      	uxth	r3, r3
90006d80:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
90006d84:	b29b      	uxth	r3, r3
90006d86:	8b7a      	ldrh	r2, [r7, #26]
90006d88:	4293      	cmp	r3, r2
90006d8a:	bf28      	it	cs
90006d8c:	4613      	movcs	r3, r2
90006d8e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
90006d90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
90006d92:	3310      	adds	r3, #16
90006d94:	693a      	ldr	r2, [r7, #16]
90006d96:	4413      	add	r3, r2
90006d98:	3303      	adds	r3, #3
90006d9a:	f023 0303 	bic.w	r3, r3, #3
90006d9e:	4618      	mov	r0, r3
90006da0:	89f9      	ldrh	r1, [r7, #14]
90006da2:	8b7a      	ldrh	r2, [r7, #26]
90006da4:	2300      	movs	r3, #0
90006da6:	9301      	str	r3, [sp, #4]
90006da8:	887b      	ldrh	r3, [r7, #2]
90006daa:	9300      	str	r3, [sp, #0]
90006dac:	460b      	mov	r3, r1
90006dae:	4601      	mov	r1, r0
90006db0:	6938      	ldr	r0, [r7, #16]
90006db2:	f7ff ff77 	bl	90006ca4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
90006db6:	693b      	ldr	r3, [r7, #16]
90006db8:	685b      	ldr	r3, [r3, #4]
90006dba:	f003 0303 	and.w	r3, r3, #3
90006dbe:	2b00      	cmp	r3, #0
90006dc0:	d006      	beq.n	90006dd0 <pbuf_alloc+0xd8>
90006dc2:	4b42      	ldr	r3, [pc, #264]	; (90006ecc <pbuf_alloc+0x1d4>)
90006dc4:	f44f 7280 	mov.w	r2, #256	; 0x100
90006dc8:	4941      	ldr	r1, [pc, #260]	; (90006ed0 <pbuf_alloc+0x1d8>)
90006dca:	4842      	ldr	r0, [pc, #264]	; (90006ed4 <pbuf_alloc+0x1dc>)
90006dcc:	f009 fb8e 	bl	900104ec <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
90006dd0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
90006dd2:	3303      	adds	r3, #3
90006dd4:	f023 0303 	bic.w	r3, r3, #3
90006dd8:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
90006ddc:	d106      	bne.n	90006dec <pbuf_alloc+0xf4>
90006dde:	4b3b      	ldr	r3, [pc, #236]	; (90006ecc <pbuf_alloc+0x1d4>)
90006de0:	f44f 7281 	mov.w	r2, #258	; 0x102
90006de4:	493c      	ldr	r1, [pc, #240]	; (90006ed8 <pbuf_alloc+0x1e0>)
90006de6:	483b      	ldr	r0, [pc, #236]	; (90006ed4 <pbuf_alloc+0x1dc>)
90006de8:	f009 fb80 	bl	900104ec <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
90006dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90006dee:	2b00      	cmp	r3, #0
90006df0:	d102      	bne.n	90006df8 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
90006df2:	693b      	ldr	r3, [r7, #16]
90006df4:	627b      	str	r3, [r7, #36]	; 0x24
90006df6:	e002      	b.n	90006dfe <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
90006df8:	69fb      	ldr	r3, [r7, #28]
90006dfa:	693a      	ldr	r2, [r7, #16]
90006dfc:	601a      	str	r2, [r3, #0]
        }
        last = q;
90006dfe:	693b      	ldr	r3, [r7, #16]
90006e00:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
90006e02:	8b7a      	ldrh	r2, [r7, #26]
90006e04:	89fb      	ldrh	r3, [r7, #14]
90006e06:	1ad3      	subs	r3, r2, r3
90006e08:	837b      	strh	r3, [r7, #26]
        offset = 0;
90006e0a:	2300      	movs	r3, #0
90006e0c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
90006e0e:	8b7b      	ldrh	r3, [r7, #26]
90006e10:	2b00      	cmp	r3, #0
90006e12:	d19e      	bne.n	90006d52 <pbuf_alloc+0x5a>
      break;
90006e14:	e055      	b.n	90006ec2 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
90006e16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
90006e18:	3303      	adds	r3, #3
90006e1a:	b29b      	uxth	r3, r3
90006e1c:	f023 0303 	bic.w	r3, r3, #3
90006e20:	b29a      	uxth	r2, r3
90006e22:	88bb      	ldrh	r3, [r7, #4]
90006e24:	3303      	adds	r3, #3
90006e26:	b29b      	uxth	r3, r3
90006e28:	f023 0303 	bic.w	r3, r3, #3
90006e2c:	b29b      	uxth	r3, r3
90006e2e:	4413      	add	r3, r2
90006e30:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
90006e32:	8b3b      	ldrh	r3, [r7, #24]
90006e34:	3310      	adds	r3, #16
90006e36:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
90006e38:	8b3a      	ldrh	r2, [r7, #24]
90006e3a:	88bb      	ldrh	r3, [r7, #4]
90006e3c:	3303      	adds	r3, #3
90006e3e:	f023 0303 	bic.w	r3, r3, #3
90006e42:	429a      	cmp	r2, r3
90006e44:	d306      	bcc.n	90006e54 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
90006e46:	8afa      	ldrh	r2, [r7, #22]
90006e48:	88bb      	ldrh	r3, [r7, #4]
90006e4a:	3303      	adds	r3, #3
90006e4c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
90006e50:	429a      	cmp	r2, r3
90006e52:	d201      	bcs.n	90006e58 <pbuf_alloc+0x160>
        return NULL;
90006e54:	2300      	movs	r3, #0
90006e56:	e035      	b.n	90006ec4 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
90006e58:	8afb      	ldrh	r3, [r7, #22]
90006e5a:	4618      	mov	r0, r3
90006e5c:	f7ff f9ba 	bl	900061d4 <mem_malloc>
90006e60:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
90006e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90006e64:	2b00      	cmp	r3, #0
90006e66:	d101      	bne.n	90006e6c <pbuf_alloc+0x174>
        return NULL;
90006e68:	2300      	movs	r3, #0
90006e6a:	e02b      	b.n	90006ec4 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
90006e6c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
90006e6e:	3310      	adds	r3, #16
90006e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
90006e72:	4413      	add	r3, r2
90006e74:	3303      	adds	r3, #3
90006e76:	f023 0303 	bic.w	r3, r3, #3
90006e7a:	4618      	mov	r0, r3
90006e7c:	88b9      	ldrh	r1, [r7, #4]
90006e7e:	88ba      	ldrh	r2, [r7, #4]
90006e80:	2300      	movs	r3, #0
90006e82:	9301      	str	r3, [sp, #4]
90006e84:	887b      	ldrh	r3, [r7, #2]
90006e86:	9300      	str	r3, [sp, #0]
90006e88:	460b      	mov	r3, r1
90006e8a:	4601      	mov	r1, r0
90006e8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
90006e8e:	f7ff ff09 	bl	90006ca4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
90006e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90006e94:	685b      	ldr	r3, [r3, #4]
90006e96:	f003 0303 	and.w	r3, r3, #3
90006e9a:	2b00      	cmp	r3, #0
90006e9c:	d010      	beq.n	90006ec0 <pbuf_alloc+0x1c8>
90006e9e:	4b0b      	ldr	r3, [pc, #44]	; (90006ecc <pbuf_alloc+0x1d4>)
90006ea0:	f44f 7291 	mov.w	r2, #290	; 0x122
90006ea4:	490d      	ldr	r1, [pc, #52]	; (90006edc <pbuf_alloc+0x1e4>)
90006ea6:	480b      	ldr	r0, [pc, #44]	; (90006ed4 <pbuf_alloc+0x1dc>)
90006ea8:	f009 fb20 	bl	900104ec <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
90006eac:	e008      	b.n	90006ec0 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
90006eae:	4b07      	ldr	r3, [pc, #28]	; (90006ecc <pbuf_alloc+0x1d4>)
90006eb0:	f240 1227 	movw	r2, #295	; 0x127
90006eb4:	490a      	ldr	r1, [pc, #40]	; (90006ee0 <pbuf_alloc+0x1e8>)
90006eb6:	4807      	ldr	r0, [pc, #28]	; (90006ed4 <pbuf_alloc+0x1dc>)
90006eb8:	f009 fb18 	bl	900104ec <iprintf>
      return NULL;
90006ebc:	2300      	movs	r3, #0
90006ebe:	e001      	b.n	90006ec4 <pbuf_alloc+0x1cc>
      break;
90006ec0:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
90006ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
90006ec4:	4618      	mov	r0, r3
90006ec6:	3728      	adds	r7, #40	; 0x28
90006ec8:	46bd      	mov	sp, r7
90006eca:	bd80      	pop	{r7, pc}
90006ecc:	900122bc 	.word	0x900122bc
90006ed0:	900122ec 	.word	0x900122ec
90006ed4:	9001231c 	.word	0x9001231c
90006ed8:	90012344 	.word	0x90012344
90006edc:	90012378 	.word	0x90012378
90006ee0:	900123a4 	.word	0x900123a4

90006ee4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
90006ee4:	b580      	push	{r7, lr}
90006ee6:	b086      	sub	sp, #24
90006ee8:	af02      	add	r7, sp, #8
90006eea:	6078      	str	r0, [r7, #4]
90006eec:	460b      	mov	r3, r1
90006eee:	807b      	strh	r3, [r7, #2]
90006ef0:	4613      	mov	r3, r2
90006ef2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
90006ef4:	883b      	ldrh	r3, [r7, #0]
90006ef6:	2b41      	cmp	r3, #65	; 0x41
90006ef8:	d009      	beq.n	90006f0e <pbuf_alloc_reference+0x2a>
90006efa:	883b      	ldrh	r3, [r7, #0]
90006efc:	2b01      	cmp	r3, #1
90006efe:	d006      	beq.n	90006f0e <pbuf_alloc_reference+0x2a>
90006f00:	4b0f      	ldr	r3, [pc, #60]	; (90006f40 <pbuf_alloc_reference+0x5c>)
90006f02:	f44f 72a5 	mov.w	r2, #330	; 0x14a
90006f06:	490f      	ldr	r1, [pc, #60]	; (90006f44 <pbuf_alloc_reference+0x60>)
90006f08:	480f      	ldr	r0, [pc, #60]	; (90006f48 <pbuf_alloc_reference+0x64>)
90006f0a:	f009 faef 	bl	900104ec <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
90006f0e:	2007      	movs	r0, #7
90006f10:	f7ff faf0 	bl	900064f4 <memp_malloc>
90006f14:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
90006f16:	68fb      	ldr	r3, [r7, #12]
90006f18:	2b00      	cmp	r3, #0
90006f1a:	d101      	bne.n	90006f20 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
90006f1c:	2300      	movs	r3, #0
90006f1e:	e00b      	b.n	90006f38 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
90006f20:	8879      	ldrh	r1, [r7, #2]
90006f22:	887a      	ldrh	r2, [r7, #2]
90006f24:	2300      	movs	r3, #0
90006f26:	9301      	str	r3, [sp, #4]
90006f28:	883b      	ldrh	r3, [r7, #0]
90006f2a:	9300      	str	r3, [sp, #0]
90006f2c:	460b      	mov	r3, r1
90006f2e:	6879      	ldr	r1, [r7, #4]
90006f30:	68f8      	ldr	r0, [r7, #12]
90006f32:	f7ff feb7 	bl	90006ca4 <pbuf_init_alloced_pbuf>
  return p;
90006f36:	68fb      	ldr	r3, [r7, #12]
}
90006f38:	4618      	mov	r0, r3
90006f3a:	3710      	adds	r7, #16
90006f3c:	46bd      	mov	sp, r7
90006f3e:	bd80      	pop	{r7, pc}
90006f40:	900122bc 	.word	0x900122bc
90006f44:	900123c0 	.word	0x900123c0
90006f48:	9001231c 	.word	0x9001231c

90006f4c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
90006f4c:	b580      	push	{r7, lr}
90006f4e:	b088      	sub	sp, #32
90006f50:	af02      	add	r7, sp, #8
90006f52:	607b      	str	r3, [r7, #4]
90006f54:	4603      	mov	r3, r0
90006f56:	73fb      	strb	r3, [r7, #15]
90006f58:	460b      	mov	r3, r1
90006f5a:	81bb      	strh	r3, [r7, #12]
90006f5c:	4613      	mov	r3, r2
90006f5e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
90006f60:	7bfb      	ldrb	r3, [r7, #15]
90006f62:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
90006f64:	8a7b      	ldrh	r3, [r7, #18]
90006f66:	3303      	adds	r3, #3
90006f68:	f023 0203 	bic.w	r2, r3, #3
90006f6c:	89bb      	ldrh	r3, [r7, #12]
90006f6e:	441a      	add	r2, r3
90006f70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
90006f72:	429a      	cmp	r2, r3
90006f74:	d901      	bls.n	90006f7a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
90006f76:	2300      	movs	r3, #0
90006f78:	e018      	b.n	90006fac <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
90006f7a:	6a3b      	ldr	r3, [r7, #32]
90006f7c:	2b00      	cmp	r3, #0
90006f7e:	d007      	beq.n	90006f90 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
90006f80:	8a7b      	ldrh	r3, [r7, #18]
90006f82:	3303      	adds	r3, #3
90006f84:	f023 0303 	bic.w	r3, r3, #3
90006f88:	6a3a      	ldr	r2, [r7, #32]
90006f8a:	4413      	add	r3, r2
90006f8c:	617b      	str	r3, [r7, #20]
90006f8e:	e001      	b.n	90006f94 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
90006f90:	2300      	movs	r3, #0
90006f92:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
90006f94:	6878      	ldr	r0, [r7, #4]
90006f96:	89b9      	ldrh	r1, [r7, #12]
90006f98:	89ba      	ldrh	r2, [r7, #12]
90006f9a:	2302      	movs	r3, #2
90006f9c:	9301      	str	r3, [sp, #4]
90006f9e:	897b      	ldrh	r3, [r7, #10]
90006fa0:	9300      	str	r3, [sp, #0]
90006fa2:	460b      	mov	r3, r1
90006fa4:	6979      	ldr	r1, [r7, #20]
90006fa6:	f7ff fe7d 	bl	90006ca4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
90006faa:	687b      	ldr	r3, [r7, #4]
}
90006fac:	4618      	mov	r0, r3
90006fae:	3718      	adds	r7, #24
90006fb0:	46bd      	mov	sp, r7
90006fb2:	bd80      	pop	{r7, pc}

90006fb4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
90006fb4:	b580      	push	{r7, lr}
90006fb6:	b084      	sub	sp, #16
90006fb8:	af00      	add	r7, sp, #0
90006fba:	6078      	str	r0, [r7, #4]
90006fbc:	460b      	mov	r3, r1
90006fbe:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
90006fc0:	687b      	ldr	r3, [r7, #4]
90006fc2:	2b00      	cmp	r3, #0
90006fc4:	d106      	bne.n	90006fd4 <pbuf_realloc+0x20>
90006fc6:	4b3a      	ldr	r3, [pc, #232]	; (900070b0 <pbuf_realloc+0xfc>)
90006fc8:	f44f 72cc 	mov.w	r2, #408	; 0x198
90006fcc:	4939      	ldr	r1, [pc, #228]	; (900070b4 <pbuf_realloc+0x100>)
90006fce:	483a      	ldr	r0, [pc, #232]	; (900070b8 <pbuf_realloc+0x104>)
90006fd0:	f009 fa8c 	bl	900104ec <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
90006fd4:	687b      	ldr	r3, [r7, #4]
90006fd6:	891b      	ldrh	r3, [r3, #8]
90006fd8:	887a      	ldrh	r2, [r7, #2]
90006fda:	429a      	cmp	r2, r3
90006fdc:	d263      	bcs.n	900070a6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
90006fde:	687b      	ldr	r3, [r7, #4]
90006fe0:	891a      	ldrh	r2, [r3, #8]
90006fe2:	887b      	ldrh	r3, [r7, #2]
90006fe4:	1ad3      	subs	r3, r2, r3
90006fe6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
90006fe8:	887b      	ldrh	r3, [r7, #2]
90006fea:	817b      	strh	r3, [r7, #10]
  q = p;
90006fec:	687b      	ldr	r3, [r7, #4]
90006fee:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
90006ff0:	e018      	b.n	90007024 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
90006ff2:	68fb      	ldr	r3, [r7, #12]
90006ff4:	895b      	ldrh	r3, [r3, #10]
90006ff6:	897a      	ldrh	r2, [r7, #10]
90006ff8:	1ad3      	subs	r3, r2, r3
90006ffa:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
90006ffc:	68fb      	ldr	r3, [r7, #12]
90006ffe:	891a      	ldrh	r2, [r3, #8]
90007000:	893b      	ldrh	r3, [r7, #8]
90007002:	1ad3      	subs	r3, r2, r3
90007004:	b29a      	uxth	r2, r3
90007006:	68fb      	ldr	r3, [r7, #12]
90007008:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
9000700a:	68fb      	ldr	r3, [r7, #12]
9000700c:	681b      	ldr	r3, [r3, #0]
9000700e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
90007010:	68fb      	ldr	r3, [r7, #12]
90007012:	2b00      	cmp	r3, #0
90007014:	d106      	bne.n	90007024 <pbuf_realloc+0x70>
90007016:	4b26      	ldr	r3, [pc, #152]	; (900070b0 <pbuf_realloc+0xfc>)
90007018:	f240 12af 	movw	r2, #431	; 0x1af
9000701c:	4927      	ldr	r1, [pc, #156]	; (900070bc <pbuf_realloc+0x108>)
9000701e:	4826      	ldr	r0, [pc, #152]	; (900070b8 <pbuf_realloc+0x104>)
90007020:	f009 fa64 	bl	900104ec <iprintf>
  while (rem_len > q->len) {
90007024:	68fb      	ldr	r3, [r7, #12]
90007026:	895b      	ldrh	r3, [r3, #10]
90007028:	897a      	ldrh	r2, [r7, #10]
9000702a:	429a      	cmp	r2, r3
9000702c:	d8e1      	bhi.n	90006ff2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
9000702e:	68fb      	ldr	r3, [r7, #12]
90007030:	7b1b      	ldrb	r3, [r3, #12]
90007032:	f003 030f 	and.w	r3, r3, #15
90007036:	2b00      	cmp	r3, #0
90007038:	d121      	bne.n	9000707e <pbuf_realloc+0xca>
9000703a:	68fb      	ldr	r3, [r7, #12]
9000703c:	895b      	ldrh	r3, [r3, #10]
9000703e:	897a      	ldrh	r2, [r7, #10]
90007040:	429a      	cmp	r2, r3
90007042:	d01c      	beq.n	9000707e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
90007044:	68fb      	ldr	r3, [r7, #12]
90007046:	7b5b      	ldrb	r3, [r3, #13]
90007048:	f003 0302 	and.w	r3, r3, #2
9000704c:	2b00      	cmp	r3, #0
9000704e:	d116      	bne.n	9000707e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
90007050:	68fb      	ldr	r3, [r7, #12]
90007052:	685a      	ldr	r2, [r3, #4]
90007054:	68fb      	ldr	r3, [r7, #12]
90007056:	1ad3      	subs	r3, r2, r3
90007058:	b29a      	uxth	r2, r3
9000705a:	897b      	ldrh	r3, [r7, #10]
9000705c:	4413      	add	r3, r2
9000705e:	b29b      	uxth	r3, r3
90007060:	4619      	mov	r1, r3
90007062:	68f8      	ldr	r0, [r7, #12]
90007064:	f7fe ffba 	bl	90005fdc <mem_trim>
90007068:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
9000706a:	68fb      	ldr	r3, [r7, #12]
9000706c:	2b00      	cmp	r3, #0
9000706e:	d106      	bne.n	9000707e <pbuf_realloc+0xca>
90007070:	4b0f      	ldr	r3, [pc, #60]	; (900070b0 <pbuf_realloc+0xfc>)
90007072:	f240 12bd 	movw	r2, #445	; 0x1bd
90007076:	4912      	ldr	r1, [pc, #72]	; (900070c0 <pbuf_realloc+0x10c>)
90007078:	480f      	ldr	r0, [pc, #60]	; (900070b8 <pbuf_realloc+0x104>)
9000707a:	f009 fa37 	bl	900104ec <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
9000707e:	68fb      	ldr	r3, [r7, #12]
90007080:	897a      	ldrh	r2, [r7, #10]
90007082:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
90007084:	68fb      	ldr	r3, [r7, #12]
90007086:	895a      	ldrh	r2, [r3, #10]
90007088:	68fb      	ldr	r3, [r7, #12]
9000708a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
9000708c:	68fb      	ldr	r3, [r7, #12]
9000708e:	681b      	ldr	r3, [r3, #0]
90007090:	2b00      	cmp	r3, #0
90007092:	d004      	beq.n	9000709e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
90007094:	68fb      	ldr	r3, [r7, #12]
90007096:	681b      	ldr	r3, [r3, #0]
90007098:	4618      	mov	r0, r3
9000709a:	f000 f911 	bl	900072c0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
9000709e:	68fb      	ldr	r3, [r7, #12]
900070a0:	2200      	movs	r2, #0
900070a2:	601a      	str	r2, [r3, #0]
900070a4:	e000      	b.n	900070a8 <pbuf_realloc+0xf4>
    return;
900070a6:	bf00      	nop

}
900070a8:	3710      	adds	r7, #16
900070aa:	46bd      	mov	sp, r7
900070ac:	bd80      	pop	{r7, pc}
900070ae:	bf00      	nop
900070b0:	900122bc 	.word	0x900122bc
900070b4:	900123d4 	.word	0x900123d4
900070b8:	9001231c 	.word	0x9001231c
900070bc:	900123ec 	.word	0x900123ec
900070c0:	90012404 	.word	0x90012404

900070c4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
900070c4:	b580      	push	{r7, lr}
900070c6:	b086      	sub	sp, #24
900070c8:	af00      	add	r7, sp, #0
900070ca:	60f8      	str	r0, [r7, #12]
900070cc:	60b9      	str	r1, [r7, #8]
900070ce:	4613      	mov	r3, r2
900070d0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
900070d2:	68fb      	ldr	r3, [r7, #12]
900070d4:	2b00      	cmp	r3, #0
900070d6:	d106      	bne.n	900070e6 <pbuf_add_header_impl+0x22>
900070d8:	4b2b      	ldr	r3, [pc, #172]	; (90007188 <pbuf_add_header_impl+0xc4>)
900070da:	f240 12df 	movw	r2, #479	; 0x1df
900070de:	492b      	ldr	r1, [pc, #172]	; (9000718c <pbuf_add_header_impl+0xc8>)
900070e0:	482b      	ldr	r0, [pc, #172]	; (90007190 <pbuf_add_header_impl+0xcc>)
900070e2:	f009 fa03 	bl	900104ec <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
900070e6:	68fb      	ldr	r3, [r7, #12]
900070e8:	2b00      	cmp	r3, #0
900070ea:	d003      	beq.n	900070f4 <pbuf_add_header_impl+0x30>
900070ec:	68bb      	ldr	r3, [r7, #8]
900070ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
900070f2:	d301      	bcc.n	900070f8 <pbuf_add_header_impl+0x34>
    return 1;
900070f4:	2301      	movs	r3, #1
900070f6:	e043      	b.n	90007180 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
900070f8:	68bb      	ldr	r3, [r7, #8]
900070fa:	2b00      	cmp	r3, #0
900070fc:	d101      	bne.n	90007102 <pbuf_add_header_impl+0x3e>
    return 0;
900070fe:	2300      	movs	r3, #0
90007100:	e03e      	b.n	90007180 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
90007102:	68bb      	ldr	r3, [r7, #8]
90007104:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
90007106:	68fb      	ldr	r3, [r7, #12]
90007108:	891a      	ldrh	r2, [r3, #8]
9000710a:	8a7b      	ldrh	r3, [r7, #18]
9000710c:	4413      	add	r3, r2
9000710e:	b29b      	uxth	r3, r3
90007110:	8a7a      	ldrh	r2, [r7, #18]
90007112:	429a      	cmp	r2, r3
90007114:	d901      	bls.n	9000711a <pbuf_add_header_impl+0x56>
    return 1;
90007116:	2301      	movs	r3, #1
90007118:	e032      	b.n	90007180 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
9000711a:	68fb      	ldr	r3, [r7, #12]
9000711c:	7b1b      	ldrb	r3, [r3, #12]
9000711e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
90007120:	8a3b      	ldrh	r3, [r7, #16]
90007122:	f003 0380 	and.w	r3, r3, #128	; 0x80
90007126:	2b00      	cmp	r3, #0
90007128:	d00c      	beq.n	90007144 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
9000712a:	68fb      	ldr	r3, [r7, #12]
9000712c:	685a      	ldr	r2, [r3, #4]
9000712e:	68bb      	ldr	r3, [r7, #8]
90007130:	425b      	negs	r3, r3
90007132:	4413      	add	r3, r2
90007134:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
90007136:	68fb      	ldr	r3, [r7, #12]
90007138:	3310      	adds	r3, #16
9000713a:	697a      	ldr	r2, [r7, #20]
9000713c:	429a      	cmp	r2, r3
9000713e:	d20d      	bcs.n	9000715c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
90007140:	2301      	movs	r3, #1
90007142:	e01d      	b.n	90007180 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
90007144:	79fb      	ldrb	r3, [r7, #7]
90007146:	2b00      	cmp	r3, #0
90007148:	d006      	beq.n	90007158 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
9000714a:	68fb      	ldr	r3, [r7, #12]
9000714c:	685a      	ldr	r2, [r3, #4]
9000714e:	68bb      	ldr	r3, [r7, #8]
90007150:	425b      	negs	r3, r3
90007152:	4413      	add	r3, r2
90007154:	617b      	str	r3, [r7, #20]
90007156:	e001      	b.n	9000715c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
90007158:	2301      	movs	r3, #1
9000715a:	e011      	b.n	90007180 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
9000715c:	68fb      	ldr	r3, [r7, #12]
9000715e:	697a      	ldr	r2, [r7, #20]
90007160:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
90007162:	68fb      	ldr	r3, [r7, #12]
90007164:	895a      	ldrh	r2, [r3, #10]
90007166:	8a7b      	ldrh	r3, [r7, #18]
90007168:	4413      	add	r3, r2
9000716a:	b29a      	uxth	r2, r3
9000716c:	68fb      	ldr	r3, [r7, #12]
9000716e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
90007170:	68fb      	ldr	r3, [r7, #12]
90007172:	891a      	ldrh	r2, [r3, #8]
90007174:	8a7b      	ldrh	r3, [r7, #18]
90007176:	4413      	add	r3, r2
90007178:	b29a      	uxth	r2, r3
9000717a:	68fb      	ldr	r3, [r7, #12]
9000717c:	811a      	strh	r2, [r3, #8]


  return 0;
9000717e:	2300      	movs	r3, #0
}
90007180:	4618      	mov	r0, r3
90007182:	3718      	adds	r7, #24
90007184:	46bd      	mov	sp, r7
90007186:	bd80      	pop	{r7, pc}
90007188:	900122bc 	.word	0x900122bc
9000718c:	90012420 	.word	0x90012420
90007190:	9001231c 	.word	0x9001231c

90007194 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
90007194:	b580      	push	{r7, lr}
90007196:	b082      	sub	sp, #8
90007198:	af00      	add	r7, sp, #0
9000719a:	6078      	str	r0, [r7, #4]
9000719c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
9000719e:	2200      	movs	r2, #0
900071a0:	6839      	ldr	r1, [r7, #0]
900071a2:	6878      	ldr	r0, [r7, #4]
900071a4:	f7ff ff8e 	bl	900070c4 <pbuf_add_header_impl>
900071a8:	4603      	mov	r3, r0
}
900071aa:	4618      	mov	r0, r3
900071ac:	3708      	adds	r7, #8
900071ae:	46bd      	mov	sp, r7
900071b0:	bd80      	pop	{r7, pc}
	...

900071b4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
900071b4:	b580      	push	{r7, lr}
900071b6:	b084      	sub	sp, #16
900071b8:	af00      	add	r7, sp, #0
900071ba:	6078      	str	r0, [r7, #4]
900071bc:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
900071be:	687b      	ldr	r3, [r7, #4]
900071c0:	2b00      	cmp	r3, #0
900071c2:	d106      	bne.n	900071d2 <pbuf_remove_header+0x1e>
900071c4:	4b20      	ldr	r3, [pc, #128]	; (90007248 <pbuf_remove_header+0x94>)
900071c6:	f240 224b 	movw	r2, #587	; 0x24b
900071ca:	4920      	ldr	r1, [pc, #128]	; (9000724c <pbuf_remove_header+0x98>)
900071cc:	4820      	ldr	r0, [pc, #128]	; (90007250 <pbuf_remove_header+0x9c>)
900071ce:	f009 f98d 	bl	900104ec <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
900071d2:	687b      	ldr	r3, [r7, #4]
900071d4:	2b00      	cmp	r3, #0
900071d6:	d003      	beq.n	900071e0 <pbuf_remove_header+0x2c>
900071d8:	683b      	ldr	r3, [r7, #0]
900071da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
900071de:	d301      	bcc.n	900071e4 <pbuf_remove_header+0x30>
    return 1;
900071e0:	2301      	movs	r3, #1
900071e2:	e02c      	b.n	9000723e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
900071e4:	683b      	ldr	r3, [r7, #0]
900071e6:	2b00      	cmp	r3, #0
900071e8:	d101      	bne.n	900071ee <pbuf_remove_header+0x3a>
    return 0;
900071ea:	2300      	movs	r3, #0
900071ec:	e027      	b.n	9000723e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
900071ee:	683b      	ldr	r3, [r7, #0]
900071f0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
900071f2:	687b      	ldr	r3, [r7, #4]
900071f4:	895b      	ldrh	r3, [r3, #10]
900071f6:	89fa      	ldrh	r2, [r7, #14]
900071f8:	429a      	cmp	r2, r3
900071fa:	d908      	bls.n	9000720e <pbuf_remove_header+0x5a>
900071fc:	4b12      	ldr	r3, [pc, #72]	; (90007248 <pbuf_remove_header+0x94>)
900071fe:	f240 2255 	movw	r2, #597	; 0x255
90007202:	4914      	ldr	r1, [pc, #80]	; (90007254 <pbuf_remove_header+0xa0>)
90007204:	4812      	ldr	r0, [pc, #72]	; (90007250 <pbuf_remove_header+0x9c>)
90007206:	f009 f971 	bl	900104ec <iprintf>
9000720a:	2301      	movs	r3, #1
9000720c:	e017      	b.n	9000723e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
9000720e:	687b      	ldr	r3, [r7, #4]
90007210:	685b      	ldr	r3, [r3, #4]
90007212:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
90007214:	687b      	ldr	r3, [r7, #4]
90007216:	685a      	ldr	r2, [r3, #4]
90007218:	683b      	ldr	r3, [r7, #0]
9000721a:	441a      	add	r2, r3
9000721c:	687b      	ldr	r3, [r7, #4]
9000721e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
90007220:	687b      	ldr	r3, [r7, #4]
90007222:	895a      	ldrh	r2, [r3, #10]
90007224:	89fb      	ldrh	r3, [r7, #14]
90007226:	1ad3      	subs	r3, r2, r3
90007228:	b29a      	uxth	r2, r3
9000722a:	687b      	ldr	r3, [r7, #4]
9000722c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
9000722e:	687b      	ldr	r3, [r7, #4]
90007230:	891a      	ldrh	r2, [r3, #8]
90007232:	89fb      	ldrh	r3, [r7, #14]
90007234:	1ad3      	subs	r3, r2, r3
90007236:	b29a      	uxth	r2, r3
90007238:	687b      	ldr	r3, [r7, #4]
9000723a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
9000723c:	2300      	movs	r3, #0
}
9000723e:	4618      	mov	r0, r3
90007240:	3710      	adds	r7, #16
90007242:	46bd      	mov	sp, r7
90007244:	bd80      	pop	{r7, pc}
90007246:	bf00      	nop
90007248:	900122bc 	.word	0x900122bc
9000724c:	90012420 	.word	0x90012420
90007250:	9001231c 	.word	0x9001231c
90007254:	9001242c 	.word	0x9001242c

90007258 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
90007258:	b580      	push	{r7, lr}
9000725a:	b082      	sub	sp, #8
9000725c:	af00      	add	r7, sp, #0
9000725e:	6078      	str	r0, [r7, #4]
90007260:	460b      	mov	r3, r1
90007262:	807b      	strh	r3, [r7, #2]
90007264:	4613      	mov	r3, r2
90007266:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
90007268:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
9000726c:	2b00      	cmp	r3, #0
9000726e:	da08      	bge.n	90007282 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
90007270:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
90007274:	425b      	negs	r3, r3
90007276:	4619      	mov	r1, r3
90007278:	6878      	ldr	r0, [r7, #4]
9000727a:	f7ff ff9b 	bl	900071b4 <pbuf_remove_header>
9000727e:	4603      	mov	r3, r0
90007280:	e007      	b.n	90007292 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
90007282:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
90007286:	787a      	ldrb	r2, [r7, #1]
90007288:	4619      	mov	r1, r3
9000728a:	6878      	ldr	r0, [r7, #4]
9000728c:	f7ff ff1a 	bl	900070c4 <pbuf_add_header_impl>
90007290:	4603      	mov	r3, r0
  }
}
90007292:	4618      	mov	r0, r3
90007294:	3708      	adds	r7, #8
90007296:	46bd      	mov	sp, r7
90007298:	bd80      	pop	{r7, pc}

9000729a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
9000729a:	b580      	push	{r7, lr}
9000729c:	b082      	sub	sp, #8
9000729e:	af00      	add	r7, sp, #0
900072a0:	6078      	str	r0, [r7, #4]
900072a2:	460b      	mov	r3, r1
900072a4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
900072a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
900072aa:	2201      	movs	r2, #1
900072ac:	4619      	mov	r1, r3
900072ae:	6878      	ldr	r0, [r7, #4]
900072b0:	f7ff ffd2 	bl	90007258 <pbuf_header_impl>
900072b4:	4603      	mov	r3, r0
}
900072b6:	4618      	mov	r0, r3
900072b8:	3708      	adds	r7, #8
900072ba:	46bd      	mov	sp, r7
900072bc:	bd80      	pop	{r7, pc}
	...

900072c0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
900072c0:	b580      	push	{r7, lr}
900072c2:	b086      	sub	sp, #24
900072c4:	af00      	add	r7, sp, #0
900072c6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
900072c8:	687b      	ldr	r3, [r7, #4]
900072ca:	2b00      	cmp	r3, #0
900072cc:	d10b      	bne.n	900072e6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
900072ce:	687b      	ldr	r3, [r7, #4]
900072d0:	2b00      	cmp	r3, #0
900072d2:	d106      	bne.n	900072e2 <pbuf_free+0x22>
900072d4:	4b38      	ldr	r3, [pc, #224]	; (900073b8 <pbuf_free+0xf8>)
900072d6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
900072da:	4938      	ldr	r1, [pc, #224]	; (900073bc <pbuf_free+0xfc>)
900072dc:	4838      	ldr	r0, [pc, #224]	; (900073c0 <pbuf_free+0x100>)
900072de:	f009 f905 	bl	900104ec <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
900072e2:	2300      	movs	r3, #0
900072e4:	e063      	b.n	900073ae <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
900072e6:	2300      	movs	r3, #0
900072e8:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
900072ea:	e05c      	b.n	900073a6 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
900072ec:	687b      	ldr	r3, [r7, #4]
900072ee:	7b9b      	ldrb	r3, [r3, #14]
900072f0:	2b00      	cmp	r3, #0
900072f2:	d106      	bne.n	90007302 <pbuf_free+0x42>
900072f4:	4b30      	ldr	r3, [pc, #192]	; (900073b8 <pbuf_free+0xf8>)
900072f6:	f240 22f1 	movw	r2, #753	; 0x2f1
900072fa:	4932      	ldr	r1, [pc, #200]	; (900073c4 <pbuf_free+0x104>)
900072fc:	4830      	ldr	r0, [pc, #192]	; (900073c0 <pbuf_free+0x100>)
900072fe:	f009 f8f5 	bl	900104ec <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
90007302:	687b      	ldr	r3, [r7, #4]
90007304:	7b9b      	ldrb	r3, [r3, #14]
90007306:	3b01      	subs	r3, #1
90007308:	b2da      	uxtb	r2, r3
9000730a:	687b      	ldr	r3, [r7, #4]
9000730c:	739a      	strb	r2, [r3, #14]
9000730e:	687b      	ldr	r3, [r7, #4]
90007310:	7b9b      	ldrb	r3, [r3, #14]
90007312:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
90007314:	7dbb      	ldrb	r3, [r7, #22]
90007316:	2b00      	cmp	r3, #0
90007318:	d143      	bne.n	900073a2 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
9000731a:	687b      	ldr	r3, [r7, #4]
9000731c:	681b      	ldr	r3, [r3, #0]
9000731e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
90007320:	687b      	ldr	r3, [r7, #4]
90007322:	7b1b      	ldrb	r3, [r3, #12]
90007324:	f003 030f 	and.w	r3, r3, #15
90007328:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
9000732a:	687b      	ldr	r3, [r7, #4]
9000732c:	7b5b      	ldrb	r3, [r3, #13]
9000732e:	f003 0302 	and.w	r3, r3, #2
90007332:	2b00      	cmp	r3, #0
90007334:	d011      	beq.n	9000735a <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
90007336:	687b      	ldr	r3, [r7, #4]
90007338:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
9000733a:	68bb      	ldr	r3, [r7, #8]
9000733c:	691b      	ldr	r3, [r3, #16]
9000733e:	2b00      	cmp	r3, #0
90007340:	d106      	bne.n	90007350 <pbuf_free+0x90>
90007342:	4b1d      	ldr	r3, [pc, #116]	; (900073b8 <pbuf_free+0xf8>)
90007344:	f240 22ff 	movw	r2, #767	; 0x2ff
90007348:	491f      	ldr	r1, [pc, #124]	; (900073c8 <pbuf_free+0x108>)
9000734a:	481d      	ldr	r0, [pc, #116]	; (900073c0 <pbuf_free+0x100>)
9000734c:	f009 f8ce 	bl	900104ec <iprintf>
        pc->custom_free_function(p);
90007350:	68bb      	ldr	r3, [r7, #8]
90007352:	691b      	ldr	r3, [r3, #16]
90007354:	6878      	ldr	r0, [r7, #4]
90007356:	4798      	blx	r3
90007358:	e01d      	b.n	90007396 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
9000735a:	7bfb      	ldrb	r3, [r7, #15]
9000735c:	2b02      	cmp	r3, #2
9000735e:	d104      	bne.n	9000736a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
90007360:	6879      	ldr	r1, [r7, #4]
90007362:	2008      	movs	r0, #8
90007364:	f7ff f936 	bl	900065d4 <memp_free>
90007368:	e015      	b.n	90007396 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
9000736a:	7bfb      	ldrb	r3, [r7, #15]
9000736c:	2b01      	cmp	r3, #1
9000736e:	d104      	bne.n	9000737a <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
90007370:	6879      	ldr	r1, [r7, #4]
90007372:	2007      	movs	r0, #7
90007374:	f7ff f92e 	bl	900065d4 <memp_free>
90007378:	e00d      	b.n	90007396 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
9000737a:	7bfb      	ldrb	r3, [r7, #15]
9000737c:	2b00      	cmp	r3, #0
9000737e:	d103      	bne.n	90007388 <pbuf_free+0xc8>
          mem_free(p);
90007380:	6878      	ldr	r0, [r7, #4]
90007382:	f7fe fdc1 	bl	90005f08 <mem_free>
90007386:	e006      	b.n	90007396 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
90007388:	4b0b      	ldr	r3, [pc, #44]	; (900073b8 <pbuf_free+0xf8>)
9000738a:	f240 320f 	movw	r2, #783	; 0x30f
9000738e:	490f      	ldr	r1, [pc, #60]	; (900073cc <pbuf_free+0x10c>)
90007390:	480b      	ldr	r0, [pc, #44]	; (900073c0 <pbuf_free+0x100>)
90007392:	f009 f8ab 	bl	900104ec <iprintf>
        }
      }
      count++;
90007396:	7dfb      	ldrb	r3, [r7, #23]
90007398:	3301      	adds	r3, #1
9000739a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
9000739c:	693b      	ldr	r3, [r7, #16]
9000739e:	607b      	str	r3, [r7, #4]
900073a0:	e001      	b.n	900073a6 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
900073a2:	2300      	movs	r3, #0
900073a4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
900073a6:	687b      	ldr	r3, [r7, #4]
900073a8:	2b00      	cmp	r3, #0
900073aa:	d19f      	bne.n	900072ec <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
900073ac:	7dfb      	ldrb	r3, [r7, #23]
}
900073ae:	4618      	mov	r0, r3
900073b0:	3718      	adds	r7, #24
900073b2:	46bd      	mov	sp, r7
900073b4:	bd80      	pop	{r7, pc}
900073b6:	bf00      	nop
900073b8:	900122bc 	.word	0x900122bc
900073bc:	90012420 	.word	0x90012420
900073c0:	9001231c 	.word	0x9001231c
900073c4:	9001244c 	.word	0x9001244c
900073c8:	90012464 	.word	0x90012464
900073cc:	90012488 	.word	0x90012488

900073d0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
900073d0:	b480      	push	{r7}
900073d2:	b085      	sub	sp, #20
900073d4:	af00      	add	r7, sp, #0
900073d6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
900073d8:	2300      	movs	r3, #0
900073da:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
900073dc:	e005      	b.n	900073ea <pbuf_clen+0x1a>
    ++len;
900073de:	89fb      	ldrh	r3, [r7, #14]
900073e0:	3301      	adds	r3, #1
900073e2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
900073e4:	687b      	ldr	r3, [r7, #4]
900073e6:	681b      	ldr	r3, [r3, #0]
900073e8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
900073ea:	687b      	ldr	r3, [r7, #4]
900073ec:	2b00      	cmp	r3, #0
900073ee:	d1f6      	bne.n	900073de <pbuf_clen+0xe>
  }
  return len;
900073f0:	89fb      	ldrh	r3, [r7, #14]
}
900073f2:	4618      	mov	r0, r3
900073f4:	3714      	adds	r7, #20
900073f6:	46bd      	mov	sp, r7
900073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
900073fc:	4770      	bx	lr
	...

90007400 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
90007400:	b580      	push	{r7, lr}
90007402:	b082      	sub	sp, #8
90007404:	af00      	add	r7, sp, #0
90007406:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
90007408:	687b      	ldr	r3, [r7, #4]
9000740a:	2b00      	cmp	r3, #0
9000740c:	d010      	beq.n	90007430 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
9000740e:	687b      	ldr	r3, [r7, #4]
90007410:	7b9b      	ldrb	r3, [r3, #14]
90007412:	3301      	adds	r3, #1
90007414:	b2da      	uxtb	r2, r3
90007416:	687b      	ldr	r3, [r7, #4]
90007418:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
9000741a:	687b      	ldr	r3, [r7, #4]
9000741c:	7b9b      	ldrb	r3, [r3, #14]
9000741e:	2b00      	cmp	r3, #0
90007420:	d106      	bne.n	90007430 <pbuf_ref+0x30>
90007422:	4b05      	ldr	r3, [pc, #20]	; (90007438 <pbuf_ref+0x38>)
90007424:	f240 3242 	movw	r2, #834	; 0x342
90007428:	4904      	ldr	r1, [pc, #16]	; (9000743c <pbuf_ref+0x3c>)
9000742a:	4805      	ldr	r0, [pc, #20]	; (90007440 <pbuf_ref+0x40>)
9000742c:	f009 f85e 	bl	900104ec <iprintf>
  }
}
90007430:	bf00      	nop
90007432:	3708      	adds	r7, #8
90007434:	46bd      	mov	sp, r7
90007436:	bd80      	pop	{r7, pc}
90007438:	900122bc 	.word	0x900122bc
9000743c:	9001249c 	.word	0x9001249c
90007440:	9001231c 	.word	0x9001231c

90007444 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
90007444:	b580      	push	{r7, lr}
90007446:	b084      	sub	sp, #16
90007448:	af00      	add	r7, sp, #0
9000744a:	6078      	str	r0, [r7, #4]
9000744c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
9000744e:	687b      	ldr	r3, [r7, #4]
90007450:	2b00      	cmp	r3, #0
90007452:	d002      	beq.n	9000745a <pbuf_cat+0x16>
90007454:	683b      	ldr	r3, [r7, #0]
90007456:	2b00      	cmp	r3, #0
90007458:	d107      	bne.n	9000746a <pbuf_cat+0x26>
9000745a:	4b20      	ldr	r3, [pc, #128]	; (900074dc <pbuf_cat+0x98>)
9000745c:	f240 3259 	movw	r2, #857	; 0x359
90007460:	491f      	ldr	r1, [pc, #124]	; (900074e0 <pbuf_cat+0x9c>)
90007462:	4820      	ldr	r0, [pc, #128]	; (900074e4 <pbuf_cat+0xa0>)
90007464:	f009 f842 	bl	900104ec <iprintf>
90007468:	e034      	b.n	900074d4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
9000746a:	687b      	ldr	r3, [r7, #4]
9000746c:	60fb      	str	r3, [r7, #12]
9000746e:	e00a      	b.n	90007486 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
90007470:	68fb      	ldr	r3, [r7, #12]
90007472:	891a      	ldrh	r2, [r3, #8]
90007474:	683b      	ldr	r3, [r7, #0]
90007476:	891b      	ldrh	r3, [r3, #8]
90007478:	4413      	add	r3, r2
9000747a:	b29a      	uxth	r2, r3
9000747c:	68fb      	ldr	r3, [r7, #12]
9000747e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
90007480:	68fb      	ldr	r3, [r7, #12]
90007482:	681b      	ldr	r3, [r3, #0]
90007484:	60fb      	str	r3, [r7, #12]
90007486:	68fb      	ldr	r3, [r7, #12]
90007488:	681b      	ldr	r3, [r3, #0]
9000748a:	2b00      	cmp	r3, #0
9000748c:	d1f0      	bne.n	90007470 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
9000748e:	68fb      	ldr	r3, [r7, #12]
90007490:	891a      	ldrh	r2, [r3, #8]
90007492:	68fb      	ldr	r3, [r7, #12]
90007494:	895b      	ldrh	r3, [r3, #10]
90007496:	429a      	cmp	r2, r3
90007498:	d006      	beq.n	900074a8 <pbuf_cat+0x64>
9000749a:	4b10      	ldr	r3, [pc, #64]	; (900074dc <pbuf_cat+0x98>)
9000749c:	f240 3262 	movw	r2, #866	; 0x362
900074a0:	4911      	ldr	r1, [pc, #68]	; (900074e8 <pbuf_cat+0xa4>)
900074a2:	4810      	ldr	r0, [pc, #64]	; (900074e4 <pbuf_cat+0xa0>)
900074a4:	f009 f822 	bl	900104ec <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
900074a8:	68fb      	ldr	r3, [r7, #12]
900074aa:	681b      	ldr	r3, [r3, #0]
900074ac:	2b00      	cmp	r3, #0
900074ae:	d006      	beq.n	900074be <pbuf_cat+0x7a>
900074b0:	4b0a      	ldr	r3, [pc, #40]	; (900074dc <pbuf_cat+0x98>)
900074b2:	f240 3263 	movw	r2, #867	; 0x363
900074b6:	490d      	ldr	r1, [pc, #52]	; (900074ec <pbuf_cat+0xa8>)
900074b8:	480a      	ldr	r0, [pc, #40]	; (900074e4 <pbuf_cat+0xa0>)
900074ba:	f009 f817 	bl	900104ec <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
900074be:	68fb      	ldr	r3, [r7, #12]
900074c0:	891a      	ldrh	r2, [r3, #8]
900074c2:	683b      	ldr	r3, [r7, #0]
900074c4:	891b      	ldrh	r3, [r3, #8]
900074c6:	4413      	add	r3, r2
900074c8:	b29a      	uxth	r2, r3
900074ca:	68fb      	ldr	r3, [r7, #12]
900074cc:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
900074ce:	68fb      	ldr	r3, [r7, #12]
900074d0:	683a      	ldr	r2, [r7, #0]
900074d2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
900074d4:	3710      	adds	r7, #16
900074d6:	46bd      	mov	sp, r7
900074d8:	bd80      	pop	{r7, pc}
900074da:	bf00      	nop
900074dc:	900122bc 	.word	0x900122bc
900074e0:	900124b0 	.word	0x900124b0
900074e4:	9001231c 	.word	0x9001231c
900074e8:	900124e8 	.word	0x900124e8
900074ec:	90012518 	.word	0x90012518

900074f0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
900074f0:	b580      	push	{r7, lr}
900074f2:	b086      	sub	sp, #24
900074f4:	af00      	add	r7, sp, #0
900074f6:	6078      	str	r0, [r7, #4]
900074f8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
900074fa:	2300      	movs	r3, #0
900074fc:	617b      	str	r3, [r7, #20]
900074fe:	2300      	movs	r3, #0
90007500:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
90007502:	687b      	ldr	r3, [r7, #4]
90007504:	2b00      	cmp	r3, #0
90007506:	d008      	beq.n	9000751a <pbuf_copy+0x2a>
90007508:	683b      	ldr	r3, [r7, #0]
9000750a:	2b00      	cmp	r3, #0
9000750c:	d005      	beq.n	9000751a <pbuf_copy+0x2a>
9000750e:	687b      	ldr	r3, [r7, #4]
90007510:	891a      	ldrh	r2, [r3, #8]
90007512:	683b      	ldr	r3, [r7, #0]
90007514:	891b      	ldrh	r3, [r3, #8]
90007516:	429a      	cmp	r2, r3
90007518:	d209      	bcs.n	9000752e <pbuf_copy+0x3e>
9000751a:	4b57      	ldr	r3, [pc, #348]	; (90007678 <pbuf_copy+0x188>)
9000751c:	f240 32c9 	movw	r2, #969	; 0x3c9
90007520:	4956      	ldr	r1, [pc, #344]	; (9000767c <pbuf_copy+0x18c>)
90007522:	4857      	ldr	r0, [pc, #348]	; (90007680 <pbuf_copy+0x190>)
90007524:	f008 ffe2 	bl	900104ec <iprintf>
90007528:	f06f 030f 	mvn.w	r3, #15
9000752c:	e09f      	b.n	9000766e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
9000752e:	687b      	ldr	r3, [r7, #4]
90007530:	895b      	ldrh	r3, [r3, #10]
90007532:	461a      	mov	r2, r3
90007534:	697b      	ldr	r3, [r7, #20]
90007536:	1ad2      	subs	r2, r2, r3
90007538:	683b      	ldr	r3, [r7, #0]
9000753a:	895b      	ldrh	r3, [r3, #10]
9000753c:	4619      	mov	r1, r3
9000753e:	693b      	ldr	r3, [r7, #16]
90007540:	1acb      	subs	r3, r1, r3
90007542:	429a      	cmp	r2, r3
90007544:	d306      	bcc.n	90007554 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
90007546:	683b      	ldr	r3, [r7, #0]
90007548:	895b      	ldrh	r3, [r3, #10]
9000754a:	461a      	mov	r2, r3
9000754c:	693b      	ldr	r3, [r7, #16]
9000754e:	1ad3      	subs	r3, r2, r3
90007550:	60fb      	str	r3, [r7, #12]
90007552:	e005      	b.n	90007560 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
90007554:	687b      	ldr	r3, [r7, #4]
90007556:	895b      	ldrh	r3, [r3, #10]
90007558:	461a      	mov	r2, r3
9000755a:	697b      	ldr	r3, [r7, #20]
9000755c:	1ad3      	subs	r3, r2, r3
9000755e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
90007560:	687b      	ldr	r3, [r7, #4]
90007562:	685a      	ldr	r2, [r3, #4]
90007564:	697b      	ldr	r3, [r7, #20]
90007566:	18d0      	adds	r0, r2, r3
90007568:	683b      	ldr	r3, [r7, #0]
9000756a:	685a      	ldr	r2, [r3, #4]
9000756c:	693b      	ldr	r3, [r7, #16]
9000756e:	4413      	add	r3, r2
90007570:	68fa      	ldr	r2, [r7, #12]
90007572:	4619      	mov	r1, r3
90007574:	f008 ff8a 	bl	9001048c <memcpy>
    offset_to += len;
90007578:	697a      	ldr	r2, [r7, #20]
9000757a:	68fb      	ldr	r3, [r7, #12]
9000757c:	4413      	add	r3, r2
9000757e:	617b      	str	r3, [r7, #20]
    offset_from += len;
90007580:	693a      	ldr	r2, [r7, #16]
90007582:	68fb      	ldr	r3, [r7, #12]
90007584:	4413      	add	r3, r2
90007586:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
90007588:	687b      	ldr	r3, [r7, #4]
9000758a:	895b      	ldrh	r3, [r3, #10]
9000758c:	461a      	mov	r2, r3
9000758e:	697b      	ldr	r3, [r7, #20]
90007590:	4293      	cmp	r3, r2
90007592:	d906      	bls.n	900075a2 <pbuf_copy+0xb2>
90007594:	4b38      	ldr	r3, [pc, #224]	; (90007678 <pbuf_copy+0x188>)
90007596:	f240 32d9 	movw	r2, #985	; 0x3d9
9000759a:	493a      	ldr	r1, [pc, #232]	; (90007684 <pbuf_copy+0x194>)
9000759c:	4838      	ldr	r0, [pc, #224]	; (90007680 <pbuf_copy+0x190>)
9000759e:	f008 ffa5 	bl	900104ec <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
900075a2:	683b      	ldr	r3, [r7, #0]
900075a4:	895b      	ldrh	r3, [r3, #10]
900075a6:	461a      	mov	r2, r3
900075a8:	693b      	ldr	r3, [r7, #16]
900075aa:	4293      	cmp	r3, r2
900075ac:	d906      	bls.n	900075bc <pbuf_copy+0xcc>
900075ae:	4b32      	ldr	r3, [pc, #200]	; (90007678 <pbuf_copy+0x188>)
900075b0:	f240 32da 	movw	r2, #986	; 0x3da
900075b4:	4934      	ldr	r1, [pc, #208]	; (90007688 <pbuf_copy+0x198>)
900075b6:	4832      	ldr	r0, [pc, #200]	; (90007680 <pbuf_copy+0x190>)
900075b8:	f008 ff98 	bl	900104ec <iprintf>
    if (offset_from >= p_from->len) {
900075bc:	683b      	ldr	r3, [r7, #0]
900075be:	895b      	ldrh	r3, [r3, #10]
900075c0:	461a      	mov	r2, r3
900075c2:	693b      	ldr	r3, [r7, #16]
900075c4:	4293      	cmp	r3, r2
900075c6:	d304      	bcc.n	900075d2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
900075c8:	2300      	movs	r3, #0
900075ca:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
900075cc:	683b      	ldr	r3, [r7, #0]
900075ce:	681b      	ldr	r3, [r3, #0]
900075d0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
900075d2:	687b      	ldr	r3, [r7, #4]
900075d4:	895b      	ldrh	r3, [r3, #10]
900075d6:	461a      	mov	r2, r3
900075d8:	697b      	ldr	r3, [r7, #20]
900075da:	4293      	cmp	r3, r2
900075dc:	d114      	bne.n	90007608 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
900075de:	2300      	movs	r3, #0
900075e0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
900075e2:	687b      	ldr	r3, [r7, #4]
900075e4:	681b      	ldr	r3, [r3, #0]
900075e6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
900075e8:	687b      	ldr	r3, [r7, #4]
900075ea:	2b00      	cmp	r3, #0
900075ec:	d10c      	bne.n	90007608 <pbuf_copy+0x118>
900075ee:	683b      	ldr	r3, [r7, #0]
900075f0:	2b00      	cmp	r3, #0
900075f2:	d009      	beq.n	90007608 <pbuf_copy+0x118>
900075f4:	4b20      	ldr	r3, [pc, #128]	; (90007678 <pbuf_copy+0x188>)
900075f6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
900075fa:	4924      	ldr	r1, [pc, #144]	; (9000768c <pbuf_copy+0x19c>)
900075fc:	4820      	ldr	r0, [pc, #128]	; (90007680 <pbuf_copy+0x190>)
900075fe:	f008 ff75 	bl	900104ec <iprintf>
90007602:	f06f 030f 	mvn.w	r3, #15
90007606:	e032      	b.n	9000766e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
90007608:	683b      	ldr	r3, [r7, #0]
9000760a:	2b00      	cmp	r3, #0
9000760c:	d013      	beq.n	90007636 <pbuf_copy+0x146>
9000760e:	683b      	ldr	r3, [r7, #0]
90007610:	895a      	ldrh	r2, [r3, #10]
90007612:	683b      	ldr	r3, [r7, #0]
90007614:	891b      	ldrh	r3, [r3, #8]
90007616:	429a      	cmp	r2, r3
90007618:	d10d      	bne.n	90007636 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
9000761a:	683b      	ldr	r3, [r7, #0]
9000761c:	681b      	ldr	r3, [r3, #0]
9000761e:	2b00      	cmp	r3, #0
90007620:	d009      	beq.n	90007636 <pbuf_copy+0x146>
90007622:	4b15      	ldr	r3, [pc, #84]	; (90007678 <pbuf_copy+0x188>)
90007624:	f240 32e9 	movw	r2, #1001	; 0x3e9
90007628:	4919      	ldr	r1, [pc, #100]	; (90007690 <pbuf_copy+0x1a0>)
9000762a:	4815      	ldr	r0, [pc, #84]	; (90007680 <pbuf_copy+0x190>)
9000762c:	f008 ff5e 	bl	900104ec <iprintf>
90007630:	f06f 0305 	mvn.w	r3, #5
90007634:	e01b      	b.n	9000766e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
90007636:	687b      	ldr	r3, [r7, #4]
90007638:	2b00      	cmp	r3, #0
9000763a:	d013      	beq.n	90007664 <pbuf_copy+0x174>
9000763c:	687b      	ldr	r3, [r7, #4]
9000763e:	895a      	ldrh	r2, [r3, #10]
90007640:	687b      	ldr	r3, [r7, #4]
90007642:	891b      	ldrh	r3, [r3, #8]
90007644:	429a      	cmp	r2, r3
90007646:	d10d      	bne.n	90007664 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
90007648:	687b      	ldr	r3, [r7, #4]
9000764a:	681b      	ldr	r3, [r3, #0]
9000764c:	2b00      	cmp	r3, #0
9000764e:	d009      	beq.n	90007664 <pbuf_copy+0x174>
90007650:	4b09      	ldr	r3, [pc, #36]	; (90007678 <pbuf_copy+0x188>)
90007652:	f240 32ee 	movw	r2, #1006	; 0x3ee
90007656:	490e      	ldr	r1, [pc, #56]	; (90007690 <pbuf_copy+0x1a0>)
90007658:	4809      	ldr	r0, [pc, #36]	; (90007680 <pbuf_copy+0x190>)
9000765a:	f008 ff47 	bl	900104ec <iprintf>
9000765e:	f06f 0305 	mvn.w	r3, #5
90007662:	e004      	b.n	9000766e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
90007664:	683b      	ldr	r3, [r7, #0]
90007666:	2b00      	cmp	r3, #0
90007668:	f47f af61 	bne.w	9000752e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
9000766c:	2300      	movs	r3, #0
}
9000766e:	4618      	mov	r0, r3
90007670:	3718      	adds	r7, #24
90007672:	46bd      	mov	sp, r7
90007674:	bd80      	pop	{r7, pc}
90007676:	bf00      	nop
90007678:	900122bc 	.word	0x900122bc
9000767c:	90012564 	.word	0x90012564
90007680:	9001231c 	.word	0x9001231c
90007684:	90012594 	.word	0x90012594
90007688:	900125ac 	.word	0x900125ac
9000768c:	900125c8 	.word	0x900125c8
90007690:	900125d8 	.word	0x900125d8

90007694 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
90007694:	b580      	push	{r7, lr}
90007696:	b088      	sub	sp, #32
90007698:	af00      	add	r7, sp, #0
9000769a:	60f8      	str	r0, [r7, #12]
9000769c:	60b9      	str	r1, [r7, #8]
9000769e:	4611      	mov	r1, r2
900076a0:	461a      	mov	r2, r3
900076a2:	460b      	mov	r3, r1
900076a4:	80fb      	strh	r3, [r7, #6]
900076a6:	4613      	mov	r3, r2
900076a8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
900076aa:	2300      	movs	r3, #0
900076ac:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
900076ae:	2300      	movs	r3, #0
900076b0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
900076b2:	68fb      	ldr	r3, [r7, #12]
900076b4:	2b00      	cmp	r3, #0
900076b6:	d108      	bne.n	900076ca <pbuf_copy_partial+0x36>
900076b8:	4b2b      	ldr	r3, [pc, #172]	; (90007768 <pbuf_copy_partial+0xd4>)
900076ba:	f240 420a 	movw	r2, #1034	; 0x40a
900076be:	492b      	ldr	r1, [pc, #172]	; (9000776c <pbuf_copy_partial+0xd8>)
900076c0:	482b      	ldr	r0, [pc, #172]	; (90007770 <pbuf_copy_partial+0xdc>)
900076c2:	f008 ff13 	bl	900104ec <iprintf>
900076c6:	2300      	movs	r3, #0
900076c8:	e04a      	b.n	90007760 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
900076ca:	68bb      	ldr	r3, [r7, #8]
900076cc:	2b00      	cmp	r3, #0
900076ce:	d108      	bne.n	900076e2 <pbuf_copy_partial+0x4e>
900076d0:	4b25      	ldr	r3, [pc, #148]	; (90007768 <pbuf_copy_partial+0xd4>)
900076d2:	f240 420b 	movw	r2, #1035	; 0x40b
900076d6:	4927      	ldr	r1, [pc, #156]	; (90007774 <pbuf_copy_partial+0xe0>)
900076d8:	4825      	ldr	r0, [pc, #148]	; (90007770 <pbuf_copy_partial+0xdc>)
900076da:	f008 ff07 	bl	900104ec <iprintf>
900076de:	2300      	movs	r3, #0
900076e0:	e03e      	b.n	90007760 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
900076e2:	68fb      	ldr	r3, [r7, #12]
900076e4:	61fb      	str	r3, [r7, #28]
900076e6:	e034      	b.n	90007752 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
900076e8:	88bb      	ldrh	r3, [r7, #4]
900076ea:	2b00      	cmp	r3, #0
900076ec:	d00a      	beq.n	90007704 <pbuf_copy_partial+0x70>
900076ee:	69fb      	ldr	r3, [r7, #28]
900076f0:	895b      	ldrh	r3, [r3, #10]
900076f2:	88ba      	ldrh	r2, [r7, #4]
900076f4:	429a      	cmp	r2, r3
900076f6:	d305      	bcc.n	90007704 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
900076f8:	69fb      	ldr	r3, [r7, #28]
900076fa:	895b      	ldrh	r3, [r3, #10]
900076fc:	88ba      	ldrh	r2, [r7, #4]
900076fe:	1ad3      	subs	r3, r2, r3
90007700:	80bb      	strh	r3, [r7, #4]
90007702:	e023      	b.n	9000774c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
90007704:	69fb      	ldr	r3, [r7, #28]
90007706:	895a      	ldrh	r2, [r3, #10]
90007708:	88bb      	ldrh	r3, [r7, #4]
9000770a:	1ad3      	subs	r3, r2, r3
9000770c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
9000770e:	8b3a      	ldrh	r2, [r7, #24]
90007710:	88fb      	ldrh	r3, [r7, #6]
90007712:	429a      	cmp	r2, r3
90007714:	d901      	bls.n	9000771a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
90007716:	88fb      	ldrh	r3, [r7, #6]
90007718:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
9000771a:	8b7b      	ldrh	r3, [r7, #26]
9000771c:	68ba      	ldr	r2, [r7, #8]
9000771e:	18d0      	adds	r0, r2, r3
90007720:	69fb      	ldr	r3, [r7, #28]
90007722:	685a      	ldr	r2, [r3, #4]
90007724:	88bb      	ldrh	r3, [r7, #4]
90007726:	4413      	add	r3, r2
90007728:	8b3a      	ldrh	r2, [r7, #24]
9000772a:	4619      	mov	r1, r3
9000772c:	f008 feae 	bl	9001048c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
90007730:	8afa      	ldrh	r2, [r7, #22]
90007732:	8b3b      	ldrh	r3, [r7, #24]
90007734:	4413      	add	r3, r2
90007736:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
90007738:	8b7a      	ldrh	r2, [r7, #26]
9000773a:	8b3b      	ldrh	r3, [r7, #24]
9000773c:	4413      	add	r3, r2
9000773e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
90007740:	88fa      	ldrh	r2, [r7, #6]
90007742:	8b3b      	ldrh	r3, [r7, #24]
90007744:	1ad3      	subs	r3, r2, r3
90007746:	80fb      	strh	r3, [r7, #6]
      offset = 0;
90007748:	2300      	movs	r3, #0
9000774a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
9000774c:	69fb      	ldr	r3, [r7, #28]
9000774e:	681b      	ldr	r3, [r3, #0]
90007750:	61fb      	str	r3, [r7, #28]
90007752:	88fb      	ldrh	r3, [r7, #6]
90007754:	2b00      	cmp	r3, #0
90007756:	d002      	beq.n	9000775e <pbuf_copy_partial+0xca>
90007758:	69fb      	ldr	r3, [r7, #28]
9000775a:	2b00      	cmp	r3, #0
9000775c:	d1c4      	bne.n	900076e8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
9000775e:	8afb      	ldrh	r3, [r7, #22]
}
90007760:	4618      	mov	r0, r3
90007762:	3720      	adds	r7, #32
90007764:	46bd      	mov	sp, r7
90007766:	bd80      	pop	{r7, pc}
90007768:	900122bc 	.word	0x900122bc
9000776c:	90012604 	.word	0x90012604
90007770:	9001231c 	.word	0x9001231c
90007774:	90012624 	.word	0x90012624

90007778 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
90007778:	b580      	push	{r7, lr}
9000777a:	b084      	sub	sp, #16
9000777c:	af00      	add	r7, sp, #0
9000777e:	4603      	mov	r3, r0
90007780:	603a      	str	r2, [r7, #0]
90007782:	71fb      	strb	r3, [r7, #7]
90007784:	460b      	mov	r3, r1
90007786:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
90007788:	683b      	ldr	r3, [r7, #0]
9000778a:	8919      	ldrh	r1, [r3, #8]
9000778c:	88ba      	ldrh	r2, [r7, #4]
9000778e:	79fb      	ldrb	r3, [r7, #7]
90007790:	4618      	mov	r0, r3
90007792:	f7ff fab1 	bl	90006cf8 <pbuf_alloc>
90007796:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
90007798:	68fb      	ldr	r3, [r7, #12]
9000779a:	2b00      	cmp	r3, #0
9000779c:	d101      	bne.n	900077a2 <pbuf_clone+0x2a>
    return NULL;
9000779e:	2300      	movs	r3, #0
900077a0:	e011      	b.n	900077c6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
900077a2:	6839      	ldr	r1, [r7, #0]
900077a4:	68f8      	ldr	r0, [r7, #12]
900077a6:	f7ff fea3 	bl	900074f0 <pbuf_copy>
900077aa:	4603      	mov	r3, r0
900077ac:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
900077ae:	f997 300b 	ldrsb.w	r3, [r7, #11]
900077b2:	2b00      	cmp	r3, #0
900077b4:	d006      	beq.n	900077c4 <pbuf_clone+0x4c>
900077b6:	4b06      	ldr	r3, [pc, #24]	; (900077d0 <pbuf_clone+0x58>)
900077b8:	f240 5224 	movw	r2, #1316	; 0x524
900077bc:	4905      	ldr	r1, [pc, #20]	; (900077d4 <pbuf_clone+0x5c>)
900077be:	4806      	ldr	r0, [pc, #24]	; (900077d8 <pbuf_clone+0x60>)
900077c0:	f008 fe94 	bl	900104ec <iprintf>
  return q;
900077c4:	68fb      	ldr	r3, [r7, #12]
}
900077c6:	4618      	mov	r0, r3
900077c8:	3710      	adds	r7, #16
900077ca:	46bd      	mov	sp, r7
900077cc:	bd80      	pop	{r7, pc}
900077ce:	bf00      	nop
900077d0:	900122bc 	.word	0x900122bc
900077d4:	90012730 	.word	0x90012730
900077d8:	9001231c 	.word	0x9001231c

900077dc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
900077dc:	b580      	push	{r7, lr}
900077de:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
900077e0:	f008 fe9c 	bl	9001051c <rand>
900077e4:	4603      	mov	r3, r0
900077e6:	b29b      	uxth	r3, r3
900077e8:	f3c3 030d 	ubfx	r3, r3, #0, #14
900077ec:	b29b      	uxth	r3, r3
900077ee:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
900077f2:	b29a      	uxth	r2, r3
900077f4:	4b01      	ldr	r3, [pc, #4]	; (900077fc <tcp_init+0x20>)
900077f6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
900077f8:	bf00      	nop
900077fa:	bd80      	pop	{r7, pc}
900077fc:	20000030 	.word	0x20000030

90007800 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
90007800:	b580      	push	{r7, lr}
90007802:	b082      	sub	sp, #8
90007804:	af00      	add	r7, sp, #0
90007806:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
90007808:	687b      	ldr	r3, [r7, #4]
9000780a:	7d1b      	ldrb	r3, [r3, #20]
9000780c:	2b01      	cmp	r3, #1
9000780e:	d105      	bne.n	9000781c <tcp_free+0x1c>
90007810:	4b06      	ldr	r3, [pc, #24]	; (9000782c <tcp_free+0x2c>)
90007812:	22d4      	movs	r2, #212	; 0xd4
90007814:	4906      	ldr	r1, [pc, #24]	; (90007830 <tcp_free+0x30>)
90007816:	4807      	ldr	r0, [pc, #28]	; (90007834 <tcp_free+0x34>)
90007818:	f008 fe68 	bl	900104ec <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
9000781c:	6879      	ldr	r1, [r7, #4]
9000781e:	2001      	movs	r0, #1
90007820:	f7fe fed8 	bl	900065d4 <memp_free>
}
90007824:	bf00      	nop
90007826:	3708      	adds	r7, #8
90007828:	46bd      	mov	sp, r7
9000782a:	bd80      	pop	{r7, pc}
9000782c:	900127bc 	.word	0x900127bc
90007830:	900127ec 	.word	0x900127ec
90007834:	90012800 	.word	0x90012800

90007838 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
90007838:	b580      	push	{r7, lr}
9000783a:	b082      	sub	sp, #8
9000783c:	af00      	add	r7, sp, #0
9000783e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
90007840:	687b      	ldr	r3, [r7, #4]
90007842:	7d1b      	ldrb	r3, [r3, #20]
90007844:	2b01      	cmp	r3, #1
90007846:	d105      	bne.n	90007854 <tcp_free_listen+0x1c>
90007848:	4b06      	ldr	r3, [pc, #24]	; (90007864 <tcp_free_listen+0x2c>)
9000784a:	22df      	movs	r2, #223	; 0xdf
9000784c:	4906      	ldr	r1, [pc, #24]	; (90007868 <tcp_free_listen+0x30>)
9000784e:	4807      	ldr	r0, [pc, #28]	; (9000786c <tcp_free_listen+0x34>)
90007850:	f008 fe4c 	bl	900104ec <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
90007854:	6879      	ldr	r1, [r7, #4]
90007856:	2002      	movs	r0, #2
90007858:	f7fe febc 	bl	900065d4 <memp_free>
}
9000785c:	bf00      	nop
9000785e:	3708      	adds	r7, #8
90007860:	46bd      	mov	sp, r7
90007862:	bd80      	pop	{r7, pc}
90007864:	900127bc 	.word	0x900127bc
90007868:	90012828 	.word	0x90012828
9000786c:	90012800 	.word	0x90012800

90007870 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
90007870:	b580      	push	{r7, lr}
90007872:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
90007874:	f001 f85c 	bl	90008930 <tcp_fasttmr>

  if (++tcp_timer & 1) {
90007878:	4b07      	ldr	r3, [pc, #28]	; (90007898 <tcp_tmr+0x28>)
9000787a:	781b      	ldrb	r3, [r3, #0]
9000787c:	3301      	adds	r3, #1
9000787e:	b2da      	uxtb	r2, r3
90007880:	4b05      	ldr	r3, [pc, #20]	; (90007898 <tcp_tmr+0x28>)
90007882:	701a      	strb	r2, [r3, #0]
90007884:	4b04      	ldr	r3, [pc, #16]	; (90007898 <tcp_tmr+0x28>)
90007886:	781b      	ldrb	r3, [r3, #0]
90007888:	f003 0301 	and.w	r3, r3, #1
9000788c:	2b00      	cmp	r3, #0
9000788e:	d001      	beq.n	90007894 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
90007890:	f000 fd0e 	bl	900082b0 <tcp_slowtmr>
  }
}
90007894:	bf00      	nop
90007896:	bd80      	pop	{r7, pc}
90007898:	2000a8b5 	.word	0x2000a8b5

9000789c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
9000789c:	b580      	push	{r7, lr}
9000789e:	b084      	sub	sp, #16
900078a0:	af00      	add	r7, sp, #0
900078a2:	6078      	str	r0, [r7, #4]
900078a4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
900078a6:	683b      	ldr	r3, [r7, #0]
900078a8:	2b00      	cmp	r3, #0
900078aa:	d105      	bne.n	900078b8 <tcp_remove_listener+0x1c>
900078ac:	4b0d      	ldr	r3, [pc, #52]	; (900078e4 <tcp_remove_listener+0x48>)
900078ae:	22ff      	movs	r2, #255	; 0xff
900078b0:	490d      	ldr	r1, [pc, #52]	; (900078e8 <tcp_remove_listener+0x4c>)
900078b2:	480e      	ldr	r0, [pc, #56]	; (900078ec <tcp_remove_listener+0x50>)
900078b4:	f008 fe1a 	bl	900104ec <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
900078b8:	687b      	ldr	r3, [r7, #4]
900078ba:	60fb      	str	r3, [r7, #12]
900078bc:	e00a      	b.n	900078d4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
900078be:	68fb      	ldr	r3, [r7, #12]
900078c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
900078c2:	683a      	ldr	r2, [r7, #0]
900078c4:	429a      	cmp	r2, r3
900078c6:	d102      	bne.n	900078ce <tcp_remove_listener+0x32>
      pcb->listener = NULL;
900078c8:	68fb      	ldr	r3, [r7, #12]
900078ca:	2200      	movs	r2, #0
900078cc:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
900078ce:	68fb      	ldr	r3, [r7, #12]
900078d0:	68db      	ldr	r3, [r3, #12]
900078d2:	60fb      	str	r3, [r7, #12]
900078d4:	68fb      	ldr	r3, [r7, #12]
900078d6:	2b00      	cmp	r3, #0
900078d8:	d1f1      	bne.n	900078be <tcp_remove_listener+0x22>
    }
  }
}
900078da:	bf00      	nop
900078dc:	bf00      	nop
900078de:	3710      	adds	r7, #16
900078e0:	46bd      	mov	sp, r7
900078e2:	bd80      	pop	{r7, pc}
900078e4:	900127bc 	.word	0x900127bc
900078e8:	90012844 	.word	0x90012844
900078ec:	90012800 	.word	0x90012800

900078f0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
900078f0:	b580      	push	{r7, lr}
900078f2:	b084      	sub	sp, #16
900078f4:	af00      	add	r7, sp, #0
900078f6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
900078f8:	687b      	ldr	r3, [r7, #4]
900078fa:	2b00      	cmp	r3, #0
900078fc:	d106      	bne.n	9000790c <tcp_listen_closed+0x1c>
900078fe:	4b14      	ldr	r3, [pc, #80]	; (90007950 <tcp_listen_closed+0x60>)
90007900:	f240 1211 	movw	r2, #273	; 0x111
90007904:	4913      	ldr	r1, [pc, #76]	; (90007954 <tcp_listen_closed+0x64>)
90007906:	4814      	ldr	r0, [pc, #80]	; (90007958 <tcp_listen_closed+0x68>)
90007908:	f008 fdf0 	bl	900104ec <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
9000790c:	687b      	ldr	r3, [r7, #4]
9000790e:	7d1b      	ldrb	r3, [r3, #20]
90007910:	2b01      	cmp	r3, #1
90007912:	d006      	beq.n	90007922 <tcp_listen_closed+0x32>
90007914:	4b0e      	ldr	r3, [pc, #56]	; (90007950 <tcp_listen_closed+0x60>)
90007916:	f44f 7289 	mov.w	r2, #274	; 0x112
9000791a:	4910      	ldr	r1, [pc, #64]	; (9000795c <tcp_listen_closed+0x6c>)
9000791c:	480e      	ldr	r0, [pc, #56]	; (90007958 <tcp_listen_closed+0x68>)
9000791e:	f008 fde5 	bl	900104ec <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
90007922:	2301      	movs	r3, #1
90007924:	60fb      	str	r3, [r7, #12]
90007926:	e00b      	b.n	90007940 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
90007928:	4a0d      	ldr	r2, [pc, #52]	; (90007960 <tcp_listen_closed+0x70>)
9000792a:	68fb      	ldr	r3, [r7, #12]
9000792c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90007930:	681b      	ldr	r3, [r3, #0]
90007932:	6879      	ldr	r1, [r7, #4]
90007934:	4618      	mov	r0, r3
90007936:	f7ff ffb1 	bl	9000789c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
9000793a:	68fb      	ldr	r3, [r7, #12]
9000793c:	3301      	adds	r3, #1
9000793e:	60fb      	str	r3, [r7, #12]
90007940:	68fb      	ldr	r3, [r7, #12]
90007942:	2b03      	cmp	r3, #3
90007944:	d9f0      	bls.n	90007928 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
90007946:	bf00      	nop
90007948:	bf00      	nop
9000794a:	3710      	adds	r7, #16
9000794c:	46bd      	mov	sp, r7
9000794e:	bd80      	pop	{r7, pc}
90007950:	900127bc 	.word	0x900127bc
90007954:	9001286c 	.word	0x9001286c
90007958:	90012800 	.word	0x90012800
9000795c:	90012878 	.word	0x90012878
90007960:	90015b00 	.word	0x90015b00

90007964 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
90007964:	b5b0      	push	{r4, r5, r7, lr}
90007966:	b088      	sub	sp, #32
90007968:	af04      	add	r7, sp, #16
9000796a:	6078      	str	r0, [r7, #4]
9000796c:	460b      	mov	r3, r1
9000796e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
90007970:	687b      	ldr	r3, [r7, #4]
90007972:	2b00      	cmp	r3, #0
90007974:	d106      	bne.n	90007984 <tcp_close_shutdown+0x20>
90007976:	4b63      	ldr	r3, [pc, #396]	; (90007b04 <tcp_close_shutdown+0x1a0>)
90007978:	f44f 72af 	mov.w	r2, #350	; 0x15e
9000797c:	4962      	ldr	r1, [pc, #392]	; (90007b08 <tcp_close_shutdown+0x1a4>)
9000797e:	4863      	ldr	r0, [pc, #396]	; (90007b0c <tcp_close_shutdown+0x1a8>)
90007980:	f008 fdb4 	bl	900104ec <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
90007984:	78fb      	ldrb	r3, [r7, #3]
90007986:	2b00      	cmp	r3, #0
90007988:	d066      	beq.n	90007a58 <tcp_close_shutdown+0xf4>
9000798a:	687b      	ldr	r3, [r7, #4]
9000798c:	7d1b      	ldrb	r3, [r3, #20]
9000798e:	2b04      	cmp	r3, #4
90007990:	d003      	beq.n	9000799a <tcp_close_shutdown+0x36>
90007992:	687b      	ldr	r3, [r7, #4]
90007994:	7d1b      	ldrb	r3, [r3, #20]
90007996:	2b07      	cmp	r3, #7
90007998:	d15e      	bne.n	90007a58 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
9000799a:	687b      	ldr	r3, [r7, #4]
9000799c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
9000799e:	2b00      	cmp	r3, #0
900079a0:	d104      	bne.n	900079ac <tcp_close_shutdown+0x48>
900079a2:	687b      	ldr	r3, [r7, #4]
900079a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
900079a6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
900079aa:	d055      	beq.n	90007a58 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
900079ac:	687b      	ldr	r3, [r7, #4]
900079ae:	8b5b      	ldrh	r3, [r3, #26]
900079b0:	f003 0310 	and.w	r3, r3, #16
900079b4:	2b00      	cmp	r3, #0
900079b6:	d106      	bne.n	900079c6 <tcp_close_shutdown+0x62>
900079b8:	4b52      	ldr	r3, [pc, #328]	; (90007b04 <tcp_close_shutdown+0x1a0>)
900079ba:	f44f 72b2 	mov.w	r2, #356	; 0x164
900079be:	4954      	ldr	r1, [pc, #336]	; (90007b10 <tcp_close_shutdown+0x1ac>)
900079c0:	4852      	ldr	r0, [pc, #328]	; (90007b0c <tcp_close_shutdown+0x1a8>)
900079c2:	f008 fd93 	bl	900104ec <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
900079c6:	687b      	ldr	r3, [r7, #4]
900079c8:	6d18      	ldr	r0, [r3, #80]	; 0x50
900079ca:	687b      	ldr	r3, [r7, #4]
900079cc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
900079ce:	687d      	ldr	r5, [r7, #4]
900079d0:	687b      	ldr	r3, [r7, #4]
900079d2:	3304      	adds	r3, #4
900079d4:	687a      	ldr	r2, [r7, #4]
900079d6:	8ad2      	ldrh	r2, [r2, #22]
900079d8:	6879      	ldr	r1, [r7, #4]
900079da:	8b09      	ldrh	r1, [r1, #24]
900079dc:	9102      	str	r1, [sp, #8]
900079de:	9201      	str	r2, [sp, #4]
900079e0:	9300      	str	r3, [sp, #0]
900079e2:	462b      	mov	r3, r5
900079e4:	4622      	mov	r2, r4
900079e6:	4601      	mov	r1, r0
900079e8:	6878      	ldr	r0, [r7, #4]
900079ea:	f005 fd8f 	bl	9000d50c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
900079ee:	6878      	ldr	r0, [r7, #4]
900079f0:	f001 fb6c 	bl	900090cc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
900079f4:	4b47      	ldr	r3, [pc, #284]	; (90007b14 <tcp_close_shutdown+0x1b0>)
900079f6:	681b      	ldr	r3, [r3, #0]
900079f8:	687a      	ldr	r2, [r7, #4]
900079fa:	429a      	cmp	r2, r3
900079fc:	d105      	bne.n	90007a0a <tcp_close_shutdown+0xa6>
900079fe:	4b45      	ldr	r3, [pc, #276]	; (90007b14 <tcp_close_shutdown+0x1b0>)
90007a00:	681b      	ldr	r3, [r3, #0]
90007a02:	68db      	ldr	r3, [r3, #12]
90007a04:	4a43      	ldr	r2, [pc, #268]	; (90007b14 <tcp_close_shutdown+0x1b0>)
90007a06:	6013      	str	r3, [r2, #0]
90007a08:	e013      	b.n	90007a32 <tcp_close_shutdown+0xce>
90007a0a:	4b42      	ldr	r3, [pc, #264]	; (90007b14 <tcp_close_shutdown+0x1b0>)
90007a0c:	681b      	ldr	r3, [r3, #0]
90007a0e:	60fb      	str	r3, [r7, #12]
90007a10:	e00c      	b.n	90007a2c <tcp_close_shutdown+0xc8>
90007a12:	68fb      	ldr	r3, [r7, #12]
90007a14:	68db      	ldr	r3, [r3, #12]
90007a16:	687a      	ldr	r2, [r7, #4]
90007a18:	429a      	cmp	r2, r3
90007a1a:	d104      	bne.n	90007a26 <tcp_close_shutdown+0xc2>
90007a1c:	687b      	ldr	r3, [r7, #4]
90007a1e:	68da      	ldr	r2, [r3, #12]
90007a20:	68fb      	ldr	r3, [r7, #12]
90007a22:	60da      	str	r2, [r3, #12]
90007a24:	e005      	b.n	90007a32 <tcp_close_shutdown+0xce>
90007a26:	68fb      	ldr	r3, [r7, #12]
90007a28:	68db      	ldr	r3, [r3, #12]
90007a2a:	60fb      	str	r3, [r7, #12]
90007a2c:	68fb      	ldr	r3, [r7, #12]
90007a2e:	2b00      	cmp	r3, #0
90007a30:	d1ef      	bne.n	90007a12 <tcp_close_shutdown+0xae>
90007a32:	687b      	ldr	r3, [r7, #4]
90007a34:	2200      	movs	r2, #0
90007a36:	60da      	str	r2, [r3, #12]
90007a38:	4b37      	ldr	r3, [pc, #220]	; (90007b18 <tcp_close_shutdown+0x1b4>)
90007a3a:	2201      	movs	r2, #1
90007a3c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
90007a3e:	4b37      	ldr	r3, [pc, #220]	; (90007b1c <tcp_close_shutdown+0x1b8>)
90007a40:	681b      	ldr	r3, [r3, #0]
90007a42:	687a      	ldr	r2, [r7, #4]
90007a44:	429a      	cmp	r2, r3
90007a46:	d102      	bne.n	90007a4e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
90007a48:	f004 f804 	bl	9000ba54 <tcp_trigger_input_pcb_close>
90007a4c:	e002      	b.n	90007a54 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
90007a4e:	6878      	ldr	r0, [r7, #4]
90007a50:	f7ff fed6 	bl	90007800 <tcp_free>
      }
      return ERR_OK;
90007a54:	2300      	movs	r3, #0
90007a56:	e050      	b.n	90007afa <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
90007a58:	687b      	ldr	r3, [r7, #4]
90007a5a:	7d1b      	ldrb	r3, [r3, #20]
90007a5c:	2b02      	cmp	r3, #2
90007a5e:	d03b      	beq.n	90007ad8 <tcp_close_shutdown+0x174>
90007a60:	2b02      	cmp	r3, #2
90007a62:	dc44      	bgt.n	90007aee <tcp_close_shutdown+0x18a>
90007a64:	2b00      	cmp	r3, #0
90007a66:	d002      	beq.n	90007a6e <tcp_close_shutdown+0x10a>
90007a68:	2b01      	cmp	r3, #1
90007a6a:	d02a      	beq.n	90007ac2 <tcp_close_shutdown+0x15e>
90007a6c:	e03f      	b.n	90007aee <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
90007a6e:	687b      	ldr	r3, [r7, #4]
90007a70:	8adb      	ldrh	r3, [r3, #22]
90007a72:	2b00      	cmp	r3, #0
90007a74:	d021      	beq.n	90007aba <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
90007a76:	4b2a      	ldr	r3, [pc, #168]	; (90007b20 <tcp_close_shutdown+0x1bc>)
90007a78:	681b      	ldr	r3, [r3, #0]
90007a7a:	687a      	ldr	r2, [r7, #4]
90007a7c:	429a      	cmp	r2, r3
90007a7e:	d105      	bne.n	90007a8c <tcp_close_shutdown+0x128>
90007a80:	4b27      	ldr	r3, [pc, #156]	; (90007b20 <tcp_close_shutdown+0x1bc>)
90007a82:	681b      	ldr	r3, [r3, #0]
90007a84:	68db      	ldr	r3, [r3, #12]
90007a86:	4a26      	ldr	r2, [pc, #152]	; (90007b20 <tcp_close_shutdown+0x1bc>)
90007a88:	6013      	str	r3, [r2, #0]
90007a8a:	e013      	b.n	90007ab4 <tcp_close_shutdown+0x150>
90007a8c:	4b24      	ldr	r3, [pc, #144]	; (90007b20 <tcp_close_shutdown+0x1bc>)
90007a8e:	681b      	ldr	r3, [r3, #0]
90007a90:	60bb      	str	r3, [r7, #8]
90007a92:	e00c      	b.n	90007aae <tcp_close_shutdown+0x14a>
90007a94:	68bb      	ldr	r3, [r7, #8]
90007a96:	68db      	ldr	r3, [r3, #12]
90007a98:	687a      	ldr	r2, [r7, #4]
90007a9a:	429a      	cmp	r2, r3
90007a9c:	d104      	bne.n	90007aa8 <tcp_close_shutdown+0x144>
90007a9e:	687b      	ldr	r3, [r7, #4]
90007aa0:	68da      	ldr	r2, [r3, #12]
90007aa2:	68bb      	ldr	r3, [r7, #8]
90007aa4:	60da      	str	r2, [r3, #12]
90007aa6:	e005      	b.n	90007ab4 <tcp_close_shutdown+0x150>
90007aa8:	68bb      	ldr	r3, [r7, #8]
90007aaa:	68db      	ldr	r3, [r3, #12]
90007aac:	60bb      	str	r3, [r7, #8]
90007aae:	68bb      	ldr	r3, [r7, #8]
90007ab0:	2b00      	cmp	r3, #0
90007ab2:	d1ef      	bne.n	90007a94 <tcp_close_shutdown+0x130>
90007ab4:	687b      	ldr	r3, [r7, #4]
90007ab6:	2200      	movs	r2, #0
90007ab8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
90007aba:	6878      	ldr	r0, [r7, #4]
90007abc:	f7ff fea0 	bl	90007800 <tcp_free>
      break;
90007ac0:	e01a      	b.n	90007af8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
90007ac2:	6878      	ldr	r0, [r7, #4]
90007ac4:	f7ff ff14 	bl	900078f0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
90007ac8:	6879      	ldr	r1, [r7, #4]
90007aca:	4816      	ldr	r0, [pc, #88]	; (90007b24 <tcp_close_shutdown+0x1c0>)
90007acc:	f001 fb4e 	bl	9000916c <tcp_pcb_remove>
      tcp_free_listen(pcb);
90007ad0:	6878      	ldr	r0, [r7, #4]
90007ad2:	f7ff feb1 	bl	90007838 <tcp_free_listen>
      break;
90007ad6:	e00f      	b.n	90007af8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
90007ad8:	6879      	ldr	r1, [r7, #4]
90007ada:	480e      	ldr	r0, [pc, #56]	; (90007b14 <tcp_close_shutdown+0x1b0>)
90007adc:	f001 fb46 	bl	9000916c <tcp_pcb_remove>
90007ae0:	4b0d      	ldr	r3, [pc, #52]	; (90007b18 <tcp_close_shutdown+0x1b4>)
90007ae2:	2201      	movs	r2, #1
90007ae4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
90007ae6:	6878      	ldr	r0, [r7, #4]
90007ae8:	f7ff fe8a 	bl	90007800 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
90007aec:	e004      	b.n	90007af8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
90007aee:	6878      	ldr	r0, [r7, #4]
90007af0:	f000 f81a 	bl	90007b28 <tcp_close_shutdown_fin>
90007af4:	4603      	mov	r3, r0
90007af6:	e000      	b.n	90007afa <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
90007af8:	2300      	movs	r3, #0
}
90007afa:	4618      	mov	r0, r3
90007afc:	3710      	adds	r7, #16
90007afe:	46bd      	mov	sp, r7
90007b00:	bdb0      	pop	{r4, r5, r7, pc}
90007b02:	bf00      	nop
90007b04:	900127bc 	.word	0x900127bc
90007b08:	90012890 	.word	0x90012890
90007b0c:	90012800 	.word	0x90012800
90007b10:	900128b0 	.word	0x900128b0
90007b14:	2000a8ac 	.word	0x2000a8ac
90007b18:	2000a8b4 	.word	0x2000a8b4
90007b1c:	2000a8ec 	.word	0x2000a8ec
90007b20:	2000a8a4 	.word	0x2000a8a4
90007b24:	2000a8a8 	.word	0x2000a8a8

90007b28 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
90007b28:	b580      	push	{r7, lr}
90007b2a:	b084      	sub	sp, #16
90007b2c:	af00      	add	r7, sp, #0
90007b2e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
90007b30:	687b      	ldr	r3, [r7, #4]
90007b32:	2b00      	cmp	r3, #0
90007b34:	d106      	bne.n	90007b44 <tcp_close_shutdown_fin+0x1c>
90007b36:	4b2e      	ldr	r3, [pc, #184]	; (90007bf0 <tcp_close_shutdown_fin+0xc8>)
90007b38:	f44f 72ce 	mov.w	r2, #412	; 0x19c
90007b3c:	492d      	ldr	r1, [pc, #180]	; (90007bf4 <tcp_close_shutdown_fin+0xcc>)
90007b3e:	482e      	ldr	r0, [pc, #184]	; (90007bf8 <tcp_close_shutdown_fin+0xd0>)
90007b40:	f008 fcd4 	bl	900104ec <iprintf>

  switch (pcb->state) {
90007b44:	687b      	ldr	r3, [r7, #4]
90007b46:	7d1b      	ldrb	r3, [r3, #20]
90007b48:	2b07      	cmp	r3, #7
90007b4a:	d020      	beq.n	90007b8e <tcp_close_shutdown_fin+0x66>
90007b4c:	2b07      	cmp	r3, #7
90007b4e:	dc2b      	bgt.n	90007ba8 <tcp_close_shutdown_fin+0x80>
90007b50:	2b03      	cmp	r3, #3
90007b52:	d002      	beq.n	90007b5a <tcp_close_shutdown_fin+0x32>
90007b54:	2b04      	cmp	r3, #4
90007b56:	d00d      	beq.n	90007b74 <tcp_close_shutdown_fin+0x4c>
90007b58:	e026      	b.n	90007ba8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
90007b5a:	6878      	ldr	r0, [r7, #4]
90007b5c:	f004 fde4 	bl	9000c728 <tcp_send_fin>
90007b60:	4603      	mov	r3, r0
90007b62:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
90007b64:	f997 300f 	ldrsb.w	r3, [r7, #15]
90007b68:	2b00      	cmp	r3, #0
90007b6a:	d11f      	bne.n	90007bac <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
90007b6c:	687b      	ldr	r3, [r7, #4]
90007b6e:	2205      	movs	r2, #5
90007b70:	751a      	strb	r2, [r3, #20]
      }
      break;
90007b72:	e01b      	b.n	90007bac <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
90007b74:	6878      	ldr	r0, [r7, #4]
90007b76:	f004 fdd7 	bl	9000c728 <tcp_send_fin>
90007b7a:	4603      	mov	r3, r0
90007b7c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
90007b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
90007b82:	2b00      	cmp	r3, #0
90007b84:	d114      	bne.n	90007bb0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
90007b86:	687b      	ldr	r3, [r7, #4]
90007b88:	2205      	movs	r2, #5
90007b8a:	751a      	strb	r2, [r3, #20]
      }
      break;
90007b8c:	e010      	b.n	90007bb0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
90007b8e:	6878      	ldr	r0, [r7, #4]
90007b90:	f004 fdca 	bl	9000c728 <tcp_send_fin>
90007b94:	4603      	mov	r3, r0
90007b96:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
90007b98:	f997 300f 	ldrsb.w	r3, [r7, #15]
90007b9c:	2b00      	cmp	r3, #0
90007b9e:	d109      	bne.n	90007bb4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
90007ba0:	687b      	ldr	r3, [r7, #4]
90007ba2:	2209      	movs	r2, #9
90007ba4:	751a      	strb	r2, [r3, #20]
      }
      break;
90007ba6:	e005      	b.n	90007bb4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
90007ba8:	2300      	movs	r3, #0
90007baa:	e01c      	b.n	90007be6 <tcp_close_shutdown_fin+0xbe>
      break;
90007bac:	bf00      	nop
90007bae:	e002      	b.n	90007bb6 <tcp_close_shutdown_fin+0x8e>
      break;
90007bb0:	bf00      	nop
90007bb2:	e000      	b.n	90007bb6 <tcp_close_shutdown_fin+0x8e>
      break;
90007bb4:	bf00      	nop
  }

  if (err == ERR_OK) {
90007bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
90007bba:	2b00      	cmp	r3, #0
90007bbc:	d103      	bne.n	90007bc6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
90007bbe:	6878      	ldr	r0, [r7, #4]
90007bc0:	f004 fef0 	bl	9000c9a4 <tcp_output>
90007bc4:	e00d      	b.n	90007be2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
90007bc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
90007bca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
90007bce:	d108      	bne.n	90007be2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
90007bd0:	687b      	ldr	r3, [r7, #4]
90007bd2:	8b5b      	ldrh	r3, [r3, #26]
90007bd4:	f043 0308 	orr.w	r3, r3, #8
90007bd8:	b29a      	uxth	r2, r3
90007bda:	687b      	ldr	r3, [r7, #4]
90007bdc:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
90007bde:	2300      	movs	r3, #0
90007be0:	e001      	b.n	90007be6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
90007be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
90007be6:	4618      	mov	r0, r3
90007be8:	3710      	adds	r7, #16
90007bea:	46bd      	mov	sp, r7
90007bec:	bd80      	pop	{r7, pc}
90007bee:	bf00      	nop
90007bf0:	900127bc 	.word	0x900127bc
90007bf4:	9001286c 	.word	0x9001286c
90007bf8:	90012800 	.word	0x90012800

90007bfc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
90007bfc:	b580      	push	{r7, lr}
90007bfe:	b082      	sub	sp, #8
90007c00:	af00      	add	r7, sp, #0
90007c02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
90007c04:	687b      	ldr	r3, [r7, #4]
90007c06:	2b00      	cmp	r3, #0
90007c08:	d109      	bne.n	90007c1e <tcp_close+0x22>
90007c0a:	4b0f      	ldr	r3, [pc, #60]	; (90007c48 <tcp_close+0x4c>)
90007c0c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
90007c10:	490e      	ldr	r1, [pc, #56]	; (90007c4c <tcp_close+0x50>)
90007c12:	480f      	ldr	r0, [pc, #60]	; (90007c50 <tcp_close+0x54>)
90007c14:	f008 fc6a 	bl	900104ec <iprintf>
90007c18:	f06f 030f 	mvn.w	r3, #15
90007c1c:	e00f      	b.n	90007c3e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
90007c1e:	687b      	ldr	r3, [r7, #4]
90007c20:	7d1b      	ldrb	r3, [r3, #20]
90007c22:	2b01      	cmp	r3, #1
90007c24:	d006      	beq.n	90007c34 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
90007c26:	687b      	ldr	r3, [r7, #4]
90007c28:	8b5b      	ldrh	r3, [r3, #26]
90007c2a:	f043 0310 	orr.w	r3, r3, #16
90007c2e:	b29a      	uxth	r2, r3
90007c30:	687b      	ldr	r3, [r7, #4]
90007c32:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
90007c34:	2101      	movs	r1, #1
90007c36:	6878      	ldr	r0, [r7, #4]
90007c38:	f7ff fe94 	bl	90007964 <tcp_close_shutdown>
90007c3c:	4603      	mov	r3, r0
}
90007c3e:	4618      	mov	r0, r3
90007c40:	3708      	adds	r7, #8
90007c42:	46bd      	mov	sp, r7
90007c44:	bd80      	pop	{r7, pc}
90007c46:	bf00      	nop
90007c48:	900127bc 	.word	0x900127bc
90007c4c:	900128cc 	.word	0x900128cc
90007c50:	90012800 	.word	0x90012800

90007c54 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
90007c54:	b580      	push	{r7, lr}
90007c56:	b08e      	sub	sp, #56	; 0x38
90007c58:	af04      	add	r7, sp, #16
90007c5a:	6078      	str	r0, [r7, #4]
90007c5c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
90007c5e:	687b      	ldr	r3, [r7, #4]
90007c60:	2b00      	cmp	r3, #0
90007c62:	d107      	bne.n	90007c74 <tcp_abandon+0x20>
90007c64:	4b52      	ldr	r3, [pc, #328]	; (90007db0 <tcp_abandon+0x15c>)
90007c66:	f240 223d 	movw	r2, #573	; 0x23d
90007c6a:	4952      	ldr	r1, [pc, #328]	; (90007db4 <tcp_abandon+0x160>)
90007c6c:	4852      	ldr	r0, [pc, #328]	; (90007db8 <tcp_abandon+0x164>)
90007c6e:	f008 fc3d 	bl	900104ec <iprintf>
90007c72:	e099      	b.n	90007da8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
90007c74:	687b      	ldr	r3, [r7, #4]
90007c76:	7d1b      	ldrb	r3, [r3, #20]
90007c78:	2b01      	cmp	r3, #1
90007c7a:	d106      	bne.n	90007c8a <tcp_abandon+0x36>
90007c7c:	4b4c      	ldr	r3, [pc, #304]	; (90007db0 <tcp_abandon+0x15c>)
90007c7e:	f44f 7210 	mov.w	r2, #576	; 0x240
90007c82:	494e      	ldr	r1, [pc, #312]	; (90007dbc <tcp_abandon+0x168>)
90007c84:	484c      	ldr	r0, [pc, #304]	; (90007db8 <tcp_abandon+0x164>)
90007c86:	f008 fc31 	bl	900104ec <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
90007c8a:	687b      	ldr	r3, [r7, #4]
90007c8c:	7d1b      	ldrb	r3, [r3, #20]
90007c8e:	2b0a      	cmp	r3, #10
90007c90:	d107      	bne.n	90007ca2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
90007c92:	6879      	ldr	r1, [r7, #4]
90007c94:	484a      	ldr	r0, [pc, #296]	; (90007dc0 <tcp_abandon+0x16c>)
90007c96:	f001 fa69 	bl	9000916c <tcp_pcb_remove>
    tcp_free(pcb);
90007c9a:	6878      	ldr	r0, [r7, #4]
90007c9c:	f7ff fdb0 	bl	90007800 <tcp_free>
90007ca0:	e082      	b.n	90007da8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
90007ca2:	2300      	movs	r3, #0
90007ca4:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
90007ca6:	2300      	movs	r3, #0
90007ca8:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
90007caa:	687b      	ldr	r3, [r7, #4]
90007cac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90007cae:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
90007cb0:	687b      	ldr	r3, [r7, #4]
90007cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90007cb4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
90007cb6:	687b      	ldr	r3, [r7, #4]
90007cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90007cbc:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
90007cbe:	687b      	ldr	r3, [r7, #4]
90007cc0:	691b      	ldr	r3, [r3, #16]
90007cc2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
90007cc4:	687b      	ldr	r3, [r7, #4]
90007cc6:	7d1b      	ldrb	r3, [r3, #20]
90007cc8:	2b00      	cmp	r3, #0
90007cca:	d126      	bne.n	90007d1a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
90007ccc:	687b      	ldr	r3, [r7, #4]
90007cce:	8adb      	ldrh	r3, [r3, #22]
90007cd0:	2b00      	cmp	r3, #0
90007cd2:	d02e      	beq.n	90007d32 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
90007cd4:	4b3b      	ldr	r3, [pc, #236]	; (90007dc4 <tcp_abandon+0x170>)
90007cd6:	681b      	ldr	r3, [r3, #0]
90007cd8:	687a      	ldr	r2, [r7, #4]
90007cda:	429a      	cmp	r2, r3
90007cdc:	d105      	bne.n	90007cea <tcp_abandon+0x96>
90007cde:	4b39      	ldr	r3, [pc, #228]	; (90007dc4 <tcp_abandon+0x170>)
90007ce0:	681b      	ldr	r3, [r3, #0]
90007ce2:	68db      	ldr	r3, [r3, #12]
90007ce4:	4a37      	ldr	r2, [pc, #220]	; (90007dc4 <tcp_abandon+0x170>)
90007ce6:	6013      	str	r3, [r2, #0]
90007ce8:	e013      	b.n	90007d12 <tcp_abandon+0xbe>
90007cea:	4b36      	ldr	r3, [pc, #216]	; (90007dc4 <tcp_abandon+0x170>)
90007cec:	681b      	ldr	r3, [r3, #0]
90007cee:	61fb      	str	r3, [r7, #28]
90007cf0:	e00c      	b.n	90007d0c <tcp_abandon+0xb8>
90007cf2:	69fb      	ldr	r3, [r7, #28]
90007cf4:	68db      	ldr	r3, [r3, #12]
90007cf6:	687a      	ldr	r2, [r7, #4]
90007cf8:	429a      	cmp	r2, r3
90007cfa:	d104      	bne.n	90007d06 <tcp_abandon+0xb2>
90007cfc:	687b      	ldr	r3, [r7, #4]
90007cfe:	68da      	ldr	r2, [r3, #12]
90007d00:	69fb      	ldr	r3, [r7, #28]
90007d02:	60da      	str	r2, [r3, #12]
90007d04:	e005      	b.n	90007d12 <tcp_abandon+0xbe>
90007d06:	69fb      	ldr	r3, [r7, #28]
90007d08:	68db      	ldr	r3, [r3, #12]
90007d0a:	61fb      	str	r3, [r7, #28]
90007d0c:	69fb      	ldr	r3, [r7, #28]
90007d0e:	2b00      	cmp	r3, #0
90007d10:	d1ef      	bne.n	90007cf2 <tcp_abandon+0x9e>
90007d12:	687b      	ldr	r3, [r7, #4]
90007d14:	2200      	movs	r2, #0
90007d16:	60da      	str	r2, [r3, #12]
90007d18:	e00b      	b.n	90007d32 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
90007d1a:	683b      	ldr	r3, [r7, #0]
90007d1c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
90007d1e:	687b      	ldr	r3, [r7, #4]
90007d20:	8adb      	ldrh	r3, [r3, #22]
90007d22:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
90007d24:	6879      	ldr	r1, [r7, #4]
90007d26:	4828      	ldr	r0, [pc, #160]	; (90007dc8 <tcp_abandon+0x174>)
90007d28:	f001 fa20 	bl	9000916c <tcp_pcb_remove>
90007d2c:	4b27      	ldr	r3, [pc, #156]	; (90007dcc <tcp_abandon+0x178>)
90007d2e:	2201      	movs	r2, #1
90007d30:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
90007d32:	687b      	ldr	r3, [r7, #4]
90007d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90007d36:	2b00      	cmp	r3, #0
90007d38:	d004      	beq.n	90007d44 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
90007d3a:	687b      	ldr	r3, [r7, #4]
90007d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90007d3e:	4618      	mov	r0, r3
90007d40:	f000 fed6 	bl	90008af0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
90007d44:	687b      	ldr	r3, [r7, #4]
90007d46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90007d48:	2b00      	cmp	r3, #0
90007d4a:	d004      	beq.n	90007d56 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
90007d4c:	687b      	ldr	r3, [r7, #4]
90007d4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90007d50:	4618      	mov	r0, r3
90007d52:	f000 fecd 	bl	90008af0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
90007d56:	687b      	ldr	r3, [r7, #4]
90007d58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90007d5a:	2b00      	cmp	r3, #0
90007d5c:	d004      	beq.n	90007d68 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
90007d5e:	687b      	ldr	r3, [r7, #4]
90007d60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90007d62:	4618      	mov	r0, r3
90007d64:	f000 fec4 	bl	90008af0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
90007d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90007d6a:	2b00      	cmp	r3, #0
90007d6c:	d00e      	beq.n	90007d8c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
90007d6e:	6879      	ldr	r1, [r7, #4]
90007d70:	687b      	ldr	r3, [r7, #4]
90007d72:	3304      	adds	r3, #4
90007d74:	687a      	ldr	r2, [r7, #4]
90007d76:	8b12      	ldrh	r2, [r2, #24]
90007d78:	9202      	str	r2, [sp, #8]
90007d7a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
90007d7c:	9201      	str	r2, [sp, #4]
90007d7e:	9300      	str	r3, [sp, #0]
90007d80:	460b      	mov	r3, r1
90007d82:	697a      	ldr	r2, [r7, #20]
90007d84:	69b9      	ldr	r1, [r7, #24]
90007d86:	6878      	ldr	r0, [r7, #4]
90007d88:	f005 fbc0 	bl	9000d50c <tcp_rst>
    }
    last_state = pcb->state;
90007d8c:	687b      	ldr	r3, [r7, #4]
90007d8e:	7d1b      	ldrb	r3, [r3, #20]
90007d90:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
90007d92:	6878      	ldr	r0, [r7, #4]
90007d94:	f7ff fd34 	bl	90007800 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
90007d98:	693b      	ldr	r3, [r7, #16]
90007d9a:	2b00      	cmp	r3, #0
90007d9c:	d004      	beq.n	90007da8 <tcp_abandon+0x154>
90007d9e:	693b      	ldr	r3, [r7, #16]
90007da0:	f06f 010c 	mvn.w	r1, #12
90007da4:	68f8      	ldr	r0, [r7, #12]
90007da6:	4798      	blx	r3
  }
}
90007da8:	3728      	adds	r7, #40	; 0x28
90007daa:	46bd      	mov	sp, r7
90007dac:	bd80      	pop	{r7, pc}
90007dae:	bf00      	nop
90007db0:	900127bc 	.word	0x900127bc
90007db4:	90012900 	.word	0x90012900
90007db8:	90012800 	.word	0x90012800
90007dbc:	9001291c 	.word	0x9001291c
90007dc0:	2000a8b0 	.word	0x2000a8b0
90007dc4:	2000a8a4 	.word	0x2000a8a4
90007dc8:	2000a8ac 	.word	0x2000a8ac
90007dcc:	2000a8b4 	.word	0x2000a8b4

90007dd0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
90007dd0:	b580      	push	{r7, lr}
90007dd2:	b082      	sub	sp, #8
90007dd4:	af00      	add	r7, sp, #0
90007dd6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
90007dd8:	2101      	movs	r1, #1
90007dda:	6878      	ldr	r0, [r7, #4]
90007ddc:	f7ff ff3a 	bl	90007c54 <tcp_abandon>
}
90007de0:	bf00      	nop
90007de2:	3708      	adds	r7, #8
90007de4:	46bd      	mov	sp, r7
90007de6:	bd80      	pop	{r7, pc}

90007de8 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
90007de8:	b580      	push	{r7, lr}
90007dea:	b088      	sub	sp, #32
90007dec:	af00      	add	r7, sp, #0
90007dee:	60f8      	str	r0, [r7, #12]
90007df0:	60b9      	str	r1, [r7, #8]
90007df2:	4613      	mov	r3, r2
90007df4:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
90007df6:	2304      	movs	r3, #4
90007df8:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
90007dfa:	68bb      	ldr	r3, [r7, #8]
90007dfc:	2b00      	cmp	r3, #0
90007dfe:	d101      	bne.n	90007e04 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
90007e00:	4b3e      	ldr	r3, [pc, #248]	; (90007efc <tcp_bind+0x114>)
90007e02:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
90007e04:	68fb      	ldr	r3, [r7, #12]
90007e06:	2b00      	cmp	r3, #0
90007e08:	d109      	bne.n	90007e1e <tcp_bind+0x36>
90007e0a:	4b3d      	ldr	r3, [pc, #244]	; (90007f00 <tcp_bind+0x118>)
90007e0c:	f240 22a9 	movw	r2, #681	; 0x2a9
90007e10:	493c      	ldr	r1, [pc, #240]	; (90007f04 <tcp_bind+0x11c>)
90007e12:	483d      	ldr	r0, [pc, #244]	; (90007f08 <tcp_bind+0x120>)
90007e14:	f008 fb6a 	bl	900104ec <iprintf>
90007e18:	f06f 030f 	mvn.w	r3, #15
90007e1c:	e06a      	b.n	90007ef4 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
90007e1e:	68fb      	ldr	r3, [r7, #12]
90007e20:	7d1b      	ldrb	r3, [r3, #20]
90007e22:	2b00      	cmp	r3, #0
90007e24:	d009      	beq.n	90007e3a <tcp_bind+0x52>
90007e26:	4b36      	ldr	r3, [pc, #216]	; (90007f00 <tcp_bind+0x118>)
90007e28:	f240 22ab 	movw	r2, #683	; 0x2ab
90007e2c:	4937      	ldr	r1, [pc, #220]	; (90007f0c <tcp_bind+0x124>)
90007e2e:	4836      	ldr	r0, [pc, #216]	; (90007f08 <tcp_bind+0x120>)
90007e30:	f008 fb5c 	bl	900104ec <iprintf>
90007e34:	f06f 0305 	mvn.w	r3, #5
90007e38:	e05c      	b.n	90007ef4 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
90007e3a:	88fb      	ldrh	r3, [r7, #6]
90007e3c:	2b00      	cmp	r3, #0
90007e3e:	d109      	bne.n	90007e54 <tcp_bind+0x6c>
    port = tcp_new_port();
90007e40:	f000 f9f0 	bl	90008224 <tcp_new_port>
90007e44:	4603      	mov	r3, r0
90007e46:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
90007e48:	88fb      	ldrh	r3, [r7, #6]
90007e4a:	2b00      	cmp	r3, #0
90007e4c:	d135      	bne.n	90007eba <tcp_bind+0xd2>
      return ERR_BUF;
90007e4e:	f06f 0301 	mvn.w	r3, #1
90007e52:	e04f      	b.n	90007ef4 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
90007e54:	2300      	movs	r3, #0
90007e56:	61fb      	str	r3, [r7, #28]
90007e58:	e02b      	b.n	90007eb2 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
90007e5a:	4a2d      	ldr	r2, [pc, #180]	; (90007f10 <tcp_bind+0x128>)
90007e5c:	69fb      	ldr	r3, [r7, #28]
90007e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90007e62:	681b      	ldr	r3, [r3, #0]
90007e64:	61bb      	str	r3, [r7, #24]
90007e66:	e01e      	b.n	90007ea6 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
90007e68:	69bb      	ldr	r3, [r7, #24]
90007e6a:	8adb      	ldrh	r3, [r3, #22]
90007e6c:	88fa      	ldrh	r2, [r7, #6]
90007e6e:	429a      	cmp	r2, r3
90007e70:	d116      	bne.n	90007ea0 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
90007e72:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
90007e74:	2b00      	cmp	r3, #0
90007e76:	d010      	beq.n	90007e9a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
90007e78:	69bb      	ldr	r3, [r7, #24]
90007e7a:	681b      	ldr	r3, [r3, #0]
90007e7c:	2b00      	cmp	r3, #0
90007e7e:	d00c      	beq.n	90007e9a <tcp_bind+0xb2>
90007e80:	68bb      	ldr	r3, [r7, #8]
90007e82:	2b00      	cmp	r3, #0
90007e84:	d009      	beq.n	90007e9a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
90007e86:	68bb      	ldr	r3, [r7, #8]
90007e88:	681b      	ldr	r3, [r3, #0]
90007e8a:	2b00      	cmp	r3, #0
90007e8c:	d005      	beq.n	90007e9a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
90007e8e:	69bb      	ldr	r3, [r7, #24]
90007e90:	681a      	ldr	r2, [r3, #0]
90007e92:	68bb      	ldr	r3, [r7, #8]
90007e94:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
90007e96:	429a      	cmp	r2, r3
90007e98:	d102      	bne.n	90007ea0 <tcp_bind+0xb8>
              return ERR_USE;
90007e9a:	f06f 0307 	mvn.w	r3, #7
90007e9e:	e029      	b.n	90007ef4 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
90007ea0:	69bb      	ldr	r3, [r7, #24]
90007ea2:	68db      	ldr	r3, [r3, #12]
90007ea4:	61bb      	str	r3, [r7, #24]
90007ea6:	69bb      	ldr	r3, [r7, #24]
90007ea8:	2b00      	cmp	r3, #0
90007eaa:	d1dd      	bne.n	90007e68 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
90007eac:	69fb      	ldr	r3, [r7, #28]
90007eae:	3301      	adds	r3, #1
90007eb0:	61fb      	str	r3, [r7, #28]
90007eb2:	69fa      	ldr	r2, [r7, #28]
90007eb4:	697b      	ldr	r3, [r7, #20]
90007eb6:	429a      	cmp	r2, r3
90007eb8:	dbcf      	blt.n	90007e5a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
90007eba:	68bb      	ldr	r3, [r7, #8]
90007ebc:	2b00      	cmp	r3, #0
90007ebe:	d00c      	beq.n	90007eda <tcp_bind+0xf2>
90007ec0:	68bb      	ldr	r3, [r7, #8]
90007ec2:	681b      	ldr	r3, [r3, #0]
90007ec4:	2b00      	cmp	r3, #0
90007ec6:	d008      	beq.n	90007eda <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
90007ec8:	68bb      	ldr	r3, [r7, #8]
90007eca:	2b00      	cmp	r3, #0
90007ecc:	d002      	beq.n	90007ed4 <tcp_bind+0xec>
90007ece:	68bb      	ldr	r3, [r7, #8]
90007ed0:	681b      	ldr	r3, [r3, #0]
90007ed2:	e000      	b.n	90007ed6 <tcp_bind+0xee>
90007ed4:	2300      	movs	r3, #0
90007ed6:	68fa      	ldr	r2, [r7, #12]
90007ed8:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
90007eda:	68fb      	ldr	r3, [r7, #12]
90007edc:	88fa      	ldrh	r2, [r7, #6]
90007ede:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
90007ee0:	4b0c      	ldr	r3, [pc, #48]	; (90007f14 <tcp_bind+0x12c>)
90007ee2:	681a      	ldr	r2, [r3, #0]
90007ee4:	68fb      	ldr	r3, [r7, #12]
90007ee6:	60da      	str	r2, [r3, #12]
90007ee8:	4a0a      	ldr	r2, [pc, #40]	; (90007f14 <tcp_bind+0x12c>)
90007eea:	68fb      	ldr	r3, [r7, #12]
90007eec:	6013      	str	r3, [r2, #0]
90007eee:	f005 fccf 	bl	9000d890 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
90007ef2:	2300      	movs	r3, #0
}
90007ef4:	4618      	mov	r0, r3
90007ef6:	3720      	adds	r7, #32
90007ef8:	46bd      	mov	sp, r7
90007efa:	bd80      	pop	{r7, pc}
90007efc:	90015b28 	.word	0x90015b28
90007f00:	900127bc 	.word	0x900127bc
90007f04:	90012950 	.word	0x90012950
90007f08:	90012800 	.word	0x90012800
90007f0c:	90012968 	.word	0x90012968
90007f10:	90015b00 	.word	0x90015b00
90007f14:	2000a8a4 	.word	0x2000a8a4

90007f18 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
90007f18:	b580      	push	{r7, lr}
90007f1a:	b084      	sub	sp, #16
90007f1c:	af00      	add	r7, sp, #0
90007f1e:	60f8      	str	r0, [r7, #12]
90007f20:	60b9      	str	r1, [r7, #8]
90007f22:	4613      	mov	r3, r2
90007f24:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
90007f26:	68bb      	ldr	r3, [r7, #8]
90007f28:	2b00      	cmp	r3, #0
90007f2a:	d106      	bne.n	90007f3a <tcp_accept_null+0x22>
90007f2c:	4b07      	ldr	r3, [pc, #28]	; (90007f4c <tcp_accept_null+0x34>)
90007f2e:	f240 320f 	movw	r2, #783	; 0x30f
90007f32:	4907      	ldr	r1, [pc, #28]	; (90007f50 <tcp_accept_null+0x38>)
90007f34:	4807      	ldr	r0, [pc, #28]	; (90007f54 <tcp_accept_null+0x3c>)
90007f36:	f008 fad9 	bl	900104ec <iprintf>

  tcp_abort(pcb);
90007f3a:	68b8      	ldr	r0, [r7, #8]
90007f3c:	f7ff ff48 	bl	90007dd0 <tcp_abort>

  return ERR_ABRT;
90007f40:	f06f 030c 	mvn.w	r3, #12
}
90007f44:	4618      	mov	r0, r3
90007f46:	3710      	adds	r7, #16
90007f48:	46bd      	mov	sp, r7
90007f4a:	bd80      	pop	{r7, pc}
90007f4c:	900127bc 	.word	0x900127bc
90007f50:	90012990 	.word	0x90012990
90007f54:	90012800 	.word	0x90012800

90007f58 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
90007f58:	b580      	push	{r7, lr}
90007f5a:	b082      	sub	sp, #8
90007f5c:	af00      	add	r7, sp, #0
90007f5e:	6078      	str	r0, [r7, #4]
90007f60:	460b      	mov	r3, r1
90007f62:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
90007f64:	78fb      	ldrb	r3, [r7, #3]
90007f66:	2200      	movs	r2, #0
90007f68:	4619      	mov	r1, r3
90007f6a:	6878      	ldr	r0, [r7, #4]
90007f6c:	f000 f806 	bl	90007f7c <tcp_listen_with_backlog_and_err>
90007f70:	4603      	mov	r3, r0
}
90007f72:	4618      	mov	r0, r3
90007f74:	3708      	adds	r7, #8
90007f76:	46bd      	mov	sp, r7
90007f78:	bd80      	pop	{r7, pc}
	...

90007f7c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
90007f7c:	b580      	push	{r7, lr}
90007f7e:	b088      	sub	sp, #32
90007f80:	af00      	add	r7, sp, #0
90007f82:	60f8      	str	r0, [r7, #12]
90007f84:	460b      	mov	r3, r1
90007f86:	607a      	str	r2, [r7, #4]
90007f88:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
90007f8a:	2300      	movs	r3, #0
90007f8c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
90007f8e:	68fb      	ldr	r3, [r7, #12]
90007f90:	2b00      	cmp	r3, #0
90007f92:	d109      	bne.n	90007fa8 <tcp_listen_with_backlog_and_err+0x2c>
90007f94:	4b47      	ldr	r3, [pc, #284]	; (900080b4 <tcp_listen_with_backlog_and_err+0x138>)
90007f96:	f240 3259 	movw	r2, #857	; 0x359
90007f9a:	4947      	ldr	r1, [pc, #284]	; (900080b8 <tcp_listen_with_backlog_and_err+0x13c>)
90007f9c:	4847      	ldr	r0, [pc, #284]	; (900080bc <tcp_listen_with_backlog_and_err+0x140>)
90007f9e:	f008 faa5 	bl	900104ec <iprintf>
90007fa2:	23f0      	movs	r3, #240	; 0xf0
90007fa4:	76fb      	strb	r3, [r7, #27]
90007fa6:	e079      	b.n	9000809c <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
90007fa8:	68fb      	ldr	r3, [r7, #12]
90007faa:	7d1b      	ldrb	r3, [r3, #20]
90007fac:	2b00      	cmp	r3, #0
90007fae:	d009      	beq.n	90007fc4 <tcp_listen_with_backlog_and_err+0x48>
90007fb0:	4b40      	ldr	r3, [pc, #256]	; (900080b4 <tcp_listen_with_backlog_and_err+0x138>)
90007fb2:	f240 325a 	movw	r2, #858	; 0x35a
90007fb6:	4942      	ldr	r1, [pc, #264]	; (900080c0 <tcp_listen_with_backlog_and_err+0x144>)
90007fb8:	4840      	ldr	r0, [pc, #256]	; (900080bc <tcp_listen_with_backlog_and_err+0x140>)
90007fba:	f008 fa97 	bl	900104ec <iprintf>
90007fbe:	23f1      	movs	r3, #241	; 0xf1
90007fc0:	76fb      	strb	r3, [r7, #27]
90007fc2:	e06b      	b.n	9000809c <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
90007fc4:	68fb      	ldr	r3, [r7, #12]
90007fc6:	7d1b      	ldrb	r3, [r3, #20]
90007fc8:	2b01      	cmp	r3, #1
90007fca:	d104      	bne.n	90007fd6 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
90007fcc:	68fb      	ldr	r3, [r7, #12]
90007fce:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
90007fd0:	23f7      	movs	r3, #247	; 0xf7
90007fd2:	76fb      	strb	r3, [r7, #27]
    goto done;
90007fd4:	e062      	b.n	9000809c <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
90007fd6:	2002      	movs	r0, #2
90007fd8:	f7fe fa8c 	bl	900064f4 <memp_malloc>
90007fdc:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
90007fde:	69fb      	ldr	r3, [r7, #28]
90007fe0:	2b00      	cmp	r3, #0
90007fe2:	d102      	bne.n	90007fea <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
90007fe4:	23ff      	movs	r3, #255	; 0xff
90007fe6:	76fb      	strb	r3, [r7, #27]
    goto done;
90007fe8:	e058      	b.n	9000809c <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
90007fea:	68fb      	ldr	r3, [r7, #12]
90007fec:	691a      	ldr	r2, [r3, #16]
90007fee:	69fb      	ldr	r3, [r7, #28]
90007ff0:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
90007ff2:	68fb      	ldr	r3, [r7, #12]
90007ff4:	8ada      	ldrh	r2, [r3, #22]
90007ff6:	69fb      	ldr	r3, [r7, #28]
90007ff8:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
90007ffa:	69fb      	ldr	r3, [r7, #28]
90007ffc:	2201      	movs	r2, #1
90007ffe:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
90008000:	68fb      	ldr	r3, [r7, #12]
90008002:	7d5a      	ldrb	r2, [r3, #21]
90008004:	69fb      	ldr	r3, [r7, #28]
90008006:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
90008008:	68fb      	ldr	r3, [r7, #12]
9000800a:	7a5a      	ldrb	r2, [r3, #9]
9000800c:	69fb      	ldr	r3, [r7, #28]
9000800e:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
90008010:	69fb      	ldr	r3, [r7, #28]
90008012:	2200      	movs	r2, #0
90008014:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
90008016:	68fb      	ldr	r3, [r7, #12]
90008018:	7ada      	ldrb	r2, [r3, #11]
9000801a:	69fb      	ldr	r3, [r7, #28]
9000801c:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
9000801e:	68fb      	ldr	r3, [r7, #12]
90008020:	7a9a      	ldrb	r2, [r3, #10]
90008022:	69fb      	ldr	r3, [r7, #28]
90008024:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
90008026:	68fb      	ldr	r3, [r7, #12]
90008028:	681a      	ldr	r2, [r3, #0]
9000802a:	69fb      	ldr	r3, [r7, #28]
9000802c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
9000802e:	68fb      	ldr	r3, [r7, #12]
90008030:	8adb      	ldrh	r3, [r3, #22]
90008032:	2b00      	cmp	r3, #0
90008034:	d021      	beq.n	9000807a <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
90008036:	4b23      	ldr	r3, [pc, #140]	; (900080c4 <tcp_listen_with_backlog_and_err+0x148>)
90008038:	681b      	ldr	r3, [r3, #0]
9000803a:	68fa      	ldr	r2, [r7, #12]
9000803c:	429a      	cmp	r2, r3
9000803e:	d105      	bne.n	9000804c <tcp_listen_with_backlog_and_err+0xd0>
90008040:	4b20      	ldr	r3, [pc, #128]	; (900080c4 <tcp_listen_with_backlog_and_err+0x148>)
90008042:	681b      	ldr	r3, [r3, #0]
90008044:	68db      	ldr	r3, [r3, #12]
90008046:	4a1f      	ldr	r2, [pc, #124]	; (900080c4 <tcp_listen_with_backlog_and_err+0x148>)
90008048:	6013      	str	r3, [r2, #0]
9000804a:	e013      	b.n	90008074 <tcp_listen_with_backlog_and_err+0xf8>
9000804c:	4b1d      	ldr	r3, [pc, #116]	; (900080c4 <tcp_listen_with_backlog_and_err+0x148>)
9000804e:	681b      	ldr	r3, [r3, #0]
90008050:	617b      	str	r3, [r7, #20]
90008052:	e00c      	b.n	9000806e <tcp_listen_with_backlog_and_err+0xf2>
90008054:	697b      	ldr	r3, [r7, #20]
90008056:	68db      	ldr	r3, [r3, #12]
90008058:	68fa      	ldr	r2, [r7, #12]
9000805a:	429a      	cmp	r2, r3
9000805c:	d104      	bne.n	90008068 <tcp_listen_with_backlog_and_err+0xec>
9000805e:	68fb      	ldr	r3, [r7, #12]
90008060:	68da      	ldr	r2, [r3, #12]
90008062:	697b      	ldr	r3, [r7, #20]
90008064:	60da      	str	r2, [r3, #12]
90008066:	e005      	b.n	90008074 <tcp_listen_with_backlog_and_err+0xf8>
90008068:	697b      	ldr	r3, [r7, #20]
9000806a:	68db      	ldr	r3, [r3, #12]
9000806c:	617b      	str	r3, [r7, #20]
9000806e:	697b      	ldr	r3, [r7, #20]
90008070:	2b00      	cmp	r3, #0
90008072:	d1ef      	bne.n	90008054 <tcp_listen_with_backlog_and_err+0xd8>
90008074:	68fb      	ldr	r3, [r7, #12]
90008076:	2200      	movs	r2, #0
90008078:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
9000807a:	68f8      	ldr	r0, [r7, #12]
9000807c:	f7ff fbc0 	bl	90007800 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
90008080:	69fb      	ldr	r3, [r7, #28]
90008082:	4a11      	ldr	r2, [pc, #68]	; (900080c8 <tcp_listen_with_backlog_and_err+0x14c>)
90008084:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
90008086:	4b11      	ldr	r3, [pc, #68]	; (900080cc <tcp_listen_with_backlog_and_err+0x150>)
90008088:	681a      	ldr	r2, [r3, #0]
9000808a:	69fb      	ldr	r3, [r7, #28]
9000808c:	60da      	str	r2, [r3, #12]
9000808e:	4a0f      	ldr	r2, [pc, #60]	; (900080cc <tcp_listen_with_backlog_and_err+0x150>)
90008090:	69fb      	ldr	r3, [r7, #28]
90008092:	6013      	str	r3, [r2, #0]
90008094:	f005 fbfc 	bl	9000d890 <tcp_timer_needed>
  res = ERR_OK;
90008098:	2300      	movs	r3, #0
9000809a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
9000809c:	687b      	ldr	r3, [r7, #4]
9000809e:	2b00      	cmp	r3, #0
900080a0:	d002      	beq.n	900080a8 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
900080a2:	687b      	ldr	r3, [r7, #4]
900080a4:	7efa      	ldrb	r2, [r7, #27]
900080a6:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
900080a8:	69fb      	ldr	r3, [r7, #28]
}
900080aa:	4618      	mov	r0, r3
900080ac:	3720      	adds	r7, #32
900080ae:	46bd      	mov	sp, r7
900080b0:	bd80      	pop	{r7, pc}
900080b2:	bf00      	nop
900080b4:	900127bc 	.word	0x900127bc
900080b8:	900129b0 	.word	0x900129b0
900080bc:	90012800 	.word	0x90012800
900080c0:	900129e0 	.word	0x900129e0
900080c4:	2000a8a4 	.word	0x2000a8a4
900080c8:	90007f19 	.word	0x90007f19
900080cc:	2000a8a8 	.word	0x2000a8a8

900080d0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
900080d0:	b580      	push	{r7, lr}
900080d2:	b084      	sub	sp, #16
900080d4:	af00      	add	r7, sp, #0
900080d6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
900080d8:	687b      	ldr	r3, [r7, #4]
900080da:	2b00      	cmp	r3, #0
900080dc:	d106      	bne.n	900080ec <tcp_update_rcv_ann_wnd+0x1c>
900080de:	4b25      	ldr	r3, [pc, #148]	; (90008174 <tcp_update_rcv_ann_wnd+0xa4>)
900080e0:	f240 32a6 	movw	r2, #934	; 0x3a6
900080e4:	4924      	ldr	r1, [pc, #144]	; (90008178 <tcp_update_rcv_ann_wnd+0xa8>)
900080e6:	4825      	ldr	r0, [pc, #148]	; (9000817c <tcp_update_rcv_ann_wnd+0xac>)
900080e8:	f008 fa00 	bl	900104ec <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
900080ec:	687b      	ldr	r3, [r7, #4]
900080ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900080f0:	687a      	ldr	r2, [r7, #4]
900080f2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
900080f4:	4413      	add	r3, r2
900080f6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
900080f8:	687b      	ldr	r3, [r7, #4]
900080fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900080fc:	687a      	ldr	r2, [r7, #4]
900080fe:	8e52      	ldrh	r2, [r2, #50]	; 0x32
90008100:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
90008104:	bf28      	it	cs
90008106:	f44f 6286 	movcs.w	r2, #1072	; 0x430
9000810a:	b292      	uxth	r2, r2
9000810c:	4413      	add	r3, r2
9000810e:	68fa      	ldr	r2, [r7, #12]
90008110:	1ad3      	subs	r3, r2, r3
90008112:	2b00      	cmp	r3, #0
90008114:	db08      	blt.n	90008128 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
90008116:	687b      	ldr	r3, [r7, #4]
90008118:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
9000811a:	687b      	ldr	r3, [r7, #4]
9000811c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
9000811e:	687b      	ldr	r3, [r7, #4]
90008120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90008122:	68fa      	ldr	r2, [r7, #12]
90008124:	1ad3      	subs	r3, r2, r3
90008126:	e020      	b.n	9000816a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
90008128:	687b      	ldr	r3, [r7, #4]
9000812a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
9000812c:	687b      	ldr	r3, [r7, #4]
9000812e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90008130:	1ad3      	subs	r3, r2, r3
90008132:	2b00      	cmp	r3, #0
90008134:	dd03      	ble.n	9000813e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
90008136:	687b      	ldr	r3, [r7, #4]
90008138:	2200      	movs	r2, #0
9000813a:	855a      	strh	r2, [r3, #42]	; 0x2a
9000813c:	e014      	b.n	90008168 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
9000813e:	687b      	ldr	r3, [r7, #4]
90008140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90008142:	687b      	ldr	r3, [r7, #4]
90008144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90008146:	1ad3      	subs	r3, r2, r3
90008148:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
9000814a:	68bb      	ldr	r3, [r7, #8]
9000814c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90008150:	d306      	bcc.n	90008160 <tcp_update_rcv_ann_wnd+0x90>
90008152:	4b08      	ldr	r3, [pc, #32]	; (90008174 <tcp_update_rcv_ann_wnd+0xa4>)
90008154:	f240 32b6 	movw	r2, #950	; 0x3b6
90008158:	4909      	ldr	r1, [pc, #36]	; (90008180 <tcp_update_rcv_ann_wnd+0xb0>)
9000815a:	4808      	ldr	r0, [pc, #32]	; (9000817c <tcp_update_rcv_ann_wnd+0xac>)
9000815c:	f008 f9c6 	bl	900104ec <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
90008160:	68bb      	ldr	r3, [r7, #8]
90008162:	b29a      	uxth	r2, r3
90008164:	687b      	ldr	r3, [r7, #4]
90008166:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
90008168:	2300      	movs	r3, #0
  }
}
9000816a:	4618      	mov	r0, r3
9000816c:	3710      	adds	r7, #16
9000816e:	46bd      	mov	sp, r7
90008170:	bd80      	pop	{r7, pc}
90008172:	bf00      	nop
90008174:	900127bc 	.word	0x900127bc
90008178:	90012a18 	.word	0x90012a18
9000817c:	90012800 	.word	0x90012800
90008180:	90012a3c 	.word	0x90012a3c

90008184 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
90008184:	b580      	push	{r7, lr}
90008186:	b084      	sub	sp, #16
90008188:	af00      	add	r7, sp, #0
9000818a:	6078      	str	r0, [r7, #4]
9000818c:	460b      	mov	r3, r1
9000818e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
90008190:	687b      	ldr	r3, [r7, #4]
90008192:	2b00      	cmp	r3, #0
90008194:	d107      	bne.n	900081a6 <tcp_recved+0x22>
90008196:	4b1f      	ldr	r3, [pc, #124]	; (90008214 <tcp_recved+0x90>)
90008198:	f240 32cf 	movw	r2, #975	; 0x3cf
9000819c:	491e      	ldr	r1, [pc, #120]	; (90008218 <tcp_recved+0x94>)
9000819e:	481f      	ldr	r0, [pc, #124]	; (9000821c <tcp_recved+0x98>)
900081a0:	f008 f9a4 	bl	900104ec <iprintf>
900081a4:	e032      	b.n	9000820c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
900081a6:	687b      	ldr	r3, [r7, #4]
900081a8:	7d1b      	ldrb	r3, [r3, #20]
900081aa:	2b01      	cmp	r3, #1
900081ac:	d106      	bne.n	900081bc <tcp_recved+0x38>
900081ae:	4b19      	ldr	r3, [pc, #100]	; (90008214 <tcp_recved+0x90>)
900081b0:	f240 32d2 	movw	r2, #978	; 0x3d2
900081b4:	491a      	ldr	r1, [pc, #104]	; (90008220 <tcp_recved+0x9c>)
900081b6:	4819      	ldr	r0, [pc, #100]	; (9000821c <tcp_recved+0x98>)
900081b8:	f008 f998 	bl	900104ec <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
900081bc:	687b      	ldr	r3, [r7, #4]
900081be:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
900081c0:	887b      	ldrh	r3, [r7, #2]
900081c2:	4413      	add	r3, r2
900081c4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
900081c6:	89fb      	ldrh	r3, [r7, #14]
900081c8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
900081cc:	d804      	bhi.n	900081d8 <tcp_recved+0x54>
900081ce:	687b      	ldr	r3, [r7, #4]
900081d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
900081d2:	89fa      	ldrh	r2, [r7, #14]
900081d4:	429a      	cmp	r2, r3
900081d6:	d204      	bcs.n	900081e2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
900081d8:	687b      	ldr	r3, [r7, #4]
900081da:	f44f 6206 	mov.w	r2, #2144	; 0x860
900081de:	851a      	strh	r2, [r3, #40]	; 0x28
900081e0:	e002      	b.n	900081e8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
900081e2:	687b      	ldr	r3, [r7, #4]
900081e4:	89fa      	ldrh	r2, [r7, #14]
900081e6:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
900081e8:	6878      	ldr	r0, [r7, #4]
900081ea:	f7ff ff71 	bl	900080d0 <tcp_update_rcv_ann_wnd>
900081ee:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
900081f0:	68bb      	ldr	r3, [r7, #8]
900081f2:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
900081f6:	d309      	bcc.n	9000820c <tcp_recved+0x88>
    tcp_ack_now(pcb);
900081f8:	687b      	ldr	r3, [r7, #4]
900081fa:	8b5b      	ldrh	r3, [r3, #26]
900081fc:	f043 0302 	orr.w	r3, r3, #2
90008200:	b29a      	uxth	r2, r3
90008202:	687b      	ldr	r3, [r7, #4]
90008204:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
90008206:	6878      	ldr	r0, [r7, #4]
90008208:	f004 fbcc 	bl	9000c9a4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
9000820c:	3710      	adds	r7, #16
9000820e:	46bd      	mov	sp, r7
90008210:	bd80      	pop	{r7, pc}
90008212:	bf00      	nop
90008214:	900127bc 	.word	0x900127bc
90008218:	90012a58 	.word	0x90012a58
9000821c:	90012800 	.word	0x90012800
90008220:	90012a70 	.word	0x90012a70

90008224 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
90008224:	b480      	push	{r7}
90008226:	b083      	sub	sp, #12
90008228:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
9000822a:	2300      	movs	r3, #0
9000822c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
9000822e:	4b1e      	ldr	r3, [pc, #120]	; (900082a8 <tcp_new_port+0x84>)
90008230:	881b      	ldrh	r3, [r3, #0]
90008232:	3301      	adds	r3, #1
90008234:	b29a      	uxth	r2, r3
90008236:	4b1c      	ldr	r3, [pc, #112]	; (900082a8 <tcp_new_port+0x84>)
90008238:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
9000823a:	4b1b      	ldr	r3, [pc, #108]	; (900082a8 <tcp_new_port+0x84>)
9000823c:	881b      	ldrh	r3, [r3, #0]
9000823e:	f64f 72ff 	movw	r2, #65535	; 0xffff
90008242:	4293      	cmp	r3, r2
90008244:	d103      	bne.n	9000824e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
90008246:	4b18      	ldr	r3, [pc, #96]	; (900082a8 <tcp_new_port+0x84>)
90008248:	f44f 4240 	mov.w	r2, #49152	; 0xc000
9000824c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
9000824e:	2300      	movs	r3, #0
90008250:	71fb      	strb	r3, [r7, #7]
90008252:	e01e      	b.n	90008292 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
90008254:	79fb      	ldrb	r3, [r7, #7]
90008256:	4a15      	ldr	r2, [pc, #84]	; (900082ac <tcp_new_port+0x88>)
90008258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
9000825c:	681b      	ldr	r3, [r3, #0]
9000825e:	603b      	str	r3, [r7, #0]
90008260:	e011      	b.n	90008286 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
90008262:	683b      	ldr	r3, [r7, #0]
90008264:	8ada      	ldrh	r2, [r3, #22]
90008266:	4b10      	ldr	r3, [pc, #64]	; (900082a8 <tcp_new_port+0x84>)
90008268:	881b      	ldrh	r3, [r3, #0]
9000826a:	429a      	cmp	r2, r3
9000826c:	d108      	bne.n	90008280 <tcp_new_port+0x5c>
        n++;
9000826e:	88bb      	ldrh	r3, [r7, #4]
90008270:	3301      	adds	r3, #1
90008272:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
90008274:	88bb      	ldrh	r3, [r7, #4]
90008276:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
9000827a:	d3d8      	bcc.n	9000822e <tcp_new_port+0xa>
          return 0;
9000827c:	2300      	movs	r3, #0
9000827e:	e00d      	b.n	9000829c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
90008280:	683b      	ldr	r3, [r7, #0]
90008282:	68db      	ldr	r3, [r3, #12]
90008284:	603b      	str	r3, [r7, #0]
90008286:	683b      	ldr	r3, [r7, #0]
90008288:	2b00      	cmp	r3, #0
9000828a:	d1ea      	bne.n	90008262 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
9000828c:	79fb      	ldrb	r3, [r7, #7]
9000828e:	3301      	adds	r3, #1
90008290:	71fb      	strb	r3, [r7, #7]
90008292:	79fb      	ldrb	r3, [r7, #7]
90008294:	2b03      	cmp	r3, #3
90008296:	d9dd      	bls.n	90008254 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
90008298:	4b03      	ldr	r3, [pc, #12]	; (900082a8 <tcp_new_port+0x84>)
9000829a:	881b      	ldrh	r3, [r3, #0]
}
9000829c:	4618      	mov	r0, r3
9000829e:	370c      	adds	r7, #12
900082a0:	46bd      	mov	sp, r7
900082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
900082a6:	4770      	bx	lr
900082a8:	20000030 	.word	0x20000030
900082ac:	90015b00 	.word	0x90015b00

900082b0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
900082b0:	b5b0      	push	{r4, r5, r7, lr}
900082b2:	b090      	sub	sp, #64	; 0x40
900082b4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
900082b6:	2300      	movs	r3, #0
900082b8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
900082bc:	4b94      	ldr	r3, [pc, #592]	; (90008510 <tcp_slowtmr+0x260>)
900082be:	681b      	ldr	r3, [r3, #0]
900082c0:	3301      	adds	r3, #1
900082c2:	4a93      	ldr	r2, [pc, #588]	; (90008510 <tcp_slowtmr+0x260>)
900082c4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
900082c6:	4b93      	ldr	r3, [pc, #588]	; (90008514 <tcp_slowtmr+0x264>)
900082c8:	781b      	ldrb	r3, [r3, #0]
900082ca:	3301      	adds	r3, #1
900082cc:	b2da      	uxtb	r2, r3
900082ce:	4b91      	ldr	r3, [pc, #580]	; (90008514 <tcp_slowtmr+0x264>)
900082d0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
900082d2:	2300      	movs	r3, #0
900082d4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
900082d6:	4b90      	ldr	r3, [pc, #576]	; (90008518 <tcp_slowtmr+0x268>)
900082d8:	681b      	ldr	r3, [r3, #0]
900082da:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
900082dc:	e29d      	b.n	9000881a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
900082de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900082e0:	7d1b      	ldrb	r3, [r3, #20]
900082e2:	2b00      	cmp	r3, #0
900082e4:	d106      	bne.n	900082f4 <tcp_slowtmr+0x44>
900082e6:	4b8d      	ldr	r3, [pc, #564]	; (9000851c <tcp_slowtmr+0x26c>)
900082e8:	f240 42be 	movw	r2, #1214	; 0x4be
900082ec:	498c      	ldr	r1, [pc, #560]	; (90008520 <tcp_slowtmr+0x270>)
900082ee:	488d      	ldr	r0, [pc, #564]	; (90008524 <tcp_slowtmr+0x274>)
900082f0:	f008 f8fc 	bl	900104ec <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
900082f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900082f6:	7d1b      	ldrb	r3, [r3, #20]
900082f8:	2b01      	cmp	r3, #1
900082fa:	d106      	bne.n	9000830a <tcp_slowtmr+0x5a>
900082fc:	4b87      	ldr	r3, [pc, #540]	; (9000851c <tcp_slowtmr+0x26c>)
900082fe:	f240 42bf 	movw	r2, #1215	; 0x4bf
90008302:	4989      	ldr	r1, [pc, #548]	; (90008528 <tcp_slowtmr+0x278>)
90008304:	4887      	ldr	r0, [pc, #540]	; (90008524 <tcp_slowtmr+0x274>)
90008306:	f008 f8f1 	bl	900104ec <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
9000830a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000830c:	7d1b      	ldrb	r3, [r3, #20]
9000830e:	2b0a      	cmp	r3, #10
90008310:	d106      	bne.n	90008320 <tcp_slowtmr+0x70>
90008312:	4b82      	ldr	r3, [pc, #520]	; (9000851c <tcp_slowtmr+0x26c>)
90008314:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
90008318:	4984      	ldr	r1, [pc, #528]	; (9000852c <tcp_slowtmr+0x27c>)
9000831a:	4882      	ldr	r0, [pc, #520]	; (90008524 <tcp_slowtmr+0x274>)
9000831c:	f008 f8e6 	bl	900104ec <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
90008320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90008322:	7f9a      	ldrb	r2, [r3, #30]
90008324:	4b7b      	ldr	r3, [pc, #492]	; (90008514 <tcp_slowtmr+0x264>)
90008326:	781b      	ldrb	r3, [r3, #0]
90008328:	429a      	cmp	r2, r3
9000832a:	d105      	bne.n	90008338 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
9000832c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000832e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
90008330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90008332:	68db      	ldr	r3, [r3, #12]
90008334:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
90008336:	e270      	b.n	9000881a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
90008338:	4b76      	ldr	r3, [pc, #472]	; (90008514 <tcp_slowtmr+0x264>)
9000833a:	781a      	ldrb	r2, [r3, #0]
9000833c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000833e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
90008340:	2300      	movs	r3, #0
90008342:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
90008346:	2300      	movs	r3, #0
90008348:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
9000834c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000834e:	7d1b      	ldrb	r3, [r3, #20]
90008350:	2b02      	cmp	r3, #2
90008352:	d10a      	bne.n	9000836a <tcp_slowtmr+0xba>
90008354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90008356:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
9000835a:	2b05      	cmp	r3, #5
9000835c:	d905      	bls.n	9000836a <tcp_slowtmr+0xba>
      ++pcb_remove;
9000835e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
90008362:	3301      	adds	r3, #1
90008364:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
90008368:	e11e      	b.n	900085a8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
9000836a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000836c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
90008370:	2b0b      	cmp	r3, #11
90008372:	d905      	bls.n	90008380 <tcp_slowtmr+0xd0>
      ++pcb_remove;
90008374:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
90008378:	3301      	adds	r3, #1
9000837a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
9000837e:	e113      	b.n	900085a8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
90008380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90008382:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
90008386:	2b00      	cmp	r3, #0
90008388:	d075      	beq.n	90008476 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
9000838a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000838c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000838e:	2b00      	cmp	r3, #0
90008390:	d006      	beq.n	900083a0 <tcp_slowtmr+0xf0>
90008392:	4b62      	ldr	r3, [pc, #392]	; (9000851c <tcp_slowtmr+0x26c>)
90008394:	f240 42d4 	movw	r2, #1236	; 0x4d4
90008398:	4965      	ldr	r1, [pc, #404]	; (90008530 <tcp_slowtmr+0x280>)
9000839a:	4862      	ldr	r0, [pc, #392]	; (90008524 <tcp_slowtmr+0x274>)
9000839c:	f008 f8a6 	bl	900104ec <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
900083a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900083a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
900083a4:	2b00      	cmp	r3, #0
900083a6:	d106      	bne.n	900083b6 <tcp_slowtmr+0x106>
900083a8:	4b5c      	ldr	r3, [pc, #368]	; (9000851c <tcp_slowtmr+0x26c>)
900083aa:	f240 42d5 	movw	r2, #1237	; 0x4d5
900083ae:	4961      	ldr	r1, [pc, #388]	; (90008534 <tcp_slowtmr+0x284>)
900083b0:	485c      	ldr	r0, [pc, #368]	; (90008524 <tcp_slowtmr+0x274>)
900083b2:	f008 f89b 	bl	900104ec <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
900083b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900083b8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
900083bc:	2b0b      	cmp	r3, #11
900083be:	d905      	bls.n	900083cc <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
900083c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
900083c4:	3301      	adds	r3, #1
900083c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
900083ca:	e0ed      	b.n	900085a8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
900083cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900083ce:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
900083d2:	3b01      	subs	r3, #1
900083d4:	4a58      	ldr	r2, [pc, #352]	; (90008538 <tcp_slowtmr+0x288>)
900083d6:	5cd3      	ldrb	r3, [r2, r3]
900083d8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
900083da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900083dc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
900083e0:	7c7a      	ldrb	r2, [r7, #17]
900083e2:	429a      	cmp	r2, r3
900083e4:	d907      	bls.n	900083f6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
900083e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900083e8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
900083ec:	3301      	adds	r3, #1
900083ee:	b2da      	uxtb	r2, r3
900083f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900083f2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
900083f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900083f8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
900083fc:	7c7a      	ldrb	r2, [r7, #17]
900083fe:	429a      	cmp	r2, r3
90008400:	f200 80d2 	bhi.w	900085a8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
90008404:	2301      	movs	r3, #1
90008406:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
90008408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000840a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
9000840e:	2b00      	cmp	r3, #0
90008410:	d108      	bne.n	90008424 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
90008412:	6af8      	ldr	r0, [r7, #44]	; 0x2c
90008414:	f005 f96e 	bl	9000d6f4 <tcp_zero_window_probe>
90008418:	4603      	mov	r3, r0
9000841a:	2b00      	cmp	r3, #0
9000841c:	d014      	beq.n	90008448 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
9000841e:	2300      	movs	r3, #0
90008420:	623b      	str	r3, [r7, #32]
90008422:	e011      	b.n	90008448 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
90008424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90008426:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
9000842a:	4619      	mov	r1, r3
9000842c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
9000842e:	f004 f833 	bl	9000c498 <tcp_split_unsent_seg>
90008432:	4603      	mov	r3, r0
90008434:	2b00      	cmp	r3, #0
90008436:	d107      	bne.n	90008448 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
90008438:	6af8      	ldr	r0, [r7, #44]	; 0x2c
9000843a:	f004 fab3 	bl	9000c9a4 <tcp_output>
9000843e:	4603      	mov	r3, r0
90008440:	2b00      	cmp	r3, #0
90008442:	d101      	bne.n	90008448 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
90008444:	2300      	movs	r3, #0
90008446:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
90008448:	6a3b      	ldr	r3, [r7, #32]
9000844a:	2b00      	cmp	r3, #0
9000844c:	f000 80ac 	beq.w	900085a8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
90008450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90008452:	2200      	movs	r2, #0
90008454:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
90008458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000845a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
9000845e:	2b06      	cmp	r3, #6
90008460:	f200 80a2 	bhi.w	900085a8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
90008464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90008466:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
9000846a:	3301      	adds	r3, #1
9000846c:	b2da      	uxtb	r2, r3
9000846e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90008470:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
90008474:	e098      	b.n	900085a8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
90008476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90008478:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
9000847c:	2b00      	cmp	r3, #0
9000847e:	db0f      	blt.n	900084a0 <tcp_slowtmr+0x1f0>
90008480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90008482:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
90008486:	f647 72ff 	movw	r2, #32767	; 0x7fff
9000848a:	4293      	cmp	r3, r2
9000848c:	d008      	beq.n	900084a0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
9000848e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90008490:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
90008494:	b29b      	uxth	r3, r3
90008496:	3301      	adds	r3, #1
90008498:	b29b      	uxth	r3, r3
9000849a:	b21a      	sxth	r2, r3
9000849c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000849e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
900084a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900084a2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
900084a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900084a8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
900084ac:	429a      	cmp	r2, r3
900084ae:	db7b      	blt.n	900085a8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
900084b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
900084b2:	f004 fd69 	bl	9000cf88 <tcp_rexmit_rto_prepare>
900084b6:	4603      	mov	r3, r0
900084b8:	2b00      	cmp	r3, #0
900084ba:	d007      	beq.n	900084cc <tcp_slowtmr+0x21c>
900084bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900084be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900084c0:	2b00      	cmp	r3, #0
900084c2:	d171      	bne.n	900085a8 <tcp_slowtmr+0x2f8>
900084c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900084c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
900084c8:	2b00      	cmp	r3, #0
900084ca:	d06d      	beq.n	900085a8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
900084cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900084ce:	7d1b      	ldrb	r3, [r3, #20]
900084d0:	2b02      	cmp	r3, #2
900084d2:	d03a      	beq.n	9000854a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
900084d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900084d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
900084da:	2b0c      	cmp	r3, #12
900084dc:	bf28      	it	cs
900084de:	230c      	movcs	r3, #12
900084e0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
900084e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900084e4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
900084e8:	10db      	asrs	r3, r3, #3
900084ea:	b21b      	sxth	r3, r3
900084ec:	461a      	mov	r2, r3
900084ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900084f0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
900084f4:	4413      	add	r3, r2
900084f6:	7efa      	ldrb	r2, [r7, #27]
900084f8:	4910      	ldr	r1, [pc, #64]	; (9000853c <tcp_slowtmr+0x28c>)
900084fa:	5c8a      	ldrb	r2, [r1, r2]
900084fc:	4093      	lsls	r3, r2
900084fe:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
90008500:	697b      	ldr	r3, [r7, #20]
90008502:	f647 72fe 	movw	r2, #32766	; 0x7ffe
90008506:	4293      	cmp	r3, r2
90008508:	dc1a      	bgt.n	90008540 <tcp_slowtmr+0x290>
9000850a:	697b      	ldr	r3, [r7, #20]
9000850c:	b21a      	sxth	r2, r3
9000850e:	e019      	b.n	90008544 <tcp_slowtmr+0x294>
90008510:	2000a8a0 	.word	0x2000a8a0
90008514:	2000a8b6 	.word	0x2000a8b6
90008518:	2000a8ac 	.word	0x2000a8ac
9000851c:	900127bc 	.word	0x900127bc
90008520:	90012b00 	.word	0x90012b00
90008524:	90012800 	.word	0x90012800
90008528:	90012b2c 	.word	0x90012b2c
9000852c:	90012b58 	.word	0x90012b58
90008530:	90012b88 	.word	0x90012b88
90008534:	90012bbc 	.word	0x90012bbc
90008538:	90015af8 	.word	0x90015af8
9000853c:	90015ae8 	.word	0x90015ae8
90008540:	f647 72ff 	movw	r2, #32767	; 0x7fff
90008544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90008546:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
9000854a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000854c:	2200      	movs	r2, #0
9000854e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
90008550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90008552:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
90008556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90008558:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
9000855c:	4293      	cmp	r3, r2
9000855e:	bf28      	it	cs
90008560:	4613      	movcs	r3, r2
90008562:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
90008564:	8a7b      	ldrh	r3, [r7, #18]
90008566:	085b      	lsrs	r3, r3, #1
90008568:	b29a      	uxth	r2, r3
9000856a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000856c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
90008570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90008572:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
90008576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90008578:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000857a:	005b      	lsls	r3, r3, #1
9000857c:	b29b      	uxth	r3, r3
9000857e:	429a      	cmp	r2, r3
90008580:	d206      	bcs.n	90008590 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
90008582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90008584:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
90008586:	005b      	lsls	r3, r3, #1
90008588:	b29a      	uxth	r2, r3
9000858a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000858c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
90008590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90008592:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
90008594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90008596:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
9000859a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000859c:	2200      	movs	r2, #0
9000859e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
900085a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
900085a4:	f004 fd60 	bl	9000d068 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
900085a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900085aa:	7d1b      	ldrb	r3, [r3, #20]
900085ac:	2b06      	cmp	r3, #6
900085ae:	d111      	bne.n	900085d4 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
900085b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900085b2:	8b5b      	ldrh	r3, [r3, #26]
900085b4:	f003 0310 	and.w	r3, r3, #16
900085b8:	2b00      	cmp	r3, #0
900085ba:	d00b      	beq.n	900085d4 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
900085bc:	4b9c      	ldr	r3, [pc, #624]	; (90008830 <tcp_slowtmr+0x580>)
900085be:	681a      	ldr	r2, [r3, #0]
900085c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900085c2:	6a1b      	ldr	r3, [r3, #32]
900085c4:	1ad3      	subs	r3, r2, r3
900085c6:	2b28      	cmp	r3, #40	; 0x28
900085c8:	d904      	bls.n	900085d4 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
900085ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
900085ce:	3301      	adds	r3, #1
900085d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
900085d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900085d6:	7a5b      	ldrb	r3, [r3, #9]
900085d8:	f003 0308 	and.w	r3, r3, #8
900085dc:	2b00      	cmp	r3, #0
900085de:	d04a      	beq.n	90008676 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
900085e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900085e2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
900085e4:	2b04      	cmp	r3, #4
900085e6:	d003      	beq.n	900085f0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
900085e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900085ea:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
900085ec:	2b07      	cmp	r3, #7
900085ee:	d142      	bne.n	90008676 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
900085f0:	4b8f      	ldr	r3, [pc, #572]	; (90008830 <tcp_slowtmr+0x580>)
900085f2:	681a      	ldr	r2, [r3, #0]
900085f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900085f6:	6a1b      	ldr	r3, [r3, #32]
900085f8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
900085fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900085fc:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
90008600:	4b8c      	ldr	r3, [pc, #560]	; (90008834 <tcp_slowtmr+0x584>)
90008602:	440b      	add	r3, r1
90008604:	498c      	ldr	r1, [pc, #560]	; (90008838 <tcp_slowtmr+0x588>)
90008606:	fba1 1303 	umull	r1, r3, r1, r3
9000860a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
9000860c:	429a      	cmp	r2, r3
9000860e:	d90a      	bls.n	90008626 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
90008610:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
90008614:	3301      	adds	r3, #1
90008616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
9000861a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
9000861e:	3301      	adds	r3, #1
90008620:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
90008624:	e027      	b.n	90008676 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
90008626:	4b82      	ldr	r3, [pc, #520]	; (90008830 <tcp_slowtmr+0x580>)
90008628:	681a      	ldr	r2, [r3, #0]
9000862a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000862c:	6a1b      	ldr	r3, [r3, #32]
9000862e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
90008630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90008632:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
90008636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90008638:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
9000863c:	4618      	mov	r0, r3
9000863e:	4b7f      	ldr	r3, [pc, #508]	; (9000883c <tcp_slowtmr+0x58c>)
90008640:	fb00 f303 	mul.w	r3, r0, r3
90008644:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
90008646:	497c      	ldr	r1, [pc, #496]	; (90008838 <tcp_slowtmr+0x588>)
90008648:	fba1 1303 	umull	r1, r3, r1, r3
9000864c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
9000864e:	429a      	cmp	r2, r3
90008650:	d911      	bls.n	90008676 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
90008652:	6af8      	ldr	r0, [r7, #44]	; 0x2c
90008654:	f005 f80e 	bl	9000d674 <tcp_keepalive>
90008658:	4603      	mov	r3, r0
9000865a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
9000865e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
90008662:	2b00      	cmp	r3, #0
90008664:	d107      	bne.n	90008676 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
90008666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90008668:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
9000866c:	3301      	adds	r3, #1
9000866e:	b2da      	uxtb	r2, r3
90008670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90008672:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
90008676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90008678:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000867a:	2b00      	cmp	r3, #0
9000867c:	d011      	beq.n	900086a2 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
9000867e:	4b6c      	ldr	r3, [pc, #432]	; (90008830 <tcp_slowtmr+0x580>)
90008680:	681a      	ldr	r2, [r3, #0]
90008682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90008684:	6a1b      	ldr	r3, [r3, #32]
90008686:	1ad2      	subs	r2, r2, r3
90008688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000868a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
9000868e:	4619      	mov	r1, r3
90008690:	460b      	mov	r3, r1
90008692:	005b      	lsls	r3, r3, #1
90008694:	440b      	add	r3, r1
90008696:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
90008698:	429a      	cmp	r2, r3
9000869a:	d302      	bcc.n	900086a2 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
9000869c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
9000869e:	f000 fec9 	bl	90009434 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
900086a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900086a4:	7d1b      	ldrb	r3, [r3, #20]
900086a6:	2b03      	cmp	r3, #3
900086a8:	d10b      	bne.n	900086c2 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
900086aa:	4b61      	ldr	r3, [pc, #388]	; (90008830 <tcp_slowtmr+0x580>)
900086ac:	681a      	ldr	r2, [r3, #0]
900086ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900086b0:	6a1b      	ldr	r3, [r3, #32]
900086b2:	1ad3      	subs	r3, r2, r3
900086b4:	2b28      	cmp	r3, #40	; 0x28
900086b6:	d904      	bls.n	900086c2 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
900086b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
900086bc:	3301      	adds	r3, #1
900086be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
900086c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900086c4:	7d1b      	ldrb	r3, [r3, #20]
900086c6:	2b09      	cmp	r3, #9
900086c8:	d10b      	bne.n	900086e2 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
900086ca:	4b59      	ldr	r3, [pc, #356]	; (90008830 <tcp_slowtmr+0x580>)
900086cc:	681a      	ldr	r2, [r3, #0]
900086ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900086d0:	6a1b      	ldr	r3, [r3, #32]
900086d2:	1ad3      	subs	r3, r2, r3
900086d4:	2bf0      	cmp	r3, #240	; 0xf0
900086d6:	d904      	bls.n	900086e2 <tcp_slowtmr+0x432>
        ++pcb_remove;
900086d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
900086dc:	3301      	adds	r3, #1
900086de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
900086e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
900086e6:	2b00      	cmp	r3, #0
900086e8:	d060      	beq.n	900087ac <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
900086ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900086ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
900086f0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
900086f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
900086f4:	f000 fcea 	bl	900090cc <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
900086f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
900086fa:	2b00      	cmp	r3, #0
900086fc:	d010      	beq.n	90008720 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
900086fe:	4b50      	ldr	r3, [pc, #320]	; (90008840 <tcp_slowtmr+0x590>)
90008700:	681b      	ldr	r3, [r3, #0]
90008702:	6afa      	ldr	r2, [r7, #44]	; 0x2c
90008704:	429a      	cmp	r2, r3
90008706:	d106      	bne.n	90008716 <tcp_slowtmr+0x466>
90008708:	4b4e      	ldr	r3, [pc, #312]	; (90008844 <tcp_slowtmr+0x594>)
9000870a:	f240 526d 	movw	r2, #1389	; 0x56d
9000870e:	494e      	ldr	r1, [pc, #312]	; (90008848 <tcp_slowtmr+0x598>)
90008710:	484e      	ldr	r0, [pc, #312]	; (9000884c <tcp_slowtmr+0x59c>)
90008712:	f007 feeb 	bl	900104ec <iprintf>
        prev->next = pcb->next;
90008716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90008718:	68da      	ldr	r2, [r3, #12]
9000871a:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000871c:	60da      	str	r2, [r3, #12]
9000871e:	e00f      	b.n	90008740 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
90008720:	4b47      	ldr	r3, [pc, #284]	; (90008840 <tcp_slowtmr+0x590>)
90008722:	681b      	ldr	r3, [r3, #0]
90008724:	6afa      	ldr	r2, [r7, #44]	; 0x2c
90008726:	429a      	cmp	r2, r3
90008728:	d006      	beq.n	90008738 <tcp_slowtmr+0x488>
9000872a:	4b46      	ldr	r3, [pc, #280]	; (90008844 <tcp_slowtmr+0x594>)
9000872c:	f240 5271 	movw	r2, #1393	; 0x571
90008730:	4947      	ldr	r1, [pc, #284]	; (90008850 <tcp_slowtmr+0x5a0>)
90008732:	4846      	ldr	r0, [pc, #280]	; (9000884c <tcp_slowtmr+0x59c>)
90008734:	f007 feda 	bl	900104ec <iprintf>
        tcp_active_pcbs = pcb->next;
90008738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000873a:	68db      	ldr	r3, [r3, #12]
9000873c:	4a40      	ldr	r2, [pc, #256]	; (90008840 <tcp_slowtmr+0x590>)
9000873e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
90008740:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
90008744:	2b00      	cmp	r3, #0
90008746:	d013      	beq.n	90008770 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
90008748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000874a:	6d18      	ldr	r0, [r3, #80]	; 0x50
9000874c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000874e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
90008750:	6afd      	ldr	r5, [r7, #44]	; 0x2c
90008752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90008754:	3304      	adds	r3, #4
90008756:	6afa      	ldr	r2, [r7, #44]	; 0x2c
90008758:	8ad2      	ldrh	r2, [r2, #22]
9000875a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
9000875c:	8b09      	ldrh	r1, [r1, #24]
9000875e:	9102      	str	r1, [sp, #8]
90008760:	9201      	str	r2, [sp, #4]
90008762:	9300      	str	r3, [sp, #0]
90008764:	462b      	mov	r3, r5
90008766:	4622      	mov	r2, r4
90008768:	4601      	mov	r1, r0
9000876a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
9000876c:	f004 fece 	bl	9000d50c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
90008770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90008772:	691b      	ldr	r3, [r3, #16]
90008774:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
90008776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90008778:	7d1b      	ldrb	r3, [r3, #20]
9000877a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
9000877c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000877e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
90008780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90008782:	68db      	ldr	r3, [r3, #12]
90008784:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
90008786:	6838      	ldr	r0, [r7, #0]
90008788:	f7ff f83a 	bl	90007800 <tcp_free>

      tcp_active_pcbs_changed = 0;
9000878c:	4b31      	ldr	r3, [pc, #196]	; (90008854 <tcp_slowtmr+0x5a4>)
9000878e:	2200      	movs	r2, #0
90008790:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
90008792:	68fb      	ldr	r3, [r7, #12]
90008794:	2b00      	cmp	r3, #0
90008796:	d004      	beq.n	900087a2 <tcp_slowtmr+0x4f2>
90008798:	68fb      	ldr	r3, [r7, #12]
9000879a:	f06f 010c 	mvn.w	r1, #12
9000879e:	68b8      	ldr	r0, [r7, #8]
900087a0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
900087a2:	4b2c      	ldr	r3, [pc, #176]	; (90008854 <tcp_slowtmr+0x5a4>)
900087a4:	781b      	ldrb	r3, [r3, #0]
900087a6:	2b00      	cmp	r3, #0
900087a8:	d037      	beq.n	9000881a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
900087aa:	e592      	b.n	900082d2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
900087ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900087ae:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
900087b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900087b2:	68db      	ldr	r3, [r3, #12]
900087b4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
900087b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
900087b8:	7f1b      	ldrb	r3, [r3, #28]
900087ba:	3301      	adds	r3, #1
900087bc:	b2da      	uxtb	r2, r3
900087be:	6abb      	ldr	r3, [r7, #40]	; 0x28
900087c0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
900087c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
900087c4:	7f1a      	ldrb	r2, [r3, #28]
900087c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
900087c8:	7f5b      	ldrb	r3, [r3, #29]
900087ca:	429a      	cmp	r2, r3
900087cc:	d325      	bcc.n	9000881a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
900087ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
900087d0:	2200      	movs	r2, #0
900087d2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
900087d4:	4b1f      	ldr	r3, [pc, #124]	; (90008854 <tcp_slowtmr+0x5a4>)
900087d6:	2200      	movs	r2, #0
900087d8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
900087da:	6abb      	ldr	r3, [r7, #40]	; 0x28
900087dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
900087e0:	2b00      	cmp	r3, #0
900087e2:	d00b      	beq.n	900087fc <tcp_slowtmr+0x54c>
900087e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
900087e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
900087ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
900087ec:	6912      	ldr	r2, [r2, #16]
900087ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
900087f0:	4610      	mov	r0, r2
900087f2:	4798      	blx	r3
900087f4:	4603      	mov	r3, r0
900087f6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
900087fa:	e002      	b.n	90008802 <tcp_slowtmr+0x552>
900087fc:	2300      	movs	r3, #0
900087fe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
90008802:	4b14      	ldr	r3, [pc, #80]	; (90008854 <tcp_slowtmr+0x5a4>)
90008804:	781b      	ldrb	r3, [r3, #0]
90008806:	2b00      	cmp	r3, #0
90008808:	d000      	beq.n	9000880c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
9000880a:	e562      	b.n	900082d2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
9000880c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
90008810:	2b00      	cmp	r3, #0
90008812:	d102      	bne.n	9000881a <tcp_slowtmr+0x56a>
          tcp_output(prev);
90008814:	6ab8      	ldr	r0, [r7, #40]	; 0x28
90008816:	f004 f8c5 	bl	9000c9a4 <tcp_output>
  while (pcb != NULL) {
9000881a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000881c:	2b00      	cmp	r3, #0
9000881e:	f47f ad5e 	bne.w	900082de <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
90008822:	2300      	movs	r3, #0
90008824:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
90008826:	4b0c      	ldr	r3, [pc, #48]	; (90008858 <tcp_slowtmr+0x5a8>)
90008828:	681b      	ldr	r3, [r3, #0]
9000882a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
9000882c:	e069      	b.n	90008902 <tcp_slowtmr+0x652>
9000882e:	bf00      	nop
90008830:	2000a8a0 	.word	0x2000a8a0
90008834:	000a4cb8 	.word	0x000a4cb8
90008838:	10624dd3 	.word	0x10624dd3
9000883c:	000124f8 	.word	0x000124f8
90008840:	2000a8ac 	.word	0x2000a8ac
90008844:	900127bc 	.word	0x900127bc
90008848:	90012bf4 	.word	0x90012bf4
9000884c:	90012800 	.word	0x90012800
90008850:	90012c20 	.word	0x90012c20
90008854:	2000a8b4 	.word	0x2000a8b4
90008858:	2000a8b0 	.word	0x2000a8b0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
9000885c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000885e:	7d1b      	ldrb	r3, [r3, #20]
90008860:	2b0a      	cmp	r3, #10
90008862:	d006      	beq.n	90008872 <tcp_slowtmr+0x5c2>
90008864:	4b2b      	ldr	r3, [pc, #172]	; (90008914 <tcp_slowtmr+0x664>)
90008866:	f240 52a1 	movw	r2, #1441	; 0x5a1
9000886a:	492b      	ldr	r1, [pc, #172]	; (90008918 <tcp_slowtmr+0x668>)
9000886c:	482b      	ldr	r0, [pc, #172]	; (9000891c <tcp_slowtmr+0x66c>)
9000886e:	f007 fe3d 	bl	900104ec <iprintf>
    pcb_remove = 0;
90008872:	2300      	movs	r3, #0
90008874:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
90008878:	4b29      	ldr	r3, [pc, #164]	; (90008920 <tcp_slowtmr+0x670>)
9000887a:	681a      	ldr	r2, [r3, #0]
9000887c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000887e:	6a1b      	ldr	r3, [r3, #32]
90008880:	1ad3      	subs	r3, r2, r3
90008882:	2bf0      	cmp	r3, #240	; 0xf0
90008884:	d904      	bls.n	90008890 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
90008886:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
9000888a:	3301      	adds	r3, #1
9000888c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
90008890:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
90008894:	2b00      	cmp	r3, #0
90008896:	d02f      	beq.n	900088f8 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
90008898:	6af8      	ldr	r0, [r7, #44]	; 0x2c
9000889a:	f000 fc17 	bl	900090cc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
9000889e:	6abb      	ldr	r3, [r7, #40]	; 0x28
900088a0:	2b00      	cmp	r3, #0
900088a2:	d010      	beq.n	900088c6 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
900088a4:	4b1f      	ldr	r3, [pc, #124]	; (90008924 <tcp_slowtmr+0x674>)
900088a6:	681b      	ldr	r3, [r3, #0]
900088a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
900088aa:	429a      	cmp	r2, r3
900088ac:	d106      	bne.n	900088bc <tcp_slowtmr+0x60c>
900088ae:	4b19      	ldr	r3, [pc, #100]	; (90008914 <tcp_slowtmr+0x664>)
900088b0:	f240 52af 	movw	r2, #1455	; 0x5af
900088b4:	491c      	ldr	r1, [pc, #112]	; (90008928 <tcp_slowtmr+0x678>)
900088b6:	4819      	ldr	r0, [pc, #100]	; (9000891c <tcp_slowtmr+0x66c>)
900088b8:	f007 fe18 	bl	900104ec <iprintf>
        prev->next = pcb->next;
900088bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900088be:	68da      	ldr	r2, [r3, #12]
900088c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
900088c2:	60da      	str	r2, [r3, #12]
900088c4:	e00f      	b.n	900088e6 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
900088c6:	4b17      	ldr	r3, [pc, #92]	; (90008924 <tcp_slowtmr+0x674>)
900088c8:	681b      	ldr	r3, [r3, #0]
900088ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
900088cc:	429a      	cmp	r2, r3
900088ce:	d006      	beq.n	900088de <tcp_slowtmr+0x62e>
900088d0:	4b10      	ldr	r3, [pc, #64]	; (90008914 <tcp_slowtmr+0x664>)
900088d2:	f240 52b3 	movw	r2, #1459	; 0x5b3
900088d6:	4915      	ldr	r1, [pc, #84]	; (9000892c <tcp_slowtmr+0x67c>)
900088d8:	4810      	ldr	r0, [pc, #64]	; (9000891c <tcp_slowtmr+0x66c>)
900088da:	f007 fe07 	bl	900104ec <iprintf>
        tcp_tw_pcbs = pcb->next;
900088de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900088e0:	68db      	ldr	r3, [r3, #12]
900088e2:	4a10      	ldr	r2, [pc, #64]	; (90008924 <tcp_slowtmr+0x674>)
900088e4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
900088e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900088e8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
900088ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900088ec:	68db      	ldr	r3, [r3, #12]
900088ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
900088f0:	69f8      	ldr	r0, [r7, #28]
900088f2:	f7fe ff85 	bl	90007800 <tcp_free>
900088f6:	e004      	b.n	90008902 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
900088f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900088fa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
900088fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900088fe:	68db      	ldr	r3, [r3, #12]
90008900:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
90008902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90008904:	2b00      	cmp	r3, #0
90008906:	d1a9      	bne.n	9000885c <tcp_slowtmr+0x5ac>
    }
  }
}
90008908:	bf00      	nop
9000890a:	bf00      	nop
9000890c:	3730      	adds	r7, #48	; 0x30
9000890e:	46bd      	mov	sp, r7
90008910:	bdb0      	pop	{r4, r5, r7, pc}
90008912:	bf00      	nop
90008914:	900127bc 	.word	0x900127bc
90008918:	90012c4c 	.word	0x90012c4c
9000891c:	90012800 	.word	0x90012800
90008920:	2000a8a0 	.word	0x2000a8a0
90008924:	2000a8b0 	.word	0x2000a8b0
90008928:	90012c7c 	.word	0x90012c7c
9000892c:	90012ca4 	.word	0x90012ca4

90008930 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
90008930:	b580      	push	{r7, lr}
90008932:	b082      	sub	sp, #8
90008934:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
90008936:	4b2d      	ldr	r3, [pc, #180]	; (900089ec <tcp_fasttmr+0xbc>)
90008938:	781b      	ldrb	r3, [r3, #0]
9000893a:	3301      	adds	r3, #1
9000893c:	b2da      	uxtb	r2, r3
9000893e:	4b2b      	ldr	r3, [pc, #172]	; (900089ec <tcp_fasttmr+0xbc>)
90008940:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
90008942:	4b2b      	ldr	r3, [pc, #172]	; (900089f0 <tcp_fasttmr+0xc0>)
90008944:	681b      	ldr	r3, [r3, #0]
90008946:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
90008948:	e048      	b.n	900089dc <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
9000894a:	687b      	ldr	r3, [r7, #4]
9000894c:	7f9a      	ldrb	r2, [r3, #30]
9000894e:	4b27      	ldr	r3, [pc, #156]	; (900089ec <tcp_fasttmr+0xbc>)
90008950:	781b      	ldrb	r3, [r3, #0]
90008952:	429a      	cmp	r2, r3
90008954:	d03f      	beq.n	900089d6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
90008956:	4b25      	ldr	r3, [pc, #148]	; (900089ec <tcp_fasttmr+0xbc>)
90008958:	781a      	ldrb	r2, [r3, #0]
9000895a:	687b      	ldr	r3, [r7, #4]
9000895c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
9000895e:	687b      	ldr	r3, [r7, #4]
90008960:	8b5b      	ldrh	r3, [r3, #26]
90008962:	f003 0301 	and.w	r3, r3, #1
90008966:	2b00      	cmp	r3, #0
90008968:	d010      	beq.n	9000898c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
9000896a:	687b      	ldr	r3, [r7, #4]
9000896c:	8b5b      	ldrh	r3, [r3, #26]
9000896e:	f043 0302 	orr.w	r3, r3, #2
90008972:	b29a      	uxth	r2, r3
90008974:	687b      	ldr	r3, [r7, #4]
90008976:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
90008978:	6878      	ldr	r0, [r7, #4]
9000897a:	f004 f813 	bl	9000c9a4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
9000897e:	687b      	ldr	r3, [r7, #4]
90008980:	8b5b      	ldrh	r3, [r3, #26]
90008982:	f023 0303 	bic.w	r3, r3, #3
90008986:	b29a      	uxth	r2, r3
90008988:	687b      	ldr	r3, [r7, #4]
9000898a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
9000898c:	687b      	ldr	r3, [r7, #4]
9000898e:	8b5b      	ldrh	r3, [r3, #26]
90008990:	f003 0308 	and.w	r3, r3, #8
90008994:	2b00      	cmp	r3, #0
90008996:	d009      	beq.n	900089ac <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
90008998:	687b      	ldr	r3, [r7, #4]
9000899a:	8b5b      	ldrh	r3, [r3, #26]
9000899c:	f023 0308 	bic.w	r3, r3, #8
900089a0:	b29a      	uxth	r2, r3
900089a2:	687b      	ldr	r3, [r7, #4]
900089a4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
900089a6:	6878      	ldr	r0, [r7, #4]
900089a8:	f7ff f8be 	bl	90007b28 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
900089ac:	687b      	ldr	r3, [r7, #4]
900089ae:	68db      	ldr	r3, [r3, #12]
900089b0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
900089b2:	687b      	ldr	r3, [r7, #4]
900089b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
900089b6:	2b00      	cmp	r3, #0
900089b8:	d00a      	beq.n	900089d0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
900089ba:	4b0e      	ldr	r3, [pc, #56]	; (900089f4 <tcp_fasttmr+0xc4>)
900089bc:	2200      	movs	r2, #0
900089be:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
900089c0:	6878      	ldr	r0, [r7, #4]
900089c2:	f000 f819 	bl	900089f8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
900089c6:	4b0b      	ldr	r3, [pc, #44]	; (900089f4 <tcp_fasttmr+0xc4>)
900089c8:	781b      	ldrb	r3, [r3, #0]
900089ca:	2b00      	cmp	r3, #0
900089cc:	d000      	beq.n	900089d0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
900089ce:	e7b8      	b.n	90008942 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
900089d0:	683b      	ldr	r3, [r7, #0]
900089d2:	607b      	str	r3, [r7, #4]
900089d4:	e002      	b.n	900089dc <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
900089d6:	687b      	ldr	r3, [r7, #4]
900089d8:	68db      	ldr	r3, [r3, #12]
900089da:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
900089dc:	687b      	ldr	r3, [r7, #4]
900089de:	2b00      	cmp	r3, #0
900089e0:	d1b3      	bne.n	9000894a <tcp_fasttmr+0x1a>
    }
  }
}
900089e2:	bf00      	nop
900089e4:	bf00      	nop
900089e6:	3708      	adds	r7, #8
900089e8:	46bd      	mov	sp, r7
900089ea:	bd80      	pop	{r7, pc}
900089ec:	2000a8b6 	.word	0x2000a8b6
900089f0:	2000a8ac 	.word	0x2000a8ac
900089f4:	2000a8b4 	.word	0x2000a8b4

900089f8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
900089f8:	b590      	push	{r4, r7, lr}
900089fa:	b085      	sub	sp, #20
900089fc:	af00      	add	r7, sp, #0
900089fe:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
90008a00:	687b      	ldr	r3, [r7, #4]
90008a02:	2b00      	cmp	r3, #0
90008a04:	d109      	bne.n	90008a1a <tcp_process_refused_data+0x22>
90008a06:	4b37      	ldr	r3, [pc, #220]	; (90008ae4 <tcp_process_refused_data+0xec>)
90008a08:	f240 6209 	movw	r2, #1545	; 0x609
90008a0c:	4936      	ldr	r1, [pc, #216]	; (90008ae8 <tcp_process_refused_data+0xf0>)
90008a0e:	4837      	ldr	r0, [pc, #220]	; (90008aec <tcp_process_refused_data+0xf4>)
90008a10:	f007 fd6c 	bl	900104ec <iprintf>
90008a14:	f06f 030f 	mvn.w	r3, #15
90008a18:	e060      	b.n	90008adc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
90008a1a:	687b      	ldr	r3, [r7, #4]
90008a1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
90008a1e:	7b5b      	ldrb	r3, [r3, #13]
90008a20:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
90008a22:	687b      	ldr	r3, [r7, #4]
90008a24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
90008a26:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
90008a28:	687b      	ldr	r3, [r7, #4]
90008a2a:	2200      	movs	r2, #0
90008a2c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
90008a2e:	687b      	ldr	r3, [r7, #4]
90008a30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90008a34:	2b00      	cmp	r3, #0
90008a36:	d00b      	beq.n	90008a50 <tcp_process_refused_data+0x58>
90008a38:	687b      	ldr	r3, [r7, #4]
90008a3a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
90008a3e:	687b      	ldr	r3, [r7, #4]
90008a40:	6918      	ldr	r0, [r3, #16]
90008a42:	2300      	movs	r3, #0
90008a44:	68ba      	ldr	r2, [r7, #8]
90008a46:	6879      	ldr	r1, [r7, #4]
90008a48:	47a0      	blx	r4
90008a4a:	4603      	mov	r3, r0
90008a4c:	73fb      	strb	r3, [r7, #15]
90008a4e:	e007      	b.n	90008a60 <tcp_process_refused_data+0x68>
90008a50:	2300      	movs	r3, #0
90008a52:	68ba      	ldr	r2, [r7, #8]
90008a54:	6879      	ldr	r1, [r7, #4]
90008a56:	2000      	movs	r0, #0
90008a58:	f000 f8c2 	bl	90008be0 <tcp_recv_null>
90008a5c:	4603      	mov	r3, r0
90008a5e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
90008a60:	f997 300f 	ldrsb.w	r3, [r7, #15]
90008a64:	2b00      	cmp	r3, #0
90008a66:	d12a      	bne.n	90008abe <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
90008a68:	7bbb      	ldrb	r3, [r7, #14]
90008a6a:	f003 0320 	and.w	r3, r3, #32
90008a6e:	2b00      	cmp	r3, #0
90008a70:	d033      	beq.n	90008ada <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
90008a72:	687b      	ldr	r3, [r7, #4]
90008a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
90008a76:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
90008a7a:	d005      	beq.n	90008a88 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
90008a7c:	687b      	ldr	r3, [r7, #4]
90008a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
90008a80:	3301      	adds	r3, #1
90008a82:	b29a      	uxth	r2, r3
90008a84:	687b      	ldr	r3, [r7, #4]
90008a86:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
90008a88:	687b      	ldr	r3, [r7, #4]
90008a8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90008a8e:	2b00      	cmp	r3, #0
90008a90:	d00b      	beq.n	90008aaa <tcp_process_refused_data+0xb2>
90008a92:	687b      	ldr	r3, [r7, #4]
90008a94:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
90008a98:	687b      	ldr	r3, [r7, #4]
90008a9a:	6918      	ldr	r0, [r3, #16]
90008a9c:	2300      	movs	r3, #0
90008a9e:	2200      	movs	r2, #0
90008aa0:	6879      	ldr	r1, [r7, #4]
90008aa2:	47a0      	blx	r4
90008aa4:	4603      	mov	r3, r0
90008aa6:	73fb      	strb	r3, [r7, #15]
90008aa8:	e001      	b.n	90008aae <tcp_process_refused_data+0xb6>
90008aaa:	2300      	movs	r3, #0
90008aac:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
90008aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
90008ab2:	f113 0f0d 	cmn.w	r3, #13
90008ab6:	d110      	bne.n	90008ada <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
90008ab8:	f06f 030c 	mvn.w	r3, #12
90008abc:	e00e      	b.n	90008adc <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
90008abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
90008ac2:	f113 0f0d 	cmn.w	r3, #13
90008ac6:	d102      	bne.n	90008ace <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
90008ac8:	f06f 030c 	mvn.w	r3, #12
90008acc:	e006      	b.n	90008adc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
90008ace:	687b      	ldr	r3, [r7, #4]
90008ad0:	68ba      	ldr	r2, [r7, #8]
90008ad2:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
90008ad4:	f06f 0304 	mvn.w	r3, #4
90008ad8:	e000      	b.n	90008adc <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
90008ada:	2300      	movs	r3, #0
}
90008adc:	4618      	mov	r0, r3
90008ade:	3714      	adds	r7, #20
90008ae0:	46bd      	mov	sp, r7
90008ae2:	bd90      	pop	{r4, r7, pc}
90008ae4:	900127bc 	.word	0x900127bc
90008ae8:	90012ccc 	.word	0x90012ccc
90008aec:	90012800 	.word	0x90012800

90008af0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
90008af0:	b580      	push	{r7, lr}
90008af2:	b084      	sub	sp, #16
90008af4:	af00      	add	r7, sp, #0
90008af6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
90008af8:	e007      	b.n	90008b0a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
90008afa:	687b      	ldr	r3, [r7, #4]
90008afc:	681b      	ldr	r3, [r3, #0]
90008afe:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
90008b00:	6878      	ldr	r0, [r7, #4]
90008b02:	f000 f80a 	bl	90008b1a <tcp_seg_free>
    seg = next;
90008b06:	68fb      	ldr	r3, [r7, #12]
90008b08:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
90008b0a:	687b      	ldr	r3, [r7, #4]
90008b0c:	2b00      	cmp	r3, #0
90008b0e:	d1f4      	bne.n	90008afa <tcp_segs_free+0xa>
  }
}
90008b10:	bf00      	nop
90008b12:	bf00      	nop
90008b14:	3710      	adds	r7, #16
90008b16:	46bd      	mov	sp, r7
90008b18:	bd80      	pop	{r7, pc}

90008b1a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
90008b1a:	b580      	push	{r7, lr}
90008b1c:	b082      	sub	sp, #8
90008b1e:	af00      	add	r7, sp, #0
90008b20:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
90008b22:	687b      	ldr	r3, [r7, #4]
90008b24:	2b00      	cmp	r3, #0
90008b26:	d00c      	beq.n	90008b42 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
90008b28:	687b      	ldr	r3, [r7, #4]
90008b2a:	685b      	ldr	r3, [r3, #4]
90008b2c:	2b00      	cmp	r3, #0
90008b2e:	d004      	beq.n	90008b3a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
90008b30:	687b      	ldr	r3, [r7, #4]
90008b32:	685b      	ldr	r3, [r3, #4]
90008b34:	4618      	mov	r0, r3
90008b36:	f7fe fbc3 	bl	900072c0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
90008b3a:	6879      	ldr	r1, [r7, #4]
90008b3c:	2003      	movs	r0, #3
90008b3e:	f7fd fd49 	bl	900065d4 <memp_free>
  }
}
90008b42:	bf00      	nop
90008b44:	3708      	adds	r7, #8
90008b46:	46bd      	mov	sp, r7
90008b48:	bd80      	pop	{r7, pc}
	...

90008b4c <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
90008b4c:	b580      	push	{r7, lr}
90008b4e:	b082      	sub	sp, #8
90008b50:	af00      	add	r7, sp, #0
90008b52:	6078      	str	r0, [r7, #4]
90008b54:	460b      	mov	r3, r1
90008b56:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
90008b58:	687b      	ldr	r3, [r7, #4]
90008b5a:	2b00      	cmp	r3, #0
90008b5c:	d107      	bne.n	90008b6e <tcp_setprio+0x22>
90008b5e:	4b07      	ldr	r3, [pc, #28]	; (90008b7c <tcp_setprio+0x30>)
90008b60:	f44f 62ce 	mov.w	r2, #1648	; 0x670
90008b64:	4906      	ldr	r1, [pc, #24]	; (90008b80 <tcp_setprio+0x34>)
90008b66:	4807      	ldr	r0, [pc, #28]	; (90008b84 <tcp_setprio+0x38>)
90008b68:	f007 fcc0 	bl	900104ec <iprintf>
90008b6c:	e002      	b.n	90008b74 <tcp_setprio+0x28>

  pcb->prio = prio;
90008b6e:	687b      	ldr	r3, [r7, #4]
90008b70:	78fa      	ldrb	r2, [r7, #3]
90008b72:	755a      	strb	r2, [r3, #21]
}
90008b74:	3708      	adds	r7, #8
90008b76:	46bd      	mov	sp, r7
90008b78:	bd80      	pop	{r7, pc}
90008b7a:	bf00      	nop
90008b7c:	900127bc 	.word	0x900127bc
90008b80:	90012cf4 	.word	0x90012cf4
90008b84:	90012800 	.word	0x90012800

90008b88 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
90008b88:	b580      	push	{r7, lr}
90008b8a:	b084      	sub	sp, #16
90008b8c:	af00      	add	r7, sp, #0
90008b8e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
90008b90:	687b      	ldr	r3, [r7, #4]
90008b92:	2b00      	cmp	r3, #0
90008b94:	d106      	bne.n	90008ba4 <tcp_seg_copy+0x1c>
90008b96:	4b0f      	ldr	r3, [pc, #60]	; (90008bd4 <tcp_seg_copy+0x4c>)
90008b98:	f240 6282 	movw	r2, #1666	; 0x682
90008b9c:	490e      	ldr	r1, [pc, #56]	; (90008bd8 <tcp_seg_copy+0x50>)
90008b9e:	480f      	ldr	r0, [pc, #60]	; (90008bdc <tcp_seg_copy+0x54>)
90008ba0:	f007 fca4 	bl	900104ec <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
90008ba4:	2003      	movs	r0, #3
90008ba6:	f7fd fca5 	bl	900064f4 <memp_malloc>
90008baa:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
90008bac:	68fb      	ldr	r3, [r7, #12]
90008bae:	2b00      	cmp	r3, #0
90008bb0:	d101      	bne.n	90008bb6 <tcp_seg_copy+0x2e>
    return NULL;
90008bb2:	2300      	movs	r3, #0
90008bb4:	e00a      	b.n	90008bcc <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
90008bb6:	2210      	movs	r2, #16
90008bb8:	6879      	ldr	r1, [r7, #4]
90008bba:	68f8      	ldr	r0, [r7, #12]
90008bbc:	f007 fc66 	bl	9001048c <memcpy>
  pbuf_ref(cseg->p);
90008bc0:	68fb      	ldr	r3, [r7, #12]
90008bc2:	685b      	ldr	r3, [r3, #4]
90008bc4:	4618      	mov	r0, r3
90008bc6:	f7fe fc1b 	bl	90007400 <pbuf_ref>
  return cseg;
90008bca:	68fb      	ldr	r3, [r7, #12]
}
90008bcc:	4618      	mov	r0, r3
90008bce:	3710      	adds	r7, #16
90008bd0:	46bd      	mov	sp, r7
90008bd2:	bd80      	pop	{r7, pc}
90008bd4:	900127bc 	.word	0x900127bc
90008bd8:	90012d10 	.word	0x90012d10
90008bdc:	90012800 	.word	0x90012800

90008be0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
90008be0:	b580      	push	{r7, lr}
90008be2:	b084      	sub	sp, #16
90008be4:	af00      	add	r7, sp, #0
90008be6:	60f8      	str	r0, [r7, #12]
90008be8:	60b9      	str	r1, [r7, #8]
90008bea:	607a      	str	r2, [r7, #4]
90008bec:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
90008bee:	68bb      	ldr	r3, [r7, #8]
90008bf0:	2b00      	cmp	r3, #0
90008bf2:	d109      	bne.n	90008c08 <tcp_recv_null+0x28>
90008bf4:	4b12      	ldr	r3, [pc, #72]	; (90008c40 <tcp_recv_null+0x60>)
90008bf6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
90008bfa:	4912      	ldr	r1, [pc, #72]	; (90008c44 <tcp_recv_null+0x64>)
90008bfc:	4812      	ldr	r0, [pc, #72]	; (90008c48 <tcp_recv_null+0x68>)
90008bfe:	f007 fc75 	bl	900104ec <iprintf>
90008c02:	f06f 030f 	mvn.w	r3, #15
90008c06:	e016      	b.n	90008c36 <tcp_recv_null+0x56>

  if (p != NULL) {
90008c08:	687b      	ldr	r3, [r7, #4]
90008c0a:	2b00      	cmp	r3, #0
90008c0c:	d009      	beq.n	90008c22 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
90008c0e:	687b      	ldr	r3, [r7, #4]
90008c10:	891b      	ldrh	r3, [r3, #8]
90008c12:	4619      	mov	r1, r3
90008c14:	68b8      	ldr	r0, [r7, #8]
90008c16:	f7ff fab5 	bl	90008184 <tcp_recved>
    pbuf_free(p);
90008c1a:	6878      	ldr	r0, [r7, #4]
90008c1c:	f7fe fb50 	bl	900072c0 <pbuf_free>
90008c20:	e008      	b.n	90008c34 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
90008c22:	f997 3003 	ldrsb.w	r3, [r7, #3]
90008c26:	2b00      	cmp	r3, #0
90008c28:	d104      	bne.n	90008c34 <tcp_recv_null+0x54>
    return tcp_close(pcb);
90008c2a:	68b8      	ldr	r0, [r7, #8]
90008c2c:	f7fe ffe6 	bl	90007bfc <tcp_close>
90008c30:	4603      	mov	r3, r0
90008c32:	e000      	b.n	90008c36 <tcp_recv_null+0x56>
  }
  return ERR_OK;
90008c34:	2300      	movs	r3, #0
}
90008c36:	4618      	mov	r0, r3
90008c38:	3710      	adds	r7, #16
90008c3a:	46bd      	mov	sp, r7
90008c3c:	bd80      	pop	{r7, pc}
90008c3e:	bf00      	nop
90008c40:	900127bc 	.word	0x900127bc
90008c44:	90012d2c 	.word	0x90012d2c
90008c48:	90012800 	.word	0x90012800

90008c4c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
90008c4c:	b580      	push	{r7, lr}
90008c4e:	b086      	sub	sp, #24
90008c50:	af00      	add	r7, sp, #0
90008c52:	4603      	mov	r3, r0
90008c54:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
90008c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
90008c5a:	2b00      	cmp	r3, #0
90008c5c:	db01      	blt.n	90008c62 <tcp_kill_prio+0x16>
90008c5e:	79fb      	ldrb	r3, [r7, #7]
90008c60:	e000      	b.n	90008c64 <tcp_kill_prio+0x18>
90008c62:	237f      	movs	r3, #127	; 0x7f
90008c64:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
90008c66:	7afb      	ldrb	r3, [r7, #11]
90008c68:	2b00      	cmp	r3, #0
90008c6a:	d034      	beq.n	90008cd6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
90008c6c:	7afb      	ldrb	r3, [r7, #11]
90008c6e:	3b01      	subs	r3, #1
90008c70:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
90008c72:	2300      	movs	r3, #0
90008c74:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
90008c76:	2300      	movs	r3, #0
90008c78:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
90008c7a:	4b19      	ldr	r3, [pc, #100]	; (90008ce0 <tcp_kill_prio+0x94>)
90008c7c:	681b      	ldr	r3, [r3, #0]
90008c7e:	617b      	str	r3, [r7, #20]
90008c80:	e01f      	b.n	90008cc2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
90008c82:	697b      	ldr	r3, [r7, #20]
90008c84:	7d5b      	ldrb	r3, [r3, #21]
90008c86:	7afa      	ldrb	r2, [r7, #11]
90008c88:	429a      	cmp	r2, r3
90008c8a:	d80c      	bhi.n	90008ca6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
90008c8c:	697b      	ldr	r3, [r7, #20]
90008c8e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
90008c90:	7afa      	ldrb	r2, [r7, #11]
90008c92:	429a      	cmp	r2, r3
90008c94:	d112      	bne.n	90008cbc <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
90008c96:	4b13      	ldr	r3, [pc, #76]	; (90008ce4 <tcp_kill_prio+0x98>)
90008c98:	681a      	ldr	r2, [r3, #0]
90008c9a:	697b      	ldr	r3, [r7, #20]
90008c9c:	6a1b      	ldr	r3, [r3, #32]
90008c9e:	1ad3      	subs	r3, r2, r3
90008ca0:	68fa      	ldr	r2, [r7, #12]
90008ca2:	429a      	cmp	r2, r3
90008ca4:	d80a      	bhi.n	90008cbc <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
90008ca6:	4b0f      	ldr	r3, [pc, #60]	; (90008ce4 <tcp_kill_prio+0x98>)
90008ca8:	681a      	ldr	r2, [r3, #0]
90008caa:	697b      	ldr	r3, [r7, #20]
90008cac:	6a1b      	ldr	r3, [r3, #32]
90008cae:	1ad3      	subs	r3, r2, r3
90008cb0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
90008cb2:	697b      	ldr	r3, [r7, #20]
90008cb4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
90008cb6:	697b      	ldr	r3, [r7, #20]
90008cb8:	7d5b      	ldrb	r3, [r3, #21]
90008cba:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
90008cbc:	697b      	ldr	r3, [r7, #20]
90008cbe:	68db      	ldr	r3, [r3, #12]
90008cc0:	617b      	str	r3, [r7, #20]
90008cc2:	697b      	ldr	r3, [r7, #20]
90008cc4:	2b00      	cmp	r3, #0
90008cc6:	d1dc      	bne.n	90008c82 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
90008cc8:	693b      	ldr	r3, [r7, #16]
90008cca:	2b00      	cmp	r3, #0
90008ccc:	d004      	beq.n	90008cd8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
90008cce:	6938      	ldr	r0, [r7, #16]
90008cd0:	f7ff f87e 	bl	90007dd0 <tcp_abort>
90008cd4:	e000      	b.n	90008cd8 <tcp_kill_prio+0x8c>
    return;
90008cd6:	bf00      	nop
  }
}
90008cd8:	3718      	adds	r7, #24
90008cda:	46bd      	mov	sp, r7
90008cdc:	bd80      	pop	{r7, pc}
90008cde:	bf00      	nop
90008ce0:	2000a8ac 	.word	0x2000a8ac
90008ce4:	2000a8a0 	.word	0x2000a8a0

90008ce8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
90008ce8:	b580      	push	{r7, lr}
90008cea:	b086      	sub	sp, #24
90008cec:	af00      	add	r7, sp, #0
90008cee:	4603      	mov	r3, r0
90008cf0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
90008cf2:	79fb      	ldrb	r3, [r7, #7]
90008cf4:	2b08      	cmp	r3, #8
90008cf6:	d009      	beq.n	90008d0c <tcp_kill_state+0x24>
90008cf8:	79fb      	ldrb	r3, [r7, #7]
90008cfa:	2b09      	cmp	r3, #9
90008cfc:	d006      	beq.n	90008d0c <tcp_kill_state+0x24>
90008cfe:	4b1a      	ldr	r3, [pc, #104]	; (90008d68 <tcp_kill_state+0x80>)
90008d00:	f240 62dd 	movw	r2, #1757	; 0x6dd
90008d04:	4919      	ldr	r1, [pc, #100]	; (90008d6c <tcp_kill_state+0x84>)
90008d06:	481a      	ldr	r0, [pc, #104]	; (90008d70 <tcp_kill_state+0x88>)
90008d08:	f007 fbf0 	bl	900104ec <iprintf>

  inactivity = 0;
90008d0c:	2300      	movs	r3, #0
90008d0e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
90008d10:	2300      	movs	r3, #0
90008d12:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
90008d14:	4b17      	ldr	r3, [pc, #92]	; (90008d74 <tcp_kill_state+0x8c>)
90008d16:	681b      	ldr	r3, [r3, #0]
90008d18:	617b      	str	r3, [r7, #20]
90008d1a:	e017      	b.n	90008d4c <tcp_kill_state+0x64>
    if (pcb->state == state) {
90008d1c:	697b      	ldr	r3, [r7, #20]
90008d1e:	7d1b      	ldrb	r3, [r3, #20]
90008d20:	79fa      	ldrb	r2, [r7, #7]
90008d22:	429a      	cmp	r2, r3
90008d24:	d10f      	bne.n	90008d46 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
90008d26:	4b14      	ldr	r3, [pc, #80]	; (90008d78 <tcp_kill_state+0x90>)
90008d28:	681a      	ldr	r2, [r3, #0]
90008d2a:	697b      	ldr	r3, [r7, #20]
90008d2c:	6a1b      	ldr	r3, [r3, #32]
90008d2e:	1ad3      	subs	r3, r2, r3
90008d30:	68fa      	ldr	r2, [r7, #12]
90008d32:	429a      	cmp	r2, r3
90008d34:	d807      	bhi.n	90008d46 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
90008d36:	4b10      	ldr	r3, [pc, #64]	; (90008d78 <tcp_kill_state+0x90>)
90008d38:	681a      	ldr	r2, [r3, #0]
90008d3a:	697b      	ldr	r3, [r7, #20]
90008d3c:	6a1b      	ldr	r3, [r3, #32]
90008d3e:	1ad3      	subs	r3, r2, r3
90008d40:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
90008d42:	697b      	ldr	r3, [r7, #20]
90008d44:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
90008d46:	697b      	ldr	r3, [r7, #20]
90008d48:	68db      	ldr	r3, [r3, #12]
90008d4a:	617b      	str	r3, [r7, #20]
90008d4c:	697b      	ldr	r3, [r7, #20]
90008d4e:	2b00      	cmp	r3, #0
90008d50:	d1e4      	bne.n	90008d1c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
90008d52:	693b      	ldr	r3, [r7, #16]
90008d54:	2b00      	cmp	r3, #0
90008d56:	d003      	beq.n	90008d60 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
90008d58:	2100      	movs	r1, #0
90008d5a:	6938      	ldr	r0, [r7, #16]
90008d5c:	f7fe ff7a 	bl	90007c54 <tcp_abandon>
  }
}
90008d60:	bf00      	nop
90008d62:	3718      	adds	r7, #24
90008d64:	46bd      	mov	sp, r7
90008d66:	bd80      	pop	{r7, pc}
90008d68:	900127bc 	.word	0x900127bc
90008d6c:	90012d48 	.word	0x90012d48
90008d70:	90012800 	.word	0x90012800
90008d74:	2000a8ac 	.word	0x2000a8ac
90008d78:	2000a8a0 	.word	0x2000a8a0

90008d7c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
90008d7c:	b580      	push	{r7, lr}
90008d7e:	b084      	sub	sp, #16
90008d80:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
90008d82:	2300      	movs	r3, #0
90008d84:	607b      	str	r3, [r7, #4]
  inactive = NULL;
90008d86:	2300      	movs	r3, #0
90008d88:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
90008d8a:	4b12      	ldr	r3, [pc, #72]	; (90008dd4 <tcp_kill_timewait+0x58>)
90008d8c:	681b      	ldr	r3, [r3, #0]
90008d8e:	60fb      	str	r3, [r7, #12]
90008d90:	e012      	b.n	90008db8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
90008d92:	4b11      	ldr	r3, [pc, #68]	; (90008dd8 <tcp_kill_timewait+0x5c>)
90008d94:	681a      	ldr	r2, [r3, #0]
90008d96:	68fb      	ldr	r3, [r7, #12]
90008d98:	6a1b      	ldr	r3, [r3, #32]
90008d9a:	1ad3      	subs	r3, r2, r3
90008d9c:	687a      	ldr	r2, [r7, #4]
90008d9e:	429a      	cmp	r2, r3
90008da0:	d807      	bhi.n	90008db2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
90008da2:	4b0d      	ldr	r3, [pc, #52]	; (90008dd8 <tcp_kill_timewait+0x5c>)
90008da4:	681a      	ldr	r2, [r3, #0]
90008da6:	68fb      	ldr	r3, [r7, #12]
90008da8:	6a1b      	ldr	r3, [r3, #32]
90008daa:	1ad3      	subs	r3, r2, r3
90008dac:	607b      	str	r3, [r7, #4]
      inactive = pcb;
90008dae:	68fb      	ldr	r3, [r7, #12]
90008db0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
90008db2:	68fb      	ldr	r3, [r7, #12]
90008db4:	68db      	ldr	r3, [r3, #12]
90008db6:	60fb      	str	r3, [r7, #12]
90008db8:	68fb      	ldr	r3, [r7, #12]
90008dba:	2b00      	cmp	r3, #0
90008dbc:	d1e9      	bne.n	90008d92 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
90008dbe:	68bb      	ldr	r3, [r7, #8]
90008dc0:	2b00      	cmp	r3, #0
90008dc2:	d002      	beq.n	90008dca <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
90008dc4:	68b8      	ldr	r0, [r7, #8]
90008dc6:	f7ff f803 	bl	90007dd0 <tcp_abort>
  }
}
90008dca:	bf00      	nop
90008dcc:	3710      	adds	r7, #16
90008dce:	46bd      	mov	sp, r7
90008dd0:	bd80      	pop	{r7, pc}
90008dd2:	bf00      	nop
90008dd4:	2000a8b0 	.word	0x2000a8b0
90008dd8:	2000a8a0 	.word	0x2000a8a0

90008ddc <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
90008ddc:	b580      	push	{r7, lr}
90008dde:	b082      	sub	sp, #8
90008de0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
90008de2:	4b10      	ldr	r3, [pc, #64]	; (90008e24 <tcp_handle_closepend+0x48>)
90008de4:	681b      	ldr	r3, [r3, #0]
90008de6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
90008de8:	e014      	b.n	90008e14 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
90008dea:	687b      	ldr	r3, [r7, #4]
90008dec:	68db      	ldr	r3, [r3, #12]
90008dee:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
90008df0:	687b      	ldr	r3, [r7, #4]
90008df2:	8b5b      	ldrh	r3, [r3, #26]
90008df4:	f003 0308 	and.w	r3, r3, #8
90008df8:	2b00      	cmp	r3, #0
90008dfa:	d009      	beq.n	90008e10 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
90008dfc:	687b      	ldr	r3, [r7, #4]
90008dfe:	8b5b      	ldrh	r3, [r3, #26]
90008e00:	f023 0308 	bic.w	r3, r3, #8
90008e04:	b29a      	uxth	r2, r3
90008e06:	687b      	ldr	r3, [r7, #4]
90008e08:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
90008e0a:	6878      	ldr	r0, [r7, #4]
90008e0c:	f7fe fe8c 	bl	90007b28 <tcp_close_shutdown_fin>
    }
    pcb = next;
90008e10:	683b      	ldr	r3, [r7, #0]
90008e12:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
90008e14:	687b      	ldr	r3, [r7, #4]
90008e16:	2b00      	cmp	r3, #0
90008e18:	d1e7      	bne.n	90008dea <tcp_handle_closepend+0xe>
  }
}
90008e1a:	bf00      	nop
90008e1c:	bf00      	nop
90008e1e:	3708      	adds	r7, #8
90008e20:	46bd      	mov	sp, r7
90008e22:	bd80      	pop	{r7, pc}
90008e24:	2000a8ac 	.word	0x2000a8ac

90008e28 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
90008e28:	b580      	push	{r7, lr}
90008e2a:	b084      	sub	sp, #16
90008e2c:	af00      	add	r7, sp, #0
90008e2e:	4603      	mov	r3, r0
90008e30:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
90008e32:	2001      	movs	r0, #1
90008e34:	f7fd fb5e 	bl	900064f4 <memp_malloc>
90008e38:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
90008e3a:	68fb      	ldr	r3, [r7, #12]
90008e3c:	2b00      	cmp	r3, #0
90008e3e:	d126      	bne.n	90008e8e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
90008e40:	f7ff ffcc 	bl	90008ddc <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
90008e44:	f7ff ff9a 	bl	90008d7c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
90008e48:	2001      	movs	r0, #1
90008e4a:	f7fd fb53 	bl	900064f4 <memp_malloc>
90008e4e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
90008e50:	68fb      	ldr	r3, [r7, #12]
90008e52:	2b00      	cmp	r3, #0
90008e54:	d11b      	bne.n	90008e8e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
90008e56:	2009      	movs	r0, #9
90008e58:	f7ff ff46 	bl	90008ce8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
90008e5c:	2001      	movs	r0, #1
90008e5e:	f7fd fb49 	bl	900064f4 <memp_malloc>
90008e62:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
90008e64:	68fb      	ldr	r3, [r7, #12]
90008e66:	2b00      	cmp	r3, #0
90008e68:	d111      	bne.n	90008e8e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
90008e6a:	2008      	movs	r0, #8
90008e6c:	f7ff ff3c 	bl	90008ce8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
90008e70:	2001      	movs	r0, #1
90008e72:	f7fd fb3f 	bl	900064f4 <memp_malloc>
90008e76:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
90008e78:	68fb      	ldr	r3, [r7, #12]
90008e7a:	2b00      	cmp	r3, #0
90008e7c:	d107      	bne.n	90008e8e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
90008e7e:	79fb      	ldrb	r3, [r7, #7]
90008e80:	4618      	mov	r0, r3
90008e82:	f7ff fee3 	bl	90008c4c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
90008e86:	2001      	movs	r0, #1
90008e88:	f7fd fb34 	bl	900064f4 <memp_malloc>
90008e8c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
90008e8e:	68fb      	ldr	r3, [r7, #12]
90008e90:	2b00      	cmp	r3, #0
90008e92:	d03f      	beq.n	90008f14 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
90008e94:	229c      	movs	r2, #156	; 0x9c
90008e96:	2100      	movs	r1, #0
90008e98:	68f8      	ldr	r0, [r7, #12]
90008e9a:	f007 fb1f 	bl	900104dc <memset>
    pcb->prio = prio;
90008e9e:	68fb      	ldr	r3, [r7, #12]
90008ea0:	79fa      	ldrb	r2, [r7, #7]
90008ea2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
90008ea4:	68fb      	ldr	r3, [r7, #12]
90008ea6:	f44f 6286 	mov.w	r2, #1072	; 0x430
90008eaa:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
90008eae:	68fb      	ldr	r3, [r7, #12]
90008eb0:	f44f 6206 	mov.w	r2, #2144	; 0x860
90008eb4:	855a      	strh	r2, [r3, #42]	; 0x2a
90008eb6:	68fb      	ldr	r3, [r7, #12]
90008eb8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
90008eba:	68fb      	ldr	r3, [r7, #12]
90008ebc:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
90008ebe:	68fb      	ldr	r3, [r7, #12]
90008ec0:	22ff      	movs	r2, #255	; 0xff
90008ec2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
90008ec4:	68fb      	ldr	r3, [r7, #12]
90008ec6:	f44f 7206 	mov.w	r2, #536	; 0x218
90008eca:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
90008ecc:	68fb      	ldr	r3, [r7, #12]
90008ece:	2206      	movs	r2, #6
90008ed0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
90008ed4:	68fb      	ldr	r3, [r7, #12]
90008ed6:	2206      	movs	r2, #6
90008ed8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
90008eda:	68fb      	ldr	r3, [r7, #12]
90008edc:	f64f 72ff 	movw	r2, #65535	; 0xffff
90008ee0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
90008ee2:	68fb      	ldr	r3, [r7, #12]
90008ee4:	2201      	movs	r2, #1
90008ee6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
90008eea:	4b0d      	ldr	r3, [pc, #52]	; (90008f20 <tcp_alloc+0xf8>)
90008eec:	681a      	ldr	r2, [r3, #0]
90008eee:	68fb      	ldr	r3, [r7, #12]
90008ef0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
90008ef2:	4b0c      	ldr	r3, [pc, #48]	; (90008f24 <tcp_alloc+0xfc>)
90008ef4:	781a      	ldrb	r2, [r3, #0]
90008ef6:	68fb      	ldr	r3, [r7, #12]
90008ef8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
90008efa:	68fb      	ldr	r3, [r7, #12]
90008efc:	f44f 6286 	mov.w	r2, #1072	; 0x430
90008f00:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
90008f04:	68fb      	ldr	r3, [r7, #12]
90008f06:	4a08      	ldr	r2, [pc, #32]	; (90008f28 <tcp_alloc+0x100>)
90008f08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
90008f0c:	68fb      	ldr	r3, [r7, #12]
90008f0e:	4a07      	ldr	r2, [pc, #28]	; (90008f2c <tcp_alloc+0x104>)
90008f10:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
90008f14:	68fb      	ldr	r3, [r7, #12]
}
90008f16:	4618      	mov	r0, r3
90008f18:	3710      	adds	r7, #16
90008f1a:	46bd      	mov	sp, r7
90008f1c:	bd80      	pop	{r7, pc}
90008f1e:	bf00      	nop
90008f20:	2000a8a0 	.word	0x2000a8a0
90008f24:	2000a8b6 	.word	0x2000a8b6
90008f28:	90008be1 	.word	0x90008be1
90008f2c:	006ddd00 	.word	0x006ddd00

90008f30 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
90008f30:	b580      	push	{r7, lr}
90008f32:	b084      	sub	sp, #16
90008f34:	af00      	add	r7, sp, #0
90008f36:	4603      	mov	r3, r0
90008f38:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
90008f3a:	2040      	movs	r0, #64	; 0x40
90008f3c:	f7ff ff74 	bl	90008e28 <tcp_alloc>
90008f40:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
90008f42:	68fb      	ldr	r3, [r7, #12]
}
90008f44:	4618      	mov	r0, r3
90008f46:	3710      	adds	r7, #16
90008f48:	46bd      	mov	sp, r7
90008f4a:	bd80      	pop	{r7, pc}

90008f4c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
90008f4c:	b480      	push	{r7}
90008f4e:	b083      	sub	sp, #12
90008f50:	af00      	add	r7, sp, #0
90008f52:	6078      	str	r0, [r7, #4]
90008f54:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
90008f56:	687b      	ldr	r3, [r7, #4]
90008f58:	2b00      	cmp	r3, #0
90008f5a:	d002      	beq.n	90008f62 <tcp_arg+0x16>
    pcb->callback_arg = arg;
90008f5c:	687b      	ldr	r3, [r7, #4]
90008f5e:	683a      	ldr	r2, [r7, #0]
90008f60:	611a      	str	r2, [r3, #16]
  }
}
90008f62:	bf00      	nop
90008f64:	370c      	adds	r7, #12
90008f66:	46bd      	mov	sp, r7
90008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
90008f6c:	4770      	bx	lr
	...

90008f70 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
90008f70:	b580      	push	{r7, lr}
90008f72:	b082      	sub	sp, #8
90008f74:	af00      	add	r7, sp, #0
90008f76:	6078      	str	r0, [r7, #4]
90008f78:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
90008f7a:	687b      	ldr	r3, [r7, #4]
90008f7c:	2b00      	cmp	r3, #0
90008f7e:	d00e      	beq.n	90008f9e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
90008f80:	687b      	ldr	r3, [r7, #4]
90008f82:	7d1b      	ldrb	r3, [r3, #20]
90008f84:	2b01      	cmp	r3, #1
90008f86:	d106      	bne.n	90008f96 <tcp_recv+0x26>
90008f88:	4b07      	ldr	r3, [pc, #28]	; (90008fa8 <tcp_recv+0x38>)
90008f8a:	f240 72df 	movw	r2, #2015	; 0x7df
90008f8e:	4907      	ldr	r1, [pc, #28]	; (90008fac <tcp_recv+0x3c>)
90008f90:	4807      	ldr	r0, [pc, #28]	; (90008fb0 <tcp_recv+0x40>)
90008f92:	f007 faab 	bl	900104ec <iprintf>
    pcb->recv = recv;
90008f96:	687b      	ldr	r3, [r7, #4]
90008f98:	683a      	ldr	r2, [r7, #0]
90008f9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
90008f9e:	bf00      	nop
90008fa0:	3708      	adds	r7, #8
90008fa2:	46bd      	mov	sp, r7
90008fa4:	bd80      	pop	{r7, pc}
90008fa6:	bf00      	nop
90008fa8:	900127bc 	.word	0x900127bc
90008fac:	90012d58 	.word	0x90012d58
90008fb0:	90012800 	.word	0x90012800

90008fb4 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
90008fb4:	b580      	push	{r7, lr}
90008fb6:	b082      	sub	sp, #8
90008fb8:	af00      	add	r7, sp, #0
90008fba:	6078      	str	r0, [r7, #4]
90008fbc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
90008fbe:	687b      	ldr	r3, [r7, #4]
90008fc0:	2b00      	cmp	r3, #0
90008fc2:	d00e      	beq.n	90008fe2 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
90008fc4:	687b      	ldr	r3, [r7, #4]
90008fc6:	7d1b      	ldrb	r3, [r3, #20]
90008fc8:	2b01      	cmp	r3, #1
90008fca:	d106      	bne.n	90008fda <tcp_sent+0x26>
90008fcc:	4b07      	ldr	r3, [pc, #28]	; (90008fec <tcp_sent+0x38>)
90008fce:	f240 72f3 	movw	r2, #2035	; 0x7f3
90008fd2:	4907      	ldr	r1, [pc, #28]	; (90008ff0 <tcp_sent+0x3c>)
90008fd4:	4807      	ldr	r0, [pc, #28]	; (90008ff4 <tcp_sent+0x40>)
90008fd6:	f007 fa89 	bl	900104ec <iprintf>
    pcb->sent = sent;
90008fda:	687b      	ldr	r3, [r7, #4]
90008fdc:	683a      	ldr	r2, [r7, #0]
90008fde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
90008fe2:	bf00      	nop
90008fe4:	3708      	adds	r7, #8
90008fe6:	46bd      	mov	sp, r7
90008fe8:	bd80      	pop	{r7, pc}
90008fea:	bf00      	nop
90008fec:	900127bc 	.word	0x900127bc
90008ff0:	90012d80 	.word	0x90012d80
90008ff4:	90012800 	.word	0x90012800

90008ff8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
90008ff8:	b580      	push	{r7, lr}
90008ffa:	b082      	sub	sp, #8
90008ffc:	af00      	add	r7, sp, #0
90008ffe:	6078      	str	r0, [r7, #4]
90009000:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
90009002:	687b      	ldr	r3, [r7, #4]
90009004:	2b00      	cmp	r3, #0
90009006:	d00e      	beq.n	90009026 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
90009008:	687b      	ldr	r3, [r7, #4]
9000900a:	7d1b      	ldrb	r3, [r3, #20]
9000900c:	2b01      	cmp	r3, #1
9000900e:	d106      	bne.n	9000901e <tcp_err+0x26>
90009010:	4b07      	ldr	r3, [pc, #28]	; (90009030 <tcp_err+0x38>)
90009012:	f640 020d 	movw	r2, #2061	; 0x80d
90009016:	4907      	ldr	r1, [pc, #28]	; (90009034 <tcp_err+0x3c>)
90009018:	4807      	ldr	r0, [pc, #28]	; (90009038 <tcp_err+0x40>)
9000901a:	f007 fa67 	bl	900104ec <iprintf>
    pcb->errf = err;
9000901e:	687b      	ldr	r3, [r7, #4]
90009020:	683a      	ldr	r2, [r7, #0]
90009022:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
90009026:	bf00      	nop
90009028:	3708      	adds	r7, #8
9000902a:	46bd      	mov	sp, r7
9000902c:	bd80      	pop	{r7, pc}
9000902e:	bf00      	nop
90009030:	900127bc 	.word	0x900127bc
90009034:	90012da8 	.word	0x90012da8
90009038:	90012800 	.word	0x90012800

9000903c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
9000903c:	b480      	push	{r7}
9000903e:	b085      	sub	sp, #20
90009040:	af00      	add	r7, sp, #0
90009042:	6078      	str	r0, [r7, #4]
90009044:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
90009046:	687b      	ldr	r3, [r7, #4]
90009048:	2b00      	cmp	r3, #0
9000904a:	d008      	beq.n	9000905e <tcp_accept+0x22>
9000904c:	687b      	ldr	r3, [r7, #4]
9000904e:	7d1b      	ldrb	r3, [r3, #20]
90009050:	2b01      	cmp	r3, #1
90009052:	d104      	bne.n	9000905e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
90009054:	687b      	ldr	r3, [r7, #4]
90009056:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
90009058:	68fb      	ldr	r3, [r7, #12]
9000905a:	683a      	ldr	r2, [r7, #0]
9000905c:	619a      	str	r2, [r3, #24]
  }
}
9000905e:	bf00      	nop
90009060:	3714      	adds	r7, #20
90009062:	46bd      	mov	sp, r7
90009064:	f85d 7b04 	ldr.w	r7, [sp], #4
90009068:	4770      	bx	lr
	...

9000906c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
9000906c:	b580      	push	{r7, lr}
9000906e:	b084      	sub	sp, #16
90009070:	af00      	add	r7, sp, #0
90009072:	60f8      	str	r0, [r7, #12]
90009074:	60b9      	str	r1, [r7, #8]
90009076:	4613      	mov	r3, r2
90009078:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
9000907a:	68fb      	ldr	r3, [r7, #12]
9000907c:	2b00      	cmp	r3, #0
9000907e:	d107      	bne.n	90009090 <tcp_poll+0x24>
90009080:	4b0e      	ldr	r3, [pc, #56]	; (900090bc <tcp_poll+0x50>)
90009082:	f640 023d 	movw	r2, #2109	; 0x83d
90009086:	490e      	ldr	r1, [pc, #56]	; (900090c0 <tcp_poll+0x54>)
90009088:	480e      	ldr	r0, [pc, #56]	; (900090c4 <tcp_poll+0x58>)
9000908a:	f007 fa2f 	bl	900104ec <iprintf>
9000908e:	e011      	b.n	900090b4 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
90009090:	68fb      	ldr	r3, [r7, #12]
90009092:	7d1b      	ldrb	r3, [r3, #20]
90009094:	2b01      	cmp	r3, #1
90009096:	d106      	bne.n	900090a6 <tcp_poll+0x3a>
90009098:	4b08      	ldr	r3, [pc, #32]	; (900090bc <tcp_poll+0x50>)
9000909a:	f640 023e 	movw	r2, #2110	; 0x83e
9000909e:	490a      	ldr	r1, [pc, #40]	; (900090c8 <tcp_poll+0x5c>)
900090a0:	4808      	ldr	r0, [pc, #32]	; (900090c4 <tcp_poll+0x58>)
900090a2:	f007 fa23 	bl	900104ec <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
900090a6:	68fb      	ldr	r3, [r7, #12]
900090a8:	68ba      	ldr	r2, [r7, #8]
900090aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
900090ae:	68fb      	ldr	r3, [r7, #12]
900090b0:	79fa      	ldrb	r2, [r7, #7]
900090b2:	775a      	strb	r2, [r3, #29]
}
900090b4:	3710      	adds	r7, #16
900090b6:	46bd      	mov	sp, r7
900090b8:	bd80      	pop	{r7, pc}
900090ba:	bf00      	nop
900090bc:	900127bc 	.word	0x900127bc
900090c0:	90012dd0 	.word	0x90012dd0
900090c4:	90012800 	.word	0x90012800
900090c8:	90012de8 	.word	0x90012de8

900090cc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
900090cc:	b580      	push	{r7, lr}
900090ce:	b082      	sub	sp, #8
900090d0:	af00      	add	r7, sp, #0
900090d2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
900090d4:	687b      	ldr	r3, [r7, #4]
900090d6:	2b00      	cmp	r3, #0
900090d8:	d107      	bne.n	900090ea <tcp_pcb_purge+0x1e>
900090da:	4b21      	ldr	r3, [pc, #132]	; (90009160 <tcp_pcb_purge+0x94>)
900090dc:	f640 0251 	movw	r2, #2129	; 0x851
900090e0:	4920      	ldr	r1, [pc, #128]	; (90009164 <tcp_pcb_purge+0x98>)
900090e2:	4821      	ldr	r0, [pc, #132]	; (90009168 <tcp_pcb_purge+0x9c>)
900090e4:	f007 fa02 	bl	900104ec <iprintf>
900090e8:	e037      	b.n	9000915a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
900090ea:	687b      	ldr	r3, [r7, #4]
900090ec:	7d1b      	ldrb	r3, [r3, #20]
900090ee:	2b00      	cmp	r3, #0
900090f0:	d033      	beq.n	9000915a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
900090f2:	687b      	ldr	r3, [r7, #4]
900090f4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
900090f6:	2b0a      	cmp	r3, #10
900090f8:	d02f      	beq.n	9000915a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
900090fa:	687b      	ldr	r3, [r7, #4]
900090fc:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
900090fe:	2b01      	cmp	r3, #1
90009100:	d02b      	beq.n	9000915a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
90009102:	687b      	ldr	r3, [r7, #4]
90009104:	6f9b      	ldr	r3, [r3, #120]	; 0x78
90009106:	2b00      	cmp	r3, #0
90009108:	d007      	beq.n	9000911a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
9000910a:	687b      	ldr	r3, [r7, #4]
9000910c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
9000910e:	4618      	mov	r0, r3
90009110:	f7fe f8d6 	bl	900072c0 <pbuf_free>
      pcb->refused_data = NULL;
90009114:	687b      	ldr	r3, [r7, #4]
90009116:	2200      	movs	r2, #0
90009118:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
9000911a:	687b      	ldr	r3, [r7, #4]
9000911c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000911e:	2b00      	cmp	r3, #0
90009120:	d002      	beq.n	90009128 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
90009122:	6878      	ldr	r0, [r7, #4]
90009124:	f000 f986 	bl	90009434 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
90009128:	687b      	ldr	r3, [r7, #4]
9000912a:	f64f 72ff 	movw	r2, #65535	; 0xffff
9000912e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
90009130:	687b      	ldr	r3, [r7, #4]
90009132:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90009134:	4618      	mov	r0, r3
90009136:	f7ff fcdb 	bl	90008af0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
9000913a:	687b      	ldr	r3, [r7, #4]
9000913c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000913e:	4618      	mov	r0, r3
90009140:	f7ff fcd6 	bl	90008af0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
90009144:	687b      	ldr	r3, [r7, #4]
90009146:	2200      	movs	r2, #0
90009148:	66da      	str	r2, [r3, #108]	; 0x6c
9000914a:	687b      	ldr	r3, [r7, #4]
9000914c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
9000914e:	687b      	ldr	r3, [r7, #4]
90009150:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
90009152:	687b      	ldr	r3, [r7, #4]
90009154:	2200      	movs	r2, #0
90009156:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
9000915a:	3708      	adds	r7, #8
9000915c:	46bd      	mov	sp, r7
9000915e:	bd80      	pop	{r7, pc}
90009160:	900127bc 	.word	0x900127bc
90009164:	90012e08 	.word	0x90012e08
90009168:	90012800 	.word	0x90012800

9000916c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
9000916c:	b580      	push	{r7, lr}
9000916e:	b084      	sub	sp, #16
90009170:	af00      	add	r7, sp, #0
90009172:	6078      	str	r0, [r7, #4]
90009174:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
90009176:	683b      	ldr	r3, [r7, #0]
90009178:	2b00      	cmp	r3, #0
9000917a:	d106      	bne.n	9000918a <tcp_pcb_remove+0x1e>
9000917c:	4b3e      	ldr	r3, [pc, #248]	; (90009278 <tcp_pcb_remove+0x10c>)
9000917e:	f640 0283 	movw	r2, #2179	; 0x883
90009182:	493e      	ldr	r1, [pc, #248]	; (9000927c <tcp_pcb_remove+0x110>)
90009184:	483e      	ldr	r0, [pc, #248]	; (90009280 <tcp_pcb_remove+0x114>)
90009186:	f007 f9b1 	bl	900104ec <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
9000918a:	687b      	ldr	r3, [r7, #4]
9000918c:	2b00      	cmp	r3, #0
9000918e:	d106      	bne.n	9000919e <tcp_pcb_remove+0x32>
90009190:	4b39      	ldr	r3, [pc, #228]	; (90009278 <tcp_pcb_remove+0x10c>)
90009192:	f640 0284 	movw	r2, #2180	; 0x884
90009196:	493b      	ldr	r1, [pc, #236]	; (90009284 <tcp_pcb_remove+0x118>)
90009198:	4839      	ldr	r0, [pc, #228]	; (90009280 <tcp_pcb_remove+0x114>)
9000919a:	f007 f9a7 	bl	900104ec <iprintf>

  TCP_RMV(pcblist, pcb);
9000919e:	687b      	ldr	r3, [r7, #4]
900091a0:	681b      	ldr	r3, [r3, #0]
900091a2:	683a      	ldr	r2, [r7, #0]
900091a4:	429a      	cmp	r2, r3
900091a6:	d105      	bne.n	900091b4 <tcp_pcb_remove+0x48>
900091a8:	687b      	ldr	r3, [r7, #4]
900091aa:	681b      	ldr	r3, [r3, #0]
900091ac:	68da      	ldr	r2, [r3, #12]
900091ae:	687b      	ldr	r3, [r7, #4]
900091b0:	601a      	str	r2, [r3, #0]
900091b2:	e013      	b.n	900091dc <tcp_pcb_remove+0x70>
900091b4:	687b      	ldr	r3, [r7, #4]
900091b6:	681b      	ldr	r3, [r3, #0]
900091b8:	60fb      	str	r3, [r7, #12]
900091ba:	e00c      	b.n	900091d6 <tcp_pcb_remove+0x6a>
900091bc:	68fb      	ldr	r3, [r7, #12]
900091be:	68db      	ldr	r3, [r3, #12]
900091c0:	683a      	ldr	r2, [r7, #0]
900091c2:	429a      	cmp	r2, r3
900091c4:	d104      	bne.n	900091d0 <tcp_pcb_remove+0x64>
900091c6:	683b      	ldr	r3, [r7, #0]
900091c8:	68da      	ldr	r2, [r3, #12]
900091ca:	68fb      	ldr	r3, [r7, #12]
900091cc:	60da      	str	r2, [r3, #12]
900091ce:	e005      	b.n	900091dc <tcp_pcb_remove+0x70>
900091d0:	68fb      	ldr	r3, [r7, #12]
900091d2:	68db      	ldr	r3, [r3, #12]
900091d4:	60fb      	str	r3, [r7, #12]
900091d6:	68fb      	ldr	r3, [r7, #12]
900091d8:	2b00      	cmp	r3, #0
900091da:	d1ef      	bne.n	900091bc <tcp_pcb_remove+0x50>
900091dc:	683b      	ldr	r3, [r7, #0]
900091de:	2200      	movs	r2, #0
900091e0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
900091e2:	6838      	ldr	r0, [r7, #0]
900091e4:	f7ff ff72 	bl	900090cc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
900091e8:	683b      	ldr	r3, [r7, #0]
900091ea:	7d1b      	ldrb	r3, [r3, #20]
900091ec:	2b0a      	cmp	r3, #10
900091ee:	d013      	beq.n	90009218 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
900091f0:	683b      	ldr	r3, [r7, #0]
900091f2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
900091f4:	2b01      	cmp	r3, #1
900091f6:	d00f      	beq.n	90009218 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
900091f8:	683b      	ldr	r3, [r7, #0]
900091fa:	8b5b      	ldrh	r3, [r3, #26]
900091fc:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
90009200:	2b00      	cmp	r3, #0
90009202:	d009      	beq.n	90009218 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
90009204:	683b      	ldr	r3, [r7, #0]
90009206:	8b5b      	ldrh	r3, [r3, #26]
90009208:	f043 0302 	orr.w	r3, r3, #2
9000920c:	b29a      	uxth	r2, r3
9000920e:	683b      	ldr	r3, [r7, #0]
90009210:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
90009212:	6838      	ldr	r0, [r7, #0]
90009214:	f003 fbc6 	bl	9000c9a4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
90009218:	683b      	ldr	r3, [r7, #0]
9000921a:	7d1b      	ldrb	r3, [r3, #20]
9000921c:	2b01      	cmp	r3, #1
9000921e:	d020      	beq.n	90009262 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
90009220:	683b      	ldr	r3, [r7, #0]
90009222:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90009224:	2b00      	cmp	r3, #0
90009226:	d006      	beq.n	90009236 <tcp_pcb_remove+0xca>
90009228:	4b13      	ldr	r3, [pc, #76]	; (90009278 <tcp_pcb_remove+0x10c>)
9000922a:	f640 0293 	movw	r2, #2195	; 0x893
9000922e:	4916      	ldr	r1, [pc, #88]	; (90009288 <tcp_pcb_remove+0x11c>)
90009230:	4813      	ldr	r0, [pc, #76]	; (90009280 <tcp_pcb_remove+0x114>)
90009232:	f007 f95b 	bl	900104ec <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
90009236:	683b      	ldr	r3, [r7, #0]
90009238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000923a:	2b00      	cmp	r3, #0
9000923c:	d006      	beq.n	9000924c <tcp_pcb_remove+0xe0>
9000923e:	4b0e      	ldr	r3, [pc, #56]	; (90009278 <tcp_pcb_remove+0x10c>)
90009240:	f640 0294 	movw	r2, #2196	; 0x894
90009244:	4911      	ldr	r1, [pc, #68]	; (9000928c <tcp_pcb_remove+0x120>)
90009246:	480e      	ldr	r0, [pc, #56]	; (90009280 <tcp_pcb_remove+0x114>)
90009248:	f007 f950 	bl	900104ec <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
9000924c:	683b      	ldr	r3, [r7, #0]
9000924e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90009250:	2b00      	cmp	r3, #0
90009252:	d006      	beq.n	90009262 <tcp_pcb_remove+0xf6>
90009254:	4b08      	ldr	r3, [pc, #32]	; (90009278 <tcp_pcb_remove+0x10c>)
90009256:	f640 0296 	movw	r2, #2198	; 0x896
9000925a:	490d      	ldr	r1, [pc, #52]	; (90009290 <tcp_pcb_remove+0x124>)
9000925c:	4808      	ldr	r0, [pc, #32]	; (90009280 <tcp_pcb_remove+0x114>)
9000925e:	f007 f945 	bl	900104ec <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
90009262:	683b      	ldr	r3, [r7, #0]
90009264:	2200      	movs	r2, #0
90009266:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
90009268:	683b      	ldr	r3, [r7, #0]
9000926a:	2200      	movs	r2, #0
9000926c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
9000926e:	bf00      	nop
90009270:	3710      	adds	r7, #16
90009272:	46bd      	mov	sp, r7
90009274:	bd80      	pop	{r7, pc}
90009276:	bf00      	nop
90009278:	900127bc 	.word	0x900127bc
9000927c:	90012e24 	.word	0x90012e24
90009280:	90012800 	.word	0x90012800
90009284:	90012e40 	.word	0x90012e40
90009288:	90012e60 	.word	0x90012e60
9000928c:	90012e78 	.word	0x90012e78
90009290:	90012e94 	.word	0x90012e94

90009294 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
90009294:	b580      	push	{r7, lr}
90009296:	b082      	sub	sp, #8
90009298:	af00      	add	r7, sp, #0
9000929a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
9000929c:	687b      	ldr	r3, [r7, #4]
9000929e:	2b00      	cmp	r3, #0
900092a0:	d106      	bne.n	900092b0 <tcp_next_iss+0x1c>
900092a2:	4b0a      	ldr	r3, [pc, #40]	; (900092cc <tcp_next_iss+0x38>)
900092a4:	f640 02af 	movw	r2, #2223	; 0x8af
900092a8:	4909      	ldr	r1, [pc, #36]	; (900092d0 <tcp_next_iss+0x3c>)
900092aa:	480a      	ldr	r0, [pc, #40]	; (900092d4 <tcp_next_iss+0x40>)
900092ac:	f007 f91e 	bl	900104ec <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
900092b0:	4b09      	ldr	r3, [pc, #36]	; (900092d8 <tcp_next_iss+0x44>)
900092b2:	681a      	ldr	r2, [r3, #0]
900092b4:	4b09      	ldr	r3, [pc, #36]	; (900092dc <tcp_next_iss+0x48>)
900092b6:	681b      	ldr	r3, [r3, #0]
900092b8:	4413      	add	r3, r2
900092ba:	4a07      	ldr	r2, [pc, #28]	; (900092d8 <tcp_next_iss+0x44>)
900092bc:	6013      	str	r3, [r2, #0]
  return iss;
900092be:	4b06      	ldr	r3, [pc, #24]	; (900092d8 <tcp_next_iss+0x44>)
900092c0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
900092c2:	4618      	mov	r0, r3
900092c4:	3708      	adds	r7, #8
900092c6:	46bd      	mov	sp, r7
900092c8:	bd80      	pop	{r7, pc}
900092ca:	bf00      	nop
900092cc:	900127bc 	.word	0x900127bc
900092d0:	90012eac 	.word	0x90012eac
900092d4:	90012800 	.word	0x90012800
900092d8:	20000034 	.word	0x20000034
900092dc:	2000a8a0 	.word	0x2000a8a0

900092e0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
900092e0:	b580      	push	{r7, lr}
900092e2:	b086      	sub	sp, #24
900092e4:	af00      	add	r7, sp, #0
900092e6:	4603      	mov	r3, r0
900092e8:	60b9      	str	r1, [r7, #8]
900092ea:	607a      	str	r2, [r7, #4]
900092ec:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
900092ee:	687b      	ldr	r3, [r7, #4]
900092f0:	2b00      	cmp	r3, #0
900092f2:	d106      	bne.n	90009302 <tcp_eff_send_mss_netif+0x22>
900092f4:	4b14      	ldr	r3, [pc, #80]	; (90009348 <tcp_eff_send_mss_netif+0x68>)
900092f6:	f640 02c5 	movw	r2, #2245	; 0x8c5
900092fa:	4914      	ldr	r1, [pc, #80]	; (9000934c <tcp_eff_send_mss_netif+0x6c>)
900092fc:	4814      	ldr	r0, [pc, #80]	; (90009350 <tcp_eff_send_mss_netif+0x70>)
900092fe:	f007 f8f5 	bl	900104ec <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
90009302:	68bb      	ldr	r3, [r7, #8]
90009304:	2b00      	cmp	r3, #0
90009306:	d101      	bne.n	9000930c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
90009308:	89fb      	ldrh	r3, [r7, #14]
9000930a:	e019      	b.n	90009340 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
9000930c:	68bb      	ldr	r3, [r7, #8]
9000930e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
90009310:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
90009312:	8afb      	ldrh	r3, [r7, #22]
90009314:	2b00      	cmp	r3, #0
90009316:	d012      	beq.n	9000933e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
90009318:	2328      	movs	r3, #40	; 0x28
9000931a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
9000931c:	8afa      	ldrh	r2, [r7, #22]
9000931e:	8abb      	ldrh	r3, [r7, #20]
90009320:	429a      	cmp	r2, r3
90009322:	d904      	bls.n	9000932e <tcp_eff_send_mss_netif+0x4e>
90009324:	8afa      	ldrh	r2, [r7, #22]
90009326:	8abb      	ldrh	r3, [r7, #20]
90009328:	1ad3      	subs	r3, r2, r3
9000932a:	b29b      	uxth	r3, r3
9000932c:	e000      	b.n	90009330 <tcp_eff_send_mss_netif+0x50>
9000932e:	2300      	movs	r3, #0
90009330:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
90009332:	8a7a      	ldrh	r2, [r7, #18]
90009334:	89fb      	ldrh	r3, [r7, #14]
90009336:	4293      	cmp	r3, r2
90009338:	bf28      	it	cs
9000933a:	4613      	movcs	r3, r2
9000933c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
9000933e:	89fb      	ldrh	r3, [r7, #14]
}
90009340:	4618      	mov	r0, r3
90009342:	3718      	adds	r7, #24
90009344:	46bd      	mov	sp, r7
90009346:	bd80      	pop	{r7, pc}
90009348:	900127bc 	.word	0x900127bc
9000934c:	90012ec8 	.word	0x90012ec8
90009350:	90012800 	.word	0x90012800

90009354 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
90009354:	b580      	push	{r7, lr}
90009356:	b084      	sub	sp, #16
90009358:	af00      	add	r7, sp, #0
9000935a:	6078      	str	r0, [r7, #4]
9000935c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
9000935e:	683b      	ldr	r3, [r7, #0]
90009360:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
90009362:	687b      	ldr	r3, [r7, #4]
90009364:	2b00      	cmp	r3, #0
90009366:	d119      	bne.n	9000939c <tcp_netif_ip_addr_changed_pcblist+0x48>
90009368:	4b10      	ldr	r3, [pc, #64]	; (900093ac <tcp_netif_ip_addr_changed_pcblist+0x58>)
9000936a:	f44f 6210 	mov.w	r2, #2304	; 0x900
9000936e:	4910      	ldr	r1, [pc, #64]	; (900093b0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
90009370:	4810      	ldr	r0, [pc, #64]	; (900093b4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
90009372:	f007 f8bb 	bl	900104ec <iprintf>

  while (pcb != NULL) {
90009376:	e011      	b.n	9000939c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
90009378:	68fb      	ldr	r3, [r7, #12]
9000937a:	681a      	ldr	r2, [r3, #0]
9000937c:	687b      	ldr	r3, [r7, #4]
9000937e:	681b      	ldr	r3, [r3, #0]
90009380:	429a      	cmp	r2, r3
90009382:	d108      	bne.n	90009396 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
90009384:	68fb      	ldr	r3, [r7, #12]
90009386:	68db      	ldr	r3, [r3, #12]
90009388:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
9000938a:	68f8      	ldr	r0, [r7, #12]
9000938c:	f7fe fd20 	bl	90007dd0 <tcp_abort>
      pcb = next;
90009390:	68bb      	ldr	r3, [r7, #8]
90009392:	60fb      	str	r3, [r7, #12]
90009394:	e002      	b.n	9000939c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
90009396:	68fb      	ldr	r3, [r7, #12]
90009398:	68db      	ldr	r3, [r3, #12]
9000939a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
9000939c:	68fb      	ldr	r3, [r7, #12]
9000939e:	2b00      	cmp	r3, #0
900093a0:	d1ea      	bne.n	90009378 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
900093a2:	bf00      	nop
900093a4:	bf00      	nop
900093a6:	3710      	adds	r7, #16
900093a8:	46bd      	mov	sp, r7
900093aa:	bd80      	pop	{r7, pc}
900093ac:	900127bc 	.word	0x900127bc
900093b0:	90012ef0 	.word	0x90012ef0
900093b4:	90012800 	.word	0x90012800

900093b8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
900093b8:	b580      	push	{r7, lr}
900093ba:	b084      	sub	sp, #16
900093bc:	af00      	add	r7, sp, #0
900093be:	6078      	str	r0, [r7, #4]
900093c0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
900093c2:	687b      	ldr	r3, [r7, #4]
900093c4:	2b00      	cmp	r3, #0
900093c6:	d02a      	beq.n	9000941e <tcp_netif_ip_addr_changed+0x66>
900093c8:	687b      	ldr	r3, [r7, #4]
900093ca:	681b      	ldr	r3, [r3, #0]
900093cc:	2b00      	cmp	r3, #0
900093ce:	d026      	beq.n	9000941e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
900093d0:	4b15      	ldr	r3, [pc, #84]	; (90009428 <tcp_netif_ip_addr_changed+0x70>)
900093d2:	681b      	ldr	r3, [r3, #0]
900093d4:	4619      	mov	r1, r3
900093d6:	6878      	ldr	r0, [r7, #4]
900093d8:	f7ff ffbc 	bl	90009354 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
900093dc:	4b13      	ldr	r3, [pc, #76]	; (9000942c <tcp_netif_ip_addr_changed+0x74>)
900093de:	681b      	ldr	r3, [r3, #0]
900093e0:	4619      	mov	r1, r3
900093e2:	6878      	ldr	r0, [r7, #4]
900093e4:	f7ff ffb6 	bl	90009354 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
900093e8:	683b      	ldr	r3, [r7, #0]
900093ea:	2b00      	cmp	r3, #0
900093ec:	d017      	beq.n	9000941e <tcp_netif_ip_addr_changed+0x66>
900093ee:	683b      	ldr	r3, [r7, #0]
900093f0:	681b      	ldr	r3, [r3, #0]
900093f2:	2b00      	cmp	r3, #0
900093f4:	d013      	beq.n	9000941e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
900093f6:	4b0e      	ldr	r3, [pc, #56]	; (90009430 <tcp_netif_ip_addr_changed+0x78>)
900093f8:	681b      	ldr	r3, [r3, #0]
900093fa:	60fb      	str	r3, [r7, #12]
900093fc:	e00c      	b.n	90009418 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
900093fe:	68fb      	ldr	r3, [r7, #12]
90009400:	681a      	ldr	r2, [r3, #0]
90009402:	687b      	ldr	r3, [r7, #4]
90009404:	681b      	ldr	r3, [r3, #0]
90009406:	429a      	cmp	r2, r3
90009408:	d103      	bne.n	90009412 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
9000940a:	683b      	ldr	r3, [r7, #0]
9000940c:	681a      	ldr	r2, [r3, #0]
9000940e:	68fb      	ldr	r3, [r7, #12]
90009410:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
90009412:	68fb      	ldr	r3, [r7, #12]
90009414:	68db      	ldr	r3, [r3, #12]
90009416:	60fb      	str	r3, [r7, #12]
90009418:	68fb      	ldr	r3, [r7, #12]
9000941a:	2b00      	cmp	r3, #0
9000941c:	d1ef      	bne.n	900093fe <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
9000941e:	bf00      	nop
90009420:	3710      	adds	r7, #16
90009422:	46bd      	mov	sp, r7
90009424:	bd80      	pop	{r7, pc}
90009426:	bf00      	nop
90009428:	2000a8ac 	.word	0x2000a8ac
9000942c:	2000a8a4 	.word	0x2000a8a4
90009430:	2000a8a8 	.word	0x2000a8a8

90009434 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
90009434:	b580      	push	{r7, lr}
90009436:	b082      	sub	sp, #8
90009438:	af00      	add	r7, sp, #0
9000943a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
9000943c:	687b      	ldr	r3, [r7, #4]
9000943e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90009440:	2b00      	cmp	r3, #0
90009442:	d007      	beq.n	90009454 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
90009444:	687b      	ldr	r3, [r7, #4]
90009446:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90009448:	4618      	mov	r0, r3
9000944a:	f7ff fb51 	bl	90008af0 <tcp_segs_free>
    pcb->ooseq = NULL;
9000944e:	687b      	ldr	r3, [r7, #4]
90009450:	2200      	movs	r2, #0
90009452:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
90009454:	bf00      	nop
90009456:	3708      	adds	r7, #8
90009458:	46bd      	mov	sp, r7
9000945a:	bd80      	pop	{r7, pc}

9000945c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
9000945c:	b590      	push	{r4, r7, lr}
9000945e:	b08d      	sub	sp, #52	; 0x34
90009460:	af04      	add	r7, sp, #16
90009462:	6078      	str	r0, [r7, #4]
90009464:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
90009466:	687b      	ldr	r3, [r7, #4]
90009468:	2b00      	cmp	r3, #0
9000946a:	d105      	bne.n	90009478 <tcp_input+0x1c>
9000946c:	4b9b      	ldr	r3, [pc, #620]	; (900096dc <tcp_input+0x280>)
9000946e:	2283      	movs	r2, #131	; 0x83
90009470:	499b      	ldr	r1, [pc, #620]	; (900096e0 <tcp_input+0x284>)
90009472:	489c      	ldr	r0, [pc, #624]	; (900096e4 <tcp_input+0x288>)
90009474:	f007 f83a 	bl	900104ec <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
90009478:	687b      	ldr	r3, [r7, #4]
9000947a:	685b      	ldr	r3, [r3, #4]
9000947c:	4a9a      	ldr	r2, [pc, #616]	; (900096e8 <tcp_input+0x28c>)
9000947e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
90009480:	687b      	ldr	r3, [r7, #4]
90009482:	895b      	ldrh	r3, [r3, #10]
90009484:	2b13      	cmp	r3, #19
90009486:	f240 83d1 	bls.w	90009c2c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
9000948a:	4b98      	ldr	r3, [pc, #608]	; (900096ec <tcp_input+0x290>)
9000948c:	695b      	ldr	r3, [r3, #20]
9000948e:	4a97      	ldr	r2, [pc, #604]	; (900096ec <tcp_input+0x290>)
90009490:	6812      	ldr	r2, [r2, #0]
90009492:	4611      	mov	r1, r2
90009494:	4618      	mov	r0, r3
90009496:	f006 f86f 	bl	9000f578 <ip4_addr_isbroadcast_u32>
9000949a:	4603      	mov	r3, r0
9000949c:	2b00      	cmp	r3, #0
9000949e:	f040 83c7 	bne.w	90009c30 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
900094a2:	4b92      	ldr	r3, [pc, #584]	; (900096ec <tcp_input+0x290>)
900094a4:	695b      	ldr	r3, [r3, #20]
900094a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
900094aa:	2be0      	cmp	r3, #224	; 0xe0
900094ac:	f000 83c0 	beq.w	90009c30 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
900094b0:	4b8d      	ldr	r3, [pc, #564]	; (900096e8 <tcp_input+0x28c>)
900094b2:	681b      	ldr	r3, [r3, #0]
900094b4:	899b      	ldrh	r3, [r3, #12]
900094b6:	b29b      	uxth	r3, r3
900094b8:	4618      	mov	r0, r3
900094ba:	f7fc fb39 	bl	90005b30 <lwip_htons>
900094be:	4603      	mov	r3, r0
900094c0:	0b1b      	lsrs	r3, r3, #12
900094c2:	b29b      	uxth	r3, r3
900094c4:	b2db      	uxtb	r3, r3
900094c6:	009b      	lsls	r3, r3, #2
900094c8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
900094ca:	7cbb      	ldrb	r3, [r7, #18]
900094cc:	2b13      	cmp	r3, #19
900094ce:	f240 83b1 	bls.w	90009c34 <tcp_input+0x7d8>
900094d2:	7cbb      	ldrb	r3, [r7, #18]
900094d4:	b29a      	uxth	r2, r3
900094d6:	687b      	ldr	r3, [r7, #4]
900094d8:	891b      	ldrh	r3, [r3, #8]
900094da:	429a      	cmp	r2, r3
900094dc:	f200 83aa 	bhi.w	90009c34 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
900094e0:	7cbb      	ldrb	r3, [r7, #18]
900094e2:	b29b      	uxth	r3, r3
900094e4:	3b14      	subs	r3, #20
900094e6:	b29a      	uxth	r2, r3
900094e8:	4b81      	ldr	r3, [pc, #516]	; (900096f0 <tcp_input+0x294>)
900094ea:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
900094ec:	4b81      	ldr	r3, [pc, #516]	; (900096f4 <tcp_input+0x298>)
900094ee:	2200      	movs	r2, #0
900094f0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
900094f2:	687b      	ldr	r3, [r7, #4]
900094f4:	895a      	ldrh	r2, [r3, #10]
900094f6:	7cbb      	ldrb	r3, [r7, #18]
900094f8:	b29b      	uxth	r3, r3
900094fa:	429a      	cmp	r2, r3
900094fc:	d309      	bcc.n	90009512 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
900094fe:	4b7c      	ldr	r3, [pc, #496]	; (900096f0 <tcp_input+0x294>)
90009500:	881a      	ldrh	r2, [r3, #0]
90009502:	4b7d      	ldr	r3, [pc, #500]	; (900096f8 <tcp_input+0x29c>)
90009504:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
90009506:	7cbb      	ldrb	r3, [r7, #18]
90009508:	4619      	mov	r1, r3
9000950a:	6878      	ldr	r0, [r7, #4]
9000950c:	f7fd fe52 	bl	900071b4 <pbuf_remove_header>
90009510:	e04e      	b.n	900095b0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
90009512:	687b      	ldr	r3, [r7, #4]
90009514:	681b      	ldr	r3, [r3, #0]
90009516:	2b00      	cmp	r3, #0
90009518:	d105      	bne.n	90009526 <tcp_input+0xca>
9000951a:	4b70      	ldr	r3, [pc, #448]	; (900096dc <tcp_input+0x280>)
9000951c:	22c2      	movs	r2, #194	; 0xc2
9000951e:	4977      	ldr	r1, [pc, #476]	; (900096fc <tcp_input+0x2a0>)
90009520:	4870      	ldr	r0, [pc, #448]	; (900096e4 <tcp_input+0x288>)
90009522:	f006 ffe3 	bl	900104ec <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
90009526:	2114      	movs	r1, #20
90009528:	6878      	ldr	r0, [r7, #4]
9000952a:	f7fd fe43 	bl	900071b4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
9000952e:	687b      	ldr	r3, [r7, #4]
90009530:	895a      	ldrh	r2, [r3, #10]
90009532:	4b71      	ldr	r3, [pc, #452]	; (900096f8 <tcp_input+0x29c>)
90009534:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
90009536:	4b6e      	ldr	r3, [pc, #440]	; (900096f0 <tcp_input+0x294>)
90009538:	881a      	ldrh	r2, [r3, #0]
9000953a:	4b6f      	ldr	r3, [pc, #444]	; (900096f8 <tcp_input+0x29c>)
9000953c:	881b      	ldrh	r3, [r3, #0]
9000953e:	1ad3      	subs	r3, r2, r3
90009540:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
90009542:	4b6d      	ldr	r3, [pc, #436]	; (900096f8 <tcp_input+0x29c>)
90009544:	881b      	ldrh	r3, [r3, #0]
90009546:	4619      	mov	r1, r3
90009548:	6878      	ldr	r0, [r7, #4]
9000954a:	f7fd fe33 	bl	900071b4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
9000954e:	687b      	ldr	r3, [r7, #4]
90009550:	681b      	ldr	r3, [r3, #0]
90009552:	895b      	ldrh	r3, [r3, #10]
90009554:	8a3a      	ldrh	r2, [r7, #16]
90009556:	429a      	cmp	r2, r3
90009558:	f200 836e 	bhi.w	90009c38 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
9000955c:	687b      	ldr	r3, [r7, #4]
9000955e:	681b      	ldr	r3, [r3, #0]
90009560:	685b      	ldr	r3, [r3, #4]
90009562:	4a64      	ldr	r2, [pc, #400]	; (900096f4 <tcp_input+0x298>)
90009564:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
90009566:	687b      	ldr	r3, [r7, #4]
90009568:	681b      	ldr	r3, [r3, #0]
9000956a:	8a3a      	ldrh	r2, [r7, #16]
9000956c:	4611      	mov	r1, r2
9000956e:	4618      	mov	r0, r3
90009570:	f7fd fe20 	bl	900071b4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
90009574:	687b      	ldr	r3, [r7, #4]
90009576:	891a      	ldrh	r2, [r3, #8]
90009578:	8a3b      	ldrh	r3, [r7, #16]
9000957a:	1ad3      	subs	r3, r2, r3
9000957c:	b29a      	uxth	r2, r3
9000957e:	687b      	ldr	r3, [r7, #4]
90009580:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
90009582:	687b      	ldr	r3, [r7, #4]
90009584:	895b      	ldrh	r3, [r3, #10]
90009586:	2b00      	cmp	r3, #0
90009588:	d005      	beq.n	90009596 <tcp_input+0x13a>
9000958a:	4b54      	ldr	r3, [pc, #336]	; (900096dc <tcp_input+0x280>)
9000958c:	22df      	movs	r2, #223	; 0xdf
9000958e:	495c      	ldr	r1, [pc, #368]	; (90009700 <tcp_input+0x2a4>)
90009590:	4854      	ldr	r0, [pc, #336]	; (900096e4 <tcp_input+0x288>)
90009592:	f006 ffab 	bl	900104ec <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
90009596:	687b      	ldr	r3, [r7, #4]
90009598:	891a      	ldrh	r2, [r3, #8]
9000959a:	687b      	ldr	r3, [r7, #4]
9000959c:	681b      	ldr	r3, [r3, #0]
9000959e:	891b      	ldrh	r3, [r3, #8]
900095a0:	429a      	cmp	r2, r3
900095a2:	d005      	beq.n	900095b0 <tcp_input+0x154>
900095a4:	4b4d      	ldr	r3, [pc, #308]	; (900096dc <tcp_input+0x280>)
900095a6:	22e0      	movs	r2, #224	; 0xe0
900095a8:	4956      	ldr	r1, [pc, #344]	; (90009704 <tcp_input+0x2a8>)
900095aa:	484e      	ldr	r0, [pc, #312]	; (900096e4 <tcp_input+0x288>)
900095ac:	f006 ff9e 	bl	900104ec <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
900095b0:	4b4d      	ldr	r3, [pc, #308]	; (900096e8 <tcp_input+0x28c>)
900095b2:	681b      	ldr	r3, [r3, #0]
900095b4:	881b      	ldrh	r3, [r3, #0]
900095b6:	b29b      	uxth	r3, r3
900095b8:	4a4b      	ldr	r2, [pc, #300]	; (900096e8 <tcp_input+0x28c>)
900095ba:	6814      	ldr	r4, [r2, #0]
900095bc:	4618      	mov	r0, r3
900095be:	f7fc fab7 	bl	90005b30 <lwip_htons>
900095c2:	4603      	mov	r3, r0
900095c4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
900095c6:	4b48      	ldr	r3, [pc, #288]	; (900096e8 <tcp_input+0x28c>)
900095c8:	681b      	ldr	r3, [r3, #0]
900095ca:	885b      	ldrh	r3, [r3, #2]
900095cc:	b29b      	uxth	r3, r3
900095ce:	4a46      	ldr	r2, [pc, #280]	; (900096e8 <tcp_input+0x28c>)
900095d0:	6814      	ldr	r4, [r2, #0]
900095d2:	4618      	mov	r0, r3
900095d4:	f7fc faac 	bl	90005b30 <lwip_htons>
900095d8:	4603      	mov	r3, r0
900095da:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
900095dc:	4b42      	ldr	r3, [pc, #264]	; (900096e8 <tcp_input+0x28c>)
900095de:	681b      	ldr	r3, [r3, #0]
900095e0:	685b      	ldr	r3, [r3, #4]
900095e2:	4a41      	ldr	r2, [pc, #260]	; (900096e8 <tcp_input+0x28c>)
900095e4:	6814      	ldr	r4, [r2, #0]
900095e6:	4618      	mov	r0, r3
900095e8:	f7fc fab7 	bl	90005b5a <lwip_htonl>
900095ec:	4603      	mov	r3, r0
900095ee:	6063      	str	r3, [r4, #4]
900095f0:	6863      	ldr	r3, [r4, #4]
900095f2:	4a45      	ldr	r2, [pc, #276]	; (90009708 <tcp_input+0x2ac>)
900095f4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
900095f6:	4b3c      	ldr	r3, [pc, #240]	; (900096e8 <tcp_input+0x28c>)
900095f8:	681b      	ldr	r3, [r3, #0]
900095fa:	689b      	ldr	r3, [r3, #8]
900095fc:	4a3a      	ldr	r2, [pc, #232]	; (900096e8 <tcp_input+0x28c>)
900095fe:	6814      	ldr	r4, [r2, #0]
90009600:	4618      	mov	r0, r3
90009602:	f7fc faaa 	bl	90005b5a <lwip_htonl>
90009606:	4603      	mov	r3, r0
90009608:	60a3      	str	r3, [r4, #8]
9000960a:	68a3      	ldr	r3, [r4, #8]
9000960c:	4a3f      	ldr	r2, [pc, #252]	; (9000970c <tcp_input+0x2b0>)
9000960e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
90009610:	4b35      	ldr	r3, [pc, #212]	; (900096e8 <tcp_input+0x28c>)
90009612:	681b      	ldr	r3, [r3, #0]
90009614:	89db      	ldrh	r3, [r3, #14]
90009616:	b29b      	uxth	r3, r3
90009618:	4a33      	ldr	r2, [pc, #204]	; (900096e8 <tcp_input+0x28c>)
9000961a:	6814      	ldr	r4, [r2, #0]
9000961c:	4618      	mov	r0, r3
9000961e:	f7fc fa87 	bl	90005b30 <lwip_htons>
90009622:	4603      	mov	r3, r0
90009624:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
90009626:	4b30      	ldr	r3, [pc, #192]	; (900096e8 <tcp_input+0x28c>)
90009628:	681b      	ldr	r3, [r3, #0]
9000962a:	899b      	ldrh	r3, [r3, #12]
9000962c:	b29b      	uxth	r3, r3
9000962e:	4618      	mov	r0, r3
90009630:	f7fc fa7e 	bl	90005b30 <lwip_htons>
90009634:	4603      	mov	r3, r0
90009636:	b2db      	uxtb	r3, r3
90009638:	f003 033f 	and.w	r3, r3, #63	; 0x3f
9000963c:	b2da      	uxtb	r2, r3
9000963e:	4b34      	ldr	r3, [pc, #208]	; (90009710 <tcp_input+0x2b4>)
90009640:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
90009642:	687b      	ldr	r3, [r7, #4]
90009644:	891a      	ldrh	r2, [r3, #8]
90009646:	4b33      	ldr	r3, [pc, #204]	; (90009714 <tcp_input+0x2b8>)
90009648:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
9000964a:	4b31      	ldr	r3, [pc, #196]	; (90009710 <tcp_input+0x2b4>)
9000964c:	781b      	ldrb	r3, [r3, #0]
9000964e:	f003 0303 	and.w	r3, r3, #3
90009652:	2b00      	cmp	r3, #0
90009654:	d00c      	beq.n	90009670 <tcp_input+0x214>
    tcplen++;
90009656:	4b2f      	ldr	r3, [pc, #188]	; (90009714 <tcp_input+0x2b8>)
90009658:	881b      	ldrh	r3, [r3, #0]
9000965a:	3301      	adds	r3, #1
9000965c:	b29a      	uxth	r2, r3
9000965e:	4b2d      	ldr	r3, [pc, #180]	; (90009714 <tcp_input+0x2b8>)
90009660:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
90009662:	687b      	ldr	r3, [r7, #4]
90009664:	891a      	ldrh	r2, [r3, #8]
90009666:	4b2b      	ldr	r3, [pc, #172]	; (90009714 <tcp_input+0x2b8>)
90009668:	881b      	ldrh	r3, [r3, #0]
9000966a:	429a      	cmp	r2, r3
9000966c:	f200 82e6 	bhi.w	90009c3c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
90009670:	2300      	movs	r3, #0
90009672:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
90009674:	4b28      	ldr	r3, [pc, #160]	; (90009718 <tcp_input+0x2bc>)
90009676:	681b      	ldr	r3, [r3, #0]
90009678:	61fb      	str	r3, [r7, #28]
9000967a:	e09d      	b.n	900097b8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
9000967c:	69fb      	ldr	r3, [r7, #28]
9000967e:	7d1b      	ldrb	r3, [r3, #20]
90009680:	2b00      	cmp	r3, #0
90009682:	d105      	bne.n	90009690 <tcp_input+0x234>
90009684:	4b15      	ldr	r3, [pc, #84]	; (900096dc <tcp_input+0x280>)
90009686:	22fb      	movs	r2, #251	; 0xfb
90009688:	4924      	ldr	r1, [pc, #144]	; (9000971c <tcp_input+0x2c0>)
9000968a:	4816      	ldr	r0, [pc, #88]	; (900096e4 <tcp_input+0x288>)
9000968c:	f006 ff2e 	bl	900104ec <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
90009690:	69fb      	ldr	r3, [r7, #28]
90009692:	7d1b      	ldrb	r3, [r3, #20]
90009694:	2b0a      	cmp	r3, #10
90009696:	d105      	bne.n	900096a4 <tcp_input+0x248>
90009698:	4b10      	ldr	r3, [pc, #64]	; (900096dc <tcp_input+0x280>)
9000969a:	22fc      	movs	r2, #252	; 0xfc
9000969c:	4920      	ldr	r1, [pc, #128]	; (90009720 <tcp_input+0x2c4>)
9000969e:	4811      	ldr	r0, [pc, #68]	; (900096e4 <tcp_input+0x288>)
900096a0:	f006 ff24 	bl	900104ec <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
900096a4:	69fb      	ldr	r3, [r7, #28]
900096a6:	7d1b      	ldrb	r3, [r3, #20]
900096a8:	2b01      	cmp	r3, #1
900096aa:	d105      	bne.n	900096b8 <tcp_input+0x25c>
900096ac:	4b0b      	ldr	r3, [pc, #44]	; (900096dc <tcp_input+0x280>)
900096ae:	22fd      	movs	r2, #253	; 0xfd
900096b0:	491c      	ldr	r1, [pc, #112]	; (90009724 <tcp_input+0x2c8>)
900096b2:	480c      	ldr	r0, [pc, #48]	; (900096e4 <tcp_input+0x288>)
900096b4:	f006 ff1a 	bl	900104ec <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
900096b8:	69fb      	ldr	r3, [r7, #28]
900096ba:	7a1b      	ldrb	r3, [r3, #8]
900096bc:	2b00      	cmp	r3, #0
900096be:	d033      	beq.n	90009728 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
900096c0:	69fb      	ldr	r3, [r7, #28]
900096c2:	7a1a      	ldrb	r2, [r3, #8]
900096c4:	4b09      	ldr	r3, [pc, #36]	; (900096ec <tcp_input+0x290>)
900096c6:	685b      	ldr	r3, [r3, #4]
900096c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
900096cc:	3301      	adds	r3, #1
900096ce:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
900096d0:	429a      	cmp	r2, r3
900096d2:	d029      	beq.n	90009728 <tcp_input+0x2cc>
      prev = pcb;
900096d4:	69fb      	ldr	r3, [r7, #28]
900096d6:	61bb      	str	r3, [r7, #24]
      continue;
900096d8:	e06b      	b.n	900097b2 <tcp_input+0x356>
900096da:	bf00      	nop
900096dc:	90012f24 	.word	0x90012f24
900096e0:	90012f58 	.word	0x90012f58
900096e4:	90012f70 	.word	0x90012f70
900096e8:	2000a8c8 	.word	0x2000a8c8
900096ec:	20005170 	.word	0x20005170
900096f0:	2000a8cc 	.word	0x2000a8cc
900096f4:	2000a8d0 	.word	0x2000a8d0
900096f8:	2000a8ce 	.word	0x2000a8ce
900096fc:	90012f98 	.word	0x90012f98
90009700:	90012fa8 	.word	0x90012fa8
90009704:	90012fb4 	.word	0x90012fb4
90009708:	2000a8d8 	.word	0x2000a8d8
9000970c:	2000a8dc 	.word	0x2000a8dc
90009710:	2000a8e4 	.word	0x2000a8e4
90009714:	2000a8e2 	.word	0x2000a8e2
90009718:	2000a8ac 	.word	0x2000a8ac
9000971c:	90012fd4 	.word	0x90012fd4
90009720:	90012ffc 	.word	0x90012ffc
90009724:	90013028 	.word	0x90013028
    }

    if (pcb->remote_port == tcphdr->src &&
90009728:	69fb      	ldr	r3, [r7, #28]
9000972a:	8b1a      	ldrh	r2, [r3, #24]
9000972c:	4b72      	ldr	r3, [pc, #456]	; (900098f8 <tcp_input+0x49c>)
9000972e:	681b      	ldr	r3, [r3, #0]
90009730:	881b      	ldrh	r3, [r3, #0]
90009732:	b29b      	uxth	r3, r3
90009734:	429a      	cmp	r2, r3
90009736:	d13a      	bne.n	900097ae <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
90009738:	69fb      	ldr	r3, [r7, #28]
9000973a:	8ada      	ldrh	r2, [r3, #22]
9000973c:	4b6e      	ldr	r3, [pc, #440]	; (900098f8 <tcp_input+0x49c>)
9000973e:	681b      	ldr	r3, [r3, #0]
90009740:	885b      	ldrh	r3, [r3, #2]
90009742:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
90009744:	429a      	cmp	r2, r3
90009746:	d132      	bne.n	900097ae <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
90009748:	69fb      	ldr	r3, [r7, #28]
9000974a:	685a      	ldr	r2, [r3, #4]
9000974c:	4b6b      	ldr	r3, [pc, #428]	; (900098fc <tcp_input+0x4a0>)
9000974e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
90009750:	429a      	cmp	r2, r3
90009752:	d12c      	bne.n	900097ae <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
90009754:	69fb      	ldr	r3, [r7, #28]
90009756:	681a      	ldr	r2, [r3, #0]
90009758:	4b68      	ldr	r3, [pc, #416]	; (900098fc <tcp_input+0x4a0>)
9000975a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
9000975c:	429a      	cmp	r2, r3
9000975e:	d126      	bne.n	900097ae <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
90009760:	69fb      	ldr	r3, [r7, #28]
90009762:	68db      	ldr	r3, [r3, #12]
90009764:	69fa      	ldr	r2, [r7, #28]
90009766:	429a      	cmp	r2, r3
90009768:	d106      	bne.n	90009778 <tcp_input+0x31c>
9000976a:	4b65      	ldr	r3, [pc, #404]	; (90009900 <tcp_input+0x4a4>)
9000976c:	f240 120d 	movw	r2, #269	; 0x10d
90009770:	4964      	ldr	r1, [pc, #400]	; (90009904 <tcp_input+0x4a8>)
90009772:	4865      	ldr	r0, [pc, #404]	; (90009908 <tcp_input+0x4ac>)
90009774:	f006 feba 	bl	900104ec <iprintf>
      if (prev != NULL) {
90009778:	69bb      	ldr	r3, [r7, #24]
9000977a:	2b00      	cmp	r3, #0
9000977c:	d00a      	beq.n	90009794 <tcp_input+0x338>
        prev->next = pcb->next;
9000977e:	69fb      	ldr	r3, [r7, #28]
90009780:	68da      	ldr	r2, [r3, #12]
90009782:	69bb      	ldr	r3, [r7, #24]
90009784:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
90009786:	4b61      	ldr	r3, [pc, #388]	; (9000990c <tcp_input+0x4b0>)
90009788:	681a      	ldr	r2, [r3, #0]
9000978a:	69fb      	ldr	r3, [r7, #28]
9000978c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
9000978e:	4a5f      	ldr	r2, [pc, #380]	; (9000990c <tcp_input+0x4b0>)
90009790:	69fb      	ldr	r3, [r7, #28]
90009792:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
90009794:	69fb      	ldr	r3, [r7, #28]
90009796:	68db      	ldr	r3, [r3, #12]
90009798:	69fa      	ldr	r2, [r7, #28]
9000979a:	429a      	cmp	r2, r3
9000979c:	d111      	bne.n	900097c2 <tcp_input+0x366>
9000979e:	4b58      	ldr	r3, [pc, #352]	; (90009900 <tcp_input+0x4a4>)
900097a0:	f240 1215 	movw	r2, #277	; 0x115
900097a4:	495a      	ldr	r1, [pc, #360]	; (90009910 <tcp_input+0x4b4>)
900097a6:	4858      	ldr	r0, [pc, #352]	; (90009908 <tcp_input+0x4ac>)
900097a8:	f006 fea0 	bl	900104ec <iprintf>
      break;
900097ac:	e009      	b.n	900097c2 <tcp_input+0x366>
    }
    prev = pcb;
900097ae:	69fb      	ldr	r3, [r7, #28]
900097b0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
900097b2:	69fb      	ldr	r3, [r7, #28]
900097b4:	68db      	ldr	r3, [r3, #12]
900097b6:	61fb      	str	r3, [r7, #28]
900097b8:	69fb      	ldr	r3, [r7, #28]
900097ba:	2b00      	cmp	r3, #0
900097bc:	f47f af5e 	bne.w	9000967c <tcp_input+0x220>
900097c0:	e000      	b.n	900097c4 <tcp_input+0x368>
      break;
900097c2:	bf00      	nop
  }

  if (pcb == NULL) {
900097c4:	69fb      	ldr	r3, [r7, #28]
900097c6:	2b00      	cmp	r3, #0
900097c8:	f040 80aa 	bne.w	90009920 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
900097cc:	4b51      	ldr	r3, [pc, #324]	; (90009914 <tcp_input+0x4b8>)
900097ce:	681b      	ldr	r3, [r3, #0]
900097d0:	61fb      	str	r3, [r7, #28]
900097d2:	e03f      	b.n	90009854 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
900097d4:	69fb      	ldr	r3, [r7, #28]
900097d6:	7d1b      	ldrb	r3, [r3, #20]
900097d8:	2b0a      	cmp	r3, #10
900097da:	d006      	beq.n	900097ea <tcp_input+0x38e>
900097dc:	4b48      	ldr	r3, [pc, #288]	; (90009900 <tcp_input+0x4a4>)
900097de:	f240 121f 	movw	r2, #287	; 0x11f
900097e2:	494d      	ldr	r1, [pc, #308]	; (90009918 <tcp_input+0x4bc>)
900097e4:	4848      	ldr	r0, [pc, #288]	; (90009908 <tcp_input+0x4ac>)
900097e6:	f006 fe81 	bl	900104ec <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
900097ea:	69fb      	ldr	r3, [r7, #28]
900097ec:	7a1b      	ldrb	r3, [r3, #8]
900097ee:	2b00      	cmp	r3, #0
900097f0:	d009      	beq.n	90009806 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
900097f2:	69fb      	ldr	r3, [r7, #28]
900097f4:	7a1a      	ldrb	r2, [r3, #8]
900097f6:	4b41      	ldr	r3, [pc, #260]	; (900098fc <tcp_input+0x4a0>)
900097f8:	685b      	ldr	r3, [r3, #4]
900097fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
900097fe:	3301      	adds	r3, #1
90009800:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
90009802:	429a      	cmp	r2, r3
90009804:	d122      	bne.n	9000984c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
90009806:	69fb      	ldr	r3, [r7, #28]
90009808:	8b1a      	ldrh	r2, [r3, #24]
9000980a:	4b3b      	ldr	r3, [pc, #236]	; (900098f8 <tcp_input+0x49c>)
9000980c:	681b      	ldr	r3, [r3, #0]
9000980e:	881b      	ldrh	r3, [r3, #0]
90009810:	b29b      	uxth	r3, r3
90009812:	429a      	cmp	r2, r3
90009814:	d11b      	bne.n	9000984e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
90009816:	69fb      	ldr	r3, [r7, #28]
90009818:	8ada      	ldrh	r2, [r3, #22]
9000981a:	4b37      	ldr	r3, [pc, #220]	; (900098f8 <tcp_input+0x49c>)
9000981c:	681b      	ldr	r3, [r3, #0]
9000981e:	885b      	ldrh	r3, [r3, #2]
90009820:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
90009822:	429a      	cmp	r2, r3
90009824:	d113      	bne.n	9000984e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
90009826:	69fb      	ldr	r3, [r7, #28]
90009828:	685a      	ldr	r2, [r3, #4]
9000982a:	4b34      	ldr	r3, [pc, #208]	; (900098fc <tcp_input+0x4a0>)
9000982c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
9000982e:	429a      	cmp	r2, r3
90009830:	d10d      	bne.n	9000984e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
90009832:	69fb      	ldr	r3, [r7, #28]
90009834:	681a      	ldr	r2, [r3, #0]
90009836:	4b31      	ldr	r3, [pc, #196]	; (900098fc <tcp_input+0x4a0>)
90009838:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
9000983a:	429a      	cmp	r2, r3
9000983c:	d107      	bne.n	9000984e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
9000983e:	69f8      	ldr	r0, [r7, #28]
90009840:	f000 fb56 	bl	90009ef0 <tcp_timewait_input>
        }
        pbuf_free(p);
90009844:	6878      	ldr	r0, [r7, #4]
90009846:	f7fd fd3b 	bl	900072c0 <pbuf_free>
        return;
9000984a:	e1fd      	b.n	90009c48 <tcp_input+0x7ec>
        continue;
9000984c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
9000984e:	69fb      	ldr	r3, [r7, #28]
90009850:	68db      	ldr	r3, [r3, #12]
90009852:	61fb      	str	r3, [r7, #28]
90009854:	69fb      	ldr	r3, [r7, #28]
90009856:	2b00      	cmp	r3, #0
90009858:	d1bc      	bne.n	900097d4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
9000985a:	2300      	movs	r3, #0
9000985c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
9000985e:	4b2f      	ldr	r3, [pc, #188]	; (9000991c <tcp_input+0x4c0>)
90009860:	681b      	ldr	r3, [r3, #0]
90009862:	617b      	str	r3, [r7, #20]
90009864:	e02a      	b.n	900098bc <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
90009866:	697b      	ldr	r3, [r7, #20]
90009868:	7a1b      	ldrb	r3, [r3, #8]
9000986a:	2b00      	cmp	r3, #0
9000986c:	d00c      	beq.n	90009888 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
9000986e:	697b      	ldr	r3, [r7, #20]
90009870:	7a1a      	ldrb	r2, [r3, #8]
90009872:	4b22      	ldr	r3, [pc, #136]	; (900098fc <tcp_input+0x4a0>)
90009874:	685b      	ldr	r3, [r3, #4]
90009876:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
9000987a:	3301      	adds	r3, #1
9000987c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
9000987e:	429a      	cmp	r2, r3
90009880:	d002      	beq.n	90009888 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
90009882:	697b      	ldr	r3, [r7, #20]
90009884:	61bb      	str	r3, [r7, #24]
        continue;
90009886:	e016      	b.n	900098b6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
90009888:	697b      	ldr	r3, [r7, #20]
9000988a:	8ada      	ldrh	r2, [r3, #22]
9000988c:	4b1a      	ldr	r3, [pc, #104]	; (900098f8 <tcp_input+0x49c>)
9000988e:	681b      	ldr	r3, [r3, #0]
90009890:	885b      	ldrh	r3, [r3, #2]
90009892:	b29b      	uxth	r3, r3
90009894:	429a      	cmp	r2, r3
90009896:	d10c      	bne.n	900098b2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
90009898:	697b      	ldr	r3, [r7, #20]
9000989a:	681a      	ldr	r2, [r3, #0]
9000989c:	4b17      	ldr	r3, [pc, #92]	; (900098fc <tcp_input+0x4a0>)
9000989e:	695b      	ldr	r3, [r3, #20]
900098a0:	429a      	cmp	r2, r3
900098a2:	d00f      	beq.n	900098c4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
900098a4:	697b      	ldr	r3, [r7, #20]
900098a6:	2b00      	cmp	r3, #0
900098a8:	d00d      	beq.n	900098c6 <tcp_input+0x46a>
900098aa:	697b      	ldr	r3, [r7, #20]
900098ac:	681b      	ldr	r3, [r3, #0]
900098ae:	2b00      	cmp	r3, #0
900098b0:	d009      	beq.n	900098c6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
900098b2:	697b      	ldr	r3, [r7, #20]
900098b4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
900098b6:	697b      	ldr	r3, [r7, #20]
900098b8:	68db      	ldr	r3, [r3, #12]
900098ba:	617b      	str	r3, [r7, #20]
900098bc:	697b      	ldr	r3, [r7, #20]
900098be:	2b00      	cmp	r3, #0
900098c0:	d1d1      	bne.n	90009866 <tcp_input+0x40a>
900098c2:	e000      	b.n	900098c6 <tcp_input+0x46a>
            break;
900098c4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
900098c6:	697b      	ldr	r3, [r7, #20]
900098c8:	2b00      	cmp	r3, #0
900098ca:	d029      	beq.n	90009920 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
900098cc:	69bb      	ldr	r3, [r7, #24]
900098ce:	2b00      	cmp	r3, #0
900098d0:	d00a      	beq.n	900098e8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
900098d2:	697b      	ldr	r3, [r7, #20]
900098d4:	68da      	ldr	r2, [r3, #12]
900098d6:	69bb      	ldr	r3, [r7, #24]
900098d8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
900098da:	4b10      	ldr	r3, [pc, #64]	; (9000991c <tcp_input+0x4c0>)
900098dc:	681a      	ldr	r2, [r3, #0]
900098de:	697b      	ldr	r3, [r7, #20]
900098e0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
900098e2:	4a0e      	ldr	r2, [pc, #56]	; (9000991c <tcp_input+0x4c0>)
900098e4:	697b      	ldr	r3, [r7, #20]
900098e6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
900098e8:	6978      	ldr	r0, [r7, #20]
900098ea:	f000 fa03 	bl	90009cf4 <tcp_listen_input>
      }
      pbuf_free(p);
900098ee:	6878      	ldr	r0, [r7, #4]
900098f0:	f7fd fce6 	bl	900072c0 <pbuf_free>
      return;
900098f4:	e1a8      	b.n	90009c48 <tcp_input+0x7ec>
900098f6:	bf00      	nop
900098f8:	2000a8c8 	.word	0x2000a8c8
900098fc:	20005170 	.word	0x20005170
90009900:	90012f24 	.word	0x90012f24
90009904:	90013050 	.word	0x90013050
90009908:	90012f70 	.word	0x90012f70
9000990c:	2000a8ac 	.word	0x2000a8ac
90009910:	9001307c 	.word	0x9001307c
90009914:	2000a8b0 	.word	0x2000a8b0
90009918:	900130a8 	.word	0x900130a8
9000991c:	2000a8a8 	.word	0x2000a8a8
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
90009920:	69fb      	ldr	r3, [r7, #28]
90009922:	2b00      	cmp	r3, #0
90009924:	f000 8158 	beq.w	90009bd8 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
90009928:	4b95      	ldr	r3, [pc, #596]	; (90009b80 <tcp_input+0x724>)
9000992a:	2200      	movs	r2, #0
9000992c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
9000992e:	687b      	ldr	r3, [r7, #4]
90009930:	891a      	ldrh	r2, [r3, #8]
90009932:	4b93      	ldr	r3, [pc, #588]	; (90009b80 <tcp_input+0x724>)
90009934:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
90009936:	4a92      	ldr	r2, [pc, #584]	; (90009b80 <tcp_input+0x724>)
90009938:	687b      	ldr	r3, [r7, #4]
9000993a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
9000993c:	4b91      	ldr	r3, [pc, #580]	; (90009b84 <tcp_input+0x728>)
9000993e:	681b      	ldr	r3, [r3, #0]
90009940:	4a8f      	ldr	r2, [pc, #572]	; (90009b80 <tcp_input+0x724>)
90009942:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
90009944:	4b90      	ldr	r3, [pc, #576]	; (90009b88 <tcp_input+0x72c>)
90009946:	2200      	movs	r2, #0
90009948:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
9000994a:	4b90      	ldr	r3, [pc, #576]	; (90009b8c <tcp_input+0x730>)
9000994c:	2200      	movs	r2, #0
9000994e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
90009950:	4b8f      	ldr	r3, [pc, #572]	; (90009b90 <tcp_input+0x734>)
90009952:	2200      	movs	r2, #0
90009954:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
90009956:	4b8f      	ldr	r3, [pc, #572]	; (90009b94 <tcp_input+0x738>)
90009958:	781b      	ldrb	r3, [r3, #0]
9000995a:	f003 0308 	and.w	r3, r3, #8
9000995e:	2b00      	cmp	r3, #0
90009960:	d006      	beq.n	90009970 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
90009962:	687b      	ldr	r3, [r7, #4]
90009964:	7b5b      	ldrb	r3, [r3, #13]
90009966:	f043 0301 	orr.w	r3, r3, #1
9000996a:	b2da      	uxtb	r2, r3
9000996c:	687b      	ldr	r3, [r7, #4]
9000996e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
90009970:	69fb      	ldr	r3, [r7, #28]
90009972:	6f9b      	ldr	r3, [r3, #120]	; 0x78
90009974:	2b00      	cmp	r3, #0
90009976:	d017      	beq.n	900099a8 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
90009978:	69f8      	ldr	r0, [r7, #28]
9000997a:	f7ff f83d 	bl	900089f8 <tcp_process_refused_data>
9000997e:	4603      	mov	r3, r0
90009980:	f113 0f0d 	cmn.w	r3, #13
90009984:	d007      	beq.n	90009996 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
90009986:	69fb      	ldr	r3, [r7, #28]
90009988:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
9000998a:	2b00      	cmp	r3, #0
9000998c:	d00c      	beq.n	900099a8 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
9000998e:	4b82      	ldr	r3, [pc, #520]	; (90009b98 <tcp_input+0x73c>)
90009990:	881b      	ldrh	r3, [r3, #0]
90009992:	2b00      	cmp	r3, #0
90009994:	d008      	beq.n	900099a8 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
90009996:	69fb      	ldr	r3, [r7, #28]
90009998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
9000999a:	2b00      	cmp	r3, #0
9000999c:	f040 80e3 	bne.w	90009b66 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
900099a0:	69f8      	ldr	r0, [r7, #28]
900099a2:	f003 fe05 	bl	9000d5b0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
900099a6:	e0de      	b.n	90009b66 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
900099a8:	4a7c      	ldr	r2, [pc, #496]	; (90009b9c <tcp_input+0x740>)
900099aa:	69fb      	ldr	r3, [r7, #28]
900099ac:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
900099ae:	69f8      	ldr	r0, [r7, #28]
900099b0:	f000 fb18 	bl	90009fe4 <tcp_process>
900099b4:	4603      	mov	r3, r0
900099b6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
900099b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
900099bc:	f113 0f0d 	cmn.w	r3, #13
900099c0:	f000 80d3 	beq.w	90009b6a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
900099c4:	4b71      	ldr	r3, [pc, #452]	; (90009b8c <tcp_input+0x730>)
900099c6:	781b      	ldrb	r3, [r3, #0]
900099c8:	f003 0308 	and.w	r3, r3, #8
900099cc:	2b00      	cmp	r3, #0
900099ce:	d015      	beq.n	900099fc <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
900099d0:	69fb      	ldr	r3, [r7, #28]
900099d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
900099d6:	2b00      	cmp	r3, #0
900099d8:	d008      	beq.n	900099ec <tcp_input+0x590>
900099da:	69fb      	ldr	r3, [r7, #28]
900099dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
900099e0:	69fa      	ldr	r2, [r7, #28]
900099e2:	6912      	ldr	r2, [r2, #16]
900099e4:	f06f 010d 	mvn.w	r1, #13
900099e8:	4610      	mov	r0, r2
900099ea:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
900099ec:	69f9      	ldr	r1, [r7, #28]
900099ee:	486c      	ldr	r0, [pc, #432]	; (90009ba0 <tcp_input+0x744>)
900099f0:	f7ff fbbc 	bl	9000916c <tcp_pcb_remove>
        tcp_free(pcb);
900099f4:	69f8      	ldr	r0, [r7, #28]
900099f6:	f7fd ff03 	bl	90007800 <tcp_free>
900099fa:	e0da      	b.n	90009bb2 <tcp_input+0x756>
      } else {
        err = ERR_OK;
900099fc:	2300      	movs	r3, #0
900099fe:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
90009a00:	4b63      	ldr	r3, [pc, #396]	; (90009b90 <tcp_input+0x734>)
90009a02:	881b      	ldrh	r3, [r3, #0]
90009a04:	2b00      	cmp	r3, #0
90009a06:	d01d      	beq.n	90009a44 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
90009a08:	4b61      	ldr	r3, [pc, #388]	; (90009b90 <tcp_input+0x734>)
90009a0a:	881b      	ldrh	r3, [r3, #0]
90009a0c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
90009a0e:	69fb      	ldr	r3, [r7, #28]
90009a10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90009a14:	2b00      	cmp	r3, #0
90009a16:	d00a      	beq.n	90009a2e <tcp_input+0x5d2>
90009a18:	69fb      	ldr	r3, [r7, #28]
90009a1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90009a1e:	69fa      	ldr	r2, [r7, #28]
90009a20:	6910      	ldr	r0, [r2, #16]
90009a22:	89fa      	ldrh	r2, [r7, #14]
90009a24:	69f9      	ldr	r1, [r7, #28]
90009a26:	4798      	blx	r3
90009a28:	4603      	mov	r3, r0
90009a2a:	74fb      	strb	r3, [r7, #19]
90009a2c:	e001      	b.n	90009a32 <tcp_input+0x5d6>
90009a2e:	2300      	movs	r3, #0
90009a30:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
90009a32:	f997 3013 	ldrsb.w	r3, [r7, #19]
90009a36:	f113 0f0d 	cmn.w	r3, #13
90009a3a:	f000 8098 	beq.w	90009b6e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
90009a3e:	4b54      	ldr	r3, [pc, #336]	; (90009b90 <tcp_input+0x734>)
90009a40:	2200      	movs	r2, #0
90009a42:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
90009a44:	69f8      	ldr	r0, [r7, #28]
90009a46:	f000 f915 	bl	90009c74 <tcp_input_delayed_close>
90009a4a:	4603      	mov	r3, r0
90009a4c:	2b00      	cmp	r3, #0
90009a4e:	f040 8090 	bne.w	90009b72 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
90009a52:	4b4d      	ldr	r3, [pc, #308]	; (90009b88 <tcp_input+0x72c>)
90009a54:	681b      	ldr	r3, [r3, #0]
90009a56:	2b00      	cmp	r3, #0
90009a58:	d041      	beq.n	90009ade <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
90009a5a:	69fb      	ldr	r3, [r7, #28]
90009a5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
90009a5e:	2b00      	cmp	r3, #0
90009a60:	d006      	beq.n	90009a70 <tcp_input+0x614>
90009a62:	4b50      	ldr	r3, [pc, #320]	; (90009ba4 <tcp_input+0x748>)
90009a64:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
90009a68:	494f      	ldr	r1, [pc, #316]	; (90009ba8 <tcp_input+0x74c>)
90009a6a:	4850      	ldr	r0, [pc, #320]	; (90009bac <tcp_input+0x750>)
90009a6c:	f006 fd3e 	bl	900104ec <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
90009a70:	69fb      	ldr	r3, [r7, #28]
90009a72:	8b5b      	ldrh	r3, [r3, #26]
90009a74:	f003 0310 	and.w	r3, r3, #16
90009a78:	2b00      	cmp	r3, #0
90009a7a:	d008      	beq.n	90009a8e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
90009a7c:	4b42      	ldr	r3, [pc, #264]	; (90009b88 <tcp_input+0x72c>)
90009a7e:	681b      	ldr	r3, [r3, #0]
90009a80:	4618      	mov	r0, r3
90009a82:	f7fd fc1d 	bl	900072c0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
90009a86:	69f8      	ldr	r0, [r7, #28]
90009a88:	f7fe f9a2 	bl	90007dd0 <tcp_abort>
            goto aborted;
90009a8c:	e091      	b.n	90009bb2 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
90009a8e:	69fb      	ldr	r3, [r7, #28]
90009a90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90009a94:	2b00      	cmp	r3, #0
90009a96:	d00c      	beq.n	90009ab2 <tcp_input+0x656>
90009a98:	69fb      	ldr	r3, [r7, #28]
90009a9a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
90009a9e:	69fb      	ldr	r3, [r7, #28]
90009aa0:	6918      	ldr	r0, [r3, #16]
90009aa2:	4b39      	ldr	r3, [pc, #228]	; (90009b88 <tcp_input+0x72c>)
90009aa4:	681a      	ldr	r2, [r3, #0]
90009aa6:	2300      	movs	r3, #0
90009aa8:	69f9      	ldr	r1, [r7, #28]
90009aaa:	47a0      	blx	r4
90009aac:	4603      	mov	r3, r0
90009aae:	74fb      	strb	r3, [r7, #19]
90009ab0:	e008      	b.n	90009ac4 <tcp_input+0x668>
90009ab2:	4b35      	ldr	r3, [pc, #212]	; (90009b88 <tcp_input+0x72c>)
90009ab4:	681a      	ldr	r2, [r3, #0]
90009ab6:	2300      	movs	r3, #0
90009ab8:	69f9      	ldr	r1, [r7, #28]
90009aba:	2000      	movs	r0, #0
90009abc:	f7ff f890 	bl	90008be0 <tcp_recv_null>
90009ac0:	4603      	mov	r3, r0
90009ac2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
90009ac4:	f997 3013 	ldrsb.w	r3, [r7, #19]
90009ac8:	f113 0f0d 	cmn.w	r3, #13
90009acc:	d053      	beq.n	90009b76 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
90009ace:	f997 3013 	ldrsb.w	r3, [r7, #19]
90009ad2:	2b00      	cmp	r3, #0
90009ad4:	d003      	beq.n	90009ade <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
90009ad6:	4b2c      	ldr	r3, [pc, #176]	; (90009b88 <tcp_input+0x72c>)
90009ad8:	681a      	ldr	r2, [r3, #0]
90009ada:	69fb      	ldr	r3, [r7, #28]
90009adc:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
90009ade:	4b2b      	ldr	r3, [pc, #172]	; (90009b8c <tcp_input+0x730>)
90009ae0:	781b      	ldrb	r3, [r3, #0]
90009ae2:	f003 0320 	and.w	r3, r3, #32
90009ae6:	2b00      	cmp	r3, #0
90009ae8:	d030      	beq.n	90009b4c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
90009aea:	69fb      	ldr	r3, [r7, #28]
90009aec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
90009aee:	2b00      	cmp	r3, #0
90009af0:	d009      	beq.n	90009b06 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
90009af2:	69fb      	ldr	r3, [r7, #28]
90009af4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
90009af6:	7b5a      	ldrb	r2, [r3, #13]
90009af8:	69fb      	ldr	r3, [r7, #28]
90009afa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
90009afc:	f042 0220 	orr.w	r2, r2, #32
90009b00:	b2d2      	uxtb	r2, r2
90009b02:	735a      	strb	r2, [r3, #13]
90009b04:	e022      	b.n	90009b4c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
90009b06:	69fb      	ldr	r3, [r7, #28]
90009b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
90009b0a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
90009b0e:	d005      	beq.n	90009b1c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
90009b10:	69fb      	ldr	r3, [r7, #28]
90009b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
90009b14:	3301      	adds	r3, #1
90009b16:	b29a      	uxth	r2, r3
90009b18:	69fb      	ldr	r3, [r7, #28]
90009b1a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
90009b1c:	69fb      	ldr	r3, [r7, #28]
90009b1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90009b22:	2b00      	cmp	r3, #0
90009b24:	d00b      	beq.n	90009b3e <tcp_input+0x6e2>
90009b26:	69fb      	ldr	r3, [r7, #28]
90009b28:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
90009b2c:	69fb      	ldr	r3, [r7, #28]
90009b2e:	6918      	ldr	r0, [r3, #16]
90009b30:	2300      	movs	r3, #0
90009b32:	2200      	movs	r2, #0
90009b34:	69f9      	ldr	r1, [r7, #28]
90009b36:	47a0      	blx	r4
90009b38:	4603      	mov	r3, r0
90009b3a:	74fb      	strb	r3, [r7, #19]
90009b3c:	e001      	b.n	90009b42 <tcp_input+0x6e6>
90009b3e:	2300      	movs	r3, #0
90009b40:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
90009b42:	f997 3013 	ldrsb.w	r3, [r7, #19]
90009b46:	f113 0f0d 	cmn.w	r3, #13
90009b4a:	d016      	beq.n	90009b7a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
90009b4c:	4b13      	ldr	r3, [pc, #76]	; (90009b9c <tcp_input+0x740>)
90009b4e:	2200      	movs	r2, #0
90009b50:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
90009b52:	69f8      	ldr	r0, [r7, #28]
90009b54:	f000 f88e 	bl	90009c74 <tcp_input_delayed_close>
90009b58:	4603      	mov	r3, r0
90009b5a:	2b00      	cmp	r3, #0
90009b5c:	d128      	bne.n	90009bb0 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
90009b5e:	69f8      	ldr	r0, [r7, #28]
90009b60:	f002 ff20 	bl	9000c9a4 <tcp_output>
90009b64:	e025      	b.n	90009bb2 <tcp_input+0x756>
        goto aborted;
90009b66:	bf00      	nop
90009b68:	e023      	b.n	90009bb2 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
90009b6a:	bf00      	nop
90009b6c:	e021      	b.n	90009bb2 <tcp_input+0x756>
              goto aborted;
90009b6e:	bf00      	nop
90009b70:	e01f      	b.n	90009bb2 <tcp_input+0x756>
          goto aborted;
90009b72:	bf00      	nop
90009b74:	e01d      	b.n	90009bb2 <tcp_input+0x756>
            goto aborted;
90009b76:	bf00      	nop
90009b78:	e01b      	b.n	90009bb2 <tcp_input+0x756>
              goto aborted;
90009b7a:	bf00      	nop
90009b7c:	e019      	b.n	90009bb2 <tcp_input+0x756>
90009b7e:	bf00      	nop
90009b80:	2000a8b8 	.word	0x2000a8b8
90009b84:	2000a8c8 	.word	0x2000a8c8
90009b88:	2000a8e8 	.word	0x2000a8e8
90009b8c:	2000a8e5 	.word	0x2000a8e5
90009b90:	2000a8e0 	.word	0x2000a8e0
90009b94:	2000a8e4 	.word	0x2000a8e4
90009b98:	2000a8e2 	.word	0x2000a8e2
90009b9c:	2000a8ec 	.word	0x2000a8ec
90009ba0:	2000a8ac 	.word	0x2000a8ac
90009ba4:	90012f24 	.word	0x90012f24
90009ba8:	900130d8 	.word	0x900130d8
90009bac:	90012f70 	.word	0x90012f70
          goto aborted;
90009bb0:	bf00      	nop
    tcp_input_pcb = NULL;
90009bb2:	4b27      	ldr	r3, [pc, #156]	; (90009c50 <tcp_input+0x7f4>)
90009bb4:	2200      	movs	r2, #0
90009bb6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
90009bb8:	4b26      	ldr	r3, [pc, #152]	; (90009c54 <tcp_input+0x7f8>)
90009bba:	2200      	movs	r2, #0
90009bbc:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
90009bbe:	4b26      	ldr	r3, [pc, #152]	; (90009c58 <tcp_input+0x7fc>)
90009bc0:	685b      	ldr	r3, [r3, #4]
90009bc2:	2b00      	cmp	r3, #0
90009bc4:	d03f      	beq.n	90009c46 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
90009bc6:	4b24      	ldr	r3, [pc, #144]	; (90009c58 <tcp_input+0x7fc>)
90009bc8:	685b      	ldr	r3, [r3, #4]
90009bca:	4618      	mov	r0, r3
90009bcc:	f7fd fb78 	bl	900072c0 <pbuf_free>
      inseg.p = NULL;
90009bd0:	4b21      	ldr	r3, [pc, #132]	; (90009c58 <tcp_input+0x7fc>)
90009bd2:	2200      	movs	r2, #0
90009bd4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
90009bd6:	e036      	b.n	90009c46 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
90009bd8:	4b20      	ldr	r3, [pc, #128]	; (90009c5c <tcp_input+0x800>)
90009bda:	681b      	ldr	r3, [r3, #0]
90009bdc:	899b      	ldrh	r3, [r3, #12]
90009bde:	b29b      	uxth	r3, r3
90009be0:	4618      	mov	r0, r3
90009be2:	f7fb ffa5 	bl	90005b30 <lwip_htons>
90009be6:	4603      	mov	r3, r0
90009be8:	b2db      	uxtb	r3, r3
90009bea:	f003 0304 	and.w	r3, r3, #4
90009bee:	2b00      	cmp	r3, #0
90009bf0:	d118      	bne.n	90009c24 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
90009bf2:	4b1b      	ldr	r3, [pc, #108]	; (90009c60 <tcp_input+0x804>)
90009bf4:	6819      	ldr	r1, [r3, #0]
90009bf6:	4b1b      	ldr	r3, [pc, #108]	; (90009c64 <tcp_input+0x808>)
90009bf8:	881b      	ldrh	r3, [r3, #0]
90009bfa:	461a      	mov	r2, r3
90009bfc:	4b1a      	ldr	r3, [pc, #104]	; (90009c68 <tcp_input+0x80c>)
90009bfe:	681b      	ldr	r3, [r3, #0]
90009c00:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
90009c02:	4b16      	ldr	r3, [pc, #88]	; (90009c5c <tcp_input+0x800>)
90009c04:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
90009c06:	885b      	ldrh	r3, [r3, #2]
90009c08:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
90009c0a:	4a14      	ldr	r2, [pc, #80]	; (90009c5c <tcp_input+0x800>)
90009c0c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
90009c0e:	8812      	ldrh	r2, [r2, #0]
90009c10:	b292      	uxth	r2, r2
90009c12:	9202      	str	r2, [sp, #8]
90009c14:	9301      	str	r3, [sp, #4]
90009c16:	4b15      	ldr	r3, [pc, #84]	; (90009c6c <tcp_input+0x810>)
90009c18:	9300      	str	r3, [sp, #0]
90009c1a:	4b15      	ldr	r3, [pc, #84]	; (90009c70 <tcp_input+0x814>)
90009c1c:	4602      	mov	r2, r0
90009c1e:	2000      	movs	r0, #0
90009c20:	f003 fc74 	bl	9000d50c <tcp_rst>
    pbuf_free(p);
90009c24:	6878      	ldr	r0, [r7, #4]
90009c26:	f7fd fb4b 	bl	900072c0 <pbuf_free>
  return;
90009c2a:	e00c      	b.n	90009c46 <tcp_input+0x7ea>
    goto dropped;
90009c2c:	bf00      	nop
90009c2e:	e006      	b.n	90009c3e <tcp_input+0x7e2>
    goto dropped;
90009c30:	bf00      	nop
90009c32:	e004      	b.n	90009c3e <tcp_input+0x7e2>
    goto dropped;
90009c34:	bf00      	nop
90009c36:	e002      	b.n	90009c3e <tcp_input+0x7e2>
      goto dropped;
90009c38:	bf00      	nop
90009c3a:	e000      	b.n	90009c3e <tcp_input+0x7e2>
      goto dropped;
90009c3c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
90009c3e:	6878      	ldr	r0, [r7, #4]
90009c40:	f7fd fb3e 	bl	900072c0 <pbuf_free>
90009c44:	e000      	b.n	90009c48 <tcp_input+0x7ec>
  return;
90009c46:	bf00      	nop
}
90009c48:	3724      	adds	r7, #36	; 0x24
90009c4a:	46bd      	mov	sp, r7
90009c4c:	bd90      	pop	{r4, r7, pc}
90009c4e:	bf00      	nop
90009c50:	2000a8ec 	.word	0x2000a8ec
90009c54:	2000a8e8 	.word	0x2000a8e8
90009c58:	2000a8b8 	.word	0x2000a8b8
90009c5c:	2000a8c8 	.word	0x2000a8c8
90009c60:	2000a8dc 	.word	0x2000a8dc
90009c64:	2000a8e2 	.word	0x2000a8e2
90009c68:	2000a8d8 	.word	0x2000a8d8
90009c6c:	20005180 	.word	0x20005180
90009c70:	20005184 	.word	0x20005184

90009c74 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
90009c74:	b580      	push	{r7, lr}
90009c76:	b082      	sub	sp, #8
90009c78:	af00      	add	r7, sp, #0
90009c7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
90009c7c:	687b      	ldr	r3, [r7, #4]
90009c7e:	2b00      	cmp	r3, #0
90009c80:	d106      	bne.n	90009c90 <tcp_input_delayed_close+0x1c>
90009c82:	4b17      	ldr	r3, [pc, #92]	; (90009ce0 <tcp_input_delayed_close+0x6c>)
90009c84:	f240 225a 	movw	r2, #602	; 0x25a
90009c88:	4916      	ldr	r1, [pc, #88]	; (90009ce4 <tcp_input_delayed_close+0x70>)
90009c8a:	4817      	ldr	r0, [pc, #92]	; (90009ce8 <tcp_input_delayed_close+0x74>)
90009c8c:	f006 fc2e 	bl	900104ec <iprintf>

  if (recv_flags & TF_CLOSED) {
90009c90:	4b16      	ldr	r3, [pc, #88]	; (90009cec <tcp_input_delayed_close+0x78>)
90009c92:	781b      	ldrb	r3, [r3, #0]
90009c94:	f003 0310 	and.w	r3, r3, #16
90009c98:	2b00      	cmp	r3, #0
90009c9a:	d01c      	beq.n	90009cd6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
90009c9c:	687b      	ldr	r3, [r7, #4]
90009c9e:	8b5b      	ldrh	r3, [r3, #26]
90009ca0:	f003 0310 	and.w	r3, r3, #16
90009ca4:	2b00      	cmp	r3, #0
90009ca6:	d10d      	bne.n	90009cc4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
90009ca8:	687b      	ldr	r3, [r7, #4]
90009caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90009cae:	2b00      	cmp	r3, #0
90009cb0:	d008      	beq.n	90009cc4 <tcp_input_delayed_close+0x50>
90009cb2:	687b      	ldr	r3, [r7, #4]
90009cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90009cb8:	687a      	ldr	r2, [r7, #4]
90009cba:	6912      	ldr	r2, [r2, #16]
90009cbc:	f06f 010e 	mvn.w	r1, #14
90009cc0:	4610      	mov	r0, r2
90009cc2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
90009cc4:	6879      	ldr	r1, [r7, #4]
90009cc6:	480a      	ldr	r0, [pc, #40]	; (90009cf0 <tcp_input_delayed_close+0x7c>)
90009cc8:	f7ff fa50 	bl	9000916c <tcp_pcb_remove>
    tcp_free(pcb);
90009ccc:	6878      	ldr	r0, [r7, #4]
90009cce:	f7fd fd97 	bl	90007800 <tcp_free>
    return 1;
90009cd2:	2301      	movs	r3, #1
90009cd4:	e000      	b.n	90009cd8 <tcp_input_delayed_close+0x64>
  }
  return 0;
90009cd6:	2300      	movs	r3, #0
}
90009cd8:	4618      	mov	r0, r3
90009cda:	3708      	adds	r7, #8
90009cdc:	46bd      	mov	sp, r7
90009cde:	bd80      	pop	{r7, pc}
90009ce0:	90012f24 	.word	0x90012f24
90009ce4:	900130f4 	.word	0x900130f4
90009ce8:	90012f70 	.word	0x90012f70
90009cec:	2000a8e5 	.word	0x2000a8e5
90009cf0:	2000a8ac 	.word	0x2000a8ac

90009cf4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
90009cf4:	b590      	push	{r4, r7, lr}
90009cf6:	b08b      	sub	sp, #44	; 0x2c
90009cf8:	af04      	add	r7, sp, #16
90009cfa:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
90009cfc:	4b6f      	ldr	r3, [pc, #444]	; (90009ebc <tcp_listen_input+0x1c8>)
90009cfe:	781b      	ldrb	r3, [r3, #0]
90009d00:	f003 0304 	and.w	r3, r3, #4
90009d04:	2b00      	cmp	r3, #0
90009d06:	f040 80d2 	bne.w	90009eae <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
90009d0a:	687b      	ldr	r3, [r7, #4]
90009d0c:	2b00      	cmp	r3, #0
90009d0e:	d106      	bne.n	90009d1e <tcp_listen_input+0x2a>
90009d10:	4b6b      	ldr	r3, [pc, #428]	; (90009ec0 <tcp_listen_input+0x1cc>)
90009d12:	f240 2281 	movw	r2, #641	; 0x281
90009d16:	496b      	ldr	r1, [pc, #428]	; (90009ec4 <tcp_listen_input+0x1d0>)
90009d18:	486b      	ldr	r0, [pc, #428]	; (90009ec8 <tcp_listen_input+0x1d4>)
90009d1a:	f006 fbe7 	bl	900104ec <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
90009d1e:	4b67      	ldr	r3, [pc, #412]	; (90009ebc <tcp_listen_input+0x1c8>)
90009d20:	781b      	ldrb	r3, [r3, #0]
90009d22:	f003 0310 	and.w	r3, r3, #16
90009d26:	2b00      	cmp	r3, #0
90009d28:	d019      	beq.n	90009d5e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
90009d2a:	4b68      	ldr	r3, [pc, #416]	; (90009ecc <tcp_listen_input+0x1d8>)
90009d2c:	6819      	ldr	r1, [r3, #0]
90009d2e:	4b68      	ldr	r3, [pc, #416]	; (90009ed0 <tcp_listen_input+0x1dc>)
90009d30:	881b      	ldrh	r3, [r3, #0]
90009d32:	461a      	mov	r2, r3
90009d34:	4b67      	ldr	r3, [pc, #412]	; (90009ed4 <tcp_listen_input+0x1e0>)
90009d36:	681b      	ldr	r3, [r3, #0]
90009d38:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
90009d3a:	4b67      	ldr	r3, [pc, #412]	; (90009ed8 <tcp_listen_input+0x1e4>)
90009d3c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
90009d3e:	885b      	ldrh	r3, [r3, #2]
90009d40:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
90009d42:	4a65      	ldr	r2, [pc, #404]	; (90009ed8 <tcp_listen_input+0x1e4>)
90009d44:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
90009d46:	8812      	ldrh	r2, [r2, #0]
90009d48:	b292      	uxth	r2, r2
90009d4a:	9202      	str	r2, [sp, #8]
90009d4c:	9301      	str	r3, [sp, #4]
90009d4e:	4b63      	ldr	r3, [pc, #396]	; (90009edc <tcp_listen_input+0x1e8>)
90009d50:	9300      	str	r3, [sp, #0]
90009d52:	4b63      	ldr	r3, [pc, #396]	; (90009ee0 <tcp_listen_input+0x1ec>)
90009d54:	4602      	mov	r2, r0
90009d56:	6878      	ldr	r0, [r7, #4]
90009d58:	f003 fbd8 	bl	9000d50c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
90009d5c:	e0a9      	b.n	90009eb2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
90009d5e:	4b57      	ldr	r3, [pc, #348]	; (90009ebc <tcp_listen_input+0x1c8>)
90009d60:	781b      	ldrb	r3, [r3, #0]
90009d62:	f003 0302 	and.w	r3, r3, #2
90009d66:	2b00      	cmp	r3, #0
90009d68:	f000 80a3 	beq.w	90009eb2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
90009d6c:	687b      	ldr	r3, [r7, #4]
90009d6e:	7d5b      	ldrb	r3, [r3, #21]
90009d70:	4618      	mov	r0, r3
90009d72:	f7ff f859 	bl	90008e28 <tcp_alloc>
90009d76:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
90009d78:	697b      	ldr	r3, [r7, #20]
90009d7a:	2b00      	cmp	r3, #0
90009d7c:	d111      	bne.n	90009da2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
90009d7e:	687b      	ldr	r3, [r7, #4]
90009d80:	699b      	ldr	r3, [r3, #24]
90009d82:	2b00      	cmp	r3, #0
90009d84:	d00a      	beq.n	90009d9c <tcp_listen_input+0xa8>
90009d86:	687b      	ldr	r3, [r7, #4]
90009d88:	699b      	ldr	r3, [r3, #24]
90009d8a:	687a      	ldr	r2, [r7, #4]
90009d8c:	6910      	ldr	r0, [r2, #16]
90009d8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
90009d92:	2100      	movs	r1, #0
90009d94:	4798      	blx	r3
90009d96:	4603      	mov	r3, r0
90009d98:	73bb      	strb	r3, [r7, #14]
      return;
90009d9a:	e08b      	b.n	90009eb4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
90009d9c:	23f0      	movs	r3, #240	; 0xf0
90009d9e:	73bb      	strb	r3, [r7, #14]
      return;
90009da0:	e088      	b.n	90009eb4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
90009da2:	4b50      	ldr	r3, [pc, #320]	; (90009ee4 <tcp_listen_input+0x1f0>)
90009da4:	695a      	ldr	r2, [r3, #20]
90009da6:	697b      	ldr	r3, [r7, #20]
90009da8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
90009daa:	4b4e      	ldr	r3, [pc, #312]	; (90009ee4 <tcp_listen_input+0x1f0>)
90009dac:	691a      	ldr	r2, [r3, #16]
90009dae:	697b      	ldr	r3, [r7, #20]
90009db0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
90009db2:	687b      	ldr	r3, [r7, #4]
90009db4:	8ada      	ldrh	r2, [r3, #22]
90009db6:	697b      	ldr	r3, [r7, #20]
90009db8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
90009dba:	4b47      	ldr	r3, [pc, #284]	; (90009ed8 <tcp_listen_input+0x1e4>)
90009dbc:	681b      	ldr	r3, [r3, #0]
90009dbe:	881b      	ldrh	r3, [r3, #0]
90009dc0:	b29a      	uxth	r2, r3
90009dc2:	697b      	ldr	r3, [r7, #20]
90009dc4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
90009dc6:	697b      	ldr	r3, [r7, #20]
90009dc8:	2203      	movs	r2, #3
90009dca:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
90009dcc:	4b41      	ldr	r3, [pc, #260]	; (90009ed4 <tcp_listen_input+0x1e0>)
90009dce:	681b      	ldr	r3, [r3, #0]
90009dd0:	1c5a      	adds	r2, r3, #1
90009dd2:	697b      	ldr	r3, [r7, #20]
90009dd4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
90009dd6:	697b      	ldr	r3, [r7, #20]
90009dd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90009dda:	697b      	ldr	r3, [r7, #20]
90009ddc:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
90009dde:	6978      	ldr	r0, [r7, #20]
90009de0:	f7ff fa58 	bl	90009294 <tcp_next_iss>
90009de4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
90009de6:	697b      	ldr	r3, [r7, #20]
90009de8:	693a      	ldr	r2, [r7, #16]
90009dea:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
90009dec:	697b      	ldr	r3, [r7, #20]
90009dee:	693a      	ldr	r2, [r7, #16]
90009df0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
90009df2:	697b      	ldr	r3, [r7, #20]
90009df4:	693a      	ldr	r2, [r7, #16]
90009df6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
90009df8:	697b      	ldr	r3, [r7, #20]
90009dfa:	693a      	ldr	r2, [r7, #16]
90009dfc:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
90009dfe:	4b35      	ldr	r3, [pc, #212]	; (90009ed4 <tcp_listen_input+0x1e0>)
90009e00:	681b      	ldr	r3, [r3, #0]
90009e02:	1e5a      	subs	r2, r3, #1
90009e04:	697b      	ldr	r3, [r7, #20]
90009e06:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
90009e08:	687b      	ldr	r3, [r7, #4]
90009e0a:	691a      	ldr	r2, [r3, #16]
90009e0c:	697b      	ldr	r3, [r7, #20]
90009e0e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
90009e10:	697b      	ldr	r3, [r7, #20]
90009e12:	687a      	ldr	r2, [r7, #4]
90009e14:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
90009e16:	687b      	ldr	r3, [r7, #4]
90009e18:	7a5b      	ldrb	r3, [r3, #9]
90009e1a:	f003 030c 	and.w	r3, r3, #12
90009e1e:	b2da      	uxtb	r2, r3
90009e20:	697b      	ldr	r3, [r7, #20]
90009e22:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
90009e24:	687b      	ldr	r3, [r7, #4]
90009e26:	7a1a      	ldrb	r2, [r3, #8]
90009e28:	697b      	ldr	r3, [r7, #20]
90009e2a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
90009e2c:	4b2e      	ldr	r3, [pc, #184]	; (90009ee8 <tcp_listen_input+0x1f4>)
90009e2e:	681a      	ldr	r2, [r3, #0]
90009e30:	697b      	ldr	r3, [r7, #20]
90009e32:	60da      	str	r2, [r3, #12]
90009e34:	4a2c      	ldr	r2, [pc, #176]	; (90009ee8 <tcp_listen_input+0x1f4>)
90009e36:	697b      	ldr	r3, [r7, #20]
90009e38:	6013      	str	r3, [r2, #0]
90009e3a:	f003 fd29 	bl	9000d890 <tcp_timer_needed>
90009e3e:	4b2b      	ldr	r3, [pc, #172]	; (90009eec <tcp_listen_input+0x1f8>)
90009e40:	2201      	movs	r2, #1
90009e42:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
90009e44:	6978      	ldr	r0, [r7, #20]
90009e46:	f001 fd8f 	bl	9000b968 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
90009e4a:	4b23      	ldr	r3, [pc, #140]	; (90009ed8 <tcp_listen_input+0x1e4>)
90009e4c:	681b      	ldr	r3, [r3, #0]
90009e4e:	89db      	ldrh	r3, [r3, #14]
90009e50:	b29a      	uxth	r2, r3
90009e52:	697b      	ldr	r3, [r7, #20]
90009e54:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
90009e58:	697b      	ldr	r3, [r7, #20]
90009e5a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
90009e5e:	697b      	ldr	r3, [r7, #20]
90009e60:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
90009e64:	697b      	ldr	r3, [r7, #20]
90009e66:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
90009e68:	697b      	ldr	r3, [r7, #20]
90009e6a:	3304      	adds	r3, #4
90009e6c:	4618      	mov	r0, r3
90009e6e:	f005 f8ed 	bl	9000f04c <ip4_route>
90009e72:	4601      	mov	r1, r0
90009e74:	697b      	ldr	r3, [r7, #20]
90009e76:	3304      	adds	r3, #4
90009e78:	461a      	mov	r2, r3
90009e7a:	4620      	mov	r0, r4
90009e7c:	f7ff fa30 	bl	900092e0 <tcp_eff_send_mss_netif>
90009e80:	4603      	mov	r3, r0
90009e82:	461a      	mov	r2, r3
90009e84:	697b      	ldr	r3, [r7, #20]
90009e86:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
90009e88:	2112      	movs	r1, #18
90009e8a:	6978      	ldr	r0, [r7, #20]
90009e8c:	f002 fc9c 	bl	9000c7c8 <tcp_enqueue_flags>
90009e90:	4603      	mov	r3, r0
90009e92:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
90009e94:	f997 300f 	ldrsb.w	r3, [r7, #15]
90009e98:	2b00      	cmp	r3, #0
90009e9a:	d004      	beq.n	90009ea6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
90009e9c:	2100      	movs	r1, #0
90009e9e:	6978      	ldr	r0, [r7, #20]
90009ea0:	f7fd fed8 	bl	90007c54 <tcp_abandon>
      return;
90009ea4:	e006      	b.n	90009eb4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
90009ea6:	6978      	ldr	r0, [r7, #20]
90009ea8:	f002 fd7c 	bl	9000c9a4 <tcp_output>
  return;
90009eac:	e001      	b.n	90009eb2 <tcp_listen_input+0x1be>
    return;
90009eae:	bf00      	nop
90009eb0:	e000      	b.n	90009eb4 <tcp_listen_input+0x1c0>
  return;
90009eb2:	bf00      	nop
}
90009eb4:	371c      	adds	r7, #28
90009eb6:	46bd      	mov	sp, r7
90009eb8:	bd90      	pop	{r4, r7, pc}
90009eba:	bf00      	nop
90009ebc:	2000a8e4 	.word	0x2000a8e4
90009ec0:	90012f24 	.word	0x90012f24
90009ec4:	9001311c 	.word	0x9001311c
90009ec8:	90012f70 	.word	0x90012f70
90009ecc:	2000a8dc 	.word	0x2000a8dc
90009ed0:	2000a8e2 	.word	0x2000a8e2
90009ed4:	2000a8d8 	.word	0x2000a8d8
90009ed8:	2000a8c8 	.word	0x2000a8c8
90009edc:	20005180 	.word	0x20005180
90009ee0:	20005184 	.word	0x20005184
90009ee4:	20005170 	.word	0x20005170
90009ee8:	2000a8ac 	.word	0x2000a8ac
90009eec:	2000a8b4 	.word	0x2000a8b4

90009ef0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
90009ef0:	b580      	push	{r7, lr}
90009ef2:	b086      	sub	sp, #24
90009ef4:	af04      	add	r7, sp, #16
90009ef6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
90009ef8:	4b2f      	ldr	r3, [pc, #188]	; (90009fb8 <tcp_timewait_input+0xc8>)
90009efa:	781b      	ldrb	r3, [r3, #0]
90009efc:	f003 0304 	and.w	r3, r3, #4
90009f00:	2b00      	cmp	r3, #0
90009f02:	d153      	bne.n	90009fac <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
90009f04:	687b      	ldr	r3, [r7, #4]
90009f06:	2b00      	cmp	r3, #0
90009f08:	d106      	bne.n	90009f18 <tcp_timewait_input+0x28>
90009f0a:	4b2c      	ldr	r3, [pc, #176]	; (90009fbc <tcp_timewait_input+0xcc>)
90009f0c:	f240 22ee 	movw	r2, #750	; 0x2ee
90009f10:	492b      	ldr	r1, [pc, #172]	; (90009fc0 <tcp_timewait_input+0xd0>)
90009f12:	482c      	ldr	r0, [pc, #176]	; (90009fc4 <tcp_timewait_input+0xd4>)
90009f14:	f006 faea 	bl	900104ec <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
90009f18:	4b27      	ldr	r3, [pc, #156]	; (90009fb8 <tcp_timewait_input+0xc8>)
90009f1a:	781b      	ldrb	r3, [r3, #0]
90009f1c:	f003 0302 	and.w	r3, r3, #2
90009f20:	2b00      	cmp	r3, #0
90009f22:	d02a      	beq.n	90009f7a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
90009f24:	4b28      	ldr	r3, [pc, #160]	; (90009fc8 <tcp_timewait_input+0xd8>)
90009f26:	681a      	ldr	r2, [r3, #0]
90009f28:	687b      	ldr	r3, [r7, #4]
90009f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90009f2c:	1ad3      	subs	r3, r2, r3
90009f2e:	2b00      	cmp	r3, #0
90009f30:	db2d      	blt.n	90009f8e <tcp_timewait_input+0x9e>
90009f32:	4b25      	ldr	r3, [pc, #148]	; (90009fc8 <tcp_timewait_input+0xd8>)
90009f34:	681a      	ldr	r2, [r3, #0]
90009f36:	687b      	ldr	r3, [r7, #4]
90009f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90009f3a:	6879      	ldr	r1, [r7, #4]
90009f3c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
90009f3e:	440b      	add	r3, r1
90009f40:	1ad3      	subs	r3, r2, r3
90009f42:	2b00      	cmp	r3, #0
90009f44:	dc23      	bgt.n	90009f8e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
90009f46:	4b21      	ldr	r3, [pc, #132]	; (90009fcc <tcp_timewait_input+0xdc>)
90009f48:	6819      	ldr	r1, [r3, #0]
90009f4a:	4b21      	ldr	r3, [pc, #132]	; (90009fd0 <tcp_timewait_input+0xe0>)
90009f4c:	881b      	ldrh	r3, [r3, #0]
90009f4e:	461a      	mov	r2, r3
90009f50:	4b1d      	ldr	r3, [pc, #116]	; (90009fc8 <tcp_timewait_input+0xd8>)
90009f52:	681b      	ldr	r3, [r3, #0]
90009f54:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
90009f56:	4b1f      	ldr	r3, [pc, #124]	; (90009fd4 <tcp_timewait_input+0xe4>)
90009f58:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
90009f5a:	885b      	ldrh	r3, [r3, #2]
90009f5c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
90009f5e:	4a1d      	ldr	r2, [pc, #116]	; (90009fd4 <tcp_timewait_input+0xe4>)
90009f60:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
90009f62:	8812      	ldrh	r2, [r2, #0]
90009f64:	b292      	uxth	r2, r2
90009f66:	9202      	str	r2, [sp, #8]
90009f68:	9301      	str	r3, [sp, #4]
90009f6a:	4b1b      	ldr	r3, [pc, #108]	; (90009fd8 <tcp_timewait_input+0xe8>)
90009f6c:	9300      	str	r3, [sp, #0]
90009f6e:	4b1b      	ldr	r3, [pc, #108]	; (90009fdc <tcp_timewait_input+0xec>)
90009f70:	4602      	mov	r2, r0
90009f72:	6878      	ldr	r0, [r7, #4]
90009f74:	f003 faca 	bl	9000d50c <tcp_rst>
      return;
90009f78:	e01b      	b.n	90009fb2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
90009f7a:	4b0f      	ldr	r3, [pc, #60]	; (90009fb8 <tcp_timewait_input+0xc8>)
90009f7c:	781b      	ldrb	r3, [r3, #0]
90009f7e:	f003 0301 	and.w	r3, r3, #1
90009f82:	2b00      	cmp	r3, #0
90009f84:	d003      	beq.n	90009f8e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
90009f86:	4b16      	ldr	r3, [pc, #88]	; (90009fe0 <tcp_timewait_input+0xf0>)
90009f88:	681a      	ldr	r2, [r3, #0]
90009f8a:	687b      	ldr	r3, [r7, #4]
90009f8c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
90009f8e:	4b10      	ldr	r3, [pc, #64]	; (90009fd0 <tcp_timewait_input+0xe0>)
90009f90:	881b      	ldrh	r3, [r3, #0]
90009f92:	2b00      	cmp	r3, #0
90009f94:	d00c      	beq.n	90009fb0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
90009f96:	687b      	ldr	r3, [r7, #4]
90009f98:	8b5b      	ldrh	r3, [r3, #26]
90009f9a:	f043 0302 	orr.w	r3, r3, #2
90009f9e:	b29a      	uxth	r2, r3
90009fa0:	687b      	ldr	r3, [r7, #4]
90009fa2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
90009fa4:	6878      	ldr	r0, [r7, #4]
90009fa6:	f002 fcfd 	bl	9000c9a4 <tcp_output>
  }
  return;
90009faa:	e001      	b.n	90009fb0 <tcp_timewait_input+0xc0>
    return;
90009fac:	bf00      	nop
90009fae:	e000      	b.n	90009fb2 <tcp_timewait_input+0xc2>
  return;
90009fb0:	bf00      	nop
}
90009fb2:	3708      	adds	r7, #8
90009fb4:	46bd      	mov	sp, r7
90009fb6:	bd80      	pop	{r7, pc}
90009fb8:	2000a8e4 	.word	0x2000a8e4
90009fbc:	90012f24 	.word	0x90012f24
90009fc0:	9001313c 	.word	0x9001313c
90009fc4:	90012f70 	.word	0x90012f70
90009fc8:	2000a8d8 	.word	0x2000a8d8
90009fcc:	2000a8dc 	.word	0x2000a8dc
90009fd0:	2000a8e2 	.word	0x2000a8e2
90009fd4:	2000a8c8 	.word	0x2000a8c8
90009fd8:	20005180 	.word	0x20005180
90009fdc:	20005184 	.word	0x20005184
90009fe0:	2000a8a0 	.word	0x2000a8a0

90009fe4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
90009fe4:	b590      	push	{r4, r7, lr}
90009fe6:	b08d      	sub	sp, #52	; 0x34
90009fe8:	af04      	add	r7, sp, #16
90009fea:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
90009fec:	2300      	movs	r3, #0
90009fee:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
90009ff0:	2300      	movs	r3, #0
90009ff2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
90009ff4:	687b      	ldr	r3, [r7, #4]
90009ff6:	2b00      	cmp	r3, #0
90009ff8:	d106      	bne.n	9000a008 <tcp_process+0x24>
90009ffa:	4b9d      	ldr	r3, [pc, #628]	; (9000a270 <tcp_process+0x28c>)
90009ffc:	f44f 7247 	mov.w	r2, #796	; 0x31c
9000a000:	499c      	ldr	r1, [pc, #624]	; (9000a274 <tcp_process+0x290>)
9000a002:	489d      	ldr	r0, [pc, #628]	; (9000a278 <tcp_process+0x294>)
9000a004:	f006 fa72 	bl	900104ec <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
9000a008:	4b9c      	ldr	r3, [pc, #624]	; (9000a27c <tcp_process+0x298>)
9000a00a:	781b      	ldrb	r3, [r3, #0]
9000a00c:	f003 0304 	and.w	r3, r3, #4
9000a010:	2b00      	cmp	r3, #0
9000a012:	d04e      	beq.n	9000a0b2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
9000a014:	687b      	ldr	r3, [r7, #4]
9000a016:	7d1b      	ldrb	r3, [r3, #20]
9000a018:	2b02      	cmp	r3, #2
9000a01a:	d108      	bne.n	9000a02e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
9000a01c:	687b      	ldr	r3, [r7, #4]
9000a01e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
9000a020:	4b97      	ldr	r3, [pc, #604]	; (9000a280 <tcp_process+0x29c>)
9000a022:	681b      	ldr	r3, [r3, #0]
9000a024:	429a      	cmp	r2, r3
9000a026:	d123      	bne.n	9000a070 <tcp_process+0x8c>
        acceptable = 1;
9000a028:	2301      	movs	r3, #1
9000a02a:	76fb      	strb	r3, [r7, #27]
9000a02c:	e020      	b.n	9000a070 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
9000a02e:	687b      	ldr	r3, [r7, #4]
9000a030:	6a5a      	ldr	r2, [r3, #36]	; 0x24
9000a032:	4b94      	ldr	r3, [pc, #592]	; (9000a284 <tcp_process+0x2a0>)
9000a034:	681b      	ldr	r3, [r3, #0]
9000a036:	429a      	cmp	r2, r3
9000a038:	d102      	bne.n	9000a040 <tcp_process+0x5c>
        acceptable = 1;
9000a03a:	2301      	movs	r3, #1
9000a03c:	76fb      	strb	r3, [r7, #27]
9000a03e:	e017      	b.n	9000a070 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
9000a040:	4b90      	ldr	r3, [pc, #576]	; (9000a284 <tcp_process+0x2a0>)
9000a042:	681a      	ldr	r2, [r3, #0]
9000a044:	687b      	ldr	r3, [r7, #4]
9000a046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000a048:	1ad3      	subs	r3, r2, r3
9000a04a:	2b00      	cmp	r3, #0
9000a04c:	db10      	blt.n	9000a070 <tcp_process+0x8c>
9000a04e:	4b8d      	ldr	r3, [pc, #564]	; (9000a284 <tcp_process+0x2a0>)
9000a050:	681a      	ldr	r2, [r3, #0]
9000a052:	687b      	ldr	r3, [r7, #4]
9000a054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000a056:	6879      	ldr	r1, [r7, #4]
9000a058:	8d09      	ldrh	r1, [r1, #40]	; 0x28
9000a05a:	440b      	add	r3, r1
9000a05c:	1ad3      	subs	r3, r2, r3
9000a05e:	2b00      	cmp	r3, #0
9000a060:	dc06      	bgt.n	9000a070 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
9000a062:	687b      	ldr	r3, [r7, #4]
9000a064:	8b5b      	ldrh	r3, [r3, #26]
9000a066:	f043 0302 	orr.w	r3, r3, #2
9000a06a:	b29a      	uxth	r2, r3
9000a06c:	687b      	ldr	r3, [r7, #4]
9000a06e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
9000a070:	7efb      	ldrb	r3, [r7, #27]
9000a072:	2b00      	cmp	r3, #0
9000a074:	d01b      	beq.n	9000a0ae <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
9000a076:	687b      	ldr	r3, [r7, #4]
9000a078:	7d1b      	ldrb	r3, [r3, #20]
9000a07a:	2b00      	cmp	r3, #0
9000a07c:	d106      	bne.n	9000a08c <tcp_process+0xa8>
9000a07e:	4b7c      	ldr	r3, [pc, #496]	; (9000a270 <tcp_process+0x28c>)
9000a080:	f44f 724e 	mov.w	r2, #824	; 0x338
9000a084:	4980      	ldr	r1, [pc, #512]	; (9000a288 <tcp_process+0x2a4>)
9000a086:	487c      	ldr	r0, [pc, #496]	; (9000a278 <tcp_process+0x294>)
9000a088:	f006 fa30 	bl	900104ec <iprintf>
      recv_flags |= TF_RESET;
9000a08c:	4b7f      	ldr	r3, [pc, #508]	; (9000a28c <tcp_process+0x2a8>)
9000a08e:	781b      	ldrb	r3, [r3, #0]
9000a090:	f043 0308 	orr.w	r3, r3, #8
9000a094:	b2da      	uxtb	r2, r3
9000a096:	4b7d      	ldr	r3, [pc, #500]	; (9000a28c <tcp_process+0x2a8>)
9000a098:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
9000a09a:	687b      	ldr	r3, [r7, #4]
9000a09c:	8b5b      	ldrh	r3, [r3, #26]
9000a09e:	f023 0301 	bic.w	r3, r3, #1
9000a0a2:	b29a      	uxth	r2, r3
9000a0a4:	687b      	ldr	r3, [r7, #4]
9000a0a6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
9000a0a8:	f06f 030d 	mvn.w	r3, #13
9000a0ac:	e37a      	b.n	9000a7a4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
9000a0ae:	2300      	movs	r3, #0
9000a0b0:	e378      	b.n	9000a7a4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
9000a0b2:	4b72      	ldr	r3, [pc, #456]	; (9000a27c <tcp_process+0x298>)
9000a0b4:	781b      	ldrb	r3, [r3, #0]
9000a0b6:	f003 0302 	and.w	r3, r3, #2
9000a0ba:	2b00      	cmp	r3, #0
9000a0bc:	d010      	beq.n	9000a0e0 <tcp_process+0xfc>
9000a0be:	687b      	ldr	r3, [r7, #4]
9000a0c0:	7d1b      	ldrb	r3, [r3, #20]
9000a0c2:	2b02      	cmp	r3, #2
9000a0c4:	d00c      	beq.n	9000a0e0 <tcp_process+0xfc>
9000a0c6:	687b      	ldr	r3, [r7, #4]
9000a0c8:	7d1b      	ldrb	r3, [r3, #20]
9000a0ca:	2b03      	cmp	r3, #3
9000a0cc:	d008      	beq.n	9000a0e0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
9000a0ce:	687b      	ldr	r3, [r7, #4]
9000a0d0:	8b5b      	ldrh	r3, [r3, #26]
9000a0d2:	f043 0302 	orr.w	r3, r3, #2
9000a0d6:	b29a      	uxth	r2, r3
9000a0d8:	687b      	ldr	r3, [r7, #4]
9000a0da:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
9000a0dc:	2300      	movs	r3, #0
9000a0de:	e361      	b.n	9000a7a4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
9000a0e0:	687b      	ldr	r3, [r7, #4]
9000a0e2:	8b5b      	ldrh	r3, [r3, #26]
9000a0e4:	f003 0310 	and.w	r3, r3, #16
9000a0e8:	2b00      	cmp	r3, #0
9000a0ea:	d103      	bne.n	9000a0f4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
9000a0ec:	4b68      	ldr	r3, [pc, #416]	; (9000a290 <tcp_process+0x2ac>)
9000a0ee:	681a      	ldr	r2, [r3, #0]
9000a0f0:	687b      	ldr	r3, [r7, #4]
9000a0f2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
9000a0f4:	687b      	ldr	r3, [r7, #4]
9000a0f6:	2200      	movs	r2, #0
9000a0f8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
9000a0fc:	687b      	ldr	r3, [r7, #4]
9000a0fe:	2200      	movs	r2, #0
9000a100:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
9000a104:	6878      	ldr	r0, [r7, #4]
9000a106:	f001 fc2f 	bl	9000b968 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
9000a10a:	687b      	ldr	r3, [r7, #4]
9000a10c:	7d1b      	ldrb	r3, [r3, #20]
9000a10e:	3b02      	subs	r3, #2
9000a110:	2b07      	cmp	r3, #7
9000a112:	f200 8337 	bhi.w	9000a784 <tcp_process+0x7a0>
9000a116:	a201      	add	r2, pc, #4	; (adr r2, 9000a11c <tcp_process+0x138>)
9000a118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000a11c:	9000a13d 	.word	0x9000a13d
9000a120:	9000a36d 	.word	0x9000a36d
9000a124:	9000a4e5 	.word	0x9000a4e5
9000a128:	9000a50f 	.word	0x9000a50f
9000a12c:	9000a633 	.word	0x9000a633
9000a130:	9000a4e5 	.word	0x9000a4e5
9000a134:	9000a6bf 	.word	0x9000a6bf
9000a138:	9000a74f 	.word	0x9000a74f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
9000a13c:	4b4f      	ldr	r3, [pc, #316]	; (9000a27c <tcp_process+0x298>)
9000a13e:	781b      	ldrb	r3, [r3, #0]
9000a140:	f003 0310 	and.w	r3, r3, #16
9000a144:	2b00      	cmp	r3, #0
9000a146:	f000 80e4 	beq.w	9000a312 <tcp_process+0x32e>
9000a14a:	4b4c      	ldr	r3, [pc, #304]	; (9000a27c <tcp_process+0x298>)
9000a14c:	781b      	ldrb	r3, [r3, #0]
9000a14e:	f003 0302 	and.w	r3, r3, #2
9000a152:	2b00      	cmp	r3, #0
9000a154:	f000 80dd 	beq.w	9000a312 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
9000a158:	687b      	ldr	r3, [r7, #4]
9000a15a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
9000a15c:	1c5a      	adds	r2, r3, #1
9000a15e:	4b48      	ldr	r3, [pc, #288]	; (9000a280 <tcp_process+0x29c>)
9000a160:	681b      	ldr	r3, [r3, #0]
9000a162:	429a      	cmp	r2, r3
9000a164:	f040 80d5 	bne.w	9000a312 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
9000a168:	4b46      	ldr	r3, [pc, #280]	; (9000a284 <tcp_process+0x2a0>)
9000a16a:	681b      	ldr	r3, [r3, #0]
9000a16c:	1c5a      	adds	r2, r3, #1
9000a16e:	687b      	ldr	r3, [r7, #4]
9000a170:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
9000a172:	687b      	ldr	r3, [r7, #4]
9000a174:	6a5a      	ldr	r2, [r3, #36]	; 0x24
9000a176:	687b      	ldr	r3, [r7, #4]
9000a178:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
9000a17a:	4b41      	ldr	r3, [pc, #260]	; (9000a280 <tcp_process+0x29c>)
9000a17c:	681a      	ldr	r2, [r3, #0]
9000a17e:	687b      	ldr	r3, [r7, #4]
9000a180:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
9000a182:	4b44      	ldr	r3, [pc, #272]	; (9000a294 <tcp_process+0x2b0>)
9000a184:	681b      	ldr	r3, [r3, #0]
9000a186:	89db      	ldrh	r3, [r3, #14]
9000a188:	b29a      	uxth	r2, r3
9000a18a:	687b      	ldr	r3, [r7, #4]
9000a18c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
9000a190:	687b      	ldr	r3, [r7, #4]
9000a192:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
9000a196:	687b      	ldr	r3, [r7, #4]
9000a198:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
9000a19c:	4b39      	ldr	r3, [pc, #228]	; (9000a284 <tcp_process+0x2a0>)
9000a19e:	681b      	ldr	r3, [r3, #0]
9000a1a0:	1e5a      	subs	r2, r3, #1
9000a1a2:	687b      	ldr	r3, [r7, #4]
9000a1a4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
9000a1a6:	687b      	ldr	r3, [r7, #4]
9000a1a8:	2204      	movs	r2, #4
9000a1aa:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
9000a1ac:	687b      	ldr	r3, [r7, #4]
9000a1ae:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
9000a1b0:	687b      	ldr	r3, [r7, #4]
9000a1b2:	3304      	adds	r3, #4
9000a1b4:	4618      	mov	r0, r3
9000a1b6:	f004 ff49 	bl	9000f04c <ip4_route>
9000a1ba:	4601      	mov	r1, r0
9000a1bc:	687b      	ldr	r3, [r7, #4]
9000a1be:	3304      	adds	r3, #4
9000a1c0:	461a      	mov	r2, r3
9000a1c2:	4620      	mov	r0, r4
9000a1c4:	f7ff f88c 	bl	900092e0 <tcp_eff_send_mss_netif>
9000a1c8:	4603      	mov	r3, r0
9000a1ca:	461a      	mov	r2, r3
9000a1cc:	687b      	ldr	r3, [r7, #4]
9000a1ce:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
9000a1d0:	687b      	ldr	r3, [r7, #4]
9000a1d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000a1d4:	009a      	lsls	r2, r3, #2
9000a1d6:	687b      	ldr	r3, [r7, #4]
9000a1d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000a1da:	005b      	lsls	r3, r3, #1
9000a1dc:	f241 111c 	movw	r1, #4380	; 0x111c
9000a1e0:	428b      	cmp	r3, r1
9000a1e2:	bf38      	it	cc
9000a1e4:	460b      	movcc	r3, r1
9000a1e6:	429a      	cmp	r2, r3
9000a1e8:	d204      	bcs.n	9000a1f4 <tcp_process+0x210>
9000a1ea:	687b      	ldr	r3, [r7, #4]
9000a1ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000a1ee:	009b      	lsls	r3, r3, #2
9000a1f0:	b29b      	uxth	r3, r3
9000a1f2:	e00d      	b.n	9000a210 <tcp_process+0x22c>
9000a1f4:	687b      	ldr	r3, [r7, #4]
9000a1f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000a1f8:	005b      	lsls	r3, r3, #1
9000a1fa:	f241 121c 	movw	r2, #4380	; 0x111c
9000a1fe:	4293      	cmp	r3, r2
9000a200:	d904      	bls.n	9000a20c <tcp_process+0x228>
9000a202:	687b      	ldr	r3, [r7, #4]
9000a204:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000a206:	005b      	lsls	r3, r3, #1
9000a208:	b29b      	uxth	r3, r3
9000a20a:	e001      	b.n	9000a210 <tcp_process+0x22c>
9000a20c:	f241 131c 	movw	r3, #4380	; 0x111c
9000a210:	687a      	ldr	r2, [r7, #4]
9000a212:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
9000a216:	687b      	ldr	r3, [r7, #4]
9000a218:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
9000a21c:	2b00      	cmp	r3, #0
9000a21e:	d106      	bne.n	9000a22e <tcp_process+0x24a>
9000a220:	4b13      	ldr	r3, [pc, #76]	; (9000a270 <tcp_process+0x28c>)
9000a222:	f44f 725b 	mov.w	r2, #876	; 0x36c
9000a226:	491c      	ldr	r1, [pc, #112]	; (9000a298 <tcp_process+0x2b4>)
9000a228:	4813      	ldr	r0, [pc, #76]	; (9000a278 <tcp_process+0x294>)
9000a22a:	f006 f95f 	bl	900104ec <iprintf>
        --pcb->snd_queuelen;
9000a22e:	687b      	ldr	r3, [r7, #4]
9000a230:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
9000a234:	3b01      	subs	r3, #1
9000a236:	b29a      	uxth	r2, r3
9000a238:	687b      	ldr	r3, [r7, #4]
9000a23a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
9000a23e:	687b      	ldr	r3, [r7, #4]
9000a240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000a242:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
9000a244:	69fb      	ldr	r3, [r7, #28]
9000a246:	2b00      	cmp	r3, #0
9000a248:	d12a      	bne.n	9000a2a0 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
9000a24a:	687b      	ldr	r3, [r7, #4]
9000a24c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000a24e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
9000a250:	69fb      	ldr	r3, [r7, #28]
9000a252:	2b00      	cmp	r3, #0
9000a254:	d106      	bne.n	9000a264 <tcp_process+0x280>
9000a256:	4b06      	ldr	r3, [pc, #24]	; (9000a270 <tcp_process+0x28c>)
9000a258:	f44f 725d 	mov.w	r2, #884	; 0x374
9000a25c:	490f      	ldr	r1, [pc, #60]	; (9000a29c <tcp_process+0x2b8>)
9000a25e:	4806      	ldr	r0, [pc, #24]	; (9000a278 <tcp_process+0x294>)
9000a260:	f006 f944 	bl	900104ec <iprintf>
          pcb->unsent = rseg->next;
9000a264:	69fb      	ldr	r3, [r7, #28]
9000a266:	681a      	ldr	r2, [r3, #0]
9000a268:	687b      	ldr	r3, [r7, #4]
9000a26a:	66da      	str	r2, [r3, #108]	; 0x6c
9000a26c:	e01c      	b.n	9000a2a8 <tcp_process+0x2c4>
9000a26e:	bf00      	nop
9000a270:	90012f24 	.word	0x90012f24
9000a274:	9001315c 	.word	0x9001315c
9000a278:	90012f70 	.word	0x90012f70
9000a27c:	2000a8e4 	.word	0x2000a8e4
9000a280:	2000a8dc 	.word	0x2000a8dc
9000a284:	2000a8d8 	.word	0x2000a8d8
9000a288:	90013178 	.word	0x90013178
9000a28c:	2000a8e5 	.word	0x2000a8e5
9000a290:	2000a8a0 	.word	0x2000a8a0
9000a294:	2000a8c8 	.word	0x2000a8c8
9000a298:	90013198 	.word	0x90013198
9000a29c:	900131b0 	.word	0x900131b0
        } else {
          pcb->unacked = rseg->next;
9000a2a0:	69fb      	ldr	r3, [r7, #28]
9000a2a2:	681a      	ldr	r2, [r3, #0]
9000a2a4:	687b      	ldr	r3, [r7, #4]
9000a2a6:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
9000a2a8:	69f8      	ldr	r0, [r7, #28]
9000a2aa:	f7fe fc36 	bl	90008b1a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
9000a2ae:	687b      	ldr	r3, [r7, #4]
9000a2b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000a2b2:	2b00      	cmp	r3, #0
9000a2b4:	d104      	bne.n	9000a2c0 <tcp_process+0x2dc>
          pcb->rtime = -1;
9000a2b6:	687b      	ldr	r3, [r7, #4]
9000a2b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
9000a2bc:	861a      	strh	r2, [r3, #48]	; 0x30
9000a2be:	e006      	b.n	9000a2ce <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
9000a2c0:	687b      	ldr	r3, [r7, #4]
9000a2c2:	2200      	movs	r2, #0
9000a2c4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
9000a2c6:	687b      	ldr	r3, [r7, #4]
9000a2c8:	2200      	movs	r2, #0
9000a2ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
9000a2ce:	687b      	ldr	r3, [r7, #4]
9000a2d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
9000a2d4:	2b00      	cmp	r3, #0
9000a2d6:	d00a      	beq.n	9000a2ee <tcp_process+0x30a>
9000a2d8:	687b      	ldr	r3, [r7, #4]
9000a2da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
9000a2de:	687a      	ldr	r2, [r7, #4]
9000a2e0:	6910      	ldr	r0, [r2, #16]
9000a2e2:	2200      	movs	r2, #0
9000a2e4:	6879      	ldr	r1, [r7, #4]
9000a2e6:	4798      	blx	r3
9000a2e8:	4603      	mov	r3, r0
9000a2ea:	76bb      	strb	r3, [r7, #26]
9000a2ec:	e001      	b.n	9000a2f2 <tcp_process+0x30e>
9000a2ee:	2300      	movs	r3, #0
9000a2f0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
9000a2f2:	f997 301a 	ldrsb.w	r3, [r7, #26]
9000a2f6:	f113 0f0d 	cmn.w	r3, #13
9000a2fa:	d102      	bne.n	9000a302 <tcp_process+0x31e>
          return ERR_ABRT;
9000a2fc:	f06f 030c 	mvn.w	r3, #12
9000a300:	e250      	b.n	9000a7a4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
9000a302:	687b      	ldr	r3, [r7, #4]
9000a304:	8b5b      	ldrh	r3, [r3, #26]
9000a306:	f043 0302 	orr.w	r3, r3, #2
9000a30a:	b29a      	uxth	r2, r3
9000a30c:	687b      	ldr	r3, [r7, #4]
9000a30e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
9000a310:	e23a      	b.n	9000a788 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
9000a312:	4b98      	ldr	r3, [pc, #608]	; (9000a574 <tcp_process+0x590>)
9000a314:	781b      	ldrb	r3, [r3, #0]
9000a316:	f003 0310 	and.w	r3, r3, #16
9000a31a:	2b00      	cmp	r3, #0
9000a31c:	f000 8234 	beq.w	9000a788 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
9000a320:	4b95      	ldr	r3, [pc, #596]	; (9000a578 <tcp_process+0x594>)
9000a322:	6819      	ldr	r1, [r3, #0]
9000a324:	4b95      	ldr	r3, [pc, #596]	; (9000a57c <tcp_process+0x598>)
9000a326:	881b      	ldrh	r3, [r3, #0]
9000a328:	461a      	mov	r2, r3
9000a32a:	4b95      	ldr	r3, [pc, #596]	; (9000a580 <tcp_process+0x59c>)
9000a32c:	681b      	ldr	r3, [r3, #0]
9000a32e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
9000a330:	4b94      	ldr	r3, [pc, #592]	; (9000a584 <tcp_process+0x5a0>)
9000a332:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
9000a334:	885b      	ldrh	r3, [r3, #2]
9000a336:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
9000a338:	4a92      	ldr	r2, [pc, #584]	; (9000a584 <tcp_process+0x5a0>)
9000a33a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
9000a33c:	8812      	ldrh	r2, [r2, #0]
9000a33e:	b292      	uxth	r2, r2
9000a340:	9202      	str	r2, [sp, #8]
9000a342:	9301      	str	r3, [sp, #4]
9000a344:	4b90      	ldr	r3, [pc, #576]	; (9000a588 <tcp_process+0x5a4>)
9000a346:	9300      	str	r3, [sp, #0]
9000a348:	4b90      	ldr	r3, [pc, #576]	; (9000a58c <tcp_process+0x5a8>)
9000a34a:	4602      	mov	r2, r0
9000a34c:	6878      	ldr	r0, [r7, #4]
9000a34e:	f003 f8dd 	bl	9000d50c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
9000a352:	687b      	ldr	r3, [r7, #4]
9000a354:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
9000a358:	2b05      	cmp	r3, #5
9000a35a:	f200 8215 	bhi.w	9000a788 <tcp_process+0x7a4>
          pcb->rtime = 0;
9000a35e:	687b      	ldr	r3, [r7, #4]
9000a360:	2200      	movs	r2, #0
9000a362:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
9000a364:	6878      	ldr	r0, [r7, #4]
9000a366:	f002 fea7 	bl	9000d0b8 <tcp_rexmit_rto>
      break;
9000a36a:	e20d      	b.n	9000a788 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
9000a36c:	4b81      	ldr	r3, [pc, #516]	; (9000a574 <tcp_process+0x590>)
9000a36e:	781b      	ldrb	r3, [r3, #0]
9000a370:	f003 0310 	and.w	r3, r3, #16
9000a374:	2b00      	cmp	r3, #0
9000a376:	f000 80a1 	beq.w	9000a4bc <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
9000a37a:	4b7f      	ldr	r3, [pc, #508]	; (9000a578 <tcp_process+0x594>)
9000a37c:	681a      	ldr	r2, [r3, #0]
9000a37e:	687b      	ldr	r3, [r7, #4]
9000a380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
9000a382:	1ad3      	subs	r3, r2, r3
9000a384:	3b01      	subs	r3, #1
9000a386:	2b00      	cmp	r3, #0
9000a388:	db7e      	blt.n	9000a488 <tcp_process+0x4a4>
9000a38a:	4b7b      	ldr	r3, [pc, #492]	; (9000a578 <tcp_process+0x594>)
9000a38c:	681a      	ldr	r2, [r3, #0]
9000a38e:	687b      	ldr	r3, [r7, #4]
9000a390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9000a392:	1ad3      	subs	r3, r2, r3
9000a394:	2b00      	cmp	r3, #0
9000a396:	dc77      	bgt.n	9000a488 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
9000a398:	687b      	ldr	r3, [r7, #4]
9000a39a:	2204      	movs	r2, #4
9000a39c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
9000a39e:	687b      	ldr	r3, [r7, #4]
9000a3a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9000a3a2:	2b00      	cmp	r3, #0
9000a3a4:	d102      	bne.n	9000a3ac <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
9000a3a6:	23fa      	movs	r3, #250	; 0xfa
9000a3a8:	76bb      	strb	r3, [r7, #26]
9000a3aa:	e01d      	b.n	9000a3e8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
9000a3ac:	687b      	ldr	r3, [r7, #4]
9000a3ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9000a3b0:	699b      	ldr	r3, [r3, #24]
9000a3b2:	2b00      	cmp	r3, #0
9000a3b4:	d106      	bne.n	9000a3c4 <tcp_process+0x3e0>
9000a3b6:	4b76      	ldr	r3, [pc, #472]	; (9000a590 <tcp_process+0x5ac>)
9000a3b8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
9000a3bc:	4975      	ldr	r1, [pc, #468]	; (9000a594 <tcp_process+0x5b0>)
9000a3be:	4876      	ldr	r0, [pc, #472]	; (9000a598 <tcp_process+0x5b4>)
9000a3c0:	f006 f894 	bl	900104ec <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
9000a3c4:	687b      	ldr	r3, [r7, #4]
9000a3c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9000a3c8:	699b      	ldr	r3, [r3, #24]
9000a3ca:	2b00      	cmp	r3, #0
9000a3cc:	d00a      	beq.n	9000a3e4 <tcp_process+0x400>
9000a3ce:	687b      	ldr	r3, [r7, #4]
9000a3d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9000a3d2:	699b      	ldr	r3, [r3, #24]
9000a3d4:	687a      	ldr	r2, [r7, #4]
9000a3d6:	6910      	ldr	r0, [r2, #16]
9000a3d8:	2200      	movs	r2, #0
9000a3da:	6879      	ldr	r1, [r7, #4]
9000a3dc:	4798      	blx	r3
9000a3de:	4603      	mov	r3, r0
9000a3e0:	76bb      	strb	r3, [r7, #26]
9000a3e2:	e001      	b.n	9000a3e8 <tcp_process+0x404>
9000a3e4:	23f0      	movs	r3, #240	; 0xf0
9000a3e6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
9000a3e8:	f997 301a 	ldrsb.w	r3, [r7, #26]
9000a3ec:	2b00      	cmp	r3, #0
9000a3ee:	d00a      	beq.n	9000a406 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
9000a3f0:	f997 301a 	ldrsb.w	r3, [r7, #26]
9000a3f4:	f113 0f0d 	cmn.w	r3, #13
9000a3f8:	d002      	beq.n	9000a400 <tcp_process+0x41c>
              tcp_abort(pcb);
9000a3fa:	6878      	ldr	r0, [r7, #4]
9000a3fc:	f7fd fce8 	bl	90007dd0 <tcp_abort>
            }
            return ERR_ABRT;
9000a400:	f06f 030c 	mvn.w	r3, #12
9000a404:	e1ce      	b.n	9000a7a4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
9000a406:	6878      	ldr	r0, [r7, #4]
9000a408:	f000 fae0 	bl	9000a9cc <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
9000a40c:	4b63      	ldr	r3, [pc, #396]	; (9000a59c <tcp_process+0x5b8>)
9000a40e:	881b      	ldrh	r3, [r3, #0]
9000a410:	2b00      	cmp	r3, #0
9000a412:	d005      	beq.n	9000a420 <tcp_process+0x43c>
            recv_acked--;
9000a414:	4b61      	ldr	r3, [pc, #388]	; (9000a59c <tcp_process+0x5b8>)
9000a416:	881b      	ldrh	r3, [r3, #0]
9000a418:	3b01      	subs	r3, #1
9000a41a:	b29a      	uxth	r2, r3
9000a41c:	4b5f      	ldr	r3, [pc, #380]	; (9000a59c <tcp_process+0x5b8>)
9000a41e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
9000a420:	687b      	ldr	r3, [r7, #4]
9000a422:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000a424:	009a      	lsls	r2, r3, #2
9000a426:	687b      	ldr	r3, [r7, #4]
9000a428:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000a42a:	005b      	lsls	r3, r3, #1
9000a42c:	f241 111c 	movw	r1, #4380	; 0x111c
9000a430:	428b      	cmp	r3, r1
9000a432:	bf38      	it	cc
9000a434:	460b      	movcc	r3, r1
9000a436:	429a      	cmp	r2, r3
9000a438:	d204      	bcs.n	9000a444 <tcp_process+0x460>
9000a43a:	687b      	ldr	r3, [r7, #4]
9000a43c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000a43e:	009b      	lsls	r3, r3, #2
9000a440:	b29b      	uxth	r3, r3
9000a442:	e00d      	b.n	9000a460 <tcp_process+0x47c>
9000a444:	687b      	ldr	r3, [r7, #4]
9000a446:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000a448:	005b      	lsls	r3, r3, #1
9000a44a:	f241 121c 	movw	r2, #4380	; 0x111c
9000a44e:	4293      	cmp	r3, r2
9000a450:	d904      	bls.n	9000a45c <tcp_process+0x478>
9000a452:	687b      	ldr	r3, [r7, #4]
9000a454:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000a456:	005b      	lsls	r3, r3, #1
9000a458:	b29b      	uxth	r3, r3
9000a45a:	e001      	b.n	9000a460 <tcp_process+0x47c>
9000a45c:	f241 131c 	movw	r3, #4380	; 0x111c
9000a460:	687a      	ldr	r2, [r7, #4]
9000a462:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
9000a466:	4b4e      	ldr	r3, [pc, #312]	; (9000a5a0 <tcp_process+0x5bc>)
9000a468:	781b      	ldrb	r3, [r3, #0]
9000a46a:	f003 0320 	and.w	r3, r3, #32
9000a46e:	2b00      	cmp	r3, #0
9000a470:	d037      	beq.n	9000a4e2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
9000a472:	687b      	ldr	r3, [r7, #4]
9000a474:	8b5b      	ldrh	r3, [r3, #26]
9000a476:	f043 0302 	orr.w	r3, r3, #2
9000a47a:	b29a      	uxth	r2, r3
9000a47c:	687b      	ldr	r3, [r7, #4]
9000a47e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
9000a480:	687b      	ldr	r3, [r7, #4]
9000a482:	2207      	movs	r2, #7
9000a484:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
9000a486:	e02c      	b.n	9000a4e2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
9000a488:	4b3b      	ldr	r3, [pc, #236]	; (9000a578 <tcp_process+0x594>)
9000a48a:	6819      	ldr	r1, [r3, #0]
9000a48c:	4b3b      	ldr	r3, [pc, #236]	; (9000a57c <tcp_process+0x598>)
9000a48e:	881b      	ldrh	r3, [r3, #0]
9000a490:	461a      	mov	r2, r3
9000a492:	4b3b      	ldr	r3, [pc, #236]	; (9000a580 <tcp_process+0x59c>)
9000a494:	681b      	ldr	r3, [r3, #0]
9000a496:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
9000a498:	4b3a      	ldr	r3, [pc, #232]	; (9000a584 <tcp_process+0x5a0>)
9000a49a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
9000a49c:	885b      	ldrh	r3, [r3, #2]
9000a49e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
9000a4a0:	4a38      	ldr	r2, [pc, #224]	; (9000a584 <tcp_process+0x5a0>)
9000a4a2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
9000a4a4:	8812      	ldrh	r2, [r2, #0]
9000a4a6:	b292      	uxth	r2, r2
9000a4a8:	9202      	str	r2, [sp, #8]
9000a4aa:	9301      	str	r3, [sp, #4]
9000a4ac:	4b36      	ldr	r3, [pc, #216]	; (9000a588 <tcp_process+0x5a4>)
9000a4ae:	9300      	str	r3, [sp, #0]
9000a4b0:	4b36      	ldr	r3, [pc, #216]	; (9000a58c <tcp_process+0x5a8>)
9000a4b2:	4602      	mov	r2, r0
9000a4b4:	6878      	ldr	r0, [r7, #4]
9000a4b6:	f003 f829 	bl	9000d50c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
9000a4ba:	e167      	b.n	9000a78c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
9000a4bc:	4b2d      	ldr	r3, [pc, #180]	; (9000a574 <tcp_process+0x590>)
9000a4be:	781b      	ldrb	r3, [r3, #0]
9000a4c0:	f003 0302 	and.w	r3, r3, #2
9000a4c4:	2b00      	cmp	r3, #0
9000a4c6:	f000 8161 	beq.w	9000a78c <tcp_process+0x7a8>
9000a4ca:	687b      	ldr	r3, [r7, #4]
9000a4cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000a4ce:	1e5a      	subs	r2, r3, #1
9000a4d0:	4b2b      	ldr	r3, [pc, #172]	; (9000a580 <tcp_process+0x59c>)
9000a4d2:	681b      	ldr	r3, [r3, #0]
9000a4d4:	429a      	cmp	r2, r3
9000a4d6:	f040 8159 	bne.w	9000a78c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
9000a4da:	6878      	ldr	r0, [r7, #4]
9000a4dc:	f002 fe0e 	bl	9000d0fc <tcp_rexmit>
      break;
9000a4e0:	e154      	b.n	9000a78c <tcp_process+0x7a8>
9000a4e2:	e153      	b.n	9000a78c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
9000a4e4:	6878      	ldr	r0, [r7, #4]
9000a4e6:	f000 fa71 	bl	9000a9cc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
9000a4ea:	4b2d      	ldr	r3, [pc, #180]	; (9000a5a0 <tcp_process+0x5bc>)
9000a4ec:	781b      	ldrb	r3, [r3, #0]
9000a4ee:	f003 0320 	and.w	r3, r3, #32
9000a4f2:	2b00      	cmp	r3, #0
9000a4f4:	f000 814c 	beq.w	9000a790 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
9000a4f8:	687b      	ldr	r3, [r7, #4]
9000a4fa:	8b5b      	ldrh	r3, [r3, #26]
9000a4fc:	f043 0302 	orr.w	r3, r3, #2
9000a500:	b29a      	uxth	r2, r3
9000a502:	687b      	ldr	r3, [r7, #4]
9000a504:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
9000a506:	687b      	ldr	r3, [r7, #4]
9000a508:	2207      	movs	r2, #7
9000a50a:	751a      	strb	r2, [r3, #20]
      }
      break;
9000a50c:	e140      	b.n	9000a790 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
9000a50e:	6878      	ldr	r0, [r7, #4]
9000a510:	f000 fa5c 	bl	9000a9cc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
9000a514:	4b22      	ldr	r3, [pc, #136]	; (9000a5a0 <tcp_process+0x5bc>)
9000a516:	781b      	ldrb	r3, [r3, #0]
9000a518:	f003 0320 	and.w	r3, r3, #32
9000a51c:	2b00      	cmp	r3, #0
9000a51e:	d071      	beq.n	9000a604 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
9000a520:	4b14      	ldr	r3, [pc, #80]	; (9000a574 <tcp_process+0x590>)
9000a522:	781b      	ldrb	r3, [r3, #0]
9000a524:	f003 0310 	and.w	r3, r3, #16
9000a528:	2b00      	cmp	r3, #0
9000a52a:	d060      	beq.n	9000a5ee <tcp_process+0x60a>
9000a52c:	687b      	ldr	r3, [r7, #4]
9000a52e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
9000a530:	4b11      	ldr	r3, [pc, #68]	; (9000a578 <tcp_process+0x594>)
9000a532:	681b      	ldr	r3, [r3, #0]
9000a534:	429a      	cmp	r2, r3
9000a536:	d15a      	bne.n	9000a5ee <tcp_process+0x60a>
            pcb->unsent == NULL) {
9000a538:	687b      	ldr	r3, [r7, #4]
9000a53a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
9000a53c:	2b00      	cmp	r3, #0
9000a53e:	d156      	bne.n	9000a5ee <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
9000a540:	687b      	ldr	r3, [r7, #4]
9000a542:	8b5b      	ldrh	r3, [r3, #26]
9000a544:	f043 0302 	orr.w	r3, r3, #2
9000a548:	b29a      	uxth	r2, r3
9000a54a:	687b      	ldr	r3, [r7, #4]
9000a54c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
9000a54e:	6878      	ldr	r0, [r7, #4]
9000a550:	f7fe fdbc 	bl	900090cc <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
9000a554:	4b13      	ldr	r3, [pc, #76]	; (9000a5a4 <tcp_process+0x5c0>)
9000a556:	681b      	ldr	r3, [r3, #0]
9000a558:	687a      	ldr	r2, [r7, #4]
9000a55a:	429a      	cmp	r2, r3
9000a55c:	d105      	bne.n	9000a56a <tcp_process+0x586>
9000a55e:	4b11      	ldr	r3, [pc, #68]	; (9000a5a4 <tcp_process+0x5c0>)
9000a560:	681b      	ldr	r3, [r3, #0]
9000a562:	68db      	ldr	r3, [r3, #12]
9000a564:	4a0f      	ldr	r2, [pc, #60]	; (9000a5a4 <tcp_process+0x5c0>)
9000a566:	6013      	str	r3, [r2, #0]
9000a568:	e02e      	b.n	9000a5c8 <tcp_process+0x5e4>
9000a56a:	4b0e      	ldr	r3, [pc, #56]	; (9000a5a4 <tcp_process+0x5c0>)
9000a56c:	681b      	ldr	r3, [r3, #0]
9000a56e:	617b      	str	r3, [r7, #20]
9000a570:	e027      	b.n	9000a5c2 <tcp_process+0x5de>
9000a572:	bf00      	nop
9000a574:	2000a8e4 	.word	0x2000a8e4
9000a578:	2000a8dc 	.word	0x2000a8dc
9000a57c:	2000a8e2 	.word	0x2000a8e2
9000a580:	2000a8d8 	.word	0x2000a8d8
9000a584:	2000a8c8 	.word	0x2000a8c8
9000a588:	20005180 	.word	0x20005180
9000a58c:	20005184 	.word	0x20005184
9000a590:	90012f24 	.word	0x90012f24
9000a594:	900131c4 	.word	0x900131c4
9000a598:	90012f70 	.word	0x90012f70
9000a59c:	2000a8e0 	.word	0x2000a8e0
9000a5a0:	2000a8e5 	.word	0x2000a8e5
9000a5a4:	2000a8ac 	.word	0x2000a8ac
9000a5a8:	697b      	ldr	r3, [r7, #20]
9000a5aa:	68db      	ldr	r3, [r3, #12]
9000a5ac:	687a      	ldr	r2, [r7, #4]
9000a5ae:	429a      	cmp	r2, r3
9000a5b0:	d104      	bne.n	9000a5bc <tcp_process+0x5d8>
9000a5b2:	687b      	ldr	r3, [r7, #4]
9000a5b4:	68da      	ldr	r2, [r3, #12]
9000a5b6:	697b      	ldr	r3, [r7, #20]
9000a5b8:	60da      	str	r2, [r3, #12]
9000a5ba:	e005      	b.n	9000a5c8 <tcp_process+0x5e4>
9000a5bc:	697b      	ldr	r3, [r7, #20]
9000a5be:	68db      	ldr	r3, [r3, #12]
9000a5c0:	617b      	str	r3, [r7, #20]
9000a5c2:	697b      	ldr	r3, [r7, #20]
9000a5c4:	2b00      	cmp	r3, #0
9000a5c6:	d1ef      	bne.n	9000a5a8 <tcp_process+0x5c4>
9000a5c8:	687b      	ldr	r3, [r7, #4]
9000a5ca:	2200      	movs	r2, #0
9000a5cc:	60da      	str	r2, [r3, #12]
9000a5ce:	4b77      	ldr	r3, [pc, #476]	; (9000a7ac <tcp_process+0x7c8>)
9000a5d0:	2201      	movs	r2, #1
9000a5d2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
9000a5d4:	687b      	ldr	r3, [r7, #4]
9000a5d6:	220a      	movs	r2, #10
9000a5d8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
9000a5da:	4b75      	ldr	r3, [pc, #468]	; (9000a7b0 <tcp_process+0x7cc>)
9000a5dc:	681a      	ldr	r2, [r3, #0]
9000a5de:	687b      	ldr	r3, [r7, #4]
9000a5e0:	60da      	str	r2, [r3, #12]
9000a5e2:	4a73      	ldr	r2, [pc, #460]	; (9000a7b0 <tcp_process+0x7cc>)
9000a5e4:	687b      	ldr	r3, [r7, #4]
9000a5e6:	6013      	str	r3, [r2, #0]
9000a5e8:	f003 f952 	bl	9000d890 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
9000a5ec:	e0d2      	b.n	9000a794 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
9000a5ee:	687b      	ldr	r3, [r7, #4]
9000a5f0:	8b5b      	ldrh	r3, [r3, #26]
9000a5f2:	f043 0302 	orr.w	r3, r3, #2
9000a5f6:	b29a      	uxth	r2, r3
9000a5f8:	687b      	ldr	r3, [r7, #4]
9000a5fa:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
9000a5fc:	687b      	ldr	r3, [r7, #4]
9000a5fe:	2208      	movs	r2, #8
9000a600:	751a      	strb	r2, [r3, #20]
      break;
9000a602:	e0c7      	b.n	9000a794 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
9000a604:	4b6b      	ldr	r3, [pc, #428]	; (9000a7b4 <tcp_process+0x7d0>)
9000a606:	781b      	ldrb	r3, [r3, #0]
9000a608:	f003 0310 	and.w	r3, r3, #16
9000a60c:	2b00      	cmp	r3, #0
9000a60e:	f000 80c1 	beq.w	9000a794 <tcp_process+0x7b0>
9000a612:	687b      	ldr	r3, [r7, #4]
9000a614:	6d1a      	ldr	r2, [r3, #80]	; 0x50
9000a616:	4b68      	ldr	r3, [pc, #416]	; (9000a7b8 <tcp_process+0x7d4>)
9000a618:	681b      	ldr	r3, [r3, #0]
9000a61a:	429a      	cmp	r2, r3
9000a61c:	f040 80ba 	bne.w	9000a794 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
9000a620:	687b      	ldr	r3, [r7, #4]
9000a622:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
9000a624:	2b00      	cmp	r3, #0
9000a626:	f040 80b5 	bne.w	9000a794 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
9000a62a:	687b      	ldr	r3, [r7, #4]
9000a62c:	2206      	movs	r2, #6
9000a62e:	751a      	strb	r2, [r3, #20]
      break;
9000a630:	e0b0      	b.n	9000a794 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
9000a632:	6878      	ldr	r0, [r7, #4]
9000a634:	f000 f9ca 	bl	9000a9cc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
9000a638:	4b60      	ldr	r3, [pc, #384]	; (9000a7bc <tcp_process+0x7d8>)
9000a63a:	781b      	ldrb	r3, [r3, #0]
9000a63c:	f003 0320 	and.w	r3, r3, #32
9000a640:	2b00      	cmp	r3, #0
9000a642:	f000 80a9 	beq.w	9000a798 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
9000a646:	687b      	ldr	r3, [r7, #4]
9000a648:	8b5b      	ldrh	r3, [r3, #26]
9000a64a:	f043 0302 	orr.w	r3, r3, #2
9000a64e:	b29a      	uxth	r2, r3
9000a650:	687b      	ldr	r3, [r7, #4]
9000a652:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
9000a654:	6878      	ldr	r0, [r7, #4]
9000a656:	f7fe fd39 	bl	900090cc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
9000a65a:	4b59      	ldr	r3, [pc, #356]	; (9000a7c0 <tcp_process+0x7dc>)
9000a65c:	681b      	ldr	r3, [r3, #0]
9000a65e:	687a      	ldr	r2, [r7, #4]
9000a660:	429a      	cmp	r2, r3
9000a662:	d105      	bne.n	9000a670 <tcp_process+0x68c>
9000a664:	4b56      	ldr	r3, [pc, #344]	; (9000a7c0 <tcp_process+0x7dc>)
9000a666:	681b      	ldr	r3, [r3, #0]
9000a668:	68db      	ldr	r3, [r3, #12]
9000a66a:	4a55      	ldr	r2, [pc, #340]	; (9000a7c0 <tcp_process+0x7dc>)
9000a66c:	6013      	str	r3, [r2, #0]
9000a66e:	e013      	b.n	9000a698 <tcp_process+0x6b4>
9000a670:	4b53      	ldr	r3, [pc, #332]	; (9000a7c0 <tcp_process+0x7dc>)
9000a672:	681b      	ldr	r3, [r3, #0]
9000a674:	613b      	str	r3, [r7, #16]
9000a676:	e00c      	b.n	9000a692 <tcp_process+0x6ae>
9000a678:	693b      	ldr	r3, [r7, #16]
9000a67a:	68db      	ldr	r3, [r3, #12]
9000a67c:	687a      	ldr	r2, [r7, #4]
9000a67e:	429a      	cmp	r2, r3
9000a680:	d104      	bne.n	9000a68c <tcp_process+0x6a8>
9000a682:	687b      	ldr	r3, [r7, #4]
9000a684:	68da      	ldr	r2, [r3, #12]
9000a686:	693b      	ldr	r3, [r7, #16]
9000a688:	60da      	str	r2, [r3, #12]
9000a68a:	e005      	b.n	9000a698 <tcp_process+0x6b4>
9000a68c:	693b      	ldr	r3, [r7, #16]
9000a68e:	68db      	ldr	r3, [r3, #12]
9000a690:	613b      	str	r3, [r7, #16]
9000a692:	693b      	ldr	r3, [r7, #16]
9000a694:	2b00      	cmp	r3, #0
9000a696:	d1ef      	bne.n	9000a678 <tcp_process+0x694>
9000a698:	687b      	ldr	r3, [r7, #4]
9000a69a:	2200      	movs	r2, #0
9000a69c:	60da      	str	r2, [r3, #12]
9000a69e:	4b43      	ldr	r3, [pc, #268]	; (9000a7ac <tcp_process+0x7c8>)
9000a6a0:	2201      	movs	r2, #1
9000a6a2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
9000a6a4:	687b      	ldr	r3, [r7, #4]
9000a6a6:	220a      	movs	r2, #10
9000a6a8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
9000a6aa:	4b41      	ldr	r3, [pc, #260]	; (9000a7b0 <tcp_process+0x7cc>)
9000a6ac:	681a      	ldr	r2, [r3, #0]
9000a6ae:	687b      	ldr	r3, [r7, #4]
9000a6b0:	60da      	str	r2, [r3, #12]
9000a6b2:	4a3f      	ldr	r2, [pc, #252]	; (9000a7b0 <tcp_process+0x7cc>)
9000a6b4:	687b      	ldr	r3, [r7, #4]
9000a6b6:	6013      	str	r3, [r2, #0]
9000a6b8:	f003 f8ea 	bl	9000d890 <tcp_timer_needed>
      }
      break;
9000a6bc:	e06c      	b.n	9000a798 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
9000a6be:	6878      	ldr	r0, [r7, #4]
9000a6c0:	f000 f984 	bl	9000a9cc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
9000a6c4:	4b3b      	ldr	r3, [pc, #236]	; (9000a7b4 <tcp_process+0x7d0>)
9000a6c6:	781b      	ldrb	r3, [r3, #0]
9000a6c8:	f003 0310 	and.w	r3, r3, #16
9000a6cc:	2b00      	cmp	r3, #0
9000a6ce:	d065      	beq.n	9000a79c <tcp_process+0x7b8>
9000a6d0:	687b      	ldr	r3, [r7, #4]
9000a6d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
9000a6d4:	4b38      	ldr	r3, [pc, #224]	; (9000a7b8 <tcp_process+0x7d4>)
9000a6d6:	681b      	ldr	r3, [r3, #0]
9000a6d8:	429a      	cmp	r2, r3
9000a6da:	d15f      	bne.n	9000a79c <tcp_process+0x7b8>
9000a6dc:	687b      	ldr	r3, [r7, #4]
9000a6de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000a6e0:	2b00      	cmp	r3, #0
9000a6e2:	d15b      	bne.n	9000a79c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
9000a6e4:	6878      	ldr	r0, [r7, #4]
9000a6e6:	f7fe fcf1 	bl	900090cc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
9000a6ea:	4b35      	ldr	r3, [pc, #212]	; (9000a7c0 <tcp_process+0x7dc>)
9000a6ec:	681b      	ldr	r3, [r3, #0]
9000a6ee:	687a      	ldr	r2, [r7, #4]
9000a6f0:	429a      	cmp	r2, r3
9000a6f2:	d105      	bne.n	9000a700 <tcp_process+0x71c>
9000a6f4:	4b32      	ldr	r3, [pc, #200]	; (9000a7c0 <tcp_process+0x7dc>)
9000a6f6:	681b      	ldr	r3, [r3, #0]
9000a6f8:	68db      	ldr	r3, [r3, #12]
9000a6fa:	4a31      	ldr	r2, [pc, #196]	; (9000a7c0 <tcp_process+0x7dc>)
9000a6fc:	6013      	str	r3, [r2, #0]
9000a6fe:	e013      	b.n	9000a728 <tcp_process+0x744>
9000a700:	4b2f      	ldr	r3, [pc, #188]	; (9000a7c0 <tcp_process+0x7dc>)
9000a702:	681b      	ldr	r3, [r3, #0]
9000a704:	60fb      	str	r3, [r7, #12]
9000a706:	e00c      	b.n	9000a722 <tcp_process+0x73e>
9000a708:	68fb      	ldr	r3, [r7, #12]
9000a70a:	68db      	ldr	r3, [r3, #12]
9000a70c:	687a      	ldr	r2, [r7, #4]
9000a70e:	429a      	cmp	r2, r3
9000a710:	d104      	bne.n	9000a71c <tcp_process+0x738>
9000a712:	687b      	ldr	r3, [r7, #4]
9000a714:	68da      	ldr	r2, [r3, #12]
9000a716:	68fb      	ldr	r3, [r7, #12]
9000a718:	60da      	str	r2, [r3, #12]
9000a71a:	e005      	b.n	9000a728 <tcp_process+0x744>
9000a71c:	68fb      	ldr	r3, [r7, #12]
9000a71e:	68db      	ldr	r3, [r3, #12]
9000a720:	60fb      	str	r3, [r7, #12]
9000a722:	68fb      	ldr	r3, [r7, #12]
9000a724:	2b00      	cmp	r3, #0
9000a726:	d1ef      	bne.n	9000a708 <tcp_process+0x724>
9000a728:	687b      	ldr	r3, [r7, #4]
9000a72a:	2200      	movs	r2, #0
9000a72c:	60da      	str	r2, [r3, #12]
9000a72e:	4b1f      	ldr	r3, [pc, #124]	; (9000a7ac <tcp_process+0x7c8>)
9000a730:	2201      	movs	r2, #1
9000a732:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
9000a734:	687b      	ldr	r3, [r7, #4]
9000a736:	220a      	movs	r2, #10
9000a738:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
9000a73a:	4b1d      	ldr	r3, [pc, #116]	; (9000a7b0 <tcp_process+0x7cc>)
9000a73c:	681a      	ldr	r2, [r3, #0]
9000a73e:	687b      	ldr	r3, [r7, #4]
9000a740:	60da      	str	r2, [r3, #12]
9000a742:	4a1b      	ldr	r2, [pc, #108]	; (9000a7b0 <tcp_process+0x7cc>)
9000a744:	687b      	ldr	r3, [r7, #4]
9000a746:	6013      	str	r3, [r2, #0]
9000a748:	f003 f8a2 	bl	9000d890 <tcp_timer_needed>
      }
      break;
9000a74c:	e026      	b.n	9000a79c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
9000a74e:	6878      	ldr	r0, [r7, #4]
9000a750:	f000 f93c 	bl	9000a9cc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
9000a754:	4b17      	ldr	r3, [pc, #92]	; (9000a7b4 <tcp_process+0x7d0>)
9000a756:	781b      	ldrb	r3, [r3, #0]
9000a758:	f003 0310 	and.w	r3, r3, #16
9000a75c:	2b00      	cmp	r3, #0
9000a75e:	d01f      	beq.n	9000a7a0 <tcp_process+0x7bc>
9000a760:	687b      	ldr	r3, [r7, #4]
9000a762:	6d1a      	ldr	r2, [r3, #80]	; 0x50
9000a764:	4b14      	ldr	r3, [pc, #80]	; (9000a7b8 <tcp_process+0x7d4>)
9000a766:	681b      	ldr	r3, [r3, #0]
9000a768:	429a      	cmp	r2, r3
9000a76a:	d119      	bne.n	9000a7a0 <tcp_process+0x7bc>
9000a76c:	687b      	ldr	r3, [r7, #4]
9000a76e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000a770:	2b00      	cmp	r3, #0
9000a772:	d115      	bne.n	9000a7a0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
9000a774:	4b11      	ldr	r3, [pc, #68]	; (9000a7bc <tcp_process+0x7d8>)
9000a776:	781b      	ldrb	r3, [r3, #0]
9000a778:	f043 0310 	orr.w	r3, r3, #16
9000a77c:	b2da      	uxtb	r2, r3
9000a77e:	4b0f      	ldr	r3, [pc, #60]	; (9000a7bc <tcp_process+0x7d8>)
9000a780:	701a      	strb	r2, [r3, #0]
      }
      break;
9000a782:	e00d      	b.n	9000a7a0 <tcp_process+0x7bc>
    default:
      break;
9000a784:	bf00      	nop
9000a786:	e00c      	b.n	9000a7a2 <tcp_process+0x7be>
      break;
9000a788:	bf00      	nop
9000a78a:	e00a      	b.n	9000a7a2 <tcp_process+0x7be>
      break;
9000a78c:	bf00      	nop
9000a78e:	e008      	b.n	9000a7a2 <tcp_process+0x7be>
      break;
9000a790:	bf00      	nop
9000a792:	e006      	b.n	9000a7a2 <tcp_process+0x7be>
      break;
9000a794:	bf00      	nop
9000a796:	e004      	b.n	9000a7a2 <tcp_process+0x7be>
      break;
9000a798:	bf00      	nop
9000a79a:	e002      	b.n	9000a7a2 <tcp_process+0x7be>
      break;
9000a79c:	bf00      	nop
9000a79e:	e000      	b.n	9000a7a2 <tcp_process+0x7be>
      break;
9000a7a0:	bf00      	nop
  }
  return ERR_OK;
9000a7a2:	2300      	movs	r3, #0
}
9000a7a4:	4618      	mov	r0, r3
9000a7a6:	3724      	adds	r7, #36	; 0x24
9000a7a8:	46bd      	mov	sp, r7
9000a7aa:	bd90      	pop	{r4, r7, pc}
9000a7ac:	2000a8b4 	.word	0x2000a8b4
9000a7b0:	2000a8b0 	.word	0x2000a8b0
9000a7b4:	2000a8e4 	.word	0x2000a8e4
9000a7b8:	2000a8dc 	.word	0x2000a8dc
9000a7bc:	2000a8e5 	.word	0x2000a8e5
9000a7c0:	2000a8ac 	.word	0x2000a8ac

9000a7c4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
9000a7c4:	b590      	push	{r4, r7, lr}
9000a7c6:	b085      	sub	sp, #20
9000a7c8:	af00      	add	r7, sp, #0
9000a7ca:	6078      	str	r0, [r7, #4]
9000a7cc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
9000a7ce:	687b      	ldr	r3, [r7, #4]
9000a7d0:	2b00      	cmp	r3, #0
9000a7d2:	d106      	bne.n	9000a7e2 <tcp_oos_insert_segment+0x1e>
9000a7d4:	4b3b      	ldr	r3, [pc, #236]	; (9000a8c4 <tcp_oos_insert_segment+0x100>)
9000a7d6:	f240 421f 	movw	r2, #1055	; 0x41f
9000a7da:	493b      	ldr	r1, [pc, #236]	; (9000a8c8 <tcp_oos_insert_segment+0x104>)
9000a7dc:	483b      	ldr	r0, [pc, #236]	; (9000a8cc <tcp_oos_insert_segment+0x108>)
9000a7de:	f005 fe85 	bl	900104ec <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
9000a7e2:	687b      	ldr	r3, [r7, #4]
9000a7e4:	68db      	ldr	r3, [r3, #12]
9000a7e6:	899b      	ldrh	r3, [r3, #12]
9000a7e8:	b29b      	uxth	r3, r3
9000a7ea:	4618      	mov	r0, r3
9000a7ec:	f7fb f9a0 	bl	90005b30 <lwip_htons>
9000a7f0:	4603      	mov	r3, r0
9000a7f2:	b2db      	uxtb	r3, r3
9000a7f4:	f003 0301 	and.w	r3, r3, #1
9000a7f8:	2b00      	cmp	r3, #0
9000a7fa:	d028      	beq.n	9000a84e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
9000a7fc:	6838      	ldr	r0, [r7, #0]
9000a7fe:	f7fe f977 	bl	90008af0 <tcp_segs_free>
    next = NULL;
9000a802:	2300      	movs	r3, #0
9000a804:	603b      	str	r3, [r7, #0]
9000a806:	e056      	b.n	9000a8b6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
9000a808:	683b      	ldr	r3, [r7, #0]
9000a80a:	68db      	ldr	r3, [r3, #12]
9000a80c:	899b      	ldrh	r3, [r3, #12]
9000a80e:	b29b      	uxth	r3, r3
9000a810:	4618      	mov	r0, r3
9000a812:	f7fb f98d 	bl	90005b30 <lwip_htons>
9000a816:	4603      	mov	r3, r0
9000a818:	b2db      	uxtb	r3, r3
9000a81a:	f003 0301 	and.w	r3, r3, #1
9000a81e:	2b00      	cmp	r3, #0
9000a820:	d00d      	beq.n	9000a83e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
9000a822:	687b      	ldr	r3, [r7, #4]
9000a824:	68db      	ldr	r3, [r3, #12]
9000a826:	899b      	ldrh	r3, [r3, #12]
9000a828:	b29c      	uxth	r4, r3
9000a82a:	2001      	movs	r0, #1
9000a82c:	f7fb f980 	bl	90005b30 <lwip_htons>
9000a830:	4603      	mov	r3, r0
9000a832:	461a      	mov	r2, r3
9000a834:	687b      	ldr	r3, [r7, #4]
9000a836:	68db      	ldr	r3, [r3, #12]
9000a838:	4322      	orrs	r2, r4
9000a83a:	b292      	uxth	r2, r2
9000a83c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
9000a83e:	683b      	ldr	r3, [r7, #0]
9000a840:	60fb      	str	r3, [r7, #12]
      next = next->next;
9000a842:	683b      	ldr	r3, [r7, #0]
9000a844:	681b      	ldr	r3, [r3, #0]
9000a846:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
9000a848:	68f8      	ldr	r0, [r7, #12]
9000a84a:	f7fe f966 	bl	90008b1a <tcp_seg_free>
    while (next &&
9000a84e:	683b      	ldr	r3, [r7, #0]
9000a850:	2b00      	cmp	r3, #0
9000a852:	d00e      	beq.n	9000a872 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
9000a854:	687b      	ldr	r3, [r7, #4]
9000a856:	891b      	ldrh	r3, [r3, #8]
9000a858:	461a      	mov	r2, r3
9000a85a:	4b1d      	ldr	r3, [pc, #116]	; (9000a8d0 <tcp_oos_insert_segment+0x10c>)
9000a85c:	681b      	ldr	r3, [r3, #0]
9000a85e:	441a      	add	r2, r3
9000a860:	683b      	ldr	r3, [r7, #0]
9000a862:	68db      	ldr	r3, [r3, #12]
9000a864:	685b      	ldr	r3, [r3, #4]
9000a866:	6839      	ldr	r1, [r7, #0]
9000a868:	8909      	ldrh	r1, [r1, #8]
9000a86a:	440b      	add	r3, r1
9000a86c:	1ad3      	subs	r3, r2, r3
    while (next &&
9000a86e:	2b00      	cmp	r3, #0
9000a870:	daca      	bge.n	9000a808 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
9000a872:	683b      	ldr	r3, [r7, #0]
9000a874:	2b00      	cmp	r3, #0
9000a876:	d01e      	beq.n	9000a8b6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
9000a878:	687b      	ldr	r3, [r7, #4]
9000a87a:	891b      	ldrh	r3, [r3, #8]
9000a87c:	461a      	mov	r2, r3
9000a87e:	4b14      	ldr	r3, [pc, #80]	; (9000a8d0 <tcp_oos_insert_segment+0x10c>)
9000a880:	681b      	ldr	r3, [r3, #0]
9000a882:	441a      	add	r2, r3
9000a884:	683b      	ldr	r3, [r7, #0]
9000a886:	68db      	ldr	r3, [r3, #12]
9000a888:	685b      	ldr	r3, [r3, #4]
9000a88a:	1ad3      	subs	r3, r2, r3
    if (next &&
9000a88c:	2b00      	cmp	r3, #0
9000a88e:	dd12      	ble.n	9000a8b6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
9000a890:	683b      	ldr	r3, [r7, #0]
9000a892:	68db      	ldr	r3, [r3, #12]
9000a894:	685b      	ldr	r3, [r3, #4]
9000a896:	b29a      	uxth	r2, r3
9000a898:	4b0d      	ldr	r3, [pc, #52]	; (9000a8d0 <tcp_oos_insert_segment+0x10c>)
9000a89a:	681b      	ldr	r3, [r3, #0]
9000a89c:	b29b      	uxth	r3, r3
9000a89e:	1ad3      	subs	r3, r2, r3
9000a8a0:	b29a      	uxth	r2, r3
9000a8a2:	687b      	ldr	r3, [r7, #4]
9000a8a4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
9000a8a6:	687b      	ldr	r3, [r7, #4]
9000a8a8:	685a      	ldr	r2, [r3, #4]
9000a8aa:	687b      	ldr	r3, [r7, #4]
9000a8ac:	891b      	ldrh	r3, [r3, #8]
9000a8ae:	4619      	mov	r1, r3
9000a8b0:	4610      	mov	r0, r2
9000a8b2:	f7fc fb7f 	bl	90006fb4 <pbuf_realloc>
    }
  }
  cseg->next = next;
9000a8b6:	687b      	ldr	r3, [r7, #4]
9000a8b8:	683a      	ldr	r2, [r7, #0]
9000a8ba:	601a      	str	r2, [r3, #0]
}
9000a8bc:	bf00      	nop
9000a8be:	3714      	adds	r7, #20
9000a8c0:	46bd      	mov	sp, r7
9000a8c2:	bd90      	pop	{r4, r7, pc}
9000a8c4:	90012f24 	.word	0x90012f24
9000a8c8:	900131e4 	.word	0x900131e4
9000a8cc:	90012f70 	.word	0x90012f70
9000a8d0:	2000a8d8 	.word	0x2000a8d8

9000a8d4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
9000a8d4:	b5b0      	push	{r4, r5, r7, lr}
9000a8d6:	b086      	sub	sp, #24
9000a8d8:	af00      	add	r7, sp, #0
9000a8da:	60f8      	str	r0, [r7, #12]
9000a8dc:	60b9      	str	r1, [r7, #8]
9000a8de:	607a      	str	r2, [r7, #4]
9000a8e0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
9000a8e2:	e03e      	b.n	9000a962 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
9000a8e4:	68bb      	ldr	r3, [r7, #8]
9000a8e6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
9000a8e8:	68bb      	ldr	r3, [r7, #8]
9000a8ea:	681b      	ldr	r3, [r3, #0]
9000a8ec:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
9000a8ee:	697b      	ldr	r3, [r7, #20]
9000a8f0:	685b      	ldr	r3, [r3, #4]
9000a8f2:	4618      	mov	r0, r3
9000a8f4:	f7fc fd6c 	bl	900073d0 <pbuf_clen>
9000a8f8:	4603      	mov	r3, r0
9000a8fa:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
9000a8fc:	68fb      	ldr	r3, [r7, #12]
9000a8fe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
9000a902:	8a7a      	ldrh	r2, [r7, #18]
9000a904:	429a      	cmp	r2, r3
9000a906:	d906      	bls.n	9000a916 <tcp_free_acked_segments+0x42>
9000a908:	4b2a      	ldr	r3, [pc, #168]	; (9000a9b4 <tcp_free_acked_segments+0xe0>)
9000a90a:	f240 4257 	movw	r2, #1111	; 0x457
9000a90e:	492a      	ldr	r1, [pc, #168]	; (9000a9b8 <tcp_free_acked_segments+0xe4>)
9000a910:	482a      	ldr	r0, [pc, #168]	; (9000a9bc <tcp_free_acked_segments+0xe8>)
9000a912:	f005 fdeb 	bl	900104ec <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
9000a916:	68fb      	ldr	r3, [r7, #12]
9000a918:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
9000a91c:	8a7b      	ldrh	r3, [r7, #18]
9000a91e:	1ad3      	subs	r3, r2, r3
9000a920:	b29a      	uxth	r2, r3
9000a922:	68fb      	ldr	r3, [r7, #12]
9000a924:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
9000a928:	697b      	ldr	r3, [r7, #20]
9000a92a:	891a      	ldrh	r2, [r3, #8]
9000a92c:	4b24      	ldr	r3, [pc, #144]	; (9000a9c0 <tcp_free_acked_segments+0xec>)
9000a92e:	881b      	ldrh	r3, [r3, #0]
9000a930:	4413      	add	r3, r2
9000a932:	b29a      	uxth	r2, r3
9000a934:	4b22      	ldr	r3, [pc, #136]	; (9000a9c0 <tcp_free_acked_segments+0xec>)
9000a936:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
9000a938:	6978      	ldr	r0, [r7, #20]
9000a93a:	f7fe f8ee 	bl	90008b1a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
9000a93e:	68fb      	ldr	r3, [r7, #12]
9000a940:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
9000a944:	2b00      	cmp	r3, #0
9000a946:	d00c      	beq.n	9000a962 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
9000a948:	68bb      	ldr	r3, [r7, #8]
9000a94a:	2b00      	cmp	r3, #0
9000a94c:	d109      	bne.n	9000a962 <tcp_free_acked_segments+0x8e>
9000a94e:	683b      	ldr	r3, [r7, #0]
9000a950:	2b00      	cmp	r3, #0
9000a952:	d106      	bne.n	9000a962 <tcp_free_acked_segments+0x8e>
9000a954:	4b17      	ldr	r3, [pc, #92]	; (9000a9b4 <tcp_free_acked_segments+0xe0>)
9000a956:	f240 4261 	movw	r2, #1121	; 0x461
9000a95a:	491a      	ldr	r1, [pc, #104]	; (9000a9c4 <tcp_free_acked_segments+0xf0>)
9000a95c:	4817      	ldr	r0, [pc, #92]	; (9000a9bc <tcp_free_acked_segments+0xe8>)
9000a95e:	f005 fdc5 	bl	900104ec <iprintf>
  while (seg_list != NULL &&
9000a962:	68bb      	ldr	r3, [r7, #8]
9000a964:	2b00      	cmp	r3, #0
9000a966:	d020      	beq.n	9000a9aa <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
9000a968:	68bb      	ldr	r3, [r7, #8]
9000a96a:	68db      	ldr	r3, [r3, #12]
9000a96c:	685b      	ldr	r3, [r3, #4]
9000a96e:	4618      	mov	r0, r3
9000a970:	f7fb f8f3 	bl	90005b5a <lwip_htonl>
9000a974:	4604      	mov	r4, r0
9000a976:	68bb      	ldr	r3, [r7, #8]
9000a978:	891b      	ldrh	r3, [r3, #8]
9000a97a:	461d      	mov	r5, r3
9000a97c:	68bb      	ldr	r3, [r7, #8]
9000a97e:	68db      	ldr	r3, [r3, #12]
9000a980:	899b      	ldrh	r3, [r3, #12]
9000a982:	b29b      	uxth	r3, r3
9000a984:	4618      	mov	r0, r3
9000a986:	f7fb f8d3 	bl	90005b30 <lwip_htons>
9000a98a:	4603      	mov	r3, r0
9000a98c:	b2db      	uxtb	r3, r3
9000a98e:	f003 0303 	and.w	r3, r3, #3
9000a992:	2b00      	cmp	r3, #0
9000a994:	d001      	beq.n	9000a99a <tcp_free_acked_segments+0xc6>
9000a996:	2301      	movs	r3, #1
9000a998:	e000      	b.n	9000a99c <tcp_free_acked_segments+0xc8>
9000a99a:	2300      	movs	r3, #0
9000a99c:	442b      	add	r3, r5
9000a99e:	18e2      	adds	r2, r4, r3
9000a9a0:	4b09      	ldr	r3, [pc, #36]	; (9000a9c8 <tcp_free_acked_segments+0xf4>)
9000a9a2:	681b      	ldr	r3, [r3, #0]
9000a9a4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
9000a9a6:	2b00      	cmp	r3, #0
9000a9a8:	dd9c      	ble.n	9000a8e4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
9000a9aa:	68bb      	ldr	r3, [r7, #8]
}
9000a9ac:	4618      	mov	r0, r3
9000a9ae:	3718      	adds	r7, #24
9000a9b0:	46bd      	mov	sp, r7
9000a9b2:	bdb0      	pop	{r4, r5, r7, pc}
9000a9b4:	90012f24 	.word	0x90012f24
9000a9b8:	9001320c 	.word	0x9001320c
9000a9bc:	90012f70 	.word	0x90012f70
9000a9c0:	2000a8e0 	.word	0x2000a8e0
9000a9c4:	90013234 	.word	0x90013234
9000a9c8:	2000a8dc 	.word	0x2000a8dc

9000a9cc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
9000a9cc:	b5b0      	push	{r4, r5, r7, lr}
9000a9ce:	b094      	sub	sp, #80	; 0x50
9000a9d0:	af00      	add	r7, sp, #0
9000a9d2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
9000a9d4:	2300      	movs	r3, #0
9000a9d6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
9000a9d8:	687b      	ldr	r3, [r7, #4]
9000a9da:	2b00      	cmp	r3, #0
9000a9dc:	d106      	bne.n	9000a9ec <tcp_receive+0x20>
9000a9de:	4b91      	ldr	r3, [pc, #580]	; (9000ac24 <tcp_receive+0x258>)
9000a9e0:	f240 427b 	movw	r2, #1147	; 0x47b
9000a9e4:	4990      	ldr	r1, [pc, #576]	; (9000ac28 <tcp_receive+0x25c>)
9000a9e6:	4891      	ldr	r0, [pc, #580]	; (9000ac2c <tcp_receive+0x260>)
9000a9e8:	f005 fd80 	bl	900104ec <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
9000a9ec:	687b      	ldr	r3, [r7, #4]
9000a9ee:	7d1b      	ldrb	r3, [r3, #20]
9000a9f0:	2b03      	cmp	r3, #3
9000a9f2:	d806      	bhi.n	9000aa02 <tcp_receive+0x36>
9000a9f4:	4b8b      	ldr	r3, [pc, #556]	; (9000ac24 <tcp_receive+0x258>)
9000a9f6:	f240 427c 	movw	r2, #1148	; 0x47c
9000a9fa:	498d      	ldr	r1, [pc, #564]	; (9000ac30 <tcp_receive+0x264>)
9000a9fc:	488b      	ldr	r0, [pc, #556]	; (9000ac2c <tcp_receive+0x260>)
9000a9fe:	f005 fd75 	bl	900104ec <iprintf>

  if (flags & TCP_ACK) {
9000aa02:	4b8c      	ldr	r3, [pc, #560]	; (9000ac34 <tcp_receive+0x268>)
9000aa04:	781b      	ldrb	r3, [r3, #0]
9000aa06:	f003 0310 	and.w	r3, r3, #16
9000aa0a:	2b00      	cmp	r3, #0
9000aa0c:	f000 8264 	beq.w	9000aed8 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
9000aa10:	687b      	ldr	r3, [r7, #4]
9000aa12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
9000aa16:	461a      	mov	r2, r3
9000aa18:	687b      	ldr	r3, [r7, #4]
9000aa1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
9000aa1c:	4413      	add	r3, r2
9000aa1e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
9000aa20:	687b      	ldr	r3, [r7, #4]
9000aa22:	6d5a      	ldr	r2, [r3, #84]	; 0x54
9000aa24:	4b84      	ldr	r3, [pc, #528]	; (9000ac38 <tcp_receive+0x26c>)
9000aa26:	681b      	ldr	r3, [r3, #0]
9000aa28:	1ad3      	subs	r3, r2, r3
9000aa2a:	2b00      	cmp	r3, #0
9000aa2c:	db1b      	blt.n	9000aa66 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
9000aa2e:	687b      	ldr	r3, [r7, #4]
9000aa30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
9000aa32:	4b81      	ldr	r3, [pc, #516]	; (9000ac38 <tcp_receive+0x26c>)
9000aa34:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
9000aa36:	429a      	cmp	r2, r3
9000aa38:	d106      	bne.n	9000aa48 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
9000aa3a:	687b      	ldr	r3, [r7, #4]
9000aa3c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
9000aa3e:	4b7f      	ldr	r3, [pc, #508]	; (9000ac3c <tcp_receive+0x270>)
9000aa40:	681b      	ldr	r3, [r3, #0]
9000aa42:	1ad3      	subs	r3, r2, r3
9000aa44:	2b00      	cmp	r3, #0
9000aa46:	db0e      	blt.n	9000aa66 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
9000aa48:	687b      	ldr	r3, [r7, #4]
9000aa4a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
9000aa4c:	4b7b      	ldr	r3, [pc, #492]	; (9000ac3c <tcp_receive+0x270>)
9000aa4e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
9000aa50:	429a      	cmp	r2, r3
9000aa52:	d125      	bne.n	9000aaa0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
9000aa54:	4b7a      	ldr	r3, [pc, #488]	; (9000ac40 <tcp_receive+0x274>)
9000aa56:	681b      	ldr	r3, [r3, #0]
9000aa58:	89db      	ldrh	r3, [r3, #14]
9000aa5a:	b29a      	uxth	r2, r3
9000aa5c:	687b      	ldr	r3, [r7, #4]
9000aa5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
9000aa62:	429a      	cmp	r2, r3
9000aa64:	d91c      	bls.n	9000aaa0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
9000aa66:	4b76      	ldr	r3, [pc, #472]	; (9000ac40 <tcp_receive+0x274>)
9000aa68:	681b      	ldr	r3, [r3, #0]
9000aa6a:	89db      	ldrh	r3, [r3, #14]
9000aa6c:	b29a      	uxth	r2, r3
9000aa6e:	687b      	ldr	r3, [r7, #4]
9000aa70:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
9000aa74:	687b      	ldr	r3, [r7, #4]
9000aa76:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
9000aa7a:	687b      	ldr	r3, [r7, #4]
9000aa7c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
9000aa80:	429a      	cmp	r2, r3
9000aa82:	d205      	bcs.n	9000aa90 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
9000aa84:	687b      	ldr	r3, [r7, #4]
9000aa86:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
9000aa8a:	687b      	ldr	r3, [r7, #4]
9000aa8c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
9000aa90:	4b69      	ldr	r3, [pc, #420]	; (9000ac38 <tcp_receive+0x26c>)
9000aa92:	681a      	ldr	r2, [r3, #0]
9000aa94:	687b      	ldr	r3, [r7, #4]
9000aa96:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
9000aa98:	4b68      	ldr	r3, [pc, #416]	; (9000ac3c <tcp_receive+0x270>)
9000aa9a:	681a      	ldr	r2, [r3, #0]
9000aa9c:	687b      	ldr	r3, [r7, #4]
9000aa9e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
9000aaa0:	4b66      	ldr	r3, [pc, #408]	; (9000ac3c <tcp_receive+0x270>)
9000aaa2:	681a      	ldr	r2, [r3, #0]
9000aaa4:	687b      	ldr	r3, [r7, #4]
9000aaa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
9000aaa8:	1ad3      	subs	r3, r2, r3
9000aaaa:	2b00      	cmp	r3, #0
9000aaac:	dc58      	bgt.n	9000ab60 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
9000aaae:	4b65      	ldr	r3, [pc, #404]	; (9000ac44 <tcp_receive+0x278>)
9000aab0:	881b      	ldrh	r3, [r3, #0]
9000aab2:	2b00      	cmp	r3, #0
9000aab4:	d14b      	bne.n	9000ab4e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
9000aab6:	687b      	ldr	r3, [r7, #4]
9000aab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
9000aaba:	687a      	ldr	r2, [r7, #4]
9000aabc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
9000aac0:	4413      	add	r3, r2
9000aac2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
9000aac4:	429a      	cmp	r2, r3
9000aac6:	d142      	bne.n	9000ab4e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
9000aac8:	687b      	ldr	r3, [r7, #4]
9000aaca:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
9000aace:	2b00      	cmp	r3, #0
9000aad0:	db3d      	blt.n	9000ab4e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
9000aad2:	687b      	ldr	r3, [r7, #4]
9000aad4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
9000aad6:	4b59      	ldr	r3, [pc, #356]	; (9000ac3c <tcp_receive+0x270>)
9000aad8:	681b      	ldr	r3, [r3, #0]
9000aada:	429a      	cmp	r2, r3
9000aadc:	d137      	bne.n	9000ab4e <tcp_receive+0x182>
              found_dupack = 1;
9000aade:	2301      	movs	r3, #1
9000aae0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
9000aae2:	687b      	ldr	r3, [r7, #4]
9000aae4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
9000aae8:	2bff      	cmp	r3, #255	; 0xff
9000aaea:	d007      	beq.n	9000aafc <tcp_receive+0x130>
                ++pcb->dupacks;
9000aaec:	687b      	ldr	r3, [r7, #4]
9000aaee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
9000aaf2:	3301      	adds	r3, #1
9000aaf4:	b2da      	uxtb	r2, r3
9000aaf6:	687b      	ldr	r3, [r7, #4]
9000aaf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
9000aafc:	687b      	ldr	r3, [r7, #4]
9000aafe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
9000ab02:	2b03      	cmp	r3, #3
9000ab04:	d91b      	bls.n	9000ab3e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
9000ab06:	687b      	ldr	r3, [r7, #4]
9000ab08:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
9000ab0c:	687b      	ldr	r3, [r7, #4]
9000ab0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000ab10:	4413      	add	r3, r2
9000ab12:	b29a      	uxth	r2, r3
9000ab14:	687b      	ldr	r3, [r7, #4]
9000ab16:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
9000ab1a:	429a      	cmp	r2, r3
9000ab1c:	d30a      	bcc.n	9000ab34 <tcp_receive+0x168>
9000ab1e:	687b      	ldr	r3, [r7, #4]
9000ab20:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
9000ab24:	687b      	ldr	r3, [r7, #4]
9000ab26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000ab28:	4413      	add	r3, r2
9000ab2a:	b29a      	uxth	r2, r3
9000ab2c:	687b      	ldr	r3, [r7, #4]
9000ab2e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
9000ab32:	e004      	b.n	9000ab3e <tcp_receive+0x172>
9000ab34:	687b      	ldr	r3, [r7, #4]
9000ab36:	f64f 72ff 	movw	r2, #65535	; 0xffff
9000ab3a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
9000ab3e:	687b      	ldr	r3, [r7, #4]
9000ab40:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
9000ab44:	2b02      	cmp	r3, #2
9000ab46:	d902      	bls.n	9000ab4e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
9000ab48:	6878      	ldr	r0, [r7, #4]
9000ab4a:	f002 fb43 	bl	9000d1d4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
9000ab4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
9000ab50:	2b00      	cmp	r3, #0
9000ab52:	f040 8161 	bne.w	9000ae18 <tcp_receive+0x44c>
        pcb->dupacks = 0;
9000ab56:	687b      	ldr	r3, [r7, #4]
9000ab58:	2200      	movs	r2, #0
9000ab5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
9000ab5e:	e15b      	b.n	9000ae18 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
9000ab60:	4b36      	ldr	r3, [pc, #216]	; (9000ac3c <tcp_receive+0x270>)
9000ab62:	681a      	ldr	r2, [r3, #0]
9000ab64:	687b      	ldr	r3, [r7, #4]
9000ab66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
9000ab68:	1ad3      	subs	r3, r2, r3
9000ab6a:	3b01      	subs	r3, #1
9000ab6c:	2b00      	cmp	r3, #0
9000ab6e:	f2c0 814e 	blt.w	9000ae0e <tcp_receive+0x442>
9000ab72:	4b32      	ldr	r3, [pc, #200]	; (9000ac3c <tcp_receive+0x270>)
9000ab74:	681a      	ldr	r2, [r3, #0]
9000ab76:	687b      	ldr	r3, [r7, #4]
9000ab78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9000ab7a:	1ad3      	subs	r3, r2, r3
9000ab7c:	2b00      	cmp	r3, #0
9000ab7e:	f300 8146 	bgt.w	9000ae0e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
9000ab82:	687b      	ldr	r3, [r7, #4]
9000ab84:	8b5b      	ldrh	r3, [r3, #26]
9000ab86:	f003 0304 	and.w	r3, r3, #4
9000ab8a:	2b00      	cmp	r3, #0
9000ab8c:	d010      	beq.n	9000abb0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
9000ab8e:	687b      	ldr	r3, [r7, #4]
9000ab90:	8b5b      	ldrh	r3, [r3, #26]
9000ab92:	f023 0304 	bic.w	r3, r3, #4
9000ab96:	b29a      	uxth	r2, r3
9000ab98:	687b      	ldr	r3, [r7, #4]
9000ab9a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
9000ab9c:	687b      	ldr	r3, [r7, #4]
9000ab9e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
9000aba2:	687b      	ldr	r3, [r7, #4]
9000aba4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
9000aba8:	687b      	ldr	r3, [r7, #4]
9000abaa:	2200      	movs	r2, #0
9000abac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
9000abb0:	687b      	ldr	r3, [r7, #4]
9000abb2:	2200      	movs	r2, #0
9000abb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
9000abb8:	687b      	ldr	r3, [r7, #4]
9000abba:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
9000abbe:	10db      	asrs	r3, r3, #3
9000abc0:	b21b      	sxth	r3, r3
9000abc2:	b29a      	uxth	r2, r3
9000abc4:	687b      	ldr	r3, [r7, #4]
9000abc6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
9000abca:	b29b      	uxth	r3, r3
9000abcc:	4413      	add	r3, r2
9000abce:	b29b      	uxth	r3, r3
9000abd0:	b21a      	sxth	r2, r3
9000abd2:	687b      	ldr	r3, [r7, #4]
9000abd4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
9000abd8:	4b18      	ldr	r3, [pc, #96]	; (9000ac3c <tcp_receive+0x270>)
9000abda:	681b      	ldr	r3, [r3, #0]
9000abdc:	b29a      	uxth	r2, r3
9000abde:	687b      	ldr	r3, [r7, #4]
9000abe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
9000abe2:	b29b      	uxth	r3, r3
9000abe4:	1ad3      	subs	r3, r2, r3
9000abe6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
9000abe8:	687b      	ldr	r3, [r7, #4]
9000abea:	2200      	movs	r2, #0
9000abec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
9000abf0:	4b12      	ldr	r3, [pc, #72]	; (9000ac3c <tcp_receive+0x270>)
9000abf2:	681a      	ldr	r2, [r3, #0]
9000abf4:	687b      	ldr	r3, [r7, #4]
9000abf6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
9000abf8:	687b      	ldr	r3, [r7, #4]
9000abfa:	7d1b      	ldrb	r3, [r3, #20]
9000abfc:	2b03      	cmp	r3, #3
9000abfe:	f240 8097 	bls.w	9000ad30 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
9000ac02:	687b      	ldr	r3, [r7, #4]
9000ac04:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
9000ac08:	687b      	ldr	r3, [r7, #4]
9000ac0a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
9000ac0e:	429a      	cmp	r2, r3
9000ac10:	d245      	bcs.n	9000ac9e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
9000ac12:	687b      	ldr	r3, [r7, #4]
9000ac14:	8b5b      	ldrh	r3, [r3, #26]
9000ac16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
9000ac1a:	2b00      	cmp	r3, #0
9000ac1c:	d014      	beq.n	9000ac48 <tcp_receive+0x27c>
9000ac1e:	2301      	movs	r3, #1
9000ac20:	e013      	b.n	9000ac4a <tcp_receive+0x27e>
9000ac22:	bf00      	nop
9000ac24:	90012f24 	.word	0x90012f24
9000ac28:	90013254 	.word	0x90013254
9000ac2c:	90012f70 	.word	0x90012f70
9000ac30:	90013270 	.word	0x90013270
9000ac34:	2000a8e4 	.word	0x2000a8e4
9000ac38:	2000a8d8 	.word	0x2000a8d8
9000ac3c:	2000a8dc 	.word	0x2000a8dc
9000ac40:	2000a8c8 	.word	0x2000a8c8
9000ac44:	2000a8e2 	.word	0x2000a8e2
9000ac48:	2302      	movs	r3, #2
9000ac4a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
9000ac4e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
9000ac52:	b29a      	uxth	r2, r3
9000ac54:	687b      	ldr	r3, [r7, #4]
9000ac56:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000ac58:	fb12 f303 	smulbb	r3, r2, r3
9000ac5c:	b29b      	uxth	r3, r3
9000ac5e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
9000ac60:	4293      	cmp	r3, r2
9000ac62:	bf28      	it	cs
9000ac64:	4613      	movcs	r3, r2
9000ac66:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
9000ac68:	687b      	ldr	r3, [r7, #4]
9000ac6a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
9000ac6e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
9000ac70:	4413      	add	r3, r2
9000ac72:	b29a      	uxth	r2, r3
9000ac74:	687b      	ldr	r3, [r7, #4]
9000ac76:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
9000ac7a:	429a      	cmp	r2, r3
9000ac7c:	d309      	bcc.n	9000ac92 <tcp_receive+0x2c6>
9000ac7e:	687b      	ldr	r3, [r7, #4]
9000ac80:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
9000ac84:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
9000ac86:	4413      	add	r3, r2
9000ac88:	b29a      	uxth	r2, r3
9000ac8a:	687b      	ldr	r3, [r7, #4]
9000ac8c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
9000ac90:	e04e      	b.n	9000ad30 <tcp_receive+0x364>
9000ac92:	687b      	ldr	r3, [r7, #4]
9000ac94:	f64f 72ff 	movw	r2, #65535	; 0xffff
9000ac98:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
9000ac9c:	e048      	b.n	9000ad30 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
9000ac9e:	687b      	ldr	r3, [r7, #4]
9000aca0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
9000aca4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
9000aca6:	4413      	add	r3, r2
9000aca8:	b29a      	uxth	r2, r3
9000acaa:	687b      	ldr	r3, [r7, #4]
9000acac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
9000acb0:	429a      	cmp	r2, r3
9000acb2:	d309      	bcc.n	9000acc8 <tcp_receive+0x2fc>
9000acb4:	687b      	ldr	r3, [r7, #4]
9000acb6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
9000acba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
9000acbc:	4413      	add	r3, r2
9000acbe:	b29a      	uxth	r2, r3
9000acc0:	687b      	ldr	r3, [r7, #4]
9000acc2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
9000acc6:	e004      	b.n	9000acd2 <tcp_receive+0x306>
9000acc8:	687b      	ldr	r3, [r7, #4]
9000acca:	f64f 72ff 	movw	r2, #65535	; 0xffff
9000acce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
9000acd2:	687b      	ldr	r3, [r7, #4]
9000acd4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
9000acd8:	687b      	ldr	r3, [r7, #4]
9000acda:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
9000acde:	429a      	cmp	r2, r3
9000ace0:	d326      	bcc.n	9000ad30 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
9000ace2:	687b      	ldr	r3, [r7, #4]
9000ace4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
9000ace8:	687b      	ldr	r3, [r7, #4]
9000acea:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
9000acee:	1ad3      	subs	r3, r2, r3
9000acf0:	b29a      	uxth	r2, r3
9000acf2:	687b      	ldr	r3, [r7, #4]
9000acf4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
9000acf8:	687b      	ldr	r3, [r7, #4]
9000acfa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
9000acfe:	687b      	ldr	r3, [r7, #4]
9000ad00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000ad02:	4413      	add	r3, r2
9000ad04:	b29a      	uxth	r2, r3
9000ad06:	687b      	ldr	r3, [r7, #4]
9000ad08:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
9000ad0c:	429a      	cmp	r2, r3
9000ad0e:	d30a      	bcc.n	9000ad26 <tcp_receive+0x35a>
9000ad10:	687b      	ldr	r3, [r7, #4]
9000ad12:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
9000ad16:	687b      	ldr	r3, [r7, #4]
9000ad18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000ad1a:	4413      	add	r3, r2
9000ad1c:	b29a      	uxth	r2, r3
9000ad1e:	687b      	ldr	r3, [r7, #4]
9000ad20:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
9000ad24:	e004      	b.n	9000ad30 <tcp_receive+0x364>
9000ad26:	687b      	ldr	r3, [r7, #4]
9000ad28:	f64f 72ff 	movw	r2, #65535	; 0xffff
9000ad2c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
9000ad30:	687b      	ldr	r3, [r7, #4]
9000ad32:	6f19      	ldr	r1, [r3, #112]	; 0x70
9000ad34:	687b      	ldr	r3, [r7, #4]
9000ad36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000ad38:	4a98      	ldr	r2, [pc, #608]	; (9000af9c <tcp_receive+0x5d0>)
9000ad3a:	6878      	ldr	r0, [r7, #4]
9000ad3c:	f7ff fdca 	bl	9000a8d4 <tcp_free_acked_segments>
9000ad40:	4602      	mov	r2, r0
9000ad42:	687b      	ldr	r3, [r7, #4]
9000ad44:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
9000ad46:	687b      	ldr	r3, [r7, #4]
9000ad48:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
9000ad4a:	687b      	ldr	r3, [r7, #4]
9000ad4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000ad4e:	4a94      	ldr	r2, [pc, #592]	; (9000afa0 <tcp_receive+0x5d4>)
9000ad50:	6878      	ldr	r0, [r7, #4]
9000ad52:	f7ff fdbf 	bl	9000a8d4 <tcp_free_acked_segments>
9000ad56:	4602      	mov	r2, r0
9000ad58:	687b      	ldr	r3, [r7, #4]
9000ad5a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
9000ad5c:	687b      	ldr	r3, [r7, #4]
9000ad5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000ad60:	2b00      	cmp	r3, #0
9000ad62:	d104      	bne.n	9000ad6e <tcp_receive+0x3a2>
        pcb->rtime = -1;
9000ad64:	687b      	ldr	r3, [r7, #4]
9000ad66:	f64f 72ff 	movw	r2, #65535	; 0xffff
9000ad6a:	861a      	strh	r2, [r3, #48]	; 0x30
9000ad6c:	e002      	b.n	9000ad74 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
9000ad6e:	687b      	ldr	r3, [r7, #4]
9000ad70:	2200      	movs	r2, #0
9000ad72:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
9000ad74:	687b      	ldr	r3, [r7, #4]
9000ad76:	2200      	movs	r2, #0
9000ad78:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
9000ad7a:	687b      	ldr	r3, [r7, #4]
9000ad7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000ad7e:	2b00      	cmp	r3, #0
9000ad80:	d103      	bne.n	9000ad8a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
9000ad82:	687b      	ldr	r3, [r7, #4]
9000ad84:	2200      	movs	r2, #0
9000ad86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
9000ad8a:	687b      	ldr	r3, [r7, #4]
9000ad8c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
9000ad90:	4b84      	ldr	r3, [pc, #528]	; (9000afa4 <tcp_receive+0x5d8>)
9000ad92:	881b      	ldrh	r3, [r3, #0]
9000ad94:	4413      	add	r3, r2
9000ad96:	b29a      	uxth	r2, r3
9000ad98:	687b      	ldr	r3, [r7, #4]
9000ad9a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
9000ad9e:	687b      	ldr	r3, [r7, #4]
9000ada0:	8b5b      	ldrh	r3, [r3, #26]
9000ada2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
9000ada6:	2b00      	cmp	r3, #0
9000ada8:	d035      	beq.n	9000ae16 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
9000adaa:	687b      	ldr	r3, [r7, #4]
9000adac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000adae:	2b00      	cmp	r3, #0
9000adb0:	d118      	bne.n	9000ade4 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
9000adb2:	687b      	ldr	r3, [r7, #4]
9000adb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000adb6:	2b00      	cmp	r3, #0
9000adb8:	d00c      	beq.n	9000add4 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
9000adba:	687b      	ldr	r3, [r7, #4]
9000adbc:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
9000adbe:	687b      	ldr	r3, [r7, #4]
9000adc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000adc2:	68db      	ldr	r3, [r3, #12]
9000adc4:	685b      	ldr	r3, [r3, #4]
9000adc6:	4618      	mov	r0, r3
9000adc8:	f7fa fec7 	bl	90005b5a <lwip_htonl>
9000adcc:	4603      	mov	r3, r0
9000adce:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
9000add0:	2b00      	cmp	r3, #0
9000add2:	dc20      	bgt.n	9000ae16 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
9000add4:	687b      	ldr	r3, [r7, #4]
9000add6:	8b5b      	ldrh	r3, [r3, #26]
9000add8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
9000addc:	b29a      	uxth	r2, r3
9000adde:	687b      	ldr	r3, [r7, #4]
9000ade0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
9000ade2:	e018      	b.n	9000ae16 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
9000ade4:	687b      	ldr	r3, [r7, #4]
9000ade6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
9000ade8:	687b      	ldr	r3, [r7, #4]
9000adea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000adec:	68db      	ldr	r3, [r3, #12]
9000adee:	685b      	ldr	r3, [r3, #4]
9000adf0:	4618      	mov	r0, r3
9000adf2:	f7fa feb2 	bl	90005b5a <lwip_htonl>
9000adf6:	4603      	mov	r3, r0
9000adf8:	1ae3      	subs	r3, r4, r3
9000adfa:	2b00      	cmp	r3, #0
9000adfc:	dc0b      	bgt.n	9000ae16 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
9000adfe:	687b      	ldr	r3, [r7, #4]
9000ae00:	8b5b      	ldrh	r3, [r3, #26]
9000ae02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
9000ae06:	b29a      	uxth	r2, r3
9000ae08:	687b      	ldr	r3, [r7, #4]
9000ae0a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
9000ae0c:	e003      	b.n	9000ae16 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
9000ae0e:	6878      	ldr	r0, [r7, #4]
9000ae10:	f002 fbce 	bl	9000d5b0 <tcp_send_empty_ack>
9000ae14:	e000      	b.n	9000ae18 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
9000ae16:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
9000ae18:	687b      	ldr	r3, [r7, #4]
9000ae1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
9000ae1c:	2b00      	cmp	r3, #0
9000ae1e:	d05b      	beq.n	9000aed8 <tcp_receive+0x50c>
9000ae20:	687b      	ldr	r3, [r7, #4]
9000ae22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
9000ae24:	4b60      	ldr	r3, [pc, #384]	; (9000afa8 <tcp_receive+0x5dc>)
9000ae26:	681b      	ldr	r3, [r3, #0]
9000ae28:	1ad3      	subs	r3, r2, r3
9000ae2a:	2b00      	cmp	r3, #0
9000ae2c:	da54      	bge.n	9000aed8 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
9000ae2e:	4b5f      	ldr	r3, [pc, #380]	; (9000afac <tcp_receive+0x5e0>)
9000ae30:	681b      	ldr	r3, [r3, #0]
9000ae32:	b29a      	uxth	r2, r3
9000ae34:	687b      	ldr	r3, [r7, #4]
9000ae36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
9000ae38:	b29b      	uxth	r3, r3
9000ae3a:	1ad3      	subs	r3, r2, r3
9000ae3c:	b29b      	uxth	r3, r3
9000ae3e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
9000ae42:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
9000ae46:	687b      	ldr	r3, [r7, #4]
9000ae48:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
9000ae4c:	10db      	asrs	r3, r3, #3
9000ae4e:	b21b      	sxth	r3, r3
9000ae50:	b29b      	uxth	r3, r3
9000ae52:	1ad3      	subs	r3, r2, r3
9000ae54:	b29b      	uxth	r3, r3
9000ae56:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
9000ae5a:	687b      	ldr	r3, [r7, #4]
9000ae5c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
9000ae60:	b29a      	uxth	r2, r3
9000ae62:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
9000ae66:	4413      	add	r3, r2
9000ae68:	b29b      	uxth	r3, r3
9000ae6a:	b21a      	sxth	r2, r3
9000ae6c:	687b      	ldr	r3, [r7, #4]
9000ae6e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
9000ae70:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
9000ae74:	2b00      	cmp	r3, #0
9000ae76:	da05      	bge.n	9000ae84 <tcp_receive+0x4b8>
        m = (s16_t) - m;
9000ae78:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
9000ae7c:	425b      	negs	r3, r3
9000ae7e:	b29b      	uxth	r3, r3
9000ae80:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
9000ae84:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
9000ae88:	687b      	ldr	r3, [r7, #4]
9000ae8a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
9000ae8e:	109b      	asrs	r3, r3, #2
9000ae90:	b21b      	sxth	r3, r3
9000ae92:	b29b      	uxth	r3, r3
9000ae94:	1ad3      	subs	r3, r2, r3
9000ae96:	b29b      	uxth	r3, r3
9000ae98:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
9000ae9c:	687b      	ldr	r3, [r7, #4]
9000ae9e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
9000aea2:	b29a      	uxth	r2, r3
9000aea4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
9000aea8:	4413      	add	r3, r2
9000aeaa:	b29b      	uxth	r3, r3
9000aeac:	b21a      	sxth	r2, r3
9000aeae:	687b      	ldr	r3, [r7, #4]
9000aeb0:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
9000aeb2:	687b      	ldr	r3, [r7, #4]
9000aeb4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
9000aeb8:	10db      	asrs	r3, r3, #3
9000aeba:	b21b      	sxth	r3, r3
9000aebc:	b29a      	uxth	r2, r3
9000aebe:	687b      	ldr	r3, [r7, #4]
9000aec0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
9000aec4:	b29b      	uxth	r3, r3
9000aec6:	4413      	add	r3, r2
9000aec8:	b29b      	uxth	r3, r3
9000aeca:	b21a      	sxth	r2, r3
9000aecc:	687b      	ldr	r3, [r7, #4]
9000aece:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
9000aed2:	687b      	ldr	r3, [r7, #4]
9000aed4:	2200      	movs	r2, #0
9000aed6:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
9000aed8:	4b35      	ldr	r3, [pc, #212]	; (9000afb0 <tcp_receive+0x5e4>)
9000aeda:	881b      	ldrh	r3, [r3, #0]
9000aedc:	2b00      	cmp	r3, #0
9000aede:	f000 84e2 	beq.w	9000b8a6 <tcp_receive+0xeda>
9000aee2:	687b      	ldr	r3, [r7, #4]
9000aee4:	7d1b      	ldrb	r3, [r3, #20]
9000aee6:	2b06      	cmp	r3, #6
9000aee8:	f200 84dd 	bhi.w	9000b8a6 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
9000aeec:	687b      	ldr	r3, [r7, #4]
9000aeee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
9000aef0:	4b30      	ldr	r3, [pc, #192]	; (9000afb4 <tcp_receive+0x5e8>)
9000aef2:	681b      	ldr	r3, [r3, #0]
9000aef4:	1ad3      	subs	r3, r2, r3
9000aef6:	3b01      	subs	r3, #1
9000aef8:	2b00      	cmp	r3, #0
9000aefa:	f2c0 808f 	blt.w	9000b01c <tcp_receive+0x650>
9000aefe:	687b      	ldr	r3, [r7, #4]
9000af00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
9000af02:	4b2b      	ldr	r3, [pc, #172]	; (9000afb0 <tcp_receive+0x5e4>)
9000af04:	881b      	ldrh	r3, [r3, #0]
9000af06:	4619      	mov	r1, r3
9000af08:	4b2a      	ldr	r3, [pc, #168]	; (9000afb4 <tcp_receive+0x5e8>)
9000af0a:	681b      	ldr	r3, [r3, #0]
9000af0c:	440b      	add	r3, r1
9000af0e:	1ad3      	subs	r3, r2, r3
9000af10:	3301      	adds	r3, #1
9000af12:	2b00      	cmp	r3, #0
9000af14:	f300 8082 	bgt.w	9000b01c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
9000af18:	4b27      	ldr	r3, [pc, #156]	; (9000afb8 <tcp_receive+0x5ec>)
9000af1a:	685b      	ldr	r3, [r3, #4]
9000af1c:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
9000af1e:	687b      	ldr	r3, [r7, #4]
9000af20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
9000af22:	4b24      	ldr	r3, [pc, #144]	; (9000afb4 <tcp_receive+0x5e8>)
9000af24:	681b      	ldr	r3, [r3, #0]
9000af26:	1ad3      	subs	r3, r2, r3
9000af28:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
9000af2a:	4b23      	ldr	r3, [pc, #140]	; (9000afb8 <tcp_receive+0x5ec>)
9000af2c:	685b      	ldr	r3, [r3, #4]
9000af2e:	2b00      	cmp	r3, #0
9000af30:	d106      	bne.n	9000af40 <tcp_receive+0x574>
9000af32:	4b22      	ldr	r3, [pc, #136]	; (9000afbc <tcp_receive+0x5f0>)
9000af34:	f240 5294 	movw	r2, #1428	; 0x594
9000af38:	4921      	ldr	r1, [pc, #132]	; (9000afc0 <tcp_receive+0x5f4>)
9000af3a:	4822      	ldr	r0, [pc, #136]	; (9000afc4 <tcp_receive+0x5f8>)
9000af3c:	f005 fad6 	bl	900104ec <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
9000af40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000af42:	f64f 72fe 	movw	r2, #65534	; 0xfffe
9000af46:	4293      	cmp	r3, r2
9000af48:	d906      	bls.n	9000af58 <tcp_receive+0x58c>
9000af4a:	4b1c      	ldr	r3, [pc, #112]	; (9000afbc <tcp_receive+0x5f0>)
9000af4c:	f240 5295 	movw	r2, #1429	; 0x595
9000af50:	491d      	ldr	r1, [pc, #116]	; (9000afc8 <tcp_receive+0x5fc>)
9000af52:	481c      	ldr	r0, [pc, #112]	; (9000afc4 <tcp_receive+0x5f8>)
9000af54:	f005 faca 	bl	900104ec <iprintf>
      off = (u16_t)off32;
9000af58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000af5a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
9000af5e:	4b16      	ldr	r3, [pc, #88]	; (9000afb8 <tcp_receive+0x5ec>)
9000af60:	685b      	ldr	r3, [r3, #4]
9000af62:	891b      	ldrh	r3, [r3, #8]
9000af64:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
9000af68:	429a      	cmp	r2, r3
9000af6a:	d906      	bls.n	9000af7a <tcp_receive+0x5ae>
9000af6c:	4b13      	ldr	r3, [pc, #76]	; (9000afbc <tcp_receive+0x5f0>)
9000af6e:	f240 5297 	movw	r2, #1431	; 0x597
9000af72:	4916      	ldr	r1, [pc, #88]	; (9000afcc <tcp_receive+0x600>)
9000af74:	4813      	ldr	r0, [pc, #76]	; (9000afc4 <tcp_receive+0x5f8>)
9000af76:	f005 fab9 	bl	900104ec <iprintf>
      inseg.len -= off;
9000af7a:	4b0f      	ldr	r3, [pc, #60]	; (9000afb8 <tcp_receive+0x5ec>)
9000af7c:	891a      	ldrh	r2, [r3, #8]
9000af7e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
9000af82:	1ad3      	subs	r3, r2, r3
9000af84:	b29a      	uxth	r2, r3
9000af86:	4b0c      	ldr	r3, [pc, #48]	; (9000afb8 <tcp_receive+0x5ec>)
9000af88:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
9000af8a:	4b0b      	ldr	r3, [pc, #44]	; (9000afb8 <tcp_receive+0x5ec>)
9000af8c:	685b      	ldr	r3, [r3, #4]
9000af8e:	891a      	ldrh	r2, [r3, #8]
9000af90:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
9000af94:	1ad3      	subs	r3, r2, r3
9000af96:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
9000af98:	e02a      	b.n	9000aff0 <tcp_receive+0x624>
9000af9a:	bf00      	nop
9000af9c:	9001328c 	.word	0x9001328c
9000afa0:	90013294 	.word	0x90013294
9000afa4:	2000a8e0 	.word	0x2000a8e0
9000afa8:	2000a8dc 	.word	0x2000a8dc
9000afac:	2000a8a0 	.word	0x2000a8a0
9000afb0:	2000a8e2 	.word	0x2000a8e2
9000afb4:	2000a8d8 	.word	0x2000a8d8
9000afb8:	2000a8b8 	.word	0x2000a8b8
9000afbc:	90012f24 	.word	0x90012f24
9000afc0:	9001329c 	.word	0x9001329c
9000afc4:	90012f70 	.word	0x90012f70
9000afc8:	900132ac 	.word	0x900132ac
9000afcc:	900132bc 	.word	0x900132bc
        off -= p->len;
9000afd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
9000afd2:	895b      	ldrh	r3, [r3, #10]
9000afd4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
9000afd8:	1ad3      	subs	r3, r2, r3
9000afda:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
9000afde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
9000afe0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
9000afe2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
9000afe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
9000afe6:	2200      	movs	r2, #0
9000afe8:	815a      	strh	r2, [r3, #10]
        p = p->next;
9000afea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
9000afec:	681b      	ldr	r3, [r3, #0]
9000afee:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
9000aff0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
9000aff2:	895b      	ldrh	r3, [r3, #10]
9000aff4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
9000aff8:	429a      	cmp	r2, r3
9000affa:	d8e9      	bhi.n	9000afd0 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
9000affc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
9000b000:	4619      	mov	r1, r3
9000b002:	6c78      	ldr	r0, [r7, #68]	; 0x44
9000b004:	f7fc f8d6 	bl	900071b4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
9000b008:	687b      	ldr	r3, [r7, #4]
9000b00a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000b00c:	4a91      	ldr	r2, [pc, #580]	; (9000b254 <tcp_receive+0x888>)
9000b00e:	6013      	str	r3, [r2, #0]
9000b010:	4b91      	ldr	r3, [pc, #580]	; (9000b258 <tcp_receive+0x88c>)
9000b012:	68db      	ldr	r3, [r3, #12]
9000b014:	4a8f      	ldr	r2, [pc, #572]	; (9000b254 <tcp_receive+0x888>)
9000b016:	6812      	ldr	r2, [r2, #0]
9000b018:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
9000b01a:	e00d      	b.n	9000b038 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
9000b01c:	4b8d      	ldr	r3, [pc, #564]	; (9000b254 <tcp_receive+0x888>)
9000b01e:	681a      	ldr	r2, [r3, #0]
9000b020:	687b      	ldr	r3, [r7, #4]
9000b022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000b024:	1ad3      	subs	r3, r2, r3
9000b026:	2b00      	cmp	r3, #0
9000b028:	da06      	bge.n	9000b038 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
9000b02a:	687b      	ldr	r3, [r7, #4]
9000b02c:	8b5b      	ldrh	r3, [r3, #26]
9000b02e:	f043 0302 	orr.w	r3, r3, #2
9000b032:	b29a      	uxth	r2, r3
9000b034:	687b      	ldr	r3, [r7, #4]
9000b036:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
9000b038:	4b86      	ldr	r3, [pc, #536]	; (9000b254 <tcp_receive+0x888>)
9000b03a:	681a      	ldr	r2, [r3, #0]
9000b03c:	687b      	ldr	r3, [r7, #4]
9000b03e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000b040:	1ad3      	subs	r3, r2, r3
9000b042:	2b00      	cmp	r3, #0
9000b044:	f2c0 842a 	blt.w	9000b89c <tcp_receive+0xed0>
9000b048:	4b82      	ldr	r3, [pc, #520]	; (9000b254 <tcp_receive+0x888>)
9000b04a:	681a      	ldr	r2, [r3, #0]
9000b04c:	687b      	ldr	r3, [r7, #4]
9000b04e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000b050:	6879      	ldr	r1, [r7, #4]
9000b052:	8d09      	ldrh	r1, [r1, #40]	; 0x28
9000b054:	440b      	add	r3, r1
9000b056:	1ad3      	subs	r3, r2, r3
9000b058:	3301      	adds	r3, #1
9000b05a:	2b00      	cmp	r3, #0
9000b05c:	f300 841e 	bgt.w	9000b89c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
9000b060:	687b      	ldr	r3, [r7, #4]
9000b062:	6a5a      	ldr	r2, [r3, #36]	; 0x24
9000b064:	4b7b      	ldr	r3, [pc, #492]	; (9000b254 <tcp_receive+0x888>)
9000b066:	681b      	ldr	r3, [r3, #0]
9000b068:	429a      	cmp	r2, r3
9000b06a:	f040 829a 	bne.w	9000b5a2 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
9000b06e:	4b7a      	ldr	r3, [pc, #488]	; (9000b258 <tcp_receive+0x88c>)
9000b070:	891c      	ldrh	r4, [r3, #8]
9000b072:	4b79      	ldr	r3, [pc, #484]	; (9000b258 <tcp_receive+0x88c>)
9000b074:	68db      	ldr	r3, [r3, #12]
9000b076:	899b      	ldrh	r3, [r3, #12]
9000b078:	b29b      	uxth	r3, r3
9000b07a:	4618      	mov	r0, r3
9000b07c:	f7fa fd58 	bl	90005b30 <lwip_htons>
9000b080:	4603      	mov	r3, r0
9000b082:	b2db      	uxtb	r3, r3
9000b084:	f003 0303 	and.w	r3, r3, #3
9000b088:	2b00      	cmp	r3, #0
9000b08a:	d001      	beq.n	9000b090 <tcp_receive+0x6c4>
9000b08c:	2301      	movs	r3, #1
9000b08e:	e000      	b.n	9000b092 <tcp_receive+0x6c6>
9000b090:	2300      	movs	r3, #0
9000b092:	4423      	add	r3, r4
9000b094:	b29a      	uxth	r2, r3
9000b096:	4b71      	ldr	r3, [pc, #452]	; (9000b25c <tcp_receive+0x890>)
9000b098:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
9000b09a:	687b      	ldr	r3, [r7, #4]
9000b09c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
9000b09e:	4b6f      	ldr	r3, [pc, #444]	; (9000b25c <tcp_receive+0x890>)
9000b0a0:	881b      	ldrh	r3, [r3, #0]
9000b0a2:	429a      	cmp	r2, r3
9000b0a4:	d275      	bcs.n	9000b192 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
9000b0a6:	4b6c      	ldr	r3, [pc, #432]	; (9000b258 <tcp_receive+0x88c>)
9000b0a8:	68db      	ldr	r3, [r3, #12]
9000b0aa:	899b      	ldrh	r3, [r3, #12]
9000b0ac:	b29b      	uxth	r3, r3
9000b0ae:	4618      	mov	r0, r3
9000b0b0:	f7fa fd3e 	bl	90005b30 <lwip_htons>
9000b0b4:	4603      	mov	r3, r0
9000b0b6:	b2db      	uxtb	r3, r3
9000b0b8:	f003 0301 	and.w	r3, r3, #1
9000b0bc:	2b00      	cmp	r3, #0
9000b0be:	d01f      	beq.n	9000b100 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
9000b0c0:	4b65      	ldr	r3, [pc, #404]	; (9000b258 <tcp_receive+0x88c>)
9000b0c2:	68db      	ldr	r3, [r3, #12]
9000b0c4:	899b      	ldrh	r3, [r3, #12]
9000b0c6:	b29b      	uxth	r3, r3
9000b0c8:	b21b      	sxth	r3, r3
9000b0ca:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
9000b0ce:	b21c      	sxth	r4, r3
9000b0d0:	4b61      	ldr	r3, [pc, #388]	; (9000b258 <tcp_receive+0x88c>)
9000b0d2:	68db      	ldr	r3, [r3, #12]
9000b0d4:	899b      	ldrh	r3, [r3, #12]
9000b0d6:	b29b      	uxth	r3, r3
9000b0d8:	4618      	mov	r0, r3
9000b0da:	f7fa fd29 	bl	90005b30 <lwip_htons>
9000b0de:	4603      	mov	r3, r0
9000b0e0:	b2db      	uxtb	r3, r3
9000b0e2:	b29b      	uxth	r3, r3
9000b0e4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
9000b0e8:	b29b      	uxth	r3, r3
9000b0ea:	4618      	mov	r0, r3
9000b0ec:	f7fa fd20 	bl	90005b30 <lwip_htons>
9000b0f0:	4603      	mov	r3, r0
9000b0f2:	b21b      	sxth	r3, r3
9000b0f4:	4323      	orrs	r3, r4
9000b0f6:	b21a      	sxth	r2, r3
9000b0f8:	4b57      	ldr	r3, [pc, #348]	; (9000b258 <tcp_receive+0x88c>)
9000b0fa:	68db      	ldr	r3, [r3, #12]
9000b0fc:	b292      	uxth	r2, r2
9000b0fe:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
9000b100:	687b      	ldr	r3, [r7, #4]
9000b102:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
9000b104:	4b54      	ldr	r3, [pc, #336]	; (9000b258 <tcp_receive+0x88c>)
9000b106:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
9000b108:	4b53      	ldr	r3, [pc, #332]	; (9000b258 <tcp_receive+0x88c>)
9000b10a:	68db      	ldr	r3, [r3, #12]
9000b10c:	899b      	ldrh	r3, [r3, #12]
9000b10e:	b29b      	uxth	r3, r3
9000b110:	4618      	mov	r0, r3
9000b112:	f7fa fd0d 	bl	90005b30 <lwip_htons>
9000b116:	4603      	mov	r3, r0
9000b118:	b2db      	uxtb	r3, r3
9000b11a:	f003 0302 	and.w	r3, r3, #2
9000b11e:	2b00      	cmp	r3, #0
9000b120:	d005      	beq.n	9000b12e <tcp_receive+0x762>
            inseg.len -= 1;
9000b122:	4b4d      	ldr	r3, [pc, #308]	; (9000b258 <tcp_receive+0x88c>)
9000b124:	891b      	ldrh	r3, [r3, #8]
9000b126:	3b01      	subs	r3, #1
9000b128:	b29a      	uxth	r2, r3
9000b12a:	4b4b      	ldr	r3, [pc, #300]	; (9000b258 <tcp_receive+0x88c>)
9000b12c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
9000b12e:	4b4a      	ldr	r3, [pc, #296]	; (9000b258 <tcp_receive+0x88c>)
9000b130:	685b      	ldr	r3, [r3, #4]
9000b132:	4a49      	ldr	r2, [pc, #292]	; (9000b258 <tcp_receive+0x88c>)
9000b134:	8912      	ldrh	r2, [r2, #8]
9000b136:	4611      	mov	r1, r2
9000b138:	4618      	mov	r0, r3
9000b13a:	f7fb ff3b 	bl	90006fb4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
9000b13e:	4b46      	ldr	r3, [pc, #280]	; (9000b258 <tcp_receive+0x88c>)
9000b140:	891c      	ldrh	r4, [r3, #8]
9000b142:	4b45      	ldr	r3, [pc, #276]	; (9000b258 <tcp_receive+0x88c>)
9000b144:	68db      	ldr	r3, [r3, #12]
9000b146:	899b      	ldrh	r3, [r3, #12]
9000b148:	b29b      	uxth	r3, r3
9000b14a:	4618      	mov	r0, r3
9000b14c:	f7fa fcf0 	bl	90005b30 <lwip_htons>
9000b150:	4603      	mov	r3, r0
9000b152:	b2db      	uxtb	r3, r3
9000b154:	f003 0303 	and.w	r3, r3, #3
9000b158:	2b00      	cmp	r3, #0
9000b15a:	d001      	beq.n	9000b160 <tcp_receive+0x794>
9000b15c:	2301      	movs	r3, #1
9000b15e:	e000      	b.n	9000b162 <tcp_receive+0x796>
9000b160:	2300      	movs	r3, #0
9000b162:	4423      	add	r3, r4
9000b164:	b29a      	uxth	r2, r3
9000b166:	4b3d      	ldr	r3, [pc, #244]	; (9000b25c <tcp_receive+0x890>)
9000b168:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
9000b16a:	4b3c      	ldr	r3, [pc, #240]	; (9000b25c <tcp_receive+0x890>)
9000b16c:	881b      	ldrh	r3, [r3, #0]
9000b16e:	461a      	mov	r2, r3
9000b170:	4b38      	ldr	r3, [pc, #224]	; (9000b254 <tcp_receive+0x888>)
9000b172:	681b      	ldr	r3, [r3, #0]
9000b174:	441a      	add	r2, r3
9000b176:	687b      	ldr	r3, [r7, #4]
9000b178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000b17a:	6879      	ldr	r1, [r7, #4]
9000b17c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
9000b17e:	440b      	add	r3, r1
9000b180:	429a      	cmp	r2, r3
9000b182:	d006      	beq.n	9000b192 <tcp_receive+0x7c6>
9000b184:	4b36      	ldr	r3, [pc, #216]	; (9000b260 <tcp_receive+0x894>)
9000b186:	f240 52cb 	movw	r2, #1483	; 0x5cb
9000b18a:	4936      	ldr	r1, [pc, #216]	; (9000b264 <tcp_receive+0x898>)
9000b18c:	4836      	ldr	r0, [pc, #216]	; (9000b268 <tcp_receive+0x89c>)
9000b18e:	f005 f9ad 	bl	900104ec <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
9000b192:	687b      	ldr	r3, [r7, #4]
9000b194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000b196:	2b00      	cmp	r3, #0
9000b198:	f000 80e7 	beq.w	9000b36a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
9000b19c:	4b2e      	ldr	r3, [pc, #184]	; (9000b258 <tcp_receive+0x88c>)
9000b19e:	68db      	ldr	r3, [r3, #12]
9000b1a0:	899b      	ldrh	r3, [r3, #12]
9000b1a2:	b29b      	uxth	r3, r3
9000b1a4:	4618      	mov	r0, r3
9000b1a6:	f7fa fcc3 	bl	90005b30 <lwip_htons>
9000b1aa:	4603      	mov	r3, r0
9000b1ac:	b2db      	uxtb	r3, r3
9000b1ae:	f003 0301 	and.w	r3, r3, #1
9000b1b2:	2b00      	cmp	r3, #0
9000b1b4:	d010      	beq.n	9000b1d8 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
9000b1b6:	e00a      	b.n	9000b1ce <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
9000b1b8:	687b      	ldr	r3, [r7, #4]
9000b1ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000b1bc:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
9000b1be:	687b      	ldr	r3, [r7, #4]
9000b1c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000b1c2:	681a      	ldr	r2, [r3, #0]
9000b1c4:	687b      	ldr	r3, [r7, #4]
9000b1c6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
9000b1c8:	68f8      	ldr	r0, [r7, #12]
9000b1ca:	f7fd fca6 	bl	90008b1a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
9000b1ce:	687b      	ldr	r3, [r7, #4]
9000b1d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000b1d2:	2b00      	cmp	r3, #0
9000b1d4:	d1f0      	bne.n	9000b1b8 <tcp_receive+0x7ec>
9000b1d6:	e0c8      	b.n	9000b36a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
9000b1d8:	687b      	ldr	r3, [r7, #4]
9000b1da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000b1dc:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
9000b1de:	e052      	b.n	9000b286 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
9000b1e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000b1e2:	68db      	ldr	r3, [r3, #12]
9000b1e4:	899b      	ldrh	r3, [r3, #12]
9000b1e6:	b29b      	uxth	r3, r3
9000b1e8:	4618      	mov	r0, r3
9000b1ea:	f7fa fca1 	bl	90005b30 <lwip_htons>
9000b1ee:	4603      	mov	r3, r0
9000b1f0:	b2db      	uxtb	r3, r3
9000b1f2:	f003 0301 	and.w	r3, r3, #1
9000b1f6:	2b00      	cmp	r3, #0
9000b1f8:	d03d      	beq.n	9000b276 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
9000b1fa:	4b17      	ldr	r3, [pc, #92]	; (9000b258 <tcp_receive+0x88c>)
9000b1fc:	68db      	ldr	r3, [r3, #12]
9000b1fe:	899b      	ldrh	r3, [r3, #12]
9000b200:	b29b      	uxth	r3, r3
9000b202:	4618      	mov	r0, r3
9000b204:	f7fa fc94 	bl	90005b30 <lwip_htons>
9000b208:	4603      	mov	r3, r0
9000b20a:	b2db      	uxtb	r3, r3
9000b20c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
9000b210:	2b00      	cmp	r3, #0
9000b212:	d130      	bne.n	9000b276 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
9000b214:	4b10      	ldr	r3, [pc, #64]	; (9000b258 <tcp_receive+0x88c>)
9000b216:	68db      	ldr	r3, [r3, #12]
9000b218:	899b      	ldrh	r3, [r3, #12]
9000b21a:	b29c      	uxth	r4, r3
9000b21c:	2001      	movs	r0, #1
9000b21e:	f7fa fc87 	bl	90005b30 <lwip_htons>
9000b222:	4603      	mov	r3, r0
9000b224:	461a      	mov	r2, r3
9000b226:	4b0c      	ldr	r3, [pc, #48]	; (9000b258 <tcp_receive+0x88c>)
9000b228:	68db      	ldr	r3, [r3, #12]
9000b22a:	4322      	orrs	r2, r4
9000b22c:	b292      	uxth	r2, r2
9000b22e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
9000b230:	4b09      	ldr	r3, [pc, #36]	; (9000b258 <tcp_receive+0x88c>)
9000b232:	891c      	ldrh	r4, [r3, #8]
9000b234:	4b08      	ldr	r3, [pc, #32]	; (9000b258 <tcp_receive+0x88c>)
9000b236:	68db      	ldr	r3, [r3, #12]
9000b238:	899b      	ldrh	r3, [r3, #12]
9000b23a:	b29b      	uxth	r3, r3
9000b23c:	4618      	mov	r0, r3
9000b23e:	f7fa fc77 	bl	90005b30 <lwip_htons>
9000b242:	4603      	mov	r3, r0
9000b244:	b2db      	uxtb	r3, r3
9000b246:	f003 0303 	and.w	r3, r3, #3
9000b24a:	2b00      	cmp	r3, #0
9000b24c:	d00e      	beq.n	9000b26c <tcp_receive+0x8a0>
9000b24e:	2301      	movs	r3, #1
9000b250:	e00d      	b.n	9000b26e <tcp_receive+0x8a2>
9000b252:	bf00      	nop
9000b254:	2000a8d8 	.word	0x2000a8d8
9000b258:	2000a8b8 	.word	0x2000a8b8
9000b25c:	2000a8e2 	.word	0x2000a8e2
9000b260:	90012f24 	.word	0x90012f24
9000b264:	900132cc 	.word	0x900132cc
9000b268:	90012f70 	.word	0x90012f70
9000b26c:	2300      	movs	r3, #0
9000b26e:	4423      	add	r3, r4
9000b270:	b29a      	uxth	r2, r3
9000b272:	4b98      	ldr	r3, [pc, #608]	; (9000b4d4 <tcp_receive+0xb08>)
9000b274:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
9000b276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000b278:	613b      	str	r3, [r7, #16]
              next = next->next;
9000b27a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000b27c:	681b      	ldr	r3, [r3, #0]
9000b27e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
9000b280:	6938      	ldr	r0, [r7, #16]
9000b282:	f7fd fc4a 	bl	90008b1a <tcp_seg_free>
            while (next &&
9000b286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000b288:	2b00      	cmp	r3, #0
9000b28a:	d00e      	beq.n	9000b2aa <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
9000b28c:	4b91      	ldr	r3, [pc, #580]	; (9000b4d4 <tcp_receive+0xb08>)
9000b28e:	881b      	ldrh	r3, [r3, #0]
9000b290:	461a      	mov	r2, r3
9000b292:	4b91      	ldr	r3, [pc, #580]	; (9000b4d8 <tcp_receive+0xb0c>)
9000b294:	681b      	ldr	r3, [r3, #0]
9000b296:	441a      	add	r2, r3
9000b298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000b29a:	68db      	ldr	r3, [r3, #12]
9000b29c:	685b      	ldr	r3, [r3, #4]
9000b29e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
9000b2a0:	8909      	ldrh	r1, [r1, #8]
9000b2a2:	440b      	add	r3, r1
9000b2a4:	1ad3      	subs	r3, r2, r3
            while (next &&
9000b2a6:	2b00      	cmp	r3, #0
9000b2a8:	da9a      	bge.n	9000b1e0 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
9000b2aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000b2ac:	2b00      	cmp	r3, #0
9000b2ae:	d059      	beq.n	9000b364 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
9000b2b0:	4b88      	ldr	r3, [pc, #544]	; (9000b4d4 <tcp_receive+0xb08>)
9000b2b2:	881b      	ldrh	r3, [r3, #0]
9000b2b4:	461a      	mov	r2, r3
9000b2b6:	4b88      	ldr	r3, [pc, #544]	; (9000b4d8 <tcp_receive+0xb0c>)
9000b2b8:	681b      	ldr	r3, [r3, #0]
9000b2ba:	441a      	add	r2, r3
9000b2bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000b2be:	68db      	ldr	r3, [r3, #12]
9000b2c0:	685b      	ldr	r3, [r3, #4]
9000b2c2:	1ad3      	subs	r3, r2, r3
            if (next &&
9000b2c4:	2b00      	cmp	r3, #0
9000b2c6:	dd4d      	ble.n	9000b364 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
9000b2c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000b2ca:	68db      	ldr	r3, [r3, #12]
9000b2cc:	685b      	ldr	r3, [r3, #4]
9000b2ce:	b29a      	uxth	r2, r3
9000b2d0:	4b81      	ldr	r3, [pc, #516]	; (9000b4d8 <tcp_receive+0xb0c>)
9000b2d2:	681b      	ldr	r3, [r3, #0]
9000b2d4:	b29b      	uxth	r3, r3
9000b2d6:	1ad3      	subs	r3, r2, r3
9000b2d8:	b29a      	uxth	r2, r3
9000b2da:	4b80      	ldr	r3, [pc, #512]	; (9000b4dc <tcp_receive+0xb10>)
9000b2dc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
9000b2de:	4b7f      	ldr	r3, [pc, #508]	; (9000b4dc <tcp_receive+0xb10>)
9000b2e0:	68db      	ldr	r3, [r3, #12]
9000b2e2:	899b      	ldrh	r3, [r3, #12]
9000b2e4:	b29b      	uxth	r3, r3
9000b2e6:	4618      	mov	r0, r3
9000b2e8:	f7fa fc22 	bl	90005b30 <lwip_htons>
9000b2ec:	4603      	mov	r3, r0
9000b2ee:	b2db      	uxtb	r3, r3
9000b2f0:	f003 0302 	and.w	r3, r3, #2
9000b2f4:	2b00      	cmp	r3, #0
9000b2f6:	d005      	beq.n	9000b304 <tcp_receive+0x938>
                inseg.len -= 1;
9000b2f8:	4b78      	ldr	r3, [pc, #480]	; (9000b4dc <tcp_receive+0xb10>)
9000b2fa:	891b      	ldrh	r3, [r3, #8]
9000b2fc:	3b01      	subs	r3, #1
9000b2fe:	b29a      	uxth	r2, r3
9000b300:	4b76      	ldr	r3, [pc, #472]	; (9000b4dc <tcp_receive+0xb10>)
9000b302:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
9000b304:	4b75      	ldr	r3, [pc, #468]	; (9000b4dc <tcp_receive+0xb10>)
9000b306:	685b      	ldr	r3, [r3, #4]
9000b308:	4a74      	ldr	r2, [pc, #464]	; (9000b4dc <tcp_receive+0xb10>)
9000b30a:	8912      	ldrh	r2, [r2, #8]
9000b30c:	4611      	mov	r1, r2
9000b30e:	4618      	mov	r0, r3
9000b310:	f7fb fe50 	bl	90006fb4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
9000b314:	4b71      	ldr	r3, [pc, #452]	; (9000b4dc <tcp_receive+0xb10>)
9000b316:	891c      	ldrh	r4, [r3, #8]
9000b318:	4b70      	ldr	r3, [pc, #448]	; (9000b4dc <tcp_receive+0xb10>)
9000b31a:	68db      	ldr	r3, [r3, #12]
9000b31c:	899b      	ldrh	r3, [r3, #12]
9000b31e:	b29b      	uxth	r3, r3
9000b320:	4618      	mov	r0, r3
9000b322:	f7fa fc05 	bl	90005b30 <lwip_htons>
9000b326:	4603      	mov	r3, r0
9000b328:	b2db      	uxtb	r3, r3
9000b32a:	f003 0303 	and.w	r3, r3, #3
9000b32e:	2b00      	cmp	r3, #0
9000b330:	d001      	beq.n	9000b336 <tcp_receive+0x96a>
9000b332:	2301      	movs	r3, #1
9000b334:	e000      	b.n	9000b338 <tcp_receive+0x96c>
9000b336:	2300      	movs	r3, #0
9000b338:	4423      	add	r3, r4
9000b33a:	b29a      	uxth	r2, r3
9000b33c:	4b65      	ldr	r3, [pc, #404]	; (9000b4d4 <tcp_receive+0xb08>)
9000b33e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
9000b340:	4b64      	ldr	r3, [pc, #400]	; (9000b4d4 <tcp_receive+0xb08>)
9000b342:	881b      	ldrh	r3, [r3, #0]
9000b344:	461a      	mov	r2, r3
9000b346:	4b64      	ldr	r3, [pc, #400]	; (9000b4d8 <tcp_receive+0xb0c>)
9000b348:	681b      	ldr	r3, [r3, #0]
9000b34a:	441a      	add	r2, r3
9000b34c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000b34e:	68db      	ldr	r3, [r3, #12]
9000b350:	685b      	ldr	r3, [r3, #4]
9000b352:	429a      	cmp	r2, r3
9000b354:	d006      	beq.n	9000b364 <tcp_receive+0x998>
9000b356:	4b62      	ldr	r3, [pc, #392]	; (9000b4e0 <tcp_receive+0xb14>)
9000b358:	f240 52fc 	movw	r2, #1532	; 0x5fc
9000b35c:	4961      	ldr	r1, [pc, #388]	; (9000b4e4 <tcp_receive+0xb18>)
9000b35e:	4862      	ldr	r0, [pc, #392]	; (9000b4e8 <tcp_receive+0xb1c>)
9000b360:	f005 f8c4 	bl	900104ec <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
9000b364:	687b      	ldr	r3, [r7, #4]
9000b366:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
9000b368:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
9000b36a:	4b5a      	ldr	r3, [pc, #360]	; (9000b4d4 <tcp_receive+0xb08>)
9000b36c:	881b      	ldrh	r3, [r3, #0]
9000b36e:	461a      	mov	r2, r3
9000b370:	4b59      	ldr	r3, [pc, #356]	; (9000b4d8 <tcp_receive+0xb0c>)
9000b372:	681b      	ldr	r3, [r3, #0]
9000b374:	441a      	add	r2, r3
9000b376:	687b      	ldr	r3, [r7, #4]
9000b378:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
9000b37a:	687b      	ldr	r3, [r7, #4]
9000b37c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
9000b37e:	4b55      	ldr	r3, [pc, #340]	; (9000b4d4 <tcp_receive+0xb08>)
9000b380:	881b      	ldrh	r3, [r3, #0]
9000b382:	429a      	cmp	r2, r3
9000b384:	d206      	bcs.n	9000b394 <tcp_receive+0x9c8>
9000b386:	4b56      	ldr	r3, [pc, #344]	; (9000b4e0 <tcp_receive+0xb14>)
9000b388:	f240 6207 	movw	r2, #1543	; 0x607
9000b38c:	4957      	ldr	r1, [pc, #348]	; (9000b4ec <tcp_receive+0xb20>)
9000b38e:	4856      	ldr	r0, [pc, #344]	; (9000b4e8 <tcp_receive+0xb1c>)
9000b390:	f005 f8ac 	bl	900104ec <iprintf>
        pcb->rcv_wnd -= tcplen;
9000b394:	687b      	ldr	r3, [r7, #4]
9000b396:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
9000b398:	4b4e      	ldr	r3, [pc, #312]	; (9000b4d4 <tcp_receive+0xb08>)
9000b39a:	881b      	ldrh	r3, [r3, #0]
9000b39c:	1ad3      	subs	r3, r2, r3
9000b39e:	b29a      	uxth	r2, r3
9000b3a0:	687b      	ldr	r3, [r7, #4]
9000b3a2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
9000b3a4:	6878      	ldr	r0, [r7, #4]
9000b3a6:	f7fc fe93 	bl	900080d0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
9000b3aa:	4b4c      	ldr	r3, [pc, #304]	; (9000b4dc <tcp_receive+0xb10>)
9000b3ac:	685b      	ldr	r3, [r3, #4]
9000b3ae:	891b      	ldrh	r3, [r3, #8]
9000b3b0:	2b00      	cmp	r3, #0
9000b3b2:	d006      	beq.n	9000b3c2 <tcp_receive+0x9f6>
          recv_data = inseg.p;
9000b3b4:	4b49      	ldr	r3, [pc, #292]	; (9000b4dc <tcp_receive+0xb10>)
9000b3b6:	685b      	ldr	r3, [r3, #4]
9000b3b8:	4a4d      	ldr	r2, [pc, #308]	; (9000b4f0 <tcp_receive+0xb24>)
9000b3ba:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
9000b3bc:	4b47      	ldr	r3, [pc, #284]	; (9000b4dc <tcp_receive+0xb10>)
9000b3be:	2200      	movs	r2, #0
9000b3c0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
9000b3c2:	4b46      	ldr	r3, [pc, #280]	; (9000b4dc <tcp_receive+0xb10>)
9000b3c4:	68db      	ldr	r3, [r3, #12]
9000b3c6:	899b      	ldrh	r3, [r3, #12]
9000b3c8:	b29b      	uxth	r3, r3
9000b3ca:	4618      	mov	r0, r3
9000b3cc:	f7fa fbb0 	bl	90005b30 <lwip_htons>
9000b3d0:	4603      	mov	r3, r0
9000b3d2:	b2db      	uxtb	r3, r3
9000b3d4:	f003 0301 	and.w	r3, r3, #1
9000b3d8:	2b00      	cmp	r3, #0
9000b3da:	f000 80b8 	beq.w	9000b54e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
9000b3de:	4b45      	ldr	r3, [pc, #276]	; (9000b4f4 <tcp_receive+0xb28>)
9000b3e0:	781b      	ldrb	r3, [r3, #0]
9000b3e2:	f043 0320 	orr.w	r3, r3, #32
9000b3e6:	b2da      	uxtb	r2, r3
9000b3e8:	4b42      	ldr	r3, [pc, #264]	; (9000b4f4 <tcp_receive+0xb28>)
9000b3ea:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
9000b3ec:	e0af      	b.n	9000b54e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
9000b3ee:	687b      	ldr	r3, [r7, #4]
9000b3f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000b3f2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
9000b3f4:	687b      	ldr	r3, [r7, #4]
9000b3f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000b3f8:	68db      	ldr	r3, [r3, #12]
9000b3fa:	685b      	ldr	r3, [r3, #4]
9000b3fc:	4a36      	ldr	r2, [pc, #216]	; (9000b4d8 <tcp_receive+0xb0c>)
9000b3fe:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
9000b400:	68bb      	ldr	r3, [r7, #8]
9000b402:	891b      	ldrh	r3, [r3, #8]
9000b404:	461c      	mov	r4, r3
9000b406:	68bb      	ldr	r3, [r7, #8]
9000b408:	68db      	ldr	r3, [r3, #12]
9000b40a:	899b      	ldrh	r3, [r3, #12]
9000b40c:	b29b      	uxth	r3, r3
9000b40e:	4618      	mov	r0, r3
9000b410:	f7fa fb8e 	bl	90005b30 <lwip_htons>
9000b414:	4603      	mov	r3, r0
9000b416:	b2db      	uxtb	r3, r3
9000b418:	f003 0303 	and.w	r3, r3, #3
9000b41c:	2b00      	cmp	r3, #0
9000b41e:	d001      	beq.n	9000b424 <tcp_receive+0xa58>
9000b420:	2301      	movs	r3, #1
9000b422:	e000      	b.n	9000b426 <tcp_receive+0xa5a>
9000b424:	2300      	movs	r3, #0
9000b426:	191a      	adds	r2, r3, r4
9000b428:	687b      	ldr	r3, [r7, #4]
9000b42a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000b42c:	441a      	add	r2, r3
9000b42e:	687b      	ldr	r3, [r7, #4]
9000b430:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
9000b432:	687b      	ldr	r3, [r7, #4]
9000b434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
9000b436:	461c      	mov	r4, r3
9000b438:	68bb      	ldr	r3, [r7, #8]
9000b43a:	891b      	ldrh	r3, [r3, #8]
9000b43c:	461d      	mov	r5, r3
9000b43e:	68bb      	ldr	r3, [r7, #8]
9000b440:	68db      	ldr	r3, [r3, #12]
9000b442:	899b      	ldrh	r3, [r3, #12]
9000b444:	b29b      	uxth	r3, r3
9000b446:	4618      	mov	r0, r3
9000b448:	f7fa fb72 	bl	90005b30 <lwip_htons>
9000b44c:	4603      	mov	r3, r0
9000b44e:	b2db      	uxtb	r3, r3
9000b450:	f003 0303 	and.w	r3, r3, #3
9000b454:	2b00      	cmp	r3, #0
9000b456:	d001      	beq.n	9000b45c <tcp_receive+0xa90>
9000b458:	2301      	movs	r3, #1
9000b45a:	e000      	b.n	9000b45e <tcp_receive+0xa92>
9000b45c:	2300      	movs	r3, #0
9000b45e:	442b      	add	r3, r5
9000b460:	429c      	cmp	r4, r3
9000b462:	d206      	bcs.n	9000b472 <tcp_receive+0xaa6>
9000b464:	4b1e      	ldr	r3, [pc, #120]	; (9000b4e0 <tcp_receive+0xb14>)
9000b466:	f240 622b 	movw	r2, #1579	; 0x62b
9000b46a:	4923      	ldr	r1, [pc, #140]	; (9000b4f8 <tcp_receive+0xb2c>)
9000b46c:	481e      	ldr	r0, [pc, #120]	; (9000b4e8 <tcp_receive+0xb1c>)
9000b46e:	f005 f83d 	bl	900104ec <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
9000b472:	68bb      	ldr	r3, [r7, #8]
9000b474:	891b      	ldrh	r3, [r3, #8]
9000b476:	461c      	mov	r4, r3
9000b478:	68bb      	ldr	r3, [r7, #8]
9000b47a:	68db      	ldr	r3, [r3, #12]
9000b47c:	899b      	ldrh	r3, [r3, #12]
9000b47e:	b29b      	uxth	r3, r3
9000b480:	4618      	mov	r0, r3
9000b482:	f7fa fb55 	bl	90005b30 <lwip_htons>
9000b486:	4603      	mov	r3, r0
9000b488:	b2db      	uxtb	r3, r3
9000b48a:	f003 0303 	and.w	r3, r3, #3
9000b48e:	2b00      	cmp	r3, #0
9000b490:	d001      	beq.n	9000b496 <tcp_receive+0xaca>
9000b492:	2301      	movs	r3, #1
9000b494:	e000      	b.n	9000b498 <tcp_receive+0xacc>
9000b496:	2300      	movs	r3, #0
9000b498:	1919      	adds	r1, r3, r4
9000b49a:	687b      	ldr	r3, [r7, #4]
9000b49c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
9000b49e:	b28b      	uxth	r3, r1
9000b4a0:	1ad3      	subs	r3, r2, r3
9000b4a2:	b29a      	uxth	r2, r3
9000b4a4:	687b      	ldr	r3, [r7, #4]
9000b4a6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
9000b4a8:	6878      	ldr	r0, [r7, #4]
9000b4aa:	f7fc fe11 	bl	900080d0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
9000b4ae:	68bb      	ldr	r3, [r7, #8]
9000b4b0:	685b      	ldr	r3, [r3, #4]
9000b4b2:	891b      	ldrh	r3, [r3, #8]
9000b4b4:	2b00      	cmp	r3, #0
9000b4b6:	d028      	beq.n	9000b50a <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
9000b4b8:	4b0d      	ldr	r3, [pc, #52]	; (9000b4f0 <tcp_receive+0xb24>)
9000b4ba:	681b      	ldr	r3, [r3, #0]
9000b4bc:	2b00      	cmp	r3, #0
9000b4be:	d01d      	beq.n	9000b4fc <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
9000b4c0:	4b0b      	ldr	r3, [pc, #44]	; (9000b4f0 <tcp_receive+0xb24>)
9000b4c2:	681a      	ldr	r2, [r3, #0]
9000b4c4:	68bb      	ldr	r3, [r7, #8]
9000b4c6:	685b      	ldr	r3, [r3, #4]
9000b4c8:	4619      	mov	r1, r3
9000b4ca:	4610      	mov	r0, r2
9000b4cc:	f7fb ffba 	bl	90007444 <pbuf_cat>
9000b4d0:	e018      	b.n	9000b504 <tcp_receive+0xb38>
9000b4d2:	bf00      	nop
9000b4d4:	2000a8e2 	.word	0x2000a8e2
9000b4d8:	2000a8d8 	.word	0x2000a8d8
9000b4dc:	2000a8b8 	.word	0x2000a8b8
9000b4e0:	90012f24 	.word	0x90012f24
9000b4e4:	90013304 	.word	0x90013304
9000b4e8:	90012f70 	.word	0x90012f70
9000b4ec:	90013340 	.word	0x90013340
9000b4f0:	2000a8e8 	.word	0x2000a8e8
9000b4f4:	2000a8e5 	.word	0x2000a8e5
9000b4f8:	90013360 	.word	0x90013360
            } else {
              recv_data = cseg->p;
9000b4fc:	68bb      	ldr	r3, [r7, #8]
9000b4fe:	685b      	ldr	r3, [r3, #4]
9000b500:	4a70      	ldr	r2, [pc, #448]	; (9000b6c4 <tcp_receive+0xcf8>)
9000b502:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
9000b504:	68bb      	ldr	r3, [r7, #8]
9000b506:	2200      	movs	r2, #0
9000b508:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
9000b50a:	68bb      	ldr	r3, [r7, #8]
9000b50c:	68db      	ldr	r3, [r3, #12]
9000b50e:	899b      	ldrh	r3, [r3, #12]
9000b510:	b29b      	uxth	r3, r3
9000b512:	4618      	mov	r0, r3
9000b514:	f7fa fb0c 	bl	90005b30 <lwip_htons>
9000b518:	4603      	mov	r3, r0
9000b51a:	b2db      	uxtb	r3, r3
9000b51c:	f003 0301 	and.w	r3, r3, #1
9000b520:	2b00      	cmp	r3, #0
9000b522:	d00d      	beq.n	9000b540 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
9000b524:	4b68      	ldr	r3, [pc, #416]	; (9000b6c8 <tcp_receive+0xcfc>)
9000b526:	781b      	ldrb	r3, [r3, #0]
9000b528:	f043 0320 	orr.w	r3, r3, #32
9000b52c:	b2da      	uxtb	r2, r3
9000b52e:	4b66      	ldr	r3, [pc, #408]	; (9000b6c8 <tcp_receive+0xcfc>)
9000b530:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
9000b532:	687b      	ldr	r3, [r7, #4]
9000b534:	7d1b      	ldrb	r3, [r3, #20]
9000b536:	2b04      	cmp	r3, #4
9000b538:	d102      	bne.n	9000b540 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
9000b53a:	687b      	ldr	r3, [r7, #4]
9000b53c:	2207      	movs	r2, #7
9000b53e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
9000b540:	68bb      	ldr	r3, [r7, #8]
9000b542:	681a      	ldr	r2, [r3, #0]
9000b544:	687b      	ldr	r3, [r7, #4]
9000b546:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
9000b548:	68b8      	ldr	r0, [r7, #8]
9000b54a:	f7fd fae6 	bl	90008b1a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
9000b54e:	687b      	ldr	r3, [r7, #4]
9000b550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000b552:	2b00      	cmp	r3, #0
9000b554:	d008      	beq.n	9000b568 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
9000b556:	687b      	ldr	r3, [r7, #4]
9000b558:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000b55a:	68db      	ldr	r3, [r3, #12]
9000b55c:	685a      	ldr	r2, [r3, #4]
9000b55e:	687b      	ldr	r3, [r7, #4]
9000b560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
9000b562:	429a      	cmp	r2, r3
9000b564:	f43f af43 	beq.w	9000b3ee <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
9000b568:	687b      	ldr	r3, [r7, #4]
9000b56a:	8b5b      	ldrh	r3, [r3, #26]
9000b56c:	f003 0301 	and.w	r3, r3, #1
9000b570:	2b00      	cmp	r3, #0
9000b572:	d00e      	beq.n	9000b592 <tcp_receive+0xbc6>
9000b574:	687b      	ldr	r3, [r7, #4]
9000b576:	8b5b      	ldrh	r3, [r3, #26]
9000b578:	f023 0301 	bic.w	r3, r3, #1
9000b57c:	b29a      	uxth	r2, r3
9000b57e:	687b      	ldr	r3, [r7, #4]
9000b580:	835a      	strh	r2, [r3, #26]
9000b582:	687b      	ldr	r3, [r7, #4]
9000b584:	8b5b      	ldrh	r3, [r3, #26]
9000b586:	f043 0302 	orr.w	r3, r3, #2
9000b58a:	b29a      	uxth	r2, r3
9000b58c:	687b      	ldr	r3, [r7, #4]
9000b58e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
9000b590:	e188      	b.n	9000b8a4 <tcp_receive+0xed8>
        tcp_ack(pcb);
9000b592:	687b      	ldr	r3, [r7, #4]
9000b594:	8b5b      	ldrh	r3, [r3, #26]
9000b596:	f043 0301 	orr.w	r3, r3, #1
9000b59a:	b29a      	uxth	r2, r3
9000b59c:	687b      	ldr	r3, [r7, #4]
9000b59e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
9000b5a0:	e180      	b.n	9000b8a4 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
9000b5a2:	687b      	ldr	r3, [r7, #4]
9000b5a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000b5a6:	2b00      	cmp	r3, #0
9000b5a8:	d106      	bne.n	9000b5b8 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
9000b5aa:	4848      	ldr	r0, [pc, #288]	; (9000b6cc <tcp_receive+0xd00>)
9000b5ac:	f7fd faec 	bl	90008b88 <tcp_seg_copy>
9000b5b0:	4602      	mov	r2, r0
9000b5b2:	687b      	ldr	r3, [r7, #4]
9000b5b4:	675a      	str	r2, [r3, #116]	; 0x74
9000b5b6:	e16d      	b.n	9000b894 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
9000b5b8:	2300      	movs	r3, #0
9000b5ba:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
9000b5bc:	687b      	ldr	r3, [r7, #4]
9000b5be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000b5c0:	63bb      	str	r3, [r7, #56]	; 0x38
9000b5c2:	e157      	b.n	9000b874 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
9000b5c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000b5c6:	68db      	ldr	r3, [r3, #12]
9000b5c8:	685a      	ldr	r2, [r3, #4]
9000b5ca:	4b41      	ldr	r3, [pc, #260]	; (9000b6d0 <tcp_receive+0xd04>)
9000b5cc:	681b      	ldr	r3, [r3, #0]
9000b5ce:	429a      	cmp	r2, r3
9000b5d0:	d11d      	bne.n	9000b60e <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
9000b5d2:	4b3e      	ldr	r3, [pc, #248]	; (9000b6cc <tcp_receive+0xd00>)
9000b5d4:	891a      	ldrh	r2, [r3, #8]
9000b5d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000b5d8:	891b      	ldrh	r3, [r3, #8]
9000b5da:	429a      	cmp	r2, r3
9000b5dc:	f240 814f 	bls.w	9000b87e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
9000b5e0:	483a      	ldr	r0, [pc, #232]	; (9000b6cc <tcp_receive+0xd00>)
9000b5e2:	f7fd fad1 	bl	90008b88 <tcp_seg_copy>
9000b5e6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
9000b5e8:	697b      	ldr	r3, [r7, #20]
9000b5ea:	2b00      	cmp	r3, #0
9000b5ec:	f000 8149 	beq.w	9000b882 <tcp_receive+0xeb6>
                  if (prev != NULL) {
9000b5f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000b5f2:	2b00      	cmp	r3, #0
9000b5f4:	d003      	beq.n	9000b5fe <tcp_receive+0xc32>
                    prev->next = cseg;
9000b5f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000b5f8:	697a      	ldr	r2, [r7, #20]
9000b5fa:	601a      	str	r2, [r3, #0]
9000b5fc:	e002      	b.n	9000b604 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
9000b5fe:	687b      	ldr	r3, [r7, #4]
9000b600:	697a      	ldr	r2, [r7, #20]
9000b602:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
9000b604:	6bb9      	ldr	r1, [r7, #56]	; 0x38
9000b606:	6978      	ldr	r0, [r7, #20]
9000b608:	f7ff f8dc 	bl	9000a7c4 <tcp_oos_insert_segment>
                }
                break;
9000b60c:	e139      	b.n	9000b882 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
9000b60e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000b610:	2b00      	cmp	r3, #0
9000b612:	d117      	bne.n	9000b644 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
9000b614:	4b2e      	ldr	r3, [pc, #184]	; (9000b6d0 <tcp_receive+0xd04>)
9000b616:	681a      	ldr	r2, [r3, #0]
9000b618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000b61a:	68db      	ldr	r3, [r3, #12]
9000b61c:	685b      	ldr	r3, [r3, #4]
9000b61e:	1ad3      	subs	r3, r2, r3
9000b620:	2b00      	cmp	r3, #0
9000b622:	da57      	bge.n	9000b6d4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
9000b624:	4829      	ldr	r0, [pc, #164]	; (9000b6cc <tcp_receive+0xd00>)
9000b626:	f7fd faaf 	bl	90008b88 <tcp_seg_copy>
9000b62a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
9000b62c:	69bb      	ldr	r3, [r7, #24]
9000b62e:	2b00      	cmp	r3, #0
9000b630:	f000 8129 	beq.w	9000b886 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
9000b634:	687b      	ldr	r3, [r7, #4]
9000b636:	69ba      	ldr	r2, [r7, #24]
9000b638:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
9000b63a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
9000b63c:	69b8      	ldr	r0, [r7, #24]
9000b63e:	f7ff f8c1 	bl	9000a7c4 <tcp_oos_insert_segment>
                  }
                  break;
9000b642:	e120      	b.n	9000b886 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
9000b644:	4b22      	ldr	r3, [pc, #136]	; (9000b6d0 <tcp_receive+0xd04>)
9000b646:	681a      	ldr	r2, [r3, #0]
9000b648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000b64a:	68db      	ldr	r3, [r3, #12]
9000b64c:	685b      	ldr	r3, [r3, #4]
9000b64e:	1ad3      	subs	r3, r2, r3
9000b650:	3b01      	subs	r3, #1
9000b652:	2b00      	cmp	r3, #0
9000b654:	db3e      	blt.n	9000b6d4 <tcp_receive+0xd08>
9000b656:	4b1e      	ldr	r3, [pc, #120]	; (9000b6d0 <tcp_receive+0xd04>)
9000b658:	681a      	ldr	r2, [r3, #0]
9000b65a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000b65c:	68db      	ldr	r3, [r3, #12]
9000b65e:	685b      	ldr	r3, [r3, #4]
9000b660:	1ad3      	subs	r3, r2, r3
9000b662:	3301      	adds	r3, #1
9000b664:	2b00      	cmp	r3, #0
9000b666:	dc35      	bgt.n	9000b6d4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
9000b668:	4818      	ldr	r0, [pc, #96]	; (9000b6cc <tcp_receive+0xd00>)
9000b66a:	f7fd fa8d 	bl	90008b88 <tcp_seg_copy>
9000b66e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
9000b670:	69fb      	ldr	r3, [r7, #28]
9000b672:	2b00      	cmp	r3, #0
9000b674:	f000 8109 	beq.w	9000b88a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
9000b678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000b67a:	68db      	ldr	r3, [r3, #12]
9000b67c:	685b      	ldr	r3, [r3, #4]
9000b67e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
9000b680:	8912      	ldrh	r2, [r2, #8]
9000b682:	441a      	add	r2, r3
9000b684:	4b12      	ldr	r3, [pc, #72]	; (9000b6d0 <tcp_receive+0xd04>)
9000b686:	681b      	ldr	r3, [r3, #0]
9000b688:	1ad3      	subs	r3, r2, r3
9000b68a:	2b00      	cmp	r3, #0
9000b68c:	dd12      	ble.n	9000b6b4 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
9000b68e:	4b10      	ldr	r3, [pc, #64]	; (9000b6d0 <tcp_receive+0xd04>)
9000b690:	681b      	ldr	r3, [r3, #0]
9000b692:	b29a      	uxth	r2, r3
9000b694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000b696:	68db      	ldr	r3, [r3, #12]
9000b698:	685b      	ldr	r3, [r3, #4]
9000b69a:	b29b      	uxth	r3, r3
9000b69c:	1ad3      	subs	r3, r2, r3
9000b69e:	b29a      	uxth	r2, r3
9000b6a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000b6a2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
9000b6a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000b6a6:	685a      	ldr	r2, [r3, #4]
9000b6a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000b6aa:	891b      	ldrh	r3, [r3, #8]
9000b6ac:	4619      	mov	r1, r3
9000b6ae:	4610      	mov	r0, r2
9000b6b0:	f7fb fc80 	bl	90006fb4 <pbuf_realloc>
                    }
                    prev->next = cseg;
9000b6b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000b6b6:	69fa      	ldr	r2, [r7, #28]
9000b6b8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
9000b6ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
9000b6bc:	69f8      	ldr	r0, [r7, #28]
9000b6be:	f7ff f881 	bl	9000a7c4 <tcp_oos_insert_segment>
                  }
                  break;
9000b6c2:	e0e2      	b.n	9000b88a <tcp_receive+0xebe>
9000b6c4:	2000a8e8 	.word	0x2000a8e8
9000b6c8:	2000a8e5 	.word	0x2000a8e5
9000b6cc:	2000a8b8 	.word	0x2000a8b8
9000b6d0:	2000a8d8 	.word	0x2000a8d8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
9000b6d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000b6d6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
9000b6d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000b6da:	681b      	ldr	r3, [r3, #0]
9000b6dc:	2b00      	cmp	r3, #0
9000b6de:	f040 80c6 	bne.w	9000b86e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
9000b6e2:	4b80      	ldr	r3, [pc, #512]	; (9000b8e4 <tcp_receive+0xf18>)
9000b6e4:	681a      	ldr	r2, [r3, #0]
9000b6e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000b6e8:	68db      	ldr	r3, [r3, #12]
9000b6ea:	685b      	ldr	r3, [r3, #4]
9000b6ec:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
9000b6ee:	2b00      	cmp	r3, #0
9000b6f0:	f340 80bd 	ble.w	9000b86e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
9000b6f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000b6f6:	68db      	ldr	r3, [r3, #12]
9000b6f8:	899b      	ldrh	r3, [r3, #12]
9000b6fa:	b29b      	uxth	r3, r3
9000b6fc:	4618      	mov	r0, r3
9000b6fe:	f7fa fa17 	bl	90005b30 <lwip_htons>
9000b702:	4603      	mov	r3, r0
9000b704:	b2db      	uxtb	r3, r3
9000b706:	f003 0301 	and.w	r3, r3, #1
9000b70a:	2b00      	cmp	r3, #0
9000b70c:	f040 80bf 	bne.w	9000b88e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
9000b710:	4875      	ldr	r0, [pc, #468]	; (9000b8e8 <tcp_receive+0xf1c>)
9000b712:	f7fd fa39 	bl	90008b88 <tcp_seg_copy>
9000b716:	4602      	mov	r2, r0
9000b718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000b71a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
9000b71c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000b71e:	681b      	ldr	r3, [r3, #0]
9000b720:	2b00      	cmp	r3, #0
9000b722:	f000 80b6 	beq.w	9000b892 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
9000b726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000b728:	68db      	ldr	r3, [r3, #12]
9000b72a:	685b      	ldr	r3, [r3, #4]
9000b72c:	6bba      	ldr	r2, [r7, #56]	; 0x38
9000b72e:	8912      	ldrh	r2, [r2, #8]
9000b730:	441a      	add	r2, r3
9000b732:	4b6c      	ldr	r3, [pc, #432]	; (9000b8e4 <tcp_receive+0xf18>)
9000b734:	681b      	ldr	r3, [r3, #0]
9000b736:	1ad3      	subs	r3, r2, r3
9000b738:	2b00      	cmp	r3, #0
9000b73a:	dd12      	ble.n	9000b762 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
9000b73c:	4b69      	ldr	r3, [pc, #420]	; (9000b8e4 <tcp_receive+0xf18>)
9000b73e:	681b      	ldr	r3, [r3, #0]
9000b740:	b29a      	uxth	r2, r3
9000b742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000b744:	68db      	ldr	r3, [r3, #12]
9000b746:	685b      	ldr	r3, [r3, #4]
9000b748:	b29b      	uxth	r3, r3
9000b74a:	1ad3      	subs	r3, r2, r3
9000b74c:	b29a      	uxth	r2, r3
9000b74e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000b750:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
9000b752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000b754:	685a      	ldr	r2, [r3, #4]
9000b756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000b758:	891b      	ldrh	r3, [r3, #8]
9000b75a:	4619      	mov	r1, r3
9000b75c:	4610      	mov	r0, r2
9000b75e:	f7fb fc29 	bl	90006fb4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
9000b762:	4b62      	ldr	r3, [pc, #392]	; (9000b8ec <tcp_receive+0xf20>)
9000b764:	881b      	ldrh	r3, [r3, #0]
9000b766:	461a      	mov	r2, r3
9000b768:	4b5e      	ldr	r3, [pc, #376]	; (9000b8e4 <tcp_receive+0xf18>)
9000b76a:	681b      	ldr	r3, [r3, #0]
9000b76c:	441a      	add	r2, r3
9000b76e:	687b      	ldr	r3, [r7, #4]
9000b770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000b772:	6879      	ldr	r1, [r7, #4]
9000b774:	8d09      	ldrh	r1, [r1, #40]	; 0x28
9000b776:	440b      	add	r3, r1
9000b778:	1ad3      	subs	r3, r2, r3
9000b77a:	2b00      	cmp	r3, #0
9000b77c:	f340 8089 	ble.w	9000b892 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
9000b780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000b782:	681b      	ldr	r3, [r3, #0]
9000b784:	68db      	ldr	r3, [r3, #12]
9000b786:	899b      	ldrh	r3, [r3, #12]
9000b788:	b29b      	uxth	r3, r3
9000b78a:	4618      	mov	r0, r3
9000b78c:	f7fa f9d0 	bl	90005b30 <lwip_htons>
9000b790:	4603      	mov	r3, r0
9000b792:	b2db      	uxtb	r3, r3
9000b794:	f003 0301 	and.w	r3, r3, #1
9000b798:	2b00      	cmp	r3, #0
9000b79a:	d022      	beq.n	9000b7e2 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
9000b79c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000b79e:	681b      	ldr	r3, [r3, #0]
9000b7a0:	68db      	ldr	r3, [r3, #12]
9000b7a2:	899b      	ldrh	r3, [r3, #12]
9000b7a4:	b29b      	uxth	r3, r3
9000b7a6:	b21b      	sxth	r3, r3
9000b7a8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
9000b7ac:	b21c      	sxth	r4, r3
9000b7ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000b7b0:	681b      	ldr	r3, [r3, #0]
9000b7b2:	68db      	ldr	r3, [r3, #12]
9000b7b4:	899b      	ldrh	r3, [r3, #12]
9000b7b6:	b29b      	uxth	r3, r3
9000b7b8:	4618      	mov	r0, r3
9000b7ba:	f7fa f9b9 	bl	90005b30 <lwip_htons>
9000b7be:	4603      	mov	r3, r0
9000b7c0:	b2db      	uxtb	r3, r3
9000b7c2:	b29b      	uxth	r3, r3
9000b7c4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
9000b7c8:	b29b      	uxth	r3, r3
9000b7ca:	4618      	mov	r0, r3
9000b7cc:	f7fa f9b0 	bl	90005b30 <lwip_htons>
9000b7d0:	4603      	mov	r3, r0
9000b7d2:	b21b      	sxth	r3, r3
9000b7d4:	4323      	orrs	r3, r4
9000b7d6:	b21a      	sxth	r2, r3
9000b7d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000b7da:	681b      	ldr	r3, [r3, #0]
9000b7dc:	68db      	ldr	r3, [r3, #12]
9000b7de:	b292      	uxth	r2, r2
9000b7e0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
9000b7e2:	687b      	ldr	r3, [r7, #4]
9000b7e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000b7e6:	b29a      	uxth	r2, r3
9000b7e8:	687b      	ldr	r3, [r7, #4]
9000b7ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
9000b7ec:	4413      	add	r3, r2
9000b7ee:	b299      	uxth	r1, r3
9000b7f0:	4b3c      	ldr	r3, [pc, #240]	; (9000b8e4 <tcp_receive+0xf18>)
9000b7f2:	681b      	ldr	r3, [r3, #0]
9000b7f4:	b29a      	uxth	r2, r3
9000b7f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000b7f8:	681b      	ldr	r3, [r3, #0]
9000b7fa:	1a8a      	subs	r2, r1, r2
9000b7fc:	b292      	uxth	r2, r2
9000b7fe:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
9000b800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000b802:	681b      	ldr	r3, [r3, #0]
9000b804:	685a      	ldr	r2, [r3, #4]
9000b806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000b808:	681b      	ldr	r3, [r3, #0]
9000b80a:	891b      	ldrh	r3, [r3, #8]
9000b80c:	4619      	mov	r1, r3
9000b80e:	4610      	mov	r0, r2
9000b810:	f7fb fbd0 	bl	90006fb4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
9000b814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000b816:	681b      	ldr	r3, [r3, #0]
9000b818:	891c      	ldrh	r4, [r3, #8]
9000b81a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000b81c:	681b      	ldr	r3, [r3, #0]
9000b81e:	68db      	ldr	r3, [r3, #12]
9000b820:	899b      	ldrh	r3, [r3, #12]
9000b822:	b29b      	uxth	r3, r3
9000b824:	4618      	mov	r0, r3
9000b826:	f7fa f983 	bl	90005b30 <lwip_htons>
9000b82a:	4603      	mov	r3, r0
9000b82c:	b2db      	uxtb	r3, r3
9000b82e:	f003 0303 	and.w	r3, r3, #3
9000b832:	2b00      	cmp	r3, #0
9000b834:	d001      	beq.n	9000b83a <tcp_receive+0xe6e>
9000b836:	2301      	movs	r3, #1
9000b838:	e000      	b.n	9000b83c <tcp_receive+0xe70>
9000b83a:	2300      	movs	r3, #0
9000b83c:	4423      	add	r3, r4
9000b83e:	b29a      	uxth	r2, r3
9000b840:	4b2a      	ldr	r3, [pc, #168]	; (9000b8ec <tcp_receive+0xf20>)
9000b842:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
9000b844:	4b29      	ldr	r3, [pc, #164]	; (9000b8ec <tcp_receive+0xf20>)
9000b846:	881b      	ldrh	r3, [r3, #0]
9000b848:	461a      	mov	r2, r3
9000b84a:	4b26      	ldr	r3, [pc, #152]	; (9000b8e4 <tcp_receive+0xf18>)
9000b84c:	681b      	ldr	r3, [r3, #0]
9000b84e:	441a      	add	r2, r3
9000b850:	687b      	ldr	r3, [r7, #4]
9000b852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000b854:	6879      	ldr	r1, [r7, #4]
9000b856:	8d09      	ldrh	r1, [r1, #40]	; 0x28
9000b858:	440b      	add	r3, r1
9000b85a:	429a      	cmp	r2, r3
9000b85c:	d019      	beq.n	9000b892 <tcp_receive+0xec6>
9000b85e:	4b24      	ldr	r3, [pc, #144]	; (9000b8f0 <tcp_receive+0xf24>)
9000b860:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
9000b864:	4923      	ldr	r1, [pc, #140]	; (9000b8f4 <tcp_receive+0xf28>)
9000b866:	4824      	ldr	r0, [pc, #144]	; (9000b8f8 <tcp_receive+0xf2c>)
9000b868:	f004 fe40 	bl	900104ec <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
9000b86c:	e011      	b.n	9000b892 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
9000b86e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000b870:	681b      	ldr	r3, [r3, #0]
9000b872:	63bb      	str	r3, [r7, #56]	; 0x38
9000b874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000b876:	2b00      	cmp	r3, #0
9000b878:	f47f aea4 	bne.w	9000b5c4 <tcp_receive+0xbf8>
9000b87c:	e00a      	b.n	9000b894 <tcp_receive+0xec8>
                break;
9000b87e:	bf00      	nop
9000b880:	e008      	b.n	9000b894 <tcp_receive+0xec8>
                break;
9000b882:	bf00      	nop
9000b884:	e006      	b.n	9000b894 <tcp_receive+0xec8>
                  break;
9000b886:	bf00      	nop
9000b888:	e004      	b.n	9000b894 <tcp_receive+0xec8>
                  break;
9000b88a:	bf00      	nop
9000b88c:	e002      	b.n	9000b894 <tcp_receive+0xec8>
                  break;
9000b88e:	bf00      	nop
9000b890:	e000      	b.n	9000b894 <tcp_receive+0xec8>
                break;
9000b892:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
9000b894:	6878      	ldr	r0, [r7, #4]
9000b896:	f001 fe8b 	bl	9000d5b0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
9000b89a:	e003      	b.n	9000b8a4 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
9000b89c:	6878      	ldr	r0, [r7, #4]
9000b89e:	f001 fe87 	bl	9000d5b0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
9000b8a2:	e01a      	b.n	9000b8da <tcp_receive+0xf0e>
9000b8a4:	e019      	b.n	9000b8da <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
9000b8a6:	4b0f      	ldr	r3, [pc, #60]	; (9000b8e4 <tcp_receive+0xf18>)
9000b8a8:	681a      	ldr	r2, [r3, #0]
9000b8aa:	687b      	ldr	r3, [r7, #4]
9000b8ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000b8ae:	1ad3      	subs	r3, r2, r3
9000b8b0:	2b00      	cmp	r3, #0
9000b8b2:	db0a      	blt.n	9000b8ca <tcp_receive+0xefe>
9000b8b4:	4b0b      	ldr	r3, [pc, #44]	; (9000b8e4 <tcp_receive+0xf18>)
9000b8b6:	681a      	ldr	r2, [r3, #0]
9000b8b8:	687b      	ldr	r3, [r7, #4]
9000b8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000b8bc:	6879      	ldr	r1, [r7, #4]
9000b8be:	8d09      	ldrh	r1, [r1, #40]	; 0x28
9000b8c0:	440b      	add	r3, r1
9000b8c2:	1ad3      	subs	r3, r2, r3
9000b8c4:	3301      	adds	r3, #1
9000b8c6:	2b00      	cmp	r3, #0
9000b8c8:	dd07      	ble.n	9000b8da <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
9000b8ca:	687b      	ldr	r3, [r7, #4]
9000b8cc:	8b5b      	ldrh	r3, [r3, #26]
9000b8ce:	f043 0302 	orr.w	r3, r3, #2
9000b8d2:	b29a      	uxth	r2, r3
9000b8d4:	687b      	ldr	r3, [r7, #4]
9000b8d6:	835a      	strh	r2, [r3, #26]
    }
  }
}
9000b8d8:	e7ff      	b.n	9000b8da <tcp_receive+0xf0e>
9000b8da:	bf00      	nop
9000b8dc:	3750      	adds	r7, #80	; 0x50
9000b8de:	46bd      	mov	sp, r7
9000b8e0:	bdb0      	pop	{r4, r5, r7, pc}
9000b8e2:	bf00      	nop
9000b8e4:	2000a8d8 	.word	0x2000a8d8
9000b8e8:	2000a8b8 	.word	0x2000a8b8
9000b8ec:	2000a8e2 	.word	0x2000a8e2
9000b8f0:	90012f24 	.word	0x90012f24
9000b8f4:	900132cc 	.word	0x900132cc
9000b8f8:	90012f70 	.word	0x90012f70

9000b8fc <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
9000b8fc:	b480      	push	{r7}
9000b8fe:	b083      	sub	sp, #12
9000b900:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
9000b902:	4b15      	ldr	r3, [pc, #84]	; (9000b958 <tcp_get_next_optbyte+0x5c>)
9000b904:	881b      	ldrh	r3, [r3, #0]
9000b906:	1c5a      	adds	r2, r3, #1
9000b908:	b291      	uxth	r1, r2
9000b90a:	4a13      	ldr	r2, [pc, #76]	; (9000b958 <tcp_get_next_optbyte+0x5c>)
9000b90c:	8011      	strh	r1, [r2, #0]
9000b90e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
9000b910:	4b12      	ldr	r3, [pc, #72]	; (9000b95c <tcp_get_next_optbyte+0x60>)
9000b912:	681b      	ldr	r3, [r3, #0]
9000b914:	2b00      	cmp	r3, #0
9000b916:	d004      	beq.n	9000b922 <tcp_get_next_optbyte+0x26>
9000b918:	4b11      	ldr	r3, [pc, #68]	; (9000b960 <tcp_get_next_optbyte+0x64>)
9000b91a:	881b      	ldrh	r3, [r3, #0]
9000b91c:	88fa      	ldrh	r2, [r7, #6]
9000b91e:	429a      	cmp	r2, r3
9000b920:	d208      	bcs.n	9000b934 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
9000b922:	4b10      	ldr	r3, [pc, #64]	; (9000b964 <tcp_get_next_optbyte+0x68>)
9000b924:	681b      	ldr	r3, [r3, #0]
9000b926:	3314      	adds	r3, #20
9000b928:	603b      	str	r3, [r7, #0]
    return opts[optidx];
9000b92a:	88fb      	ldrh	r3, [r7, #6]
9000b92c:	683a      	ldr	r2, [r7, #0]
9000b92e:	4413      	add	r3, r2
9000b930:	781b      	ldrb	r3, [r3, #0]
9000b932:	e00b      	b.n	9000b94c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
9000b934:	88fb      	ldrh	r3, [r7, #6]
9000b936:	b2da      	uxtb	r2, r3
9000b938:	4b09      	ldr	r3, [pc, #36]	; (9000b960 <tcp_get_next_optbyte+0x64>)
9000b93a:	881b      	ldrh	r3, [r3, #0]
9000b93c:	b2db      	uxtb	r3, r3
9000b93e:	1ad3      	subs	r3, r2, r3
9000b940:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
9000b942:	4b06      	ldr	r3, [pc, #24]	; (9000b95c <tcp_get_next_optbyte+0x60>)
9000b944:	681a      	ldr	r2, [r3, #0]
9000b946:	797b      	ldrb	r3, [r7, #5]
9000b948:	4413      	add	r3, r2
9000b94a:	781b      	ldrb	r3, [r3, #0]
  }
}
9000b94c:	4618      	mov	r0, r3
9000b94e:	370c      	adds	r7, #12
9000b950:	46bd      	mov	sp, r7
9000b952:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b956:	4770      	bx	lr
9000b958:	2000a8d4 	.word	0x2000a8d4
9000b95c:	2000a8d0 	.word	0x2000a8d0
9000b960:	2000a8ce 	.word	0x2000a8ce
9000b964:	2000a8c8 	.word	0x2000a8c8

9000b968 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
9000b968:	b580      	push	{r7, lr}
9000b96a:	b084      	sub	sp, #16
9000b96c:	af00      	add	r7, sp, #0
9000b96e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
9000b970:	687b      	ldr	r3, [r7, #4]
9000b972:	2b00      	cmp	r3, #0
9000b974:	d106      	bne.n	9000b984 <tcp_parseopt+0x1c>
9000b976:	4b32      	ldr	r3, [pc, #200]	; (9000ba40 <tcp_parseopt+0xd8>)
9000b978:	f240 727d 	movw	r2, #1917	; 0x77d
9000b97c:	4931      	ldr	r1, [pc, #196]	; (9000ba44 <tcp_parseopt+0xdc>)
9000b97e:	4832      	ldr	r0, [pc, #200]	; (9000ba48 <tcp_parseopt+0xe0>)
9000b980:	f004 fdb4 	bl	900104ec <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
9000b984:	4b31      	ldr	r3, [pc, #196]	; (9000ba4c <tcp_parseopt+0xe4>)
9000b986:	881b      	ldrh	r3, [r3, #0]
9000b988:	2b00      	cmp	r3, #0
9000b98a:	d055      	beq.n	9000ba38 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
9000b98c:	4b30      	ldr	r3, [pc, #192]	; (9000ba50 <tcp_parseopt+0xe8>)
9000b98e:	2200      	movs	r2, #0
9000b990:	801a      	strh	r2, [r3, #0]
9000b992:	e045      	b.n	9000ba20 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
9000b994:	f7ff ffb2 	bl	9000b8fc <tcp_get_next_optbyte>
9000b998:	4603      	mov	r3, r0
9000b99a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
9000b99c:	7bfb      	ldrb	r3, [r7, #15]
9000b99e:	2b02      	cmp	r3, #2
9000b9a0:	d006      	beq.n	9000b9b0 <tcp_parseopt+0x48>
9000b9a2:	2b02      	cmp	r3, #2
9000b9a4:	dc2b      	bgt.n	9000b9fe <tcp_parseopt+0x96>
9000b9a6:	2b00      	cmp	r3, #0
9000b9a8:	d041      	beq.n	9000ba2e <tcp_parseopt+0xc6>
9000b9aa:	2b01      	cmp	r3, #1
9000b9ac:	d127      	bne.n	9000b9fe <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
9000b9ae:	e037      	b.n	9000ba20 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
9000b9b0:	f7ff ffa4 	bl	9000b8fc <tcp_get_next_optbyte>
9000b9b4:	4603      	mov	r3, r0
9000b9b6:	2b04      	cmp	r3, #4
9000b9b8:	d13b      	bne.n	9000ba32 <tcp_parseopt+0xca>
9000b9ba:	4b25      	ldr	r3, [pc, #148]	; (9000ba50 <tcp_parseopt+0xe8>)
9000b9bc:	881b      	ldrh	r3, [r3, #0]
9000b9be:	3301      	adds	r3, #1
9000b9c0:	4a22      	ldr	r2, [pc, #136]	; (9000ba4c <tcp_parseopt+0xe4>)
9000b9c2:	8812      	ldrh	r2, [r2, #0]
9000b9c4:	4293      	cmp	r3, r2
9000b9c6:	da34      	bge.n	9000ba32 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
9000b9c8:	f7ff ff98 	bl	9000b8fc <tcp_get_next_optbyte>
9000b9cc:	4603      	mov	r3, r0
9000b9ce:	b29b      	uxth	r3, r3
9000b9d0:	021b      	lsls	r3, r3, #8
9000b9d2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
9000b9d4:	f7ff ff92 	bl	9000b8fc <tcp_get_next_optbyte>
9000b9d8:	4603      	mov	r3, r0
9000b9da:	b29a      	uxth	r2, r3
9000b9dc:	89bb      	ldrh	r3, [r7, #12]
9000b9de:	4313      	orrs	r3, r2
9000b9e0:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
9000b9e2:	89bb      	ldrh	r3, [r7, #12]
9000b9e4:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
9000b9e8:	d804      	bhi.n	9000b9f4 <tcp_parseopt+0x8c>
9000b9ea:	89bb      	ldrh	r3, [r7, #12]
9000b9ec:	2b00      	cmp	r3, #0
9000b9ee:	d001      	beq.n	9000b9f4 <tcp_parseopt+0x8c>
9000b9f0:	89ba      	ldrh	r2, [r7, #12]
9000b9f2:	e001      	b.n	9000b9f8 <tcp_parseopt+0x90>
9000b9f4:	f44f 7206 	mov.w	r2, #536	; 0x218
9000b9f8:	687b      	ldr	r3, [r7, #4]
9000b9fa:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
9000b9fc:	e010      	b.n	9000ba20 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
9000b9fe:	f7ff ff7d 	bl	9000b8fc <tcp_get_next_optbyte>
9000ba02:	4603      	mov	r3, r0
9000ba04:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
9000ba06:	7afb      	ldrb	r3, [r7, #11]
9000ba08:	2b01      	cmp	r3, #1
9000ba0a:	d914      	bls.n	9000ba36 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
9000ba0c:	7afb      	ldrb	r3, [r7, #11]
9000ba0e:	b29a      	uxth	r2, r3
9000ba10:	4b0f      	ldr	r3, [pc, #60]	; (9000ba50 <tcp_parseopt+0xe8>)
9000ba12:	881b      	ldrh	r3, [r3, #0]
9000ba14:	4413      	add	r3, r2
9000ba16:	b29b      	uxth	r3, r3
9000ba18:	3b02      	subs	r3, #2
9000ba1a:	b29a      	uxth	r2, r3
9000ba1c:	4b0c      	ldr	r3, [pc, #48]	; (9000ba50 <tcp_parseopt+0xe8>)
9000ba1e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
9000ba20:	4b0b      	ldr	r3, [pc, #44]	; (9000ba50 <tcp_parseopt+0xe8>)
9000ba22:	881a      	ldrh	r2, [r3, #0]
9000ba24:	4b09      	ldr	r3, [pc, #36]	; (9000ba4c <tcp_parseopt+0xe4>)
9000ba26:	881b      	ldrh	r3, [r3, #0]
9000ba28:	429a      	cmp	r2, r3
9000ba2a:	d3b3      	bcc.n	9000b994 <tcp_parseopt+0x2c>
9000ba2c:	e004      	b.n	9000ba38 <tcp_parseopt+0xd0>
          return;
9000ba2e:	bf00      	nop
9000ba30:	e002      	b.n	9000ba38 <tcp_parseopt+0xd0>
            return;
9000ba32:	bf00      	nop
9000ba34:	e000      	b.n	9000ba38 <tcp_parseopt+0xd0>
            return;
9000ba36:	bf00      	nop
      }
    }
  }
}
9000ba38:	3710      	adds	r7, #16
9000ba3a:	46bd      	mov	sp, r7
9000ba3c:	bd80      	pop	{r7, pc}
9000ba3e:	bf00      	nop
9000ba40:	90012f24 	.word	0x90012f24
9000ba44:	90013388 	.word	0x90013388
9000ba48:	90012f70 	.word	0x90012f70
9000ba4c:	2000a8cc 	.word	0x2000a8cc
9000ba50:	2000a8d4 	.word	0x2000a8d4

9000ba54 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
9000ba54:	b480      	push	{r7}
9000ba56:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
9000ba58:	4b05      	ldr	r3, [pc, #20]	; (9000ba70 <tcp_trigger_input_pcb_close+0x1c>)
9000ba5a:	781b      	ldrb	r3, [r3, #0]
9000ba5c:	f043 0310 	orr.w	r3, r3, #16
9000ba60:	b2da      	uxtb	r2, r3
9000ba62:	4b03      	ldr	r3, [pc, #12]	; (9000ba70 <tcp_trigger_input_pcb_close+0x1c>)
9000ba64:	701a      	strb	r2, [r3, #0]
}
9000ba66:	bf00      	nop
9000ba68:	46bd      	mov	sp, r7
9000ba6a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ba6e:	4770      	bx	lr
9000ba70:	2000a8e5 	.word	0x2000a8e5

9000ba74 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
9000ba74:	b580      	push	{r7, lr}
9000ba76:	b084      	sub	sp, #16
9000ba78:	af00      	add	r7, sp, #0
9000ba7a:	60f8      	str	r0, [r7, #12]
9000ba7c:	60b9      	str	r1, [r7, #8]
9000ba7e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
9000ba80:	68fb      	ldr	r3, [r7, #12]
9000ba82:	2b00      	cmp	r3, #0
9000ba84:	d00a      	beq.n	9000ba9c <tcp_route+0x28>
9000ba86:	68fb      	ldr	r3, [r7, #12]
9000ba88:	7a1b      	ldrb	r3, [r3, #8]
9000ba8a:	2b00      	cmp	r3, #0
9000ba8c:	d006      	beq.n	9000ba9c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
9000ba8e:	68fb      	ldr	r3, [r7, #12]
9000ba90:	7a1b      	ldrb	r3, [r3, #8]
9000ba92:	4618      	mov	r0, r3
9000ba94:	f7fb f8b4 	bl	90006c00 <netif_get_by_index>
9000ba98:	4603      	mov	r3, r0
9000ba9a:	e003      	b.n	9000baa4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
9000ba9c:	6878      	ldr	r0, [r7, #4]
9000ba9e:	f003 fad5 	bl	9000f04c <ip4_route>
9000baa2:	4603      	mov	r3, r0
  }
}
9000baa4:	4618      	mov	r0, r3
9000baa6:	3710      	adds	r7, #16
9000baa8:	46bd      	mov	sp, r7
9000baaa:	bd80      	pop	{r7, pc}

9000baac <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
9000baac:	b590      	push	{r4, r7, lr}
9000baae:	b087      	sub	sp, #28
9000bab0:	af00      	add	r7, sp, #0
9000bab2:	60f8      	str	r0, [r7, #12]
9000bab4:	60b9      	str	r1, [r7, #8]
9000bab6:	603b      	str	r3, [r7, #0]
9000bab8:	4613      	mov	r3, r2
9000baba:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
9000babc:	68fb      	ldr	r3, [r7, #12]
9000babe:	2b00      	cmp	r3, #0
9000bac0:	d105      	bne.n	9000bace <tcp_create_segment+0x22>
9000bac2:	4b44      	ldr	r3, [pc, #272]	; (9000bbd4 <tcp_create_segment+0x128>)
9000bac4:	22a3      	movs	r2, #163	; 0xa3
9000bac6:	4944      	ldr	r1, [pc, #272]	; (9000bbd8 <tcp_create_segment+0x12c>)
9000bac8:	4844      	ldr	r0, [pc, #272]	; (9000bbdc <tcp_create_segment+0x130>)
9000baca:	f004 fd0f 	bl	900104ec <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
9000bace:	68bb      	ldr	r3, [r7, #8]
9000bad0:	2b00      	cmp	r3, #0
9000bad2:	d105      	bne.n	9000bae0 <tcp_create_segment+0x34>
9000bad4:	4b3f      	ldr	r3, [pc, #252]	; (9000bbd4 <tcp_create_segment+0x128>)
9000bad6:	22a4      	movs	r2, #164	; 0xa4
9000bad8:	4941      	ldr	r1, [pc, #260]	; (9000bbe0 <tcp_create_segment+0x134>)
9000bada:	4840      	ldr	r0, [pc, #256]	; (9000bbdc <tcp_create_segment+0x130>)
9000badc:	f004 fd06 	bl	900104ec <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
9000bae0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
9000bae4:	009b      	lsls	r3, r3, #2
9000bae6:	b2db      	uxtb	r3, r3
9000bae8:	f003 0304 	and.w	r3, r3, #4
9000baec:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
9000baee:	2003      	movs	r0, #3
9000baf0:	f7fa fd00 	bl	900064f4 <memp_malloc>
9000baf4:	6138      	str	r0, [r7, #16]
9000baf6:	693b      	ldr	r3, [r7, #16]
9000baf8:	2b00      	cmp	r3, #0
9000bafa:	d104      	bne.n	9000bb06 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
9000bafc:	68b8      	ldr	r0, [r7, #8]
9000bafe:	f7fb fbdf 	bl	900072c0 <pbuf_free>
    return NULL;
9000bb02:	2300      	movs	r3, #0
9000bb04:	e061      	b.n	9000bbca <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
9000bb06:	693b      	ldr	r3, [r7, #16]
9000bb08:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
9000bb0c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
9000bb0e:	693b      	ldr	r3, [r7, #16]
9000bb10:	2200      	movs	r2, #0
9000bb12:	601a      	str	r2, [r3, #0]
  seg->p = p;
9000bb14:	693b      	ldr	r3, [r7, #16]
9000bb16:	68ba      	ldr	r2, [r7, #8]
9000bb18:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
9000bb1a:	68bb      	ldr	r3, [r7, #8]
9000bb1c:	891a      	ldrh	r2, [r3, #8]
9000bb1e:	7dfb      	ldrb	r3, [r7, #23]
9000bb20:	b29b      	uxth	r3, r3
9000bb22:	429a      	cmp	r2, r3
9000bb24:	d205      	bcs.n	9000bb32 <tcp_create_segment+0x86>
9000bb26:	4b2b      	ldr	r3, [pc, #172]	; (9000bbd4 <tcp_create_segment+0x128>)
9000bb28:	22b0      	movs	r2, #176	; 0xb0
9000bb2a:	492e      	ldr	r1, [pc, #184]	; (9000bbe4 <tcp_create_segment+0x138>)
9000bb2c:	482b      	ldr	r0, [pc, #172]	; (9000bbdc <tcp_create_segment+0x130>)
9000bb2e:	f004 fcdd 	bl	900104ec <iprintf>
  seg->len = p->tot_len - optlen;
9000bb32:	68bb      	ldr	r3, [r7, #8]
9000bb34:	891a      	ldrh	r2, [r3, #8]
9000bb36:	7dfb      	ldrb	r3, [r7, #23]
9000bb38:	b29b      	uxth	r3, r3
9000bb3a:	1ad3      	subs	r3, r2, r3
9000bb3c:	b29a      	uxth	r2, r3
9000bb3e:	693b      	ldr	r3, [r7, #16]
9000bb40:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
9000bb42:	2114      	movs	r1, #20
9000bb44:	68b8      	ldr	r0, [r7, #8]
9000bb46:	f7fb fb25 	bl	90007194 <pbuf_add_header>
9000bb4a:	4603      	mov	r3, r0
9000bb4c:	2b00      	cmp	r3, #0
9000bb4e:	d004      	beq.n	9000bb5a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
9000bb50:	6938      	ldr	r0, [r7, #16]
9000bb52:	f7fc ffe2 	bl	90008b1a <tcp_seg_free>
    return NULL;
9000bb56:	2300      	movs	r3, #0
9000bb58:	e037      	b.n	9000bbca <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
9000bb5a:	693b      	ldr	r3, [r7, #16]
9000bb5c:	685b      	ldr	r3, [r3, #4]
9000bb5e:	685a      	ldr	r2, [r3, #4]
9000bb60:	693b      	ldr	r3, [r7, #16]
9000bb62:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
9000bb64:	68fb      	ldr	r3, [r7, #12]
9000bb66:	8ada      	ldrh	r2, [r3, #22]
9000bb68:	693b      	ldr	r3, [r7, #16]
9000bb6a:	68dc      	ldr	r4, [r3, #12]
9000bb6c:	4610      	mov	r0, r2
9000bb6e:	f7f9 ffdf 	bl	90005b30 <lwip_htons>
9000bb72:	4603      	mov	r3, r0
9000bb74:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
9000bb76:	68fb      	ldr	r3, [r7, #12]
9000bb78:	8b1a      	ldrh	r2, [r3, #24]
9000bb7a:	693b      	ldr	r3, [r7, #16]
9000bb7c:	68dc      	ldr	r4, [r3, #12]
9000bb7e:	4610      	mov	r0, r2
9000bb80:	f7f9 ffd6 	bl	90005b30 <lwip_htons>
9000bb84:	4603      	mov	r3, r0
9000bb86:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
9000bb88:	693b      	ldr	r3, [r7, #16]
9000bb8a:	68dc      	ldr	r4, [r3, #12]
9000bb8c:	6838      	ldr	r0, [r7, #0]
9000bb8e:	f7f9 ffe4 	bl	90005b5a <lwip_htonl>
9000bb92:	4603      	mov	r3, r0
9000bb94:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
9000bb96:	7dfb      	ldrb	r3, [r7, #23]
9000bb98:	089b      	lsrs	r3, r3, #2
9000bb9a:	b2db      	uxtb	r3, r3
9000bb9c:	b29b      	uxth	r3, r3
9000bb9e:	3305      	adds	r3, #5
9000bba0:	b29b      	uxth	r3, r3
9000bba2:	031b      	lsls	r3, r3, #12
9000bba4:	b29a      	uxth	r2, r3
9000bba6:	79fb      	ldrb	r3, [r7, #7]
9000bba8:	b29b      	uxth	r3, r3
9000bbaa:	4313      	orrs	r3, r2
9000bbac:	b29a      	uxth	r2, r3
9000bbae:	693b      	ldr	r3, [r7, #16]
9000bbb0:	68dc      	ldr	r4, [r3, #12]
9000bbb2:	4610      	mov	r0, r2
9000bbb4:	f7f9 ffbc 	bl	90005b30 <lwip_htons>
9000bbb8:	4603      	mov	r3, r0
9000bbba:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
9000bbbc:	693b      	ldr	r3, [r7, #16]
9000bbbe:	68db      	ldr	r3, [r3, #12]
9000bbc0:	2200      	movs	r2, #0
9000bbc2:	749a      	strb	r2, [r3, #18]
9000bbc4:	2200      	movs	r2, #0
9000bbc6:	74da      	strb	r2, [r3, #19]
  return seg;
9000bbc8:	693b      	ldr	r3, [r7, #16]
}
9000bbca:	4618      	mov	r0, r3
9000bbcc:	371c      	adds	r7, #28
9000bbce:	46bd      	mov	sp, r7
9000bbd0:	bd90      	pop	{r4, r7, pc}
9000bbd2:	bf00      	nop
9000bbd4:	900133a4 	.word	0x900133a4
9000bbd8:	900133d8 	.word	0x900133d8
9000bbdc:	900133f8 	.word	0x900133f8
9000bbe0:	90013420 	.word	0x90013420
9000bbe4:	90013444 	.word	0x90013444

9000bbe8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
9000bbe8:	b580      	push	{r7, lr}
9000bbea:	b086      	sub	sp, #24
9000bbec:	af00      	add	r7, sp, #0
9000bbee:	607b      	str	r3, [r7, #4]
9000bbf0:	4603      	mov	r3, r0
9000bbf2:	73fb      	strb	r3, [r7, #15]
9000bbf4:	460b      	mov	r3, r1
9000bbf6:	81bb      	strh	r3, [r7, #12]
9000bbf8:	4613      	mov	r3, r2
9000bbfa:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
9000bbfc:	89bb      	ldrh	r3, [r7, #12]
9000bbfe:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
9000bc00:	687b      	ldr	r3, [r7, #4]
9000bc02:	2b00      	cmp	r3, #0
9000bc04:	d105      	bne.n	9000bc12 <tcp_pbuf_prealloc+0x2a>
9000bc06:	4b30      	ldr	r3, [pc, #192]	; (9000bcc8 <tcp_pbuf_prealloc+0xe0>)
9000bc08:	22e8      	movs	r2, #232	; 0xe8
9000bc0a:	4930      	ldr	r1, [pc, #192]	; (9000bccc <tcp_pbuf_prealloc+0xe4>)
9000bc0c:	4830      	ldr	r0, [pc, #192]	; (9000bcd0 <tcp_pbuf_prealloc+0xe8>)
9000bc0e:	f004 fc6d 	bl	900104ec <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
9000bc12:	6a3b      	ldr	r3, [r7, #32]
9000bc14:	2b00      	cmp	r3, #0
9000bc16:	d105      	bne.n	9000bc24 <tcp_pbuf_prealloc+0x3c>
9000bc18:	4b2b      	ldr	r3, [pc, #172]	; (9000bcc8 <tcp_pbuf_prealloc+0xe0>)
9000bc1a:	22e9      	movs	r2, #233	; 0xe9
9000bc1c:	492d      	ldr	r1, [pc, #180]	; (9000bcd4 <tcp_pbuf_prealloc+0xec>)
9000bc1e:	482c      	ldr	r0, [pc, #176]	; (9000bcd0 <tcp_pbuf_prealloc+0xe8>)
9000bc20:	f004 fc64 	bl	900104ec <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
9000bc24:	89ba      	ldrh	r2, [r7, #12]
9000bc26:	897b      	ldrh	r3, [r7, #10]
9000bc28:	429a      	cmp	r2, r3
9000bc2a:	d221      	bcs.n	9000bc70 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
9000bc2c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
9000bc30:	f003 0302 	and.w	r3, r3, #2
9000bc34:	2b00      	cmp	r3, #0
9000bc36:	d111      	bne.n	9000bc5c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
9000bc38:	6a3b      	ldr	r3, [r7, #32]
9000bc3a:	8b5b      	ldrh	r3, [r3, #26]
9000bc3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
9000bc40:	2b00      	cmp	r3, #0
9000bc42:	d115      	bne.n	9000bc70 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
9000bc44:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
9000bc48:	2b00      	cmp	r3, #0
9000bc4a:	d007      	beq.n	9000bc5c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
9000bc4c:	6a3b      	ldr	r3, [r7, #32]
9000bc4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
9000bc50:	2b00      	cmp	r3, #0
9000bc52:	d103      	bne.n	9000bc5c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
9000bc54:	6a3b      	ldr	r3, [r7, #32]
9000bc56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
9000bc58:	2b00      	cmp	r3, #0
9000bc5a:	d009      	beq.n	9000bc70 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
9000bc5c:	89bb      	ldrh	r3, [r7, #12]
9000bc5e:	f203 231b 	addw	r3, r3, #539	; 0x21b
9000bc62:	f023 0203 	bic.w	r2, r3, #3
9000bc66:	897b      	ldrh	r3, [r7, #10]
9000bc68:	4293      	cmp	r3, r2
9000bc6a:	bf28      	it	cs
9000bc6c:	4613      	movcs	r3, r2
9000bc6e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
9000bc70:	8af9      	ldrh	r1, [r7, #22]
9000bc72:	7bfb      	ldrb	r3, [r7, #15]
9000bc74:	f44f 7220 	mov.w	r2, #640	; 0x280
9000bc78:	4618      	mov	r0, r3
9000bc7a:	f7fb f83d 	bl	90006cf8 <pbuf_alloc>
9000bc7e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
9000bc80:	693b      	ldr	r3, [r7, #16]
9000bc82:	2b00      	cmp	r3, #0
9000bc84:	d101      	bne.n	9000bc8a <tcp_pbuf_prealloc+0xa2>
    return NULL;
9000bc86:	2300      	movs	r3, #0
9000bc88:	e019      	b.n	9000bcbe <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
9000bc8a:	693b      	ldr	r3, [r7, #16]
9000bc8c:	681b      	ldr	r3, [r3, #0]
9000bc8e:	2b00      	cmp	r3, #0
9000bc90:	d006      	beq.n	9000bca0 <tcp_pbuf_prealloc+0xb8>
9000bc92:	4b0d      	ldr	r3, [pc, #52]	; (9000bcc8 <tcp_pbuf_prealloc+0xe0>)
9000bc94:	f240 120b 	movw	r2, #267	; 0x10b
9000bc98:	490f      	ldr	r1, [pc, #60]	; (9000bcd8 <tcp_pbuf_prealloc+0xf0>)
9000bc9a:	480d      	ldr	r0, [pc, #52]	; (9000bcd0 <tcp_pbuf_prealloc+0xe8>)
9000bc9c:	f004 fc26 	bl	900104ec <iprintf>
  *oversize = p->len - length;
9000bca0:	693b      	ldr	r3, [r7, #16]
9000bca2:	895a      	ldrh	r2, [r3, #10]
9000bca4:	89bb      	ldrh	r3, [r7, #12]
9000bca6:	1ad3      	subs	r3, r2, r3
9000bca8:	b29a      	uxth	r2, r3
9000bcaa:	687b      	ldr	r3, [r7, #4]
9000bcac:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
9000bcae:	693b      	ldr	r3, [r7, #16]
9000bcb0:	89ba      	ldrh	r2, [r7, #12]
9000bcb2:	811a      	strh	r2, [r3, #8]
9000bcb4:	693b      	ldr	r3, [r7, #16]
9000bcb6:	891a      	ldrh	r2, [r3, #8]
9000bcb8:	693b      	ldr	r3, [r7, #16]
9000bcba:	815a      	strh	r2, [r3, #10]
  return p;
9000bcbc:	693b      	ldr	r3, [r7, #16]
}
9000bcbe:	4618      	mov	r0, r3
9000bcc0:	3718      	adds	r7, #24
9000bcc2:	46bd      	mov	sp, r7
9000bcc4:	bd80      	pop	{r7, pc}
9000bcc6:	bf00      	nop
9000bcc8:	900133a4 	.word	0x900133a4
9000bccc:	9001345c 	.word	0x9001345c
9000bcd0:	900133f8 	.word	0x900133f8
9000bcd4:	90013480 	.word	0x90013480
9000bcd8:	900134a0 	.word	0x900134a0

9000bcdc <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
9000bcdc:	b580      	push	{r7, lr}
9000bcde:	b082      	sub	sp, #8
9000bce0:	af00      	add	r7, sp, #0
9000bce2:	6078      	str	r0, [r7, #4]
9000bce4:	460b      	mov	r3, r1
9000bce6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
9000bce8:	687b      	ldr	r3, [r7, #4]
9000bcea:	2b00      	cmp	r3, #0
9000bcec:	d106      	bne.n	9000bcfc <tcp_write_checks+0x20>
9000bcee:	4b33      	ldr	r3, [pc, #204]	; (9000bdbc <tcp_write_checks+0xe0>)
9000bcf0:	f240 1233 	movw	r2, #307	; 0x133
9000bcf4:	4932      	ldr	r1, [pc, #200]	; (9000bdc0 <tcp_write_checks+0xe4>)
9000bcf6:	4833      	ldr	r0, [pc, #204]	; (9000bdc4 <tcp_write_checks+0xe8>)
9000bcf8:	f004 fbf8 	bl	900104ec <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
9000bcfc:	687b      	ldr	r3, [r7, #4]
9000bcfe:	7d1b      	ldrb	r3, [r3, #20]
9000bd00:	2b04      	cmp	r3, #4
9000bd02:	d00e      	beq.n	9000bd22 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
9000bd04:	687b      	ldr	r3, [r7, #4]
9000bd06:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
9000bd08:	2b07      	cmp	r3, #7
9000bd0a:	d00a      	beq.n	9000bd22 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
9000bd0c:	687b      	ldr	r3, [r7, #4]
9000bd0e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
9000bd10:	2b02      	cmp	r3, #2
9000bd12:	d006      	beq.n	9000bd22 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
9000bd14:	687b      	ldr	r3, [r7, #4]
9000bd16:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
9000bd18:	2b03      	cmp	r3, #3
9000bd1a:	d002      	beq.n	9000bd22 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
9000bd1c:	f06f 030a 	mvn.w	r3, #10
9000bd20:	e048      	b.n	9000bdb4 <tcp_write_checks+0xd8>
  } else if (len == 0) {
9000bd22:	887b      	ldrh	r3, [r7, #2]
9000bd24:	2b00      	cmp	r3, #0
9000bd26:	d101      	bne.n	9000bd2c <tcp_write_checks+0x50>
    return ERR_OK;
9000bd28:	2300      	movs	r3, #0
9000bd2a:	e043      	b.n	9000bdb4 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
9000bd2c:	687b      	ldr	r3, [r7, #4]
9000bd2e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
9000bd32:	887a      	ldrh	r2, [r7, #2]
9000bd34:	429a      	cmp	r2, r3
9000bd36:	d909      	bls.n	9000bd4c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
9000bd38:	687b      	ldr	r3, [r7, #4]
9000bd3a:	8b5b      	ldrh	r3, [r3, #26]
9000bd3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9000bd40:	b29a      	uxth	r2, r3
9000bd42:	687b      	ldr	r3, [r7, #4]
9000bd44:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
9000bd46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000bd4a:	e033      	b.n	9000bdb4 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
9000bd4c:	687b      	ldr	r3, [r7, #4]
9000bd4e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
9000bd52:	2b08      	cmp	r3, #8
9000bd54:	d909      	bls.n	9000bd6a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
9000bd56:	687b      	ldr	r3, [r7, #4]
9000bd58:	8b5b      	ldrh	r3, [r3, #26]
9000bd5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9000bd5e:	b29a      	uxth	r2, r3
9000bd60:	687b      	ldr	r3, [r7, #4]
9000bd62:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
9000bd64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000bd68:	e024      	b.n	9000bdb4 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
9000bd6a:	687b      	ldr	r3, [r7, #4]
9000bd6c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
9000bd70:	2b00      	cmp	r3, #0
9000bd72:	d00f      	beq.n	9000bd94 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
9000bd74:	687b      	ldr	r3, [r7, #4]
9000bd76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000bd78:	2b00      	cmp	r3, #0
9000bd7a:	d11a      	bne.n	9000bdb2 <tcp_write_checks+0xd6>
9000bd7c:	687b      	ldr	r3, [r7, #4]
9000bd7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000bd80:	2b00      	cmp	r3, #0
9000bd82:	d116      	bne.n	9000bdb2 <tcp_write_checks+0xd6>
9000bd84:	4b0d      	ldr	r3, [pc, #52]	; (9000bdbc <tcp_write_checks+0xe0>)
9000bd86:	f240 1255 	movw	r2, #341	; 0x155
9000bd8a:	490f      	ldr	r1, [pc, #60]	; (9000bdc8 <tcp_write_checks+0xec>)
9000bd8c:	480d      	ldr	r0, [pc, #52]	; (9000bdc4 <tcp_write_checks+0xe8>)
9000bd8e:	f004 fbad 	bl	900104ec <iprintf>
9000bd92:	e00e      	b.n	9000bdb2 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
9000bd94:	687b      	ldr	r3, [r7, #4]
9000bd96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000bd98:	2b00      	cmp	r3, #0
9000bd9a:	d103      	bne.n	9000bda4 <tcp_write_checks+0xc8>
9000bd9c:	687b      	ldr	r3, [r7, #4]
9000bd9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000bda0:	2b00      	cmp	r3, #0
9000bda2:	d006      	beq.n	9000bdb2 <tcp_write_checks+0xd6>
9000bda4:	4b05      	ldr	r3, [pc, #20]	; (9000bdbc <tcp_write_checks+0xe0>)
9000bda6:	f44f 72ac 	mov.w	r2, #344	; 0x158
9000bdaa:	4908      	ldr	r1, [pc, #32]	; (9000bdcc <tcp_write_checks+0xf0>)
9000bdac:	4805      	ldr	r0, [pc, #20]	; (9000bdc4 <tcp_write_checks+0xe8>)
9000bdae:	f004 fb9d 	bl	900104ec <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
9000bdb2:	2300      	movs	r3, #0
}
9000bdb4:	4618      	mov	r0, r3
9000bdb6:	3708      	adds	r7, #8
9000bdb8:	46bd      	mov	sp, r7
9000bdba:	bd80      	pop	{r7, pc}
9000bdbc:	900133a4 	.word	0x900133a4
9000bdc0:	900134b4 	.word	0x900134b4
9000bdc4:	900133f8 	.word	0x900133f8
9000bdc8:	900134d4 	.word	0x900134d4
9000bdcc:	90013510 	.word	0x90013510

9000bdd0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
9000bdd0:	b590      	push	{r4, r7, lr}
9000bdd2:	b09b      	sub	sp, #108	; 0x6c
9000bdd4:	af04      	add	r7, sp, #16
9000bdd6:	60f8      	str	r0, [r7, #12]
9000bdd8:	60b9      	str	r1, [r7, #8]
9000bdda:	4611      	mov	r1, r2
9000bddc:	461a      	mov	r2, r3
9000bdde:	460b      	mov	r3, r1
9000bde0:	80fb      	strh	r3, [r7, #6]
9000bde2:	4613      	mov	r3, r2
9000bde4:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
9000bde6:	2300      	movs	r3, #0
9000bde8:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
9000bdea:	2300      	movs	r3, #0
9000bdec:	653b      	str	r3, [r7, #80]	; 0x50
9000bdee:	2300      	movs	r3, #0
9000bdf0:	64fb      	str	r3, [r7, #76]	; 0x4c
9000bdf2:	2300      	movs	r3, #0
9000bdf4:	64bb      	str	r3, [r7, #72]	; 0x48
9000bdf6:	2300      	movs	r3, #0
9000bdf8:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
9000bdfa:	2300      	movs	r3, #0
9000bdfc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
9000be00:	2300      	movs	r3, #0
9000be02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
9000be06:	2300      	movs	r3, #0
9000be08:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
9000be0a:	2300      	movs	r3, #0
9000be0c:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
9000be0e:	2300      	movs	r3, #0
9000be10:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
9000be12:	68fb      	ldr	r3, [r7, #12]
9000be14:	2b00      	cmp	r3, #0
9000be16:	d109      	bne.n	9000be2c <tcp_write+0x5c>
9000be18:	4ba4      	ldr	r3, [pc, #656]	; (9000c0ac <tcp_write+0x2dc>)
9000be1a:	f44f 72cf 	mov.w	r2, #414	; 0x19e
9000be1e:	49a4      	ldr	r1, [pc, #656]	; (9000c0b0 <tcp_write+0x2e0>)
9000be20:	48a4      	ldr	r0, [pc, #656]	; (9000c0b4 <tcp_write+0x2e4>)
9000be22:	f004 fb63 	bl	900104ec <iprintf>
9000be26:	f06f 030f 	mvn.w	r3, #15
9000be2a:	e32a      	b.n	9000c482 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
9000be2c:	68fb      	ldr	r3, [r7, #12]
9000be2e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
9000be32:	085b      	lsrs	r3, r3, #1
9000be34:	b29a      	uxth	r2, r3
9000be36:	68fb      	ldr	r3, [r7, #12]
9000be38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000be3a:	4293      	cmp	r3, r2
9000be3c:	bf28      	it	cs
9000be3e:	4613      	movcs	r3, r2
9000be40:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
9000be42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
9000be44:	2b00      	cmp	r3, #0
9000be46:	d102      	bne.n	9000be4e <tcp_write+0x7e>
9000be48:	68fb      	ldr	r3, [r7, #12]
9000be4a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000be4c:	e000      	b.n	9000be50 <tcp_write+0x80>
9000be4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
9000be50:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
9000be52:	68bb      	ldr	r3, [r7, #8]
9000be54:	2b00      	cmp	r3, #0
9000be56:	d109      	bne.n	9000be6c <tcp_write+0x9c>
9000be58:	4b94      	ldr	r3, [pc, #592]	; (9000c0ac <tcp_write+0x2dc>)
9000be5a:	f240 12ad 	movw	r2, #429	; 0x1ad
9000be5e:	4996      	ldr	r1, [pc, #600]	; (9000c0b8 <tcp_write+0x2e8>)
9000be60:	4894      	ldr	r0, [pc, #592]	; (9000c0b4 <tcp_write+0x2e4>)
9000be62:	f004 fb43 	bl	900104ec <iprintf>
9000be66:	f06f 030f 	mvn.w	r3, #15
9000be6a:	e30a      	b.n	9000c482 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
9000be6c:	88fb      	ldrh	r3, [r7, #6]
9000be6e:	4619      	mov	r1, r3
9000be70:	68f8      	ldr	r0, [r7, #12]
9000be72:	f7ff ff33 	bl	9000bcdc <tcp_write_checks>
9000be76:	4603      	mov	r3, r0
9000be78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
9000be7c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
9000be80:	2b00      	cmp	r3, #0
9000be82:	d002      	beq.n	9000be8a <tcp_write+0xba>
    return err;
9000be84:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
9000be88:	e2fb      	b.n	9000c482 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
9000be8a:	68fb      	ldr	r3, [r7, #12]
9000be8c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
9000be90:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
9000be94:	2300      	movs	r3, #0
9000be96:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
9000be9a:	68fb      	ldr	r3, [r7, #12]
9000be9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000be9e:	2b00      	cmp	r3, #0
9000bea0:	f000 80f6 	beq.w	9000c090 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
9000bea4:	68fb      	ldr	r3, [r7, #12]
9000bea6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000bea8:	653b      	str	r3, [r7, #80]	; 0x50
9000beaa:	e002      	b.n	9000beb2 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
9000beac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000beae:	681b      	ldr	r3, [r3, #0]
9000beb0:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
9000beb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000beb4:	681b      	ldr	r3, [r3, #0]
9000beb6:	2b00      	cmp	r3, #0
9000beb8:	d1f8      	bne.n	9000beac <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
9000beba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000bebc:	7a9b      	ldrb	r3, [r3, #10]
9000bebe:	009b      	lsls	r3, r3, #2
9000bec0:	b29b      	uxth	r3, r3
9000bec2:	f003 0304 	and.w	r3, r3, #4
9000bec6:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
9000bec8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
9000beca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000becc:	891b      	ldrh	r3, [r3, #8]
9000bece:	4619      	mov	r1, r3
9000bed0:	8c3b      	ldrh	r3, [r7, #32]
9000bed2:	440b      	add	r3, r1
9000bed4:	429a      	cmp	r2, r3
9000bed6:	da06      	bge.n	9000bee6 <tcp_write+0x116>
9000bed8:	4b74      	ldr	r3, [pc, #464]	; (9000c0ac <tcp_write+0x2dc>)
9000beda:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
9000bede:	4977      	ldr	r1, [pc, #476]	; (9000c0bc <tcp_write+0x2ec>)
9000bee0:	4874      	ldr	r0, [pc, #464]	; (9000c0b4 <tcp_write+0x2e4>)
9000bee2:	f004 fb03 	bl	900104ec <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
9000bee6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000bee8:	891a      	ldrh	r2, [r3, #8]
9000beea:	8c3b      	ldrh	r3, [r7, #32]
9000beec:	4413      	add	r3, r2
9000beee:	b29b      	uxth	r3, r3
9000bef0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
9000bef2:	1ad3      	subs	r3, r2, r3
9000bef4:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
9000bef6:	68fb      	ldr	r3, [r7, #12]
9000bef8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
9000befc:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
9000befe:	8a7b      	ldrh	r3, [r7, #18]
9000bf00:	2b00      	cmp	r3, #0
9000bf02:	d026      	beq.n	9000bf52 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
9000bf04:	8a7b      	ldrh	r3, [r7, #18]
9000bf06:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
9000bf08:	429a      	cmp	r2, r3
9000bf0a:	d206      	bcs.n	9000bf1a <tcp_write+0x14a>
9000bf0c:	4b67      	ldr	r3, [pc, #412]	; (9000c0ac <tcp_write+0x2dc>)
9000bf0e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
9000bf12:	496b      	ldr	r1, [pc, #428]	; (9000c0c0 <tcp_write+0x2f0>)
9000bf14:	4867      	ldr	r0, [pc, #412]	; (9000c0b4 <tcp_write+0x2e4>)
9000bf16:	f004 fae9 	bl	900104ec <iprintf>
      seg = last_unsent;
9000bf1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000bf1c:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
9000bf1e:	8a7b      	ldrh	r3, [r7, #18]
9000bf20:	88fa      	ldrh	r2, [r7, #6]
9000bf22:	4293      	cmp	r3, r2
9000bf24:	bf28      	it	cs
9000bf26:	4613      	movcs	r3, r2
9000bf28:	b29b      	uxth	r3, r3
9000bf2a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
9000bf2c:	4293      	cmp	r3, r2
9000bf2e:	bf28      	it	cs
9000bf30:	4613      	movcs	r3, r2
9000bf32:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
9000bf34:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
9000bf38:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
9000bf3a:	4413      	add	r3, r2
9000bf3c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
9000bf40:	8a7a      	ldrh	r2, [r7, #18]
9000bf42:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
9000bf44:	1ad3      	subs	r3, r2, r3
9000bf46:	b29b      	uxth	r3, r3
9000bf48:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
9000bf4a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
9000bf4c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
9000bf4e:	1ad3      	subs	r3, r2, r3
9000bf50:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
9000bf52:	8a7b      	ldrh	r3, [r7, #18]
9000bf54:	2b00      	cmp	r3, #0
9000bf56:	d00b      	beq.n	9000bf70 <tcp_write+0x1a0>
9000bf58:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
9000bf5c:	88fb      	ldrh	r3, [r7, #6]
9000bf5e:	429a      	cmp	r2, r3
9000bf60:	d006      	beq.n	9000bf70 <tcp_write+0x1a0>
9000bf62:	4b52      	ldr	r3, [pc, #328]	; (9000c0ac <tcp_write+0x2dc>)
9000bf64:	f44f 7200 	mov.w	r2, #512	; 0x200
9000bf68:	4956      	ldr	r1, [pc, #344]	; (9000c0c4 <tcp_write+0x2f4>)
9000bf6a:	4852      	ldr	r0, [pc, #328]	; (9000c0b4 <tcp_write+0x2e4>)
9000bf6c:	f004 fabe 	bl	900104ec <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
9000bf70:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
9000bf74:	88fb      	ldrh	r3, [r7, #6]
9000bf76:	429a      	cmp	r2, r3
9000bf78:	f080 8167 	bcs.w	9000c24a <tcp_write+0x47a>
9000bf7c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
9000bf7e:	2b00      	cmp	r3, #0
9000bf80:	f000 8163 	beq.w	9000c24a <tcp_write+0x47a>
9000bf84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000bf86:	891b      	ldrh	r3, [r3, #8]
9000bf88:	2b00      	cmp	r3, #0
9000bf8a:	f000 815e 	beq.w	9000c24a <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
9000bf8e:	88fa      	ldrh	r2, [r7, #6]
9000bf90:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
9000bf94:	1ad2      	subs	r2, r2, r3
9000bf96:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
9000bf98:	4293      	cmp	r3, r2
9000bf9a:	bfa8      	it	ge
9000bf9c:	4613      	movge	r3, r2
9000bf9e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
9000bfa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000bfa2:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
9000bfa4:	797b      	ldrb	r3, [r7, #5]
9000bfa6:	f003 0301 	and.w	r3, r3, #1
9000bfaa:	2b00      	cmp	r3, #0
9000bfac:	d027      	beq.n	9000bffe <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
9000bfae:	f107 0012 	add.w	r0, r7, #18
9000bfb2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
9000bfb4:	8bf9      	ldrh	r1, [r7, #30]
9000bfb6:	2301      	movs	r3, #1
9000bfb8:	9302      	str	r3, [sp, #8]
9000bfba:	797b      	ldrb	r3, [r7, #5]
9000bfbc:	9301      	str	r3, [sp, #4]
9000bfbe:	68fb      	ldr	r3, [r7, #12]
9000bfc0:	9300      	str	r3, [sp, #0]
9000bfc2:	4603      	mov	r3, r0
9000bfc4:	2000      	movs	r0, #0
9000bfc6:	f7ff fe0f 	bl	9000bbe8 <tcp_pbuf_prealloc>
9000bfca:	6578      	str	r0, [r7, #84]	; 0x54
9000bfcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
9000bfce:	2b00      	cmp	r3, #0
9000bfd0:	f000 8225 	beq.w	9000c41e <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
9000bfd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
9000bfd6:	6858      	ldr	r0, [r3, #4]
9000bfd8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
9000bfdc:	68ba      	ldr	r2, [r7, #8]
9000bfde:	4413      	add	r3, r2
9000bfe0:	8bfa      	ldrh	r2, [r7, #30]
9000bfe2:	4619      	mov	r1, r3
9000bfe4:	f004 fa52 	bl	9001048c <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
9000bfe8:	6d78      	ldr	r0, [r7, #84]	; 0x54
9000bfea:	f7fb f9f1 	bl	900073d0 <pbuf_clen>
9000bfee:	4603      	mov	r3, r0
9000bff0:	461a      	mov	r2, r3
9000bff2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
9000bff6:	4413      	add	r3, r2
9000bff8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
9000bffc:	e041      	b.n	9000c082 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
9000bffe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000c000:	685b      	ldr	r3, [r3, #4]
9000c002:	637b      	str	r3, [r7, #52]	; 0x34
9000c004:	e002      	b.n	9000c00c <tcp_write+0x23c>
9000c006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000c008:	681b      	ldr	r3, [r3, #0]
9000c00a:	637b      	str	r3, [r7, #52]	; 0x34
9000c00c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000c00e:	681b      	ldr	r3, [r3, #0]
9000c010:	2b00      	cmp	r3, #0
9000c012:	d1f8      	bne.n	9000c006 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
9000c014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000c016:	7b1b      	ldrb	r3, [r3, #12]
9000c018:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
9000c01c:	2b00      	cmp	r3, #0
9000c01e:	d115      	bne.n	9000c04c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
9000c020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000c022:	685b      	ldr	r3, [r3, #4]
9000c024:	6b7a      	ldr	r2, [r7, #52]	; 0x34
9000c026:	8952      	ldrh	r2, [r2, #10]
9000c028:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
9000c02a:	68ba      	ldr	r2, [r7, #8]
9000c02c:	429a      	cmp	r2, r3
9000c02e:	d10d      	bne.n	9000c04c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
9000c030:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
9000c034:	2b00      	cmp	r3, #0
9000c036:	d006      	beq.n	9000c046 <tcp_write+0x276>
9000c038:	4b1c      	ldr	r3, [pc, #112]	; (9000c0ac <tcp_write+0x2dc>)
9000c03a:	f240 2231 	movw	r2, #561	; 0x231
9000c03e:	4922      	ldr	r1, [pc, #136]	; (9000c0c8 <tcp_write+0x2f8>)
9000c040:	481c      	ldr	r0, [pc, #112]	; (9000c0b4 <tcp_write+0x2e4>)
9000c042:	f004 fa53 	bl	900104ec <iprintf>
          extendlen = seglen;
9000c046:	8bfb      	ldrh	r3, [r7, #30]
9000c048:	87bb      	strh	r3, [r7, #60]	; 0x3c
9000c04a:	e01a      	b.n	9000c082 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
9000c04c:	8bfb      	ldrh	r3, [r7, #30]
9000c04e:	2201      	movs	r2, #1
9000c050:	4619      	mov	r1, r3
9000c052:	2000      	movs	r0, #0
9000c054:	f7fa fe50 	bl	90006cf8 <pbuf_alloc>
9000c058:	6578      	str	r0, [r7, #84]	; 0x54
9000c05a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
9000c05c:	2b00      	cmp	r3, #0
9000c05e:	f000 81e0 	beq.w	9000c422 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
9000c062:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
9000c066:	68ba      	ldr	r2, [r7, #8]
9000c068:	441a      	add	r2, r3
9000c06a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
9000c06c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
9000c06e:	6d78      	ldr	r0, [r7, #84]	; 0x54
9000c070:	f7fb f9ae 	bl	900073d0 <pbuf_clen>
9000c074:	4603      	mov	r3, r0
9000c076:	461a      	mov	r2, r3
9000c078:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
9000c07c:	4413      	add	r3, r2
9000c07e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
9000c082:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
9000c086:	8bfb      	ldrh	r3, [r7, #30]
9000c088:	4413      	add	r3, r2
9000c08a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
9000c08e:	e0dc      	b.n	9000c24a <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
9000c090:	68fb      	ldr	r3, [r7, #12]
9000c092:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
9000c096:	2b00      	cmp	r3, #0
9000c098:	f000 80d7 	beq.w	9000c24a <tcp_write+0x47a>
9000c09c:	4b03      	ldr	r3, [pc, #12]	; (9000c0ac <tcp_write+0x2dc>)
9000c09e:	f240 224a 	movw	r2, #586	; 0x24a
9000c0a2:	490a      	ldr	r1, [pc, #40]	; (9000c0cc <tcp_write+0x2fc>)
9000c0a4:	4803      	ldr	r0, [pc, #12]	; (9000c0b4 <tcp_write+0x2e4>)
9000c0a6:	f004 fa21 	bl	900104ec <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
9000c0aa:	e0ce      	b.n	9000c24a <tcp_write+0x47a>
9000c0ac:	900133a4 	.word	0x900133a4
9000c0b0:	90013544 	.word	0x90013544
9000c0b4:	900133f8 	.word	0x900133f8
9000c0b8:	9001355c 	.word	0x9001355c
9000c0bc:	90013590 	.word	0x90013590
9000c0c0:	900135a8 	.word	0x900135a8
9000c0c4:	900135c8 	.word	0x900135c8
9000c0c8:	900135e8 	.word	0x900135e8
9000c0cc:	90013614 	.word	0x90013614
    struct pbuf *p;
    u16_t left = len - pos;
9000c0d0:	88fa      	ldrh	r2, [r7, #6]
9000c0d2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
9000c0d6:	1ad3      	subs	r3, r2, r3
9000c0d8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
9000c0da:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
9000c0de:	b29b      	uxth	r3, r3
9000c0e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
9000c0e2:	1ad3      	subs	r3, r2, r3
9000c0e4:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
9000c0e6:	8b7a      	ldrh	r2, [r7, #26]
9000c0e8:	8bbb      	ldrh	r3, [r7, #28]
9000c0ea:	4293      	cmp	r3, r2
9000c0ec:	bf28      	it	cs
9000c0ee:	4613      	movcs	r3, r2
9000c0f0:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
9000c0f2:	797b      	ldrb	r3, [r7, #5]
9000c0f4:	f003 0301 	and.w	r3, r3, #1
9000c0f8:	2b00      	cmp	r3, #0
9000c0fa:	d036      	beq.n	9000c16a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
9000c0fc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
9000c100:	b29a      	uxth	r2, r3
9000c102:	8b3b      	ldrh	r3, [r7, #24]
9000c104:	4413      	add	r3, r2
9000c106:	b299      	uxth	r1, r3
9000c108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
9000c10a:	2b00      	cmp	r3, #0
9000c10c:	bf0c      	ite	eq
9000c10e:	2301      	moveq	r3, #1
9000c110:	2300      	movne	r3, #0
9000c112:	b2db      	uxtb	r3, r3
9000c114:	f107 0012 	add.w	r0, r7, #18
9000c118:	8cba      	ldrh	r2, [r7, #36]	; 0x24
9000c11a:	9302      	str	r3, [sp, #8]
9000c11c:	797b      	ldrb	r3, [r7, #5]
9000c11e:	9301      	str	r3, [sp, #4]
9000c120:	68fb      	ldr	r3, [r7, #12]
9000c122:	9300      	str	r3, [sp, #0]
9000c124:	4603      	mov	r3, r0
9000c126:	2036      	movs	r0, #54	; 0x36
9000c128:	f7ff fd5e 	bl	9000bbe8 <tcp_pbuf_prealloc>
9000c12c:	6338      	str	r0, [r7, #48]	; 0x30
9000c12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000c130:	2b00      	cmp	r3, #0
9000c132:	f000 8178 	beq.w	9000c426 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
9000c136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000c138:	895b      	ldrh	r3, [r3, #10]
9000c13a:	8b3a      	ldrh	r2, [r7, #24]
9000c13c:	429a      	cmp	r2, r3
9000c13e:	d906      	bls.n	9000c14e <tcp_write+0x37e>
9000c140:	4b8c      	ldr	r3, [pc, #560]	; (9000c374 <tcp_write+0x5a4>)
9000c142:	f240 2266 	movw	r2, #614	; 0x266
9000c146:	498c      	ldr	r1, [pc, #560]	; (9000c378 <tcp_write+0x5a8>)
9000c148:	488c      	ldr	r0, [pc, #560]	; (9000c37c <tcp_write+0x5ac>)
9000c14a:	f004 f9cf 	bl	900104ec <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
9000c14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000c150:	685a      	ldr	r2, [r3, #4]
9000c152:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
9000c156:	18d0      	adds	r0, r2, r3
9000c158:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
9000c15c:	68ba      	ldr	r2, [r7, #8]
9000c15e:	4413      	add	r3, r2
9000c160:	8b3a      	ldrh	r2, [r7, #24]
9000c162:	4619      	mov	r1, r3
9000c164:	f004 f992 	bl	9001048c <memcpy>
9000c168:	e02f      	b.n	9000c1ca <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
9000c16a:	8a7b      	ldrh	r3, [r7, #18]
9000c16c:	2b00      	cmp	r3, #0
9000c16e:	d006      	beq.n	9000c17e <tcp_write+0x3ae>
9000c170:	4b80      	ldr	r3, [pc, #512]	; (9000c374 <tcp_write+0x5a4>)
9000c172:	f240 2271 	movw	r2, #625	; 0x271
9000c176:	4982      	ldr	r1, [pc, #520]	; (9000c380 <tcp_write+0x5b0>)
9000c178:	4880      	ldr	r0, [pc, #512]	; (9000c37c <tcp_write+0x5ac>)
9000c17a:	f004 f9b7 	bl	900104ec <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
9000c17e:	8b3b      	ldrh	r3, [r7, #24]
9000c180:	2201      	movs	r2, #1
9000c182:	4619      	mov	r1, r3
9000c184:	2036      	movs	r0, #54	; 0x36
9000c186:	f7fa fdb7 	bl	90006cf8 <pbuf_alloc>
9000c18a:	6178      	str	r0, [r7, #20]
9000c18c:	697b      	ldr	r3, [r7, #20]
9000c18e:	2b00      	cmp	r3, #0
9000c190:	f000 814b 	beq.w	9000c42a <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
9000c194:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
9000c198:	68ba      	ldr	r2, [r7, #8]
9000c19a:	441a      	add	r2, r3
9000c19c:	697b      	ldr	r3, [r7, #20]
9000c19e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
9000c1a0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
9000c1a4:	b29b      	uxth	r3, r3
9000c1a6:	f44f 7220 	mov.w	r2, #640	; 0x280
9000c1aa:	4619      	mov	r1, r3
9000c1ac:	2036      	movs	r0, #54	; 0x36
9000c1ae:	f7fa fda3 	bl	90006cf8 <pbuf_alloc>
9000c1b2:	6338      	str	r0, [r7, #48]	; 0x30
9000c1b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000c1b6:	2b00      	cmp	r3, #0
9000c1b8:	d103      	bne.n	9000c1c2 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
9000c1ba:	6978      	ldr	r0, [r7, #20]
9000c1bc:	f7fb f880 	bl	900072c0 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
9000c1c0:	e136      	b.n	9000c430 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
9000c1c2:	6979      	ldr	r1, [r7, #20]
9000c1c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
9000c1c6:	f7fb f93d 	bl	90007444 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
9000c1ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
9000c1cc:	f7fb f900 	bl	900073d0 <pbuf_clen>
9000c1d0:	4603      	mov	r3, r0
9000c1d2:	461a      	mov	r2, r3
9000c1d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
9000c1d8:	4413      	add	r3, r2
9000c1da:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
9000c1de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
9000c1e2:	2b09      	cmp	r3, #9
9000c1e4:	d903      	bls.n	9000c1ee <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
9000c1e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
9000c1e8:	f7fb f86a 	bl	900072c0 <pbuf_free>
      goto memerr;
9000c1ec:	e120      	b.n	9000c430 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
9000c1ee:	68fb      	ldr	r3, [r7, #12]
9000c1f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
9000c1f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
9000c1f6:	441a      	add	r2, r3
9000c1f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
9000c1fc:	9300      	str	r3, [sp, #0]
9000c1fe:	4613      	mov	r3, r2
9000c200:	2200      	movs	r2, #0
9000c202:	6b39      	ldr	r1, [r7, #48]	; 0x30
9000c204:	68f8      	ldr	r0, [r7, #12]
9000c206:	f7ff fc51 	bl	9000baac <tcp_create_segment>
9000c20a:	64f8      	str	r0, [r7, #76]	; 0x4c
9000c20c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000c20e:	2b00      	cmp	r3, #0
9000c210:	f000 810d 	beq.w	9000c42e <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
9000c214:	6c7b      	ldr	r3, [r7, #68]	; 0x44
9000c216:	2b00      	cmp	r3, #0
9000c218:	d102      	bne.n	9000c220 <tcp_write+0x450>
      queue = seg;
9000c21a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000c21c:	647b      	str	r3, [r7, #68]	; 0x44
9000c21e:	e00c      	b.n	9000c23a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
9000c220:	6cbb      	ldr	r3, [r7, #72]	; 0x48
9000c222:	2b00      	cmp	r3, #0
9000c224:	d106      	bne.n	9000c234 <tcp_write+0x464>
9000c226:	4b53      	ldr	r3, [pc, #332]	; (9000c374 <tcp_write+0x5a4>)
9000c228:	f240 22ab 	movw	r2, #683	; 0x2ab
9000c22c:	4955      	ldr	r1, [pc, #340]	; (9000c384 <tcp_write+0x5b4>)
9000c22e:	4853      	ldr	r0, [pc, #332]	; (9000c37c <tcp_write+0x5ac>)
9000c230:	f004 f95c 	bl	900104ec <iprintf>
      prev_seg->next = seg;
9000c234:	6cbb      	ldr	r3, [r7, #72]	; 0x48
9000c236:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
9000c238:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
9000c23a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000c23c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
9000c23e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
9000c242:	8b3b      	ldrh	r3, [r7, #24]
9000c244:	4413      	add	r3, r2
9000c246:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
9000c24a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
9000c24e:	88fb      	ldrh	r3, [r7, #6]
9000c250:	429a      	cmp	r2, r3
9000c252:	f4ff af3d 	bcc.w	9000c0d0 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
9000c256:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
9000c258:	2b00      	cmp	r3, #0
9000c25a:	d02c      	beq.n	9000c2b6 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
9000c25c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000c25e:	685b      	ldr	r3, [r3, #4]
9000c260:	62fb      	str	r3, [r7, #44]	; 0x2c
9000c262:	e01e      	b.n	9000c2a2 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
9000c264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000c266:	891a      	ldrh	r2, [r3, #8]
9000c268:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
9000c26a:	4413      	add	r3, r2
9000c26c:	b29a      	uxth	r2, r3
9000c26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000c270:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
9000c272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000c274:	681b      	ldr	r3, [r3, #0]
9000c276:	2b00      	cmp	r3, #0
9000c278:	d110      	bne.n	9000c29c <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
9000c27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000c27c:	685b      	ldr	r3, [r3, #4]
9000c27e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
9000c280:	8952      	ldrh	r2, [r2, #10]
9000c282:	4413      	add	r3, r2
9000c284:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
9000c286:	68b9      	ldr	r1, [r7, #8]
9000c288:	4618      	mov	r0, r3
9000c28a:	f004 f8ff 	bl	9001048c <memcpy>
        p->len += oversize_used;
9000c28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000c290:	895a      	ldrh	r2, [r3, #10]
9000c292:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
9000c294:	4413      	add	r3, r2
9000c296:	b29a      	uxth	r2, r3
9000c298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000c29a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
9000c29c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000c29e:	681b      	ldr	r3, [r3, #0]
9000c2a0:	62fb      	str	r3, [r7, #44]	; 0x2c
9000c2a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000c2a4:	2b00      	cmp	r3, #0
9000c2a6:	d1dd      	bne.n	9000c264 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
9000c2a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000c2aa:	891a      	ldrh	r2, [r3, #8]
9000c2ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
9000c2ae:	4413      	add	r3, r2
9000c2b0:	b29a      	uxth	r2, r3
9000c2b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000c2b4:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
9000c2b6:	8a7a      	ldrh	r2, [r7, #18]
9000c2b8:	68fb      	ldr	r3, [r7, #12]
9000c2ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
9000c2be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
9000c2c0:	2b00      	cmp	r3, #0
9000c2c2:	d018      	beq.n	9000c2f6 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
9000c2c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000c2c6:	2b00      	cmp	r3, #0
9000c2c8:	d106      	bne.n	9000c2d8 <tcp_write+0x508>
9000c2ca:	4b2a      	ldr	r3, [pc, #168]	; (9000c374 <tcp_write+0x5a4>)
9000c2cc:	f44f 7238 	mov.w	r2, #736	; 0x2e0
9000c2d0:	492d      	ldr	r1, [pc, #180]	; (9000c388 <tcp_write+0x5b8>)
9000c2d2:	482a      	ldr	r0, [pc, #168]	; (9000c37c <tcp_write+0x5ac>)
9000c2d4:	f004 f90a 	bl	900104ec <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
9000c2d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000c2da:	685b      	ldr	r3, [r3, #4]
9000c2dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000c2de:	4618      	mov	r0, r3
9000c2e0:	f7fb f8b0 	bl	90007444 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
9000c2e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000c2e6:	891a      	ldrh	r2, [r3, #8]
9000c2e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
9000c2ea:	891b      	ldrh	r3, [r3, #8]
9000c2ec:	4413      	add	r3, r2
9000c2ee:	b29a      	uxth	r2, r3
9000c2f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000c2f2:	811a      	strh	r2, [r3, #8]
9000c2f4:	e037      	b.n	9000c366 <tcp_write+0x596>
  } else if (extendlen > 0) {
9000c2f6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
9000c2f8:	2b00      	cmp	r3, #0
9000c2fa:	d034      	beq.n	9000c366 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
9000c2fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000c2fe:	2b00      	cmp	r3, #0
9000c300:	d003      	beq.n	9000c30a <tcp_write+0x53a>
9000c302:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000c304:	685b      	ldr	r3, [r3, #4]
9000c306:	2b00      	cmp	r3, #0
9000c308:	d106      	bne.n	9000c318 <tcp_write+0x548>
9000c30a:	4b1a      	ldr	r3, [pc, #104]	; (9000c374 <tcp_write+0x5a4>)
9000c30c:	f240 22e6 	movw	r2, #742	; 0x2e6
9000c310:	491e      	ldr	r1, [pc, #120]	; (9000c38c <tcp_write+0x5bc>)
9000c312:	481a      	ldr	r0, [pc, #104]	; (9000c37c <tcp_write+0x5ac>)
9000c314:	f004 f8ea 	bl	900104ec <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
9000c318:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000c31a:	685b      	ldr	r3, [r3, #4]
9000c31c:	62bb      	str	r3, [r7, #40]	; 0x28
9000c31e:	e009      	b.n	9000c334 <tcp_write+0x564>
      p->tot_len += extendlen;
9000c320:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000c322:	891a      	ldrh	r2, [r3, #8]
9000c324:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
9000c326:	4413      	add	r3, r2
9000c328:	b29a      	uxth	r2, r3
9000c32a:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000c32c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
9000c32e:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000c330:	681b      	ldr	r3, [r3, #0]
9000c332:	62bb      	str	r3, [r7, #40]	; 0x28
9000c334:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000c336:	681b      	ldr	r3, [r3, #0]
9000c338:	2b00      	cmp	r3, #0
9000c33a:	d1f1      	bne.n	9000c320 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
9000c33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000c33e:	891a      	ldrh	r2, [r3, #8]
9000c340:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
9000c342:	4413      	add	r3, r2
9000c344:	b29a      	uxth	r2, r3
9000c346:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000c348:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
9000c34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000c34c:	895a      	ldrh	r2, [r3, #10]
9000c34e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
9000c350:	4413      	add	r3, r2
9000c352:	b29a      	uxth	r2, r3
9000c354:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000c356:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
9000c358:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000c35a:	891a      	ldrh	r2, [r3, #8]
9000c35c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
9000c35e:	4413      	add	r3, r2
9000c360:	b29a      	uxth	r2, r3
9000c362:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000c364:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
9000c366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000c368:	2b00      	cmp	r3, #0
9000c36a:	d111      	bne.n	9000c390 <tcp_write+0x5c0>
    pcb->unsent = queue;
9000c36c:	68fb      	ldr	r3, [r7, #12]
9000c36e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
9000c370:	66da      	str	r2, [r3, #108]	; 0x6c
9000c372:	e010      	b.n	9000c396 <tcp_write+0x5c6>
9000c374:	900133a4 	.word	0x900133a4
9000c378:	90013644 	.word	0x90013644
9000c37c:	900133f8 	.word	0x900133f8
9000c380:	90013684 	.word	0x90013684
9000c384:	90013694 	.word	0x90013694
9000c388:	900136a8 	.word	0x900136a8
9000c38c:	900136e0 	.word	0x900136e0
  } else {
    last_unsent->next = queue;
9000c390:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000c392:	6c7a      	ldr	r2, [r7, #68]	; 0x44
9000c394:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
9000c396:	68fb      	ldr	r3, [r7, #12]
9000c398:	6dda      	ldr	r2, [r3, #92]	; 0x5c
9000c39a:	88fb      	ldrh	r3, [r7, #6]
9000c39c:	441a      	add	r2, r3
9000c39e:	68fb      	ldr	r3, [r7, #12]
9000c3a0:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
9000c3a2:	68fb      	ldr	r3, [r7, #12]
9000c3a4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
9000c3a8:	88fb      	ldrh	r3, [r7, #6]
9000c3aa:	1ad3      	subs	r3, r2, r3
9000c3ac:	b29a      	uxth	r2, r3
9000c3ae:	68fb      	ldr	r3, [r7, #12]
9000c3b0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
9000c3b4:	68fb      	ldr	r3, [r7, #12]
9000c3b6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
9000c3ba:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
9000c3be:	68fb      	ldr	r3, [r7, #12]
9000c3c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
9000c3c4:	2b00      	cmp	r3, #0
9000c3c6:	d00e      	beq.n	9000c3e6 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
9000c3c8:	68fb      	ldr	r3, [r7, #12]
9000c3ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000c3cc:	2b00      	cmp	r3, #0
9000c3ce:	d10a      	bne.n	9000c3e6 <tcp_write+0x616>
9000c3d0:	68fb      	ldr	r3, [r7, #12]
9000c3d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000c3d4:	2b00      	cmp	r3, #0
9000c3d6:	d106      	bne.n	9000c3e6 <tcp_write+0x616>
9000c3d8:	4b2c      	ldr	r3, [pc, #176]	; (9000c48c <tcp_write+0x6bc>)
9000c3da:	f240 3212 	movw	r2, #786	; 0x312
9000c3de:	492c      	ldr	r1, [pc, #176]	; (9000c490 <tcp_write+0x6c0>)
9000c3e0:	482c      	ldr	r0, [pc, #176]	; (9000c494 <tcp_write+0x6c4>)
9000c3e2:	f004 f883 	bl	900104ec <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
9000c3e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000c3e8:	2b00      	cmp	r3, #0
9000c3ea:	d016      	beq.n	9000c41a <tcp_write+0x64a>
9000c3ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000c3ee:	68db      	ldr	r3, [r3, #12]
9000c3f0:	2b00      	cmp	r3, #0
9000c3f2:	d012      	beq.n	9000c41a <tcp_write+0x64a>
9000c3f4:	797b      	ldrb	r3, [r7, #5]
9000c3f6:	f003 0302 	and.w	r3, r3, #2
9000c3fa:	2b00      	cmp	r3, #0
9000c3fc:	d10d      	bne.n	9000c41a <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
9000c3fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000c400:	68db      	ldr	r3, [r3, #12]
9000c402:	899b      	ldrh	r3, [r3, #12]
9000c404:	b29c      	uxth	r4, r3
9000c406:	2008      	movs	r0, #8
9000c408:	f7f9 fb92 	bl	90005b30 <lwip_htons>
9000c40c:	4603      	mov	r3, r0
9000c40e:	461a      	mov	r2, r3
9000c410:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000c412:	68db      	ldr	r3, [r3, #12]
9000c414:	4322      	orrs	r2, r4
9000c416:	b292      	uxth	r2, r2
9000c418:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
9000c41a:	2300      	movs	r3, #0
9000c41c:	e031      	b.n	9000c482 <tcp_write+0x6b2>
          goto memerr;
9000c41e:	bf00      	nop
9000c420:	e006      	b.n	9000c430 <tcp_write+0x660>
            goto memerr;
9000c422:	bf00      	nop
9000c424:	e004      	b.n	9000c430 <tcp_write+0x660>
        goto memerr;
9000c426:	bf00      	nop
9000c428:	e002      	b.n	9000c430 <tcp_write+0x660>
        goto memerr;
9000c42a:	bf00      	nop
9000c42c:	e000      	b.n	9000c430 <tcp_write+0x660>
      goto memerr;
9000c42e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
9000c430:	68fb      	ldr	r3, [r7, #12]
9000c432:	8b5b      	ldrh	r3, [r3, #26]
9000c434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9000c438:	b29a      	uxth	r2, r3
9000c43a:	68fb      	ldr	r3, [r7, #12]
9000c43c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
9000c43e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
9000c440:	2b00      	cmp	r3, #0
9000c442:	d002      	beq.n	9000c44a <tcp_write+0x67a>
    pbuf_free(concat_p);
9000c444:	6d78      	ldr	r0, [r7, #84]	; 0x54
9000c446:	f7fa ff3b 	bl	900072c0 <pbuf_free>
  }
  if (queue != NULL) {
9000c44a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
9000c44c:	2b00      	cmp	r3, #0
9000c44e:	d002      	beq.n	9000c456 <tcp_write+0x686>
    tcp_segs_free(queue);
9000c450:	6c78      	ldr	r0, [r7, #68]	; 0x44
9000c452:	f7fc fb4d 	bl	90008af0 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
9000c456:	68fb      	ldr	r3, [r7, #12]
9000c458:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
9000c45c:	2b00      	cmp	r3, #0
9000c45e:	d00e      	beq.n	9000c47e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
9000c460:	68fb      	ldr	r3, [r7, #12]
9000c462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000c464:	2b00      	cmp	r3, #0
9000c466:	d10a      	bne.n	9000c47e <tcp_write+0x6ae>
9000c468:	68fb      	ldr	r3, [r7, #12]
9000c46a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000c46c:	2b00      	cmp	r3, #0
9000c46e:	d106      	bne.n	9000c47e <tcp_write+0x6ae>
9000c470:	4b06      	ldr	r3, [pc, #24]	; (9000c48c <tcp_write+0x6bc>)
9000c472:	f240 3227 	movw	r2, #807	; 0x327
9000c476:	4906      	ldr	r1, [pc, #24]	; (9000c490 <tcp_write+0x6c0>)
9000c478:	4806      	ldr	r0, [pc, #24]	; (9000c494 <tcp_write+0x6c4>)
9000c47a:	f004 f837 	bl	900104ec <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
9000c47e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
9000c482:	4618      	mov	r0, r3
9000c484:	375c      	adds	r7, #92	; 0x5c
9000c486:	46bd      	mov	sp, r7
9000c488:	bd90      	pop	{r4, r7, pc}
9000c48a:	bf00      	nop
9000c48c:	900133a4 	.word	0x900133a4
9000c490:	90013718 	.word	0x90013718
9000c494:	900133f8 	.word	0x900133f8

9000c498 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
9000c498:	b590      	push	{r4, r7, lr}
9000c49a:	b08b      	sub	sp, #44	; 0x2c
9000c49c:	af02      	add	r7, sp, #8
9000c49e:	6078      	str	r0, [r7, #4]
9000c4a0:	460b      	mov	r3, r1
9000c4a2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
9000c4a4:	2300      	movs	r3, #0
9000c4a6:	61fb      	str	r3, [r7, #28]
9000c4a8:	2300      	movs	r3, #0
9000c4aa:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
9000c4ac:	2300      	movs	r3, #0
9000c4ae:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
9000c4b0:	687b      	ldr	r3, [r7, #4]
9000c4b2:	2b00      	cmp	r3, #0
9000c4b4:	d106      	bne.n	9000c4c4 <tcp_split_unsent_seg+0x2c>
9000c4b6:	4b95      	ldr	r3, [pc, #596]	; (9000c70c <tcp_split_unsent_seg+0x274>)
9000c4b8:	f240 324b 	movw	r2, #843	; 0x34b
9000c4bc:	4994      	ldr	r1, [pc, #592]	; (9000c710 <tcp_split_unsent_seg+0x278>)
9000c4be:	4895      	ldr	r0, [pc, #596]	; (9000c714 <tcp_split_unsent_seg+0x27c>)
9000c4c0:	f004 f814 	bl	900104ec <iprintf>

  useg = pcb->unsent;
9000c4c4:	687b      	ldr	r3, [r7, #4]
9000c4c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000c4c8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
9000c4ca:	697b      	ldr	r3, [r7, #20]
9000c4cc:	2b00      	cmp	r3, #0
9000c4ce:	d102      	bne.n	9000c4d6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
9000c4d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000c4d4:	e116      	b.n	9000c704 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
9000c4d6:	887b      	ldrh	r3, [r7, #2]
9000c4d8:	2b00      	cmp	r3, #0
9000c4da:	d109      	bne.n	9000c4f0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
9000c4dc:	4b8b      	ldr	r3, [pc, #556]	; (9000c70c <tcp_split_unsent_seg+0x274>)
9000c4de:	f240 3253 	movw	r2, #851	; 0x353
9000c4e2:	498d      	ldr	r1, [pc, #564]	; (9000c718 <tcp_split_unsent_seg+0x280>)
9000c4e4:	488b      	ldr	r0, [pc, #556]	; (9000c714 <tcp_split_unsent_seg+0x27c>)
9000c4e6:	f004 f801 	bl	900104ec <iprintf>
    return ERR_VAL;
9000c4ea:	f06f 0305 	mvn.w	r3, #5
9000c4ee:	e109      	b.n	9000c704 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
9000c4f0:	697b      	ldr	r3, [r7, #20]
9000c4f2:	891b      	ldrh	r3, [r3, #8]
9000c4f4:	887a      	ldrh	r2, [r7, #2]
9000c4f6:	429a      	cmp	r2, r3
9000c4f8:	d301      	bcc.n	9000c4fe <tcp_split_unsent_seg+0x66>
    return ERR_OK;
9000c4fa:	2300      	movs	r3, #0
9000c4fc:	e102      	b.n	9000c704 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
9000c4fe:	687b      	ldr	r3, [r7, #4]
9000c500:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000c502:	887a      	ldrh	r2, [r7, #2]
9000c504:	429a      	cmp	r2, r3
9000c506:	d906      	bls.n	9000c516 <tcp_split_unsent_seg+0x7e>
9000c508:	4b80      	ldr	r3, [pc, #512]	; (9000c70c <tcp_split_unsent_seg+0x274>)
9000c50a:	f240 325b 	movw	r2, #859	; 0x35b
9000c50e:	4983      	ldr	r1, [pc, #524]	; (9000c71c <tcp_split_unsent_seg+0x284>)
9000c510:	4880      	ldr	r0, [pc, #512]	; (9000c714 <tcp_split_unsent_seg+0x27c>)
9000c512:	f003 ffeb 	bl	900104ec <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
9000c516:	697b      	ldr	r3, [r7, #20]
9000c518:	891b      	ldrh	r3, [r3, #8]
9000c51a:	2b00      	cmp	r3, #0
9000c51c:	d106      	bne.n	9000c52c <tcp_split_unsent_seg+0x94>
9000c51e:	4b7b      	ldr	r3, [pc, #492]	; (9000c70c <tcp_split_unsent_seg+0x274>)
9000c520:	f44f 7257 	mov.w	r2, #860	; 0x35c
9000c524:	497e      	ldr	r1, [pc, #504]	; (9000c720 <tcp_split_unsent_seg+0x288>)
9000c526:	487b      	ldr	r0, [pc, #492]	; (9000c714 <tcp_split_unsent_seg+0x27c>)
9000c528:	f003 ffe0 	bl	900104ec <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
9000c52c:	697b      	ldr	r3, [r7, #20]
9000c52e:	7a9b      	ldrb	r3, [r3, #10]
9000c530:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
9000c532:	7bfb      	ldrb	r3, [r7, #15]
9000c534:	009b      	lsls	r3, r3, #2
9000c536:	b2db      	uxtb	r3, r3
9000c538:	f003 0304 	and.w	r3, r3, #4
9000c53c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
9000c53e:	697b      	ldr	r3, [r7, #20]
9000c540:	891a      	ldrh	r2, [r3, #8]
9000c542:	887b      	ldrh	r3, [r7, #2]
9000c544:	1ad3      	subs	r3, r2, r3
9000c546:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
9000c548:	7bbb      	ldrb	r3, [r7, #14]
9000c54a:	b29a      	uxth	r2, r3
9000c54c:	89bb      	ldrh	r3, [r7, #12]
9000c54e:	4413      	add	r3, r2
9000c550:	b29b      	uxth	r3, r3
9000c552:	f44f 7220 	mov.w	r2, #640	; 0x280
9000c556:	4619      	mov	r1, r3
9000c558:	2036      	movs	r0, #54	; 0x36
9000c55a:	f7fa fbcd 	bl	90006cf8 <pbuf_alloc>
9000c55e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
9000c560:	693b      	ldr	r3, [r7, #16]
9000c562:	2b00      	cmp	r3, #0
9000c564:	f000 80b7 	beq.w	9000c6d6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
9000c568:	697b      	ldr	r3, [r7, #20]
9000c56a:	685b      	ldr	r3, [r3, #4]
9000c56c:	891a      	ldrh	r2, [r3, #8]
9000c56e:	697b      	ldr	r3, [r7, #20]
9000c570:	891b      	ldrh	r3, [r3, #8]
9000c572:	1ad3      	subs	r3, r2, r3
9000c574:	b29a      	uxth	r2, r3
9000c576:	887b      	ldrh	r3, [r7, #2]
9000c578:	4413      	add	r3, r2
9000c57a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
9000c57c:	697b      	ldr	r3, [r7, #20]
9000c57e:	6858      	ldr	r0, [r3, #4]
9000c580:	693b      	ldr	r3, [r7, #16]
9000c582:	685a      	ldr	r2, [r3, #4]
9000c584:	7bbb      	ldrb	r3, [r7, #14]
9000c586:	18d1      	adds	r1, r2, r3
9000c588:	897b      	ldrh	r3, [r7, #10]
9000c58a:	89ba      	ldrh	r2, [r7, #12]
9000c58c:	f7fb f882 	bl	90007694 <pbuf_copy_partial>
9000c590:	4603      	mov	r3, r0
9000c592:	461a      	mov	r2, r3
9000c594:	89bb      	ldrh	r3, [r7, #12]
9000c596:	4293      	cmp	r3, r2
9000c598:	f040 809f 	bne.w	9000c6da <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
9000c59c:	697b      	ldr	r3, [r7, #20]
9000c59e:	68db      	ldr	r3, [r3, #12]
9000c5a0:	899b      	ldrh	r3, [r3, #12]
9000c5a2:	b29b      	uxth	r3, r3
9000c5a4:	4618      	mov	r0, r3
9000c5a6:	f7f9 fac3 	bl	90005b30 <lwip_htons>
9000c5aa:	4603      	mov	r3, r0
9000c5ac:	b2db      	uxtb	r3, r3
9000c5ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
9000c5b2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
9000c5b4:	2300      	movs	r3, #0
9000c5b6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
9000c5b8:	7efb      	ldrb	r3, [r7, #27]
9000c5ba:	f003 0308 	and.w	r3, r3, #8
9000c5be:	2b00      	cmp	r3, #0
9000c5c0:	d007      	beq.n	9000c5d2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
9000c5c2:	7efb      	ldrb	r3, [r7, #27]
9000c5c4:	f023 0308 	bic.w	r3, r3, #8
9000c5c8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
9000c5ca:	7ebb      	ldrb	r3, [r7, #26]
9000c5cc:	f043 0308 	orr.w	r3, r3, #8
9000c5d0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
9000c5d2:	7efb      	ldrb	r3, [r7, #27]
9000c5d4:	f003 0301 	and.w	r3, r3, #1
9000c5d8:	2b00      	cmp	r3, #0
9000c5da:	d007      	beq.n	9000c5ec <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
9000c5dc:	7efb      	ldrb	r3, [r7, #27]
9000c5de:	f023 0301 	bic.w	r3, r3, #1
9000c5e2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
9000c5e4:	7ebb      	ldrb	r3, [r7, #26]
9000c5e6:	f043 0301 	orr.w	r3, r3, #1
9000c5ea:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
9000c5ec:	697b      	ldr	r3, [r7, #20]
9000c5ee:	68db      	ldr	r3, [r3, #12]
9000c5f0:	685b      	ldr	r3, [r3, #4]
9000c5f2:	4618      	mov	r0, r3
9000c5f4:	f7f9 fab1 	bl	90005b5a <lwip_htonl>
9000c5f8:	4602      	mov	r2, r0
9000c5fa:	887b      	ldrh	r3, [r7, #2]
9000c5fc:	18d1      	adds	r1, r2, r3
9000c5fe:	7eba      	ldrb	r2, [r7, #26]
9000c600:	7bfb      	ldrb	r3, [r7, #15]
9000c602:	9300      	str	r3, [sp, #0]
9000c604:	460b      	mov	r3, r1
9000c606:	6939      	ldr	r1, [r7, #16]
9000c608:	6878      	ldr	r0, [r7, #4]
9000c60a:	f7ff fa4f 	bl	9000baac <tcp_create_segment>
9000c60e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
9000c610:	69fb      	ldr	r3, [r7, #28]
9000c612:	2b00      	cmp	r3, #0
9000c614:	d063      	beq.n	9000c6de <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
9000c616:	697b      	ldr	r3, [r7, #20]
9000c618:	685b      	ldr	r3, [r3, #4]
9000c61a:	4618      	mov	r0, r3
9000c61c:	f7fa fed8 	bl	900073d0 <pbuf_clen>
9000c620:	4603      	mov	r3, r0
9000c622:	461a      	mov	r2, r3
9000c624:	687b      	ldr	r3, [r7, #4]
9000c626:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
9000c62a:	1a9b      	subs	r3, r3, r2
9000c62c:	b29a      	uxth	r2, r3
9000c62e:	687b      	ldr	r3, [r7, #4]
9000c630:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
9000c634:	697b      	ldr	r3, [r7, #20]
9000c636:	6858      	ldr	r0, [r3, #4]
9000c638:	697b      	ldr	r3, [r7, #20]
9000c63a:	685b      	ldr	r3, [r3, #4]
9000c63c:	891a      	ldrh	r2, [r3, #8]
9000c63e:	89bb      	ldrh	r3, [r7, #12]
9000c640:	1ad3      	subs	r3, r2, r3
9000c642:	b29b      	uxth	r3, r3
9000c644:	4619      	mov	r1, r3
9000c646:	f7fa fcb5 	bl	90006fb4 <pbuf_realloc>
  useg->len -= remainder;
9000c64a:	697b      	ldr	r3, [r7, #20]
9000c64c:	891a      	ldrh	r2, [r3, #8]
9000c64e:	89bb      	ldrh	r3, [r7, #12]
9000c650:	1ad3      	subs	r3, r2, r3
9000c652:	b29a      	uxth	r2, r3
9000c654:	697b      	ldr	r3, [r7, #20]
9000c656:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
9000c658:	697b      	ldr	r3, [r7, #20]
9000c65a:	68db      	ldr	r3, [r3, #12]
9000c65c:	899b      	ldrh	r3, [r3, #12]
9000c65e:	b29c      	uxth	r4, r3
9000c660:	7efb      	ldrb	r3, [r7, #27]
9000c662:	b29b      	uxth	r3, r3
9000c664:	4618      	mov	r0, r3
9000c666:	f7f9 fa63 	bl	90005b30 <lwip_htons>
9000c66a:	4603      	mov	r3, r0
9000c66c:	461a      	mov	r2, r3
9000c66e:	697b      	ldr	r3, [r7, #20]
9000c670:	68db      	ldr	r3, [r3, #12]
9000c672:	4322      	orrs	r2, r4
9000c674:	b292      	uxth	r2, r2
9000c676:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
9000c678:	697b      	ldr	r3, [r7, #20]
9000c67a:	685b      	ldr	r3, [r3, #4]
9000c67c:	4618      	mov	r0, r3
9000c67e:	f7fa fea7 	bl	900073d0 <pbuf_clen>
9000c682:	4603      	mov	r3, r0
9000c684:	461a      	mov	r2, r3
9000c686:	687b      	ldr	r3, [r7, #4]
9000c688:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
9000c68c:	4413      	add	r3, r2
9000c68e:	b29a      	uxth	r2, r3
9000c690:	687b      	ldr	r3, [r7, #4]
9000c692:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
9000c696:	69fb      	ldr	r3, [r7, #28]
9000c698:	685b      	ldr	r3, [r3, #4]
9000c69a:	4618      	mov	r0, r3
9000c69c:	f7fa fe98 	bl	900073d0 <pbuf_clen>
9000c6a0:	4603      	mov	r3, r0
9000c6a2:	461a      	mov	r2, r3
9000c6a4:	687b      	ldr	r3, [r7, #4]
9000c6a6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
9000c6aa:	4413      	add	r3, r2
9000c6ac:	b29a      	uxth	r2, r3
9000c6ae:	687b      	ldr	r3, [r7, #4]
9000c6b0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
9000c6b4:	697b      	ldr	r3, [r7, #20]
9000c6b6:	681a      	ldr	r2, [r3, #0]
9000c6b8:	69fb      	ldr	r3, [r7, #28]
9000c6ba:	601a      	str	r2, [r3, #0]
  useg->next = seg;
9000c6bc:	697b      	ldr	r3, [r7, #20]
9000c6be:	69fa      	ldr	r2, [r7, #28]
9000c6c0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
9000c6c2:	69fb      	ldr	r3, [r7, #28]
9000c6c4:	681b      	ldr	r3, [r3, #0]
9000c6c6:	2b00      	cmp	r3, #0
9000c6c8:	d103      	bne.n	9000c6d2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
9000c6ca:	687b      	ldr	r3, [r7, #4]
9000c6cc:	2200      	movs	r2, #0
9000c6ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
9000c6d2:	2300      	movs	r3, #0
9000c6d4:	e016      	b.n	9000c704 <tcp_split_unsent_seg+0x26c>
    goto memerr;
9000c6d6:	bf00      	nop
9000c6d8:	e002      	b.n	9000c6e0 <tcp_split_unsent_seg+0x248>
    goto memerr;
9000c6da:	bf00      	nop
9000c6dc:	e000      	b.n	9000c6e0 <tcp_split_unsent_seg+0x248>
    goto memerr;
9000c6de:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
9000c6e0:	69fb      	ldr	r3, [r7, #28]
9000c6e2:	2b00      	cmp	r3, #0
9000c6e4:	d006      	beq.n	9000c6f4 <tcp_split_unsent_seg+0x25c>
9000c6e6:	4b09      	ldr	r3, [pc, #36]	; (9000c70c <tcp_split_unsent_seg+0x274>)
9000c6e8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
9000c6ec:	490d      	ldr	r1, [pc, #52]	; (9000c724 <tcp_split_unsent_seg+0x28c>)
9000c6ee:	4809      	ldr	r0, [pc, #36]	; (9000c714 <tcp_split_unsent_seg+0x27c>)
9000c6f0:	f003 fefc 	bl	900104ec <iprintf>
  if (p != NULL) {
9000c6f4:	693b      	ldr	r3, [r7, #16]
9000c6f6:	2b00      	cmp	r3, #0
9000c6f8:	d002      	beq.n	9000c700 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
9000c6fa:	6938      	ldr	r0, [r7, #16]
9000c6fc:	f7fa fde0 	bl	900072c0 <pbuf_free>
  }

  return ERR_MEM;
9000c700:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
9000c704:	4618      	mov	r0, r3
9000c706:	3724      	adds	r7, #36	; 0x24
9000c708:	46bd      	mov	sp, r7
9000c70a:	bd90      	pop	{r4, r7, pc}
9000c70c:	900133a4 	.word	0x900133a4
9000c710:	90013738 	.word	0x90013738
9000c714:	900133f8 	.word	0x900133f8
9000c718:	9001375c 	.word	0x9001375c
9000c71c:	90013780 	.word	0x90013780
9000c720:	90013790 	.word	0x90013790
9000c724:	900137a0 	.word	0x900137a0

9000c728 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
9000c728:	b590      	push	{r4, r7, lr}
9000c72a:	b085      	sub	sp, #20
9000c72c:	af00      	add	r7, sp, #0
9000c72e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
9000c730:	687b      	ldr	r3, [r7, #4]
9000c732:	2b00      	cmp	r3, #0
9000c734:	d106      	bne.n	9000c744 <tcp_send_fin+0x1c>
9000c736:	4b21      	ldr	r3, [pc, #132]	; (9000c7bc <tcp_send_fin+0x94>)
9000c738:	f240 32eb 	movw	r2, #1003	; 0x3eb
9000c73c:	4920      	ldr	r1, [pc, #128]	; (9000c7c0 <tcp_send_fin+0x98>)
9000c73e:	4821      	ldr	r0, [pc, #132]	; (9000c7c4 <tcp_send_fin+0x9c>)
9000c740:	f003 fed4 	bl	900104ec <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
9000c744:	687b      	ldr	r3, [r7, #4]
9000c746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000c748:	2b00      	cmp	r3, #0
9000c74a:	d02e      	beq.n	9000c7aa <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
9000c74c:	687b      	ldr	r3, [r7, #4]
9000c74e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000c750:	60fb      	str	r3, [r7, #12]
9000c752:	e002      	b.n	9000c75a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
9000c754:	68fb      	ldr	r3, [r7, #12]
9000c756:	681b      	ldr	r3, [r3, #0]
9000c758:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
9000c75a:	68fb      	ldr	r3, [r7, #12]
9000c75c:	681b      	ldr	r3, [r3, #0]
9000c75e:	2b00      	cmp	r3, #0
9000c760:	d1f8      	bne.n	9000c754 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
9000c762:	68fb      	ldr	r3, [r7, #12]
9000c764:	68db      	ldr	r3, [r3, #12]
9000c766:	899b      	ldrh	r3, [r3, #12]
9000c768:	b29b      	uxth	r3, r3
9000c76a:	4618      	mov	r0, r3
9000c76c:	f7f9 f9e0 	bl	90005b30 <lwip_htons>
9000c770:	4603      	mov	r3, r0
9000c772:	b2db      	uxtb	r3, r3
9000c774:	f003 0307 	and.w	r3, r3, #7
9000c778:	2b00      	cmp	r3, #0
9000c77a:	d116      	bne.n	9000c7aa <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
9000c77c:	68fb      	ldr	r3, [r7, #12]
9000c77e:	68db      	ldr	r3, [r3, #12]
9000c780:	899b      	ldrh	r3, [r3, #12]
9000c782:	b29c      	uxth	r4, r3
9000c784:	2001      	movs	r0, #1
9000c786:	f7f9 f9d3 	bl	90005b30 <lwip_htons>
9000c78a:	4603      	mov	r3, r0
9000c78c:	461a      	mov	r2, r3
9000c78e:	68fb      	ldr	r3, [r7, #12]
9000c790:	68db      	ldr	r3, [r3, #12]
9000c792:	4322      	orrs	r2, r4
9000c794:	b292      	uxth	r2, r2
9000c796:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
9000c798:	687b      	ldr	r3, [r7, #4]
9000c79a:	8b5b      	ldrh	r3, [r3, #26]
9000c79c:	f043 0320 	orr.w	r3, r3, #32
9000c7a0:	b29a      	uxth	r2, r3
9000c7a2:	687b      	ldr	r3, [r7, #4]
9000c7a4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
9000c7a6:	2300      	movs	r3, #0
9000c7a8:	e004      	b.n	9000c7b4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
9000c7aa:	2101      	movs	r1, #1
9000c7ac:	6878      	ldr	r0, [r7, #4]
9000c7ae:	f000 f80b 	bl	9000c7c8 <tcp_enqueue_flags>
9000c7b2:	4603      	mov	r3, r0
}
9000c7b4:	4618      	mov	r0, r3
9000c7b6:	3714      	adds	r7, #20
9000c7b8:	46bd      	mov	sp, r7
9000c7ba:	bd90      	pop	{r4, r7, pc}
9000c7bc:	900133a4 	.word	0x900133a4
9000c7c0:	900137ac 	.word	0x900137ac
9000c7c4:	900133f8 	.word	0x900133f8

9000c7c8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
9000c7c8:	b580      	push	{r7, lr}
9000c7ca:	b08a      	sub	sp, #40	; 0x28
9000c7cc:	af02      	add	r7, sp, #8
9000c7ce:	6078      	str	r0, [r7, #4]
9000c7d0:	460b      	mov	r3, r1
9000c7d2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
9000c7d4:	2300      	movs	r3, #0
9000c7d6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
9000c7d8:	2300      	movs	r3, #0
9000c7da:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
9000c7dc:	78fb      	ldrb	r3, [r7, #3]
9000c7de:	f003 0303 	and.w	r3, r3, #3
9000c7e2:	2b00      	cmp	r3, #0
9000c7e4:	d106      	bne.n	9000c7f4 <tcp_enqueue_flags+0x2c>
9000c7e6:	4b67      	ldr	r3, [pc, #412]	; (9000c984 <tcp_enqueue_flags+0x1bc>)
9000c7e8:	f240 4211 	movw	r2, #1041	; 0x411
9000c7ec:	4966      	ldr	r1, [pc, #408]	; (9000c988 <tcp_enqueue_flags+0x1c0>)
9000c7ee:	4867      	ldr	r0, [pc, #412]	; (9000c98c <tcp_enqueue_flags+0x1c4>)
9000c7f0:	f003 fe7c 	bl	900104ec <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
9000c7f4:	687b      	ldr	r3, [r7, #4]
9000c7f6:	2b00      	cmp	r3, #0
9000c7f8:	d106      	bne.n	9000c808 <tcp_enqueue_flags+0x40>
9000c7fa:	4b62      	ldr	r3, [pc, #392]	; (9000c984 <tcp_enqueue_flags+0x1bc>)
9000c7fc:	f240 4213 	movw	r2, #1043	; 0x413
9000c800:	4963      	ldr	r1, [pc, #396]	; (9000c990 <tcp_enqueue_flags+0x1c8>)
9000c802:	4862      	ldr	r0, [pc, #392]	; (9000c98c <tcp_enqueue_flags+0x1c4>)
9000c804:	f003 fe72 	bl	900104ec <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
9000c808:	78fb      	ldrb	r3, [r7, #3]
9000c80a:	f003 0302 	and.w	r3, r3, #2
9000c80e:	2b00      	cmp	r3, #0
9000c810:	d001      	beq.n	9000c816 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
9000c812:	2301      	movs	r3, #1
9000c814:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
9000c816:	7ffb      	ldrb	r3, [r7, #31]
9000c818:	009b      	lsls	r3, r3, #2
9000c81a:	b2db      	uxtb	r3, r3
9000c81c:	f003 0304 	and.w	r3, r3, #4
9000c820:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
9000c822:	7dfb      	ldrb	r3, [r7, #23]
9000c824:	b29b      	uxth	r3, r3
9000c826:	f44f 7220 	mov.w	r2, #640	; 0x280
9000c82a:	4619      	mov	r1, r3
9000c82c:	2036      	movs	r0, #54	; 0x36
9000c82e:	f7fa fa63 	bl	90006cf8 <pbuf_alloc>
9000c832:	6138      	str	r0, [r7, #16]
9000c834:	693b      	ldr	r3, [r7, #16]
9000c836:	2b00      	cmp	r3, #0
9000c838:	d109      	bne.n	9000c84e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
9000c83a:	687b      	ldr	r3, [r7, #4]
9000c83c:	8b5b      	ldrh	r3, [r3, #26]
9000c83e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9000c842:	b29a      	uxth	r2, r3
9000c844:	687b      	ldr	r3, [r7, #4]
9000c846:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
9000c848:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000c84c:	e095      	b.n	9000c97a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
9000c84e:	693b      	ldr	r3, [r7, #16]
9000c850:	895a      	ldrh	r2, [r3, #10]
9000c852:	7dfb      	ldrb	r3, [r7, #23]
9000c854:	b29b      	uxth	r3, r3
9000c856:	429a      	cmp	r2, r3
9000c858:	d206      	bcs.n	9000c868 <tcp_enqueue_flags+0xa0>
9000c85a:	4b4a      	ldr	r3, [pc, #296]	; (9000c984 <tcp_enqueue_flags+0x1bc>)
9000c85c:	f240 4239 	movw	r2, #1081	; 0x439
9000c860:	494c      	ldr	r1, [pc, #304]	; (9000c994 <tcp_enqueue_flags+0x1cc>)
9000c862:	484a      	ldr	r0, [pc, #296]	; (9000c98c <tcp_enqueue_flags+0x1c4>)
9000c864:	f003 fe42 	bl	900104ec <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
9000c868:	687b      	ldr	r3, [r7, #4]
9000c86a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
9000c86c:	78fa      	ldrb	r2, [r7, #3]
9000c86e:	7ffb      	ldrb	r3, [r7, #31]
9000c870:	9300      	str	r3, [sp, #0]
9000c872:	460b      	mov	r3, r1
9000c874:	6939      	ldr	r1, [r7, #16]
9000c876:	6878      	ldr	r0, [r7, #4]
9000c878:	f7ff f918 	bl	9000baac <tcp_create_segment>
9000c87c:	60f8      	str	r0, [r7, #12]
9000c87e:	68fb      	ldr	r3, [r7, #12]
9000c880:	2b00      	cmp	r3, #0
9000c882:	d109      	bne.n	9000c898 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
9000c884:	687b      	ldr	r3, [r7, #4]
9000c886:	8b5b      	ldrh	r3, [r3, #26]
9000c888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9000c88c:	b29a      	uxth	r2, r3
9000c88e:	687b      	ldr	r3, [r7, #4]
9000c890:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
9000c892:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000c896:	e070      	b.n	9000c97a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
9000c898:	68fb      	ldr	r3, [r7, #12]
9000c89a:	68db      	ldr	r3, [r3, #12]
9000c89c:	f003 0303 	and.w	r3, r3, #3
9000c8a0:	2b00      	cmp	r3, #0
9000c8a2:	d006      	beq.n	9000c8b2 <tcp_enqueue_flags+0xea>
9000c8a4:	4b37      	ldr	r3, [pc, #220]	; (9000c984 <tcp_enqueue_flags+0x1bc>)
9000c8a6:	f240 4242 	movw	r2, #1090	; 0x442
9000c8aa:	493b      	ldr	r1, [pc, #236]	; (9000c998 <tcp_enqueue_flags+0x1d0>)
9000c8ac:	4837      	ldr	r0, [pc, #220]	; (9000c98c <tcp_enqueue_flags+0x1c4>)
9000c8ae:	f003 fe1d 	bl	900104ec <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
9000c8b2:	68fb      	ldr	r3, [r7, #12]
9000c8b4:	891b      	ldrh	r3, [r3, #8]
9000c8b6:	2b00      	cmp	r3, #0
9000c8b8:	d006      	beq.n	9000c8c8 <tcp_enqueue_flags+0x100>
9000c8ba:	4b32      	ldr	r3, [pc, #200]	; (9000c984 <tcp_enqueue_flags+0x1bc>)
9000c8bc:	f240 4243 	movw	r2, #1091	; 0x443
9000c8c0:	4936      	ldr	r1, [pc, #216]	; (9000c99c <tcp_enqueue_flags+0x1d4>)
9000c8c2:	4832      	ldr	r0, [pc, #200]	; (9000c98c <tcp_enqueue_flags+0x1c4>)
9000c8c4:	f003 fe12 	bl	900104ec <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
9000c8c8:	687b      	ldr	r3, [r7, #4]
9000c8ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000c8cc:	2b00      	cmp	r3, #0
9000c8ce:	d103      	bne.n	9000c8d8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
9000c8d0:	687b      	ldr	r3, [r7, #4]
9000c8d2:	68fa      	ldr	r2, [r7, #12]
9000c8d4:	66da      	str	r2, [r3, #108]	; 0x6c
9000c8d6:	e00d      	b.n	9000c8f4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
9000c8d8:	687b      	ldr	r3, [r7, #4]
9000c8da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000c8dc:	61bb      	str	r3, [r7, #24]
9000c8de:	e002      	b.n	9000c8e6 <tcp_enqueue_flags+0x11e>
9000c8e0:	69bb      	ldr	r3, [r7, #24]
9000c8e2:	681b      	ldr	r3, [r3, #0]
9000c8e4:	61bb      	str	r3, [r7, #24]
9000c8e6:	69bb      	ldr	r3, [r7, #24]
9000c8e8:	681b      	ldr	r3, [r3, #0]
9000c8ea:	2b00      	cmp	r3, #0
9000c8ec:	d1f8      	bne.n	9000c8e0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
9000c8ee:	69bb      	ldr	r3, [r7, #24]
9000c8f0:	68fa      	ldr	r2, [r7, #12]
9000c8f2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
9000c8f4:	687b      	ldr	r3, [r7, #4]
9000c8f6:	2200      	movs	r2, #0
9000c8f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
9000c8fc:	78fb      	ldrb	r3, [r7, #3]
9000c8fe:	f003 0302 	and.w	r3, r3, #2
9000c902:	2b00      	cmp	r3, #0
9000c904:	d104      	bne.n	9000c910 <tcp_enqueue_flags+0x148>
9000c906:	78fb      	ldrb	r3, [r7, #3]
9000c908:	f003 0301 	and.w	r3, r3, #1
9000c90c:	2b00      	cmp	r3, #0
9000c90e:	d004      	beq.n	9000c91a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
9000c910:	687b      	ldr	r3, [r7, #4]
9000c912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
9000c914:	1c5a      	adds	r2, r3, #1
9000c916:	687b      	ldr	r3, [r7, #4]
9000c918:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
9000c91a:	78fb      	ldrb	r3, [r7, #3]
9000c91c:	f003 0301 	and.w	r3, r3, #1
9000c920:	2b00      	cmp	r3, #0
9000c922:	d006      	beq.n	9000c932 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
9000c924:	687b      	ldr	r3, [r7, #4]
9000c926:	8b5b      	ldrh	r3, [r3, #26]
9000c928:	f043 0320 	orr.w	r3, r3, #32
9000c92c:	b29a      	uxth	r2, r3
9000c92e:	687b      	ldr	r3, [r7, #4]
9000c930:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
9000c932:	68fb      	ldr	r3, [r7, #12]
9000c934:	685b      	ldr	r3, [r3, #4]
9000c936:	4618      	mov	r0, r3
9000c938:	f7fa fd4a 	bl	900073d0 <pbuf_clen>
9000c93c:	4603      	mov	r3, r0
9000c93e:	461a      	mov	r2, r3
9000c940:	687b      	ldr	r3, [r7, #4]
9000c942:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
9000c946:	4413      	add	r3, r2
9000c948:	b29a      	uxth	r2, r3
9000c94a:	687b      	ldr	r3, [r7, #4]
9000c94c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
9000c950:	687b      	ldr	r3, [r7, #4]
9000c952:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
9000c956:	2b00      	cmp	r3, #0
9000c958:	d00e      	beq.n	9000c978 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
9000c95a:	687b      	ldr	r3, [r7, #4]
9000c95c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000c95e:	2b00      	cmp	r3, #0
9000c960:	d10a      	bne.n	9000c978 <tcp_enqueue_flags+0x1b0>
9000c962:	687b      	ldr	r3, [r7, #4]
9000c964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000c966:	2b00      	cmp	r3, #0
9000c968:	d106      	bne.n	9000c978 <tcp_enqueue_flags+0x1b0>
9000c96a:	4b06      	ldr	r3, [pc, #24]	; (9000c984 <tcp_enqueue_flags+0x1bc>)
9000c96c:	f240 4265 	movw	r2, #1125	; 0x465
9000c970:	490b      	ldr	r1, [pc, #44]	; (9000c9a0 <tcp_enqueue_flags+0x1d8>)
9000c972:	4806      	ldr	r0, [pc, #24]	; (9000c98c <tcp_enqueue_flags+0x1c4>)
9000c974:	f003 fdba 	bl	900104ec <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
9000c978:	2300      	movs	r3, #0
}
9000c97a:	4618      	mov	r0, r3
9000c97c:	3720      	adds	r7, #32
9000c97e:	46bd      	mov	sp, r7
9000c980:	bd80      	pop	{r7, pc}
9000c982:	bf00      	nop
9000c984:	900133a4 	.word	0x900133a4
9000c988:	900137c8 	.word	0x900137c8
9000c98c:	900133f8 	.word	0x900133f8
9000c990:	90013820 	.word	0x90013820
9000c994:	90013840 	.word	0x90013840
9000c998:	9001387c 	.word	0x9001387c
9000c99c:	90013894 	.word	0x90013894
9000c9a0:	900138c0 	.word	0x900138c0

9000c9a4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
9000c9a4:	b5b0      	push	{r4, r5, r7, lr}
9000c9a6:	b08a      	sub	sp, #40	; 0x28
9000c9a8:	af00      	add	r7, sp, #0
9000c9aa:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
9000c9ac:	687b      	ldr	r3, [r7, #4]
9000c9ae:	2b00      	cmp	r3, #0
9000c9b0:	d106      	bne.n	9000c9c0 <tcp_output+0x1c>
9000c9b2:	4b8a      	ldr	r3, [pc, #552]	; (9000cbdc <tcp_output+0x238>)
9000c9b4:	f240 42e1 	movw	r2, #1249	; 0x4e1
9000c9b8:	4989      	ldr	r1, [pc, #548]	; (9000cbe0 <tcp_output+0x23c>)
9000c9ba:	488a      	ldr	r0, [pc, #552]	; (9000cbe4 <tcp_output+0x240>)
9000c9bc:	f003 fd96 	bl	900104ec <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
9000c9c0:	687b      	ldr	r3, [r7, #4]
9000c9c2:	7d1b      	ldrb	r3, [r3, #20]
9000c9c4:	2b01      	cmp	r3, #1
9000c9c6:	d106      	bne.n	9000c9d6 <tcp_output+0x32>
9000c9c8:	4b84      	ldr	r3, [pc, #528]	; (9000cbdc <tcp_output+0x238>)
9000c9ca:	f240 42e3 	movw	r2, #1251	; 0x4e3
9000c9ce:	4986      	ldr	r1, [pc, #536]	; (9000cbe8 <tcp_output+0x244>)
9000c9d0:	4884      	ldr	r0, [pc, #528]	; (9000cbe4 <tcp_output+0x240>)
9000c9d2:	f003 fd8b 	bl	900104ec <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
9000c9d6:	4b85      	ldr	r3, [pc, #532]	; (9000cbec <tcp_output+0x248>)
9000c9d8:	681b      	ldr	r3, [r3, #0]
9000c9da:	687a      	ldr	r2, [r7, #4]
9000c9dc:	429a      	cmp	r2, r3
9000c9de:	d101      	bne.n	9000c9e4 <tcp_output+0x40>
    return ERR_OK;
9000c9e0:	2300      	movs	r3, #0
9000c9e2:	e1ce      	b.n	9000cd82 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
9000c9e4:	687b      	ldr	r3, [r7, #4]
9000c9e6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
9000c9ea:	687b      	ldr	r3, [r7, #4]
9000c9ec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
9000c9f0:	4293      	cmp	r3, r2
9000c9f2:	bf28      	it	cs
9000c9f4:	4613      	movcs	r3, r2
9000c9f6:	b29b      	uxth	r3, r3
9000c9f8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
9000c9fa:	687b      	ldr	r3, [r7, #4]
9000c9fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000c9fe:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
9000ca00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000ca02:	2b00      	cmp	r3, #0
9000ca04:	d10b      	bne.n	9000ca1e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
9000ca06:	687b      	ldr	r3, [r7, #4]
9000ca08:	8b5b      	ldrh	r3, [r3, #26]
9000ca0a:	f003 0302 	and.w	r3, r3, #2
9000ca0e:	2b00      	cmp	r3, #0
9000ca10:	f000 81aa 	beq.w	9000cd68 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
9000ca14:	6878      	ldr	r0, [r7, #4]
9000ca16:	f000 fdcb 	bl	9000d5b0 <tcp_send_empty_ack>
9000ca1a:	4603      	mov	r3, r0
9000ca1c:	e1b1      	b.n	9000cd82 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
9000ca1e:	6879      	ldr	r1, [r7, #4]
9000ca20:	687b      	ldr	r3, [r7, #4]
9000ca22:	3304      	adds	r3, #4
9000ca24:	461a      	mov	r2, r3
9000ca26:	6878      	ldr	r0, [r7, #4]
9000ca28:	f7ff f824 	bl	9000ba74 <tcp_route>
9000ca2c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
9000ca2e:	697b      	ldr	r3, [r7, #20]
9000ca30:	2b00      	cmp	r3, #0
9000ca32:	d102      	bne.n	9000ca3a <tcp_output+0x96>
    return ERR_RTE;
9000ca34:	f06f 0303 	mvn.w	r3, #3
9000ca38:	e1a3      	b.n	9000cd82 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
9000ca3a:	687b      	ldr	r3, [r7, #4]
9000ca3c:	2b00      	cmp	r3, #0
9000ca3e:	d003      	beq.n	9000ca48 <tcp_output+0xa4>
9000ca40:	687b      	ldr	r3, [r7, #4]
9000ca42:	681b      	ldr	r3, [r3, #0]
9000ca44:	2b00      	cmp	r3, #0
9000ca46:	d111      	bne.n	9000ca6c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
9000ca48:	697b      	ldr	r3, [r7, #20]
9000ca4a:	2b00      	cmp	r3, #0
9000ca4c:	d002      	beq.n	9000ca54 <tcp_output+0xb0>
9000ca4e:	697b      	ldr	r3, [r7, #20]
9000ca50:	3304      	adds	r3, #4
9000ca52:	e000      	b.n	9000ca56 <tcp_output+0xb2>
9000ca54:	2300      	movs	r3, #0
9000ca56:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
9000ca58:	693b      	ldr	r3, [r7, #16]
9000ca5a:	2b00      	cmp	r3, #0
9000ca5c:	d102      	bne.n	9000ca64 <tcp_output+0xc0>
      return ERR_RTE;
9000ca5e:	f06f 0303 	mvn.w	r3, #3
9000ca62:	e18e      	b.n	9000cd82 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
9000ca64:	693b      	ldr	r3, [r7, #16]
9000ca66:	681a      	ldr	r2, [r3, #0]
9000ca68:	687b      	ldr	r3, [r7, #4]
9000ca6a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
9000ca6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000ca6e:	68db      	ldr	r3, [r3, #12]
9000ca70:	685b      	ldr	r3, [r3, #4]
9000ca72:	4618      	mov	r0, r3
9000ca74:	f7f9 f871 	bl	90005b5a <lwip_htonl>
9000ca78:	4602      	mov	r2, r0
9000ca7a:	687b      	ldr	r3, [r7, #4]
9000ca7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
9000ca7e:	1ad3      	subs	r3, r2, r3
9000ca80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
9000ca82:	8912      	ldrh	r2, [r2, #8]
9000ca84:	4413      	add	r3, r2
9000ca86:	69ba      	ldr	r2, [r7, #24]
9000ca88:	429a      	cmp	r2, r3
9000ca8a:	d227      	bcs.n	9000cadc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
9000ca8c:	687b      	ldr	r3, [r7, #4]
9000ca8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
9000ca92:	461a      	mov	r2, r3
9000ca94:	69bb      	ldr	r3, [r7, #24]
9000ca96:	4293      	cmp	r3, r2
9000ca98:	d114      	bne.n	9000cac4 <tcp_output+0x120>
9000ca9a:	687b      	ldr	r3, [r7, #4]
9000ca9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000ca9e:	2b00      	cmp	r3, #0
9000caa0:	d110      	bne.n	9000cac4 <tcp_output+0x120>
9000caa2:	687b      	ldr	r3, [r7, #4]
9000caa4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
9000caa8:	2b00      	cmp	r3, #0
9000caaa:	d10b      	bne.n	9000cac4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
9000caac:	687b      	ldr	r3, [r7, #4]
9000caae:	2200      	movs	r2, #0
9000cab0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
9000cab4:	687b      	ldr	r3, [r7, #4]
9000cab6:	2201      	movs	r2, #1
9000cab8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
9000cabc:	687b      	ldr	r3, [r7, #4]
9000cabe:	2200      	movs	r2, #0
9000cac0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
9000cac4:	687b      	ldr	r3, [r7, #4]
9000cac6:	8b5b      	ldrh	r3, [r3, #26]
9000cac8:	f003 0302 	and.w	r3, r3, #2
9000cacc:	2b00      	cmp	r3, #0
9000cace:	f000 814d 	beq.w	9000cd6c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
9000cad2:	6878      	ldr	r0, [r7, #4]
9000cad4:	f000 fd6c 	bl	9000d5b0 <tcp_send_empty_ack>
9000cad8:	4603      	mov	r3, r0
9000cada:	e152      	b.n	9000cd82 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
9000cadc:	687b      	ldr	r3, [r7, #4]
9000cade:	2200      	movs	r2, #0
9000cae0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
9000cae4:	687b      	ldr	r3, [r7, #4]
9000cae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000cae8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
9000caea:	6a3b      	ldr	r3, [r7, #32]
9000caec:	2b00      	cmp	r3, #0
9000caee:	f000 811c 	beq.w	9000cd2a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
9000caf2:	e002      	b.n	9000cafa <tcp_output+0x156>
9000caf4:	6a3b      	ldr	r3, [r7, #32]
9000caf6:	681b      	ldr	r3, [r3, #0]
9000caf8:	623b      	str	r3, [r7, #32]
9000cafa:	6a3b      	ldr	r3, [r7, #32]
9000cafc:	681b      	ldr	r3, [r3, #0]
9000cafe:	2b00      	cmp	r3, #0
9000cb00:	d1f8      	bne.n	9000caf4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
9000cb02:	e112      	b.n	9000cd2a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
9000cb04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000cb06:	68db      	ldr	r3, [r3, #12]
9000cb08:	899b      	ldrh	r3, [r3, #12]
9000cb0a:	b29b      	uxth	r3, r3
9000cb0c:	4618      	mov	r0, r3
9000cb0e:	f7f9 f80f 	bl	90005b30 <lwip_htons>
9000cb12:	4603      	mov	r3, r0
9000cb14:	b2db      	uxtb	r3, r3
9000cb16:	f003 0304 	and.w	r3, r3, #4
9000cb1a:	2b00      	cmp	r3, #0
9000cb1c:	d006      	beq.n	9000cb2c <tcp_output+0x188>
9000cb1e:	4b2f      	ldr	r3, [pc, #188]	; (9000cbdc <tcp_output+0x238>)
9000cb20:	f240 5236 	movw	r2, #1334	; 0x536
9000cb24:	4932      	ldr	r1, [pc, #200]	; (9000cbf0 <tcp_output+0x24c>)
9000cb26:	482f      	ldr	r0, [pc, #188]	; (9000cbe4 <tcp_output+0x240>)
9000cb28:	f003 fce0 	bl	900104ec <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
9000cb2c:	687b      	ldr	r3, [r7, #4]
9000cb2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000cb30:	2b00      	cmp	r3, #0
9000cb32:	d01f      	beq.n	9000cb74 <tcp_output+0x1d0>
9000cb34:	687b      	ldr	r3, [r7, #4]
9000cb36:	8b5b      	ldrh	r3, [r3, #26]
9000cb38:	f003 0344 	and.w	r3, r3, #68	; 0x44
9000cb3c:	2b00      	cmp	r3, #0
9000cb3e:	d119      	bne.n	9000cb74 <tcp_output+0x1d0>
9000cb40:	687b      	ldr	r3, [r7, #4]
9000cb42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000cb44:	2b00      	cmp	r3, #0
9000cb46:	d00b      	beq.n	9000cb60 <tcp_output+0x1bc>
9000cb48:	687b      	ldr	r3, [r7, #4]
9000cb4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000cb4c:	681b      	ldr	r3, [r3, #0]
9000cb4e:	2b00      	cmp	r3, #0
9000cb50:	d110      	bne.n	9000cb74 <tcp_output+0x1d0>
9000cb52:	687b      	ldr	r3, [r7, #4]
9000cb54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000cb56:	891a      	ldrh	r2, [r3, #8]
9000cb58:	687b      	ldr	r3, [r7, #4]
9000cb5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000cb5c:	429a      	cmp	r2, r3
9000cb5e:	d209      	bcs.n	9000cb74 <tcp_output+0x1d0>
9000cb60:	687b      	ldr	r3, [r7, #4]
9000cb62:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
9000cb66:	2b00      	cmp	r3, #0
9000cb68:	d004      	beq.n	9000cb74 <tcp_output+0x1d0>
9000cb6a:	687b      	ldr	r3, [r7, #4]
9000cb6c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
9000cb70:	2b08      	cmp	r3, #8
9000cb72:	d901      	bls.n	9000cb78 <tcp_output+0x1d4>
9000cb74:	2301      	movs	r3, #1
9000cb76:	e000      	b.n	9000cb7a <tcp_output+0x1d6>
9000cb78:	2300      	movs	r3, #0
9000cb7a:	2b00      	cmp	r3, #0
9000cb7c:	d106      	bne.n	9000cb8c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
9000cb7e:	687b      	ldr	r3, [r7, #4]
9000cb80:	8b5b      	ldrh	r3, [r3, #26]
9000cb82:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
9000cb86:	2b00      	cmp	r3, #0
9000cb88:	f000 80e4 	beq.w	9000cd54 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
9000cb8c:	687b      	ldr	r3, [r7, #4]
9000cb8e:	7d1b      	ldrb	r3, [r3, #20]
9000cb90:	2b02      	cmp	r3, #2
9000cb92:	d00d      	beq.n	9000cbb0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
9000cb94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000cb96:	68db      	ldr	r3, [r3, #12]
9000cb98:	899b      	ldrh	r3, [r3, #12]
9000cb9a:	b29c      	uxth	r4, r3
9000cb9c:	2010      	movs	r0, #16
9000cb9e:	f7f8 ffc7 	bl	90005b30 <lwip_htons>
9000cba2:	4603      	mov	r3, r0
9000cba4:	461a      	mov	r2, r3
9000cba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000cba8:	68db      	ldr	r3, [r3, #12]
9000cbaa:	4322      	orrs	r2, r4
9000cbac:	b292      	uxth	r2, r2
9000cbae:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
9000cbb0:	697a      	ldr	r2, [r7, #20]
9000cbb2:	6879      	ldr	r1, [r7, #4]
9000cbb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
9000cbb6:	f000 f909 	bl	9000cdcc <tcp_output_segment>
9000cbba:	4603      	mov	r3, r0
9000cbbc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
9000cbbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
9000cbc2:	2b00      	cmp	r3, #0
9000cbc4:	d016      	beq.n	9000cbf4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
9000cbc6:	687b      	ldr	r3, [r7, #4]
9000cbc8:	8b5b      	ldrh	r3, [r3, #26]
9000cbca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9000cbce:	b29a      	uxth	r2, r3
9000cbd0:	687b      	ldr	r3, [r7, #4]
9000cbd2:	835a      	strh	r2, [r3, #26]
      return err;
9000cbd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
9000cbd8:	e0d3      	b.n	9000cd82 <tcp_output+0x3de>
9000cbda:	bf00      	nop
9000cbdc:	900133a4 	.word	0x900133a4
9000cbe0:	900138e8 	.word	0x900138e8
9000cbe4:	900133f8 	.word	0x900133f8
9000cbe8:	90013900 	.word	0x90013900
9000cbec:	2000a8ec 	.word	0x2000a8ec
9000cbf0:	90013928 	.word	0x90013928
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
9000cbf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000cbf6:	681a      	ldr	r2, [r3, #0]
9000cbf8:	687b      	ldr	r3, [r7, #4]
9000cbfa:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
9000cbfc:	687b      	ldr	r3, [r7, #4]
9000cbfe:	7d1b      	ldrb	r3, [r3, #20]
9000cc00:	2b02      	cmp	r3, #2
9000cc02:	d006      	beq.n	9000cc12 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
9000cc04:	687b      	ldr	r3, [r7, #4]
9000cc06:	8b5b      	ldrh	r3, [r3, #26]
9000cc08:	f023 0303 	bic.w	r3, r3, #3
9000cc0c:	b29a      	uxth	r2, r3
9000cc0e:	687b      	ldr	r3, [r7, #4]
9000cc10:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
9000cc12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000cc14:	68db      	ldr	r3, [r3, #12]
9000cc16:	685b      	ldr	r3, [r3, #4]
9000cc18:	4618      	mov	r0, r3
9000cc1a:	f7f8 ff9e 	bl	90005b5a <lwip_htonl>
9000cc1e:	4604      	mov	r4, r0
9000cc20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000cc22:	891b      	ldrh	r3, [r3, #8]
9000cc24:	461d      	mov	r5, r3
9000cc26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000cc28:	68db      	ldr	r3, [r3, #12]
9000cc2a:	899b      	ldrh	r3, [r3, #12]
9000cc2c:	b29b      	uxth	r3, r3
9000cc2e:	4618      	mov	r0, r3
9000cc30:	f7f8 ff7e 	bl	90005b30 <lwip_htons>
9000cc34:	4603      	mov	r3, r0
9000cc36:	b2db      	uxtb	r3, r3
9000cc38:	f003 0303 	and.w	r3, r3, #3
9000cc3c:	2b00      	cmp	r3, #0
9000cc3e:	d001      	beq.n	9000cc44 <tcp_output+0x2a0>
9000cc40:	2301      	movs	r3, #1
9000cc42:	e000      	b.n	9000cc46 <tcp_output+0x2a2>
9000cc44:	2300      	movs	r3, #0
9000cc46:	442b      	add	r3, r5
9000cc48:	4423      	add	r3, r4
9000cc4a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
9000cc4c:	687b      	ldr	r3, [r7, #4]
9000cc4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
9000cc50:	68bb      	ldr	r3, [r7, #8]
9000cc52:	1ad3      	subs	r3, r2, r3
9000cc54:	2b00      	cmp	r3, #0
9000cc56:	da02      	bge.n	9000cc5e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
9000cc58:	687b      	ldr	r3, [r7, #4]
9000cc5a:	68ba      	ldr	r2, [r7, #8]
9000cc5c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
9000cc5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000cc60:	891b      	ldrh	r3, [r3, #8]
9000cc62:	461c      	mov	r4, r3
9000cc64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000cc66:	68db      	ldr	r3, [r3, #12]
9000cc68:	899b      	ldrh	r3, [r3, #12]
9000cc6a:	b29b      	uxth	r3, r3
9000cc6c:	4618      	mov	r0, r3
9000cc6e:	f7f8 ff5f 	bl	90005b30 <lwip_htons>
9000cc72:	4603      	mov	r3, r0
9000cc74:	b2db      	uxtb	r3, r3
9000cc76:	f003 0303 	and.w	r3, r3, #3
9000cc7a:	2b00      	cmp	r3, #0
9000cc7c:	d001      	beq.n	9000cc82 <tcp_output+0x2de>
9000cc7e:	2301      	movs	r3, #1
9000cc80:	e000      	b.n	9000cc84 <tcp_output+0x2e0>
9000cc82:	2300      	movs	r3, #0
9000cc84:	4423      	add	r3, r4
9000cc86:	2b00      	cmp	r3, #0
9000cc88:	d049      	beq.n	9000cd1e <tcp_output+0x37a>
      seg->next = NULL;
9000cc8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000cc8c:	2200      	movs	r2, #0
9000cc8e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
9000cc90:	687b      	ldr	r3, [r7, #4]
9000cc92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000cc94:	2b00      	cmp	r3, #0
9000cc96:	d105      	bne.n	9000cca4 <tcp_output+0x300>
        pcb->unacked = seg;
9000cc98:	687b      	ldr	r3, [r7, #4]
9000cc9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
9000cc9c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
9000cc9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000cca0:	623b      	str	r3, [r7, #32]
9000cca2:	e03f      	b.n	9000cd24 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
9000cca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000cca6:	68db      	ldr	r3, [r3, #12]
9000cca8:	685b      	ldr	r3, [r3, #4]
9000ccaa:	4618      	mov	r0, r3
9000ccac:	f7f8 ff55 	bl	90005b5a <lwip_htonl>
9000ccb0:	4604      	mov	r4, r0
9000ccb2:	6a3b      	ldr	r3, [r7, #32]
9000ccb4:	68db      	ldr	r3, [r3, #12]
9000ccb6:	685b      	ldr	r3, [r3, #4]
9000ccb8:	4618      	mov	r0, r3
9000ccba:	f7f8 ff4e 	bl	90005b5a <lwip_htonl>
9000ccbe:	4603      	mov	r3, r0
9000ccc0:	1ae3      	subs	r3, r4, r3
9000ccc2:	2b00      	cmp	r3, #0
9000ccc4:	da24      	bge.n	9000cd10 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
9000ccc6:	687b      	ldr	r3, [r7, #4]
9000ccc8:	3370      	adds	r3, #112	; 0x70
9000ccca:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
9000cccc:	e002      	b.n	9000ccd4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
9000ccce:	69fb      	ldr	r3, [r7, #28]
9000ccd0:	681b      	ldr	r3, [r3, #0]
9000ccd2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
9000ccd4:	69fb      	ldr	r3, [r7, #28]
9000ccd6:	681b      	ldr	r3, [r3, #0]
9000ccd8:	2b00      	cmp	r3, #0
9000ccda:	d011      	beq.n	9000cd00 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
9000ccdc:	69fb      	ldr	r3, [r7, #28]
9000ccde:	681b      	ldr	r3, [r3, #0]
9000cce0:	68db      	ldr	r3, [r3, #12]
9000cce2:	685b      	ldr	r3, [r3, #4]
9000cce4:	4618      	mov	r0, r3
9000cce6:	f7f8 ff38 	bl	90005b5a <lwip_htonl>
9000ccea:	4604      	mov	r4, r0
9000ccec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000ccee:	68db      	ldr	r3, [r3, #12]
9000ccf0:	685b      	ldr	r3, [r3, #4]
9000ccf2:	4618      	mov	r0, r3
9000ccf4:	f7f8 ff31 	bl	90005b5a <lwip_htonl>
9000ccf8:	4603      	mov	r3, r0
9000ccfa:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
9000ccfc:	2b00      	cmp	r3, #0
9000ccfe:	dbe6      	blt.n	9000ccce <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
9000cd00:	69fb      	ldr	r3, [r7, #28]
9000cd02:	681a      	ldr	r2, [r3, #0]
9000cd04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000cd06:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
9000cd08:	69fb      	ldr	r3, [r7, #28]
9000cd0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
9000cd0c:	601a      	str	r2, [r3, #0]
9000cd0e:	e009      	b.n	9000cd24 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
9000cd10:	6a3b      	ldr	r3, [r7, #32]
9000cd12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
9000cd14:	601a      	str	r2, [r3, #0]
          useg = useg->next;
9000cd16:	6a3b      	ldr	r3, [r7, #32]
9000cd18:	681b      	ldr	r3, [r3, #0]
9000cd1a:	623b      	str	r3, [r7, #32]
9000cd1c:	e002      	b.n	9000cd24 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
9000cd1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
9000cd20:	f7fb fefb 	bl	90008b1a <tcp_seg_free>
    }
    seg = pcb->unsent;
9000cd24:	687b      	ldr	r3, [r7, #4]
9000cd26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000cd28:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
9000cd2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000cd2c:	2b00      	cmp	r3, #0
9000cd2e:	d012      	beq.n	9000cd56 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
9000cd30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000cd32:	68db      	ldr	r3, [r3, #12]
9000cd34:	685b      	ldr	r3, [r3, #4]
9000cd36:	4618      	mov	r0, r3
9000cd38:	f7f8 ff0f 	bl	90005b5a <lwip_htonl>
9000cd3c:	4602      	mov	r2, r0
9000cd3e:	687b      	ldr	r3, [r7, #4]
9000cd40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
9000cd42:	1ad3      	subs	r3, r2, r3
9000cd44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
9000cd46:	8912      	ldrh	r2, [r2, #8]
9000cd48:	4413      	add	r3, r2
  while (seg != NULL &&
9000cd4a:	69ba      	ldr	r2, [r7, #24]
9000cd4c:	429a      	cmp	r2, r3
9000cd4e:	f4bf aed9 	bcs.w	9000cb04 <tcp_output+0x160>
9000cd52:	e000      	b.n	9000cd56 <tcp_output+0x3b2>
      break;
9000cd54:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
9000cd56:	687b      	ldr	r3, [r7, #4]
9000cd58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000cd5a:	2b00      	cmp	r3, #0
9000cd5c:	d108      	bne.n	9000cd70 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
9000cd5e:	687b      	ldr	r3, [r7, #4]
9000cd60:	2200      	movs	r2, #0
9000cd62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
9000cd66:	e004      	b.n	9000cd72 <tcp_output+0x3ce>
    goto output_done;
9000cd68:	bf00      	nop
9000cd6a:	e002      	b.n	9000cd72 <tcp_output+0x3ce>
    goto output_done;
9000cd6c:	bf00      	nop
9000cd6e:	e000      	b.n	9000cd72 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
9000cd70:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
9000cd72:	687b      	ldr	r3, [r7, #4]
9000cd74:	8b5b      	ldrh	r3, [r3, #26]
9000cd76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
9000cd7a:	b29a      	uxth	r2, r3
9000cd7c:	687b      	ldr	r3, [r7, #4]
9000cd7e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
9000cd80:	2300      	movs	r3, #0
}
9000cd82:	4618      	mov	r0, r3
9000cd84:	3728      	adds	r7, #40	; 0x28
9000cd86:	46bd      	mov	sp, r7
9000cd88:	bdb0      	pop	{r4, r5, r7, pc}
9000cd8a:	bf00      	nop

9000cd8c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
9000cd8c:	b580      	push	{r7, lr}
9000cd8e:	b082      	sub	sp, #8
9000cd90:	af00      	add	r7, sp, #0
9000cd92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
9000cd94:	687b      	ldr	r3, [r7, #4]
9000cd96:	2b00      	cmp	r3, #0
9000cd98:	d106      	bne.n	9000cda8 <tcp_output_segment_busy+0x1c>
9000cd9a:	4b09      	ldr	r3, [pc, #36]	; (9000cdc0 <tcp_output_segment_busy+0x34>)
9000cd9c:	f240 529a 	movw	r2, #1434	; 0x59a
9000cda0:	4908      	ldr	r1, [pc, #32]	; (9000cdc4 <tcp_output_segment_busy+0x38>)
9000cda2:	4809      	ldr	r0, [pc, #36]	; (9000cdc8 <tcp_output_segment_busy+0x3c>)
9000cda4:	f003 fba2 	bl	900104ec <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
9000cda8:	687b      	ldr	r3, [r7, #4]
9000cdaa:	685b      	ldr	r3, [r3, #4]
9000cdac:	7b9b      	ldrb	r3, [r3, #14]
9000cdae:	2b01      	cmp	r3, #1
9000cdb0:	d001      	beq.n	9000cdb6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
9000cdb2:	2301      	movs	r3, #1
9000cdb4:	e000      	b.n	9000cdb8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
9000cdb6:	2300      	movs	r3, #0
}
9000cdb8:	4618      	mov	r0, r3
9000cdba:	3708      	adds	r7, #8
9000cdbc:	46bd      	mov	sp, r7
9000cdbe:	bd80      	pop	{r7, pc}
9000cdc0:	900133a4 	.word	0x900133a4
9000cdc4:	90013940 	.word	0x90013940
9000cdc8:	900133f8 	.word	0x900133f8

9000cdcc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
9000cdcc:	b5b0      	push	{r4, r5, r7, lr}
9000cdce:	b08c      	sub	sp, #48	; 0x30
9000cdd0:	af04      	add	r7, sp, #16
9000cdd2:	60f8      	str	r0, [r7, #12]
9000cdd4:	60b9      	str	r1, [r7, #8]
9000cdd6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
9000cdd8:	68fb      	ldr	r3, [r7, #12]
9000cdda:	2b00      	cmp	r3, #0
9000cddc:	d106      	bne.n	9000cdec <tcp_output_segment+0x20>
9000cdde:	4b63      	ldr	r3, [pc, #396]	; (9000cf6c <tcp_output_segment+0x1a0>)
9000cde0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
9000cde4:	4962      	ldr	r1, [pc, #392]	; (9000cf70 <tcp_output_segment+0x1a4>)
9000cde6:	4863      	ldr	r0, [pc, #396]	; (9000cf74 <tcp_output_segment+0x1a8>)
9000cde8:	f003 fb80 	bl	900104ec <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
9000cdec:	68bb      	ldr	r3, [r7, #8]
9000cdee:	2b00      	cmp	r3, #0
9000cdf0:	d106      	bne.n	9000ce00 <tcp_output_segment+0x34>
9000cdf2:	4b5e      	ldr	r3, [pc, #376]	; (9000cf6c <tcp_output_segment+0x1a0>)
9000cdf4:	f240 52b9 	movw	r2, #1465	; 0x5b9
9000cdf8:	495f      	ldr	r1, [pc, #380]	; (9000cf78 <tcp_output_segment+0x1ac>)
9000cdfa:	485e      	ldr	r0, [pc, #376]	; (9000cf74 <tcp_output_segment+0x1a8>)
9000cdfc:	f003 fb76 	bl	900104ec <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
9000ce00:	687b      	ldr	r3, [r7, #4]
9000ce02:	2b00      	cmp	r3, #0
9000ce04:	d106      	bne.n	9000ce14 <tcp_output_segment+0x48>
9000ce06:	4b59      	ldr	r3, [pc, #356]	; (9000cf6c <tcp_output_segment+0x1a0>)
9000ce08:	f240 52ba 	movw	r2, #1466	; 0x5ba
9000ce0c:	495b      	ldr	r1, [pc, #364]	; (9000cf7c <tcp_output_segment+0x1b0>)
9000ce0e:	4859      	ldr	r0, [pc, #356]	; (9000cf74 <tcp_output_segment+0x1a8>)
9000ce10:	f003 fb6c 	bl	900104ec <iprintf>

  if (tcp_output_segment_busy(seg)) {
9000ce14:	68f8      	ldr	r0, [r7, #12]
9000ce16:	f7ff ffb9 	bl	9000cd8c <tcp_output_segment_busy>
9000ce1a:	4603      	mov	r3, r0
9000ce1c:	2b00      	cmp	r3, #0
9000ce1e:	d001      	beq.n	9000ce24 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
9000ce20:	2300      	movs	r3, #0
9000ce22:	e09f      	b.n	9000cf64 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
9000ce24:	68bb      	ldr	r3, [r7, #8]
9000ce26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
9000ce28:	68fb      	ldr	r3, [r7, #12]
9000ce2a:	68dc      	ldr	r4, [r3, #12]
9000ce2c:	4610      	mov	r0, r2
9000ce2e:	f7f8 fe94 	bl	90005b5a <lwip_htonl>
9000ce32:	4603      	mov	r3, r0
9000ce34:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
9000ce36:	68bb      	ldr	r3, [r7, #8]
9000ce38:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
9000ce3a:	68fb      	ldr	r3, [r7, #12]
9000ce3c:	68dc      	ldr	r4, [r3, #12]
9000ce3e:	4610      	mov	r0, r2
9000ce40:	f7f8 fe76 	bl	90005b30 <lwip_htons>
9000ce44:	4603      	mov	r3, r0
9000ce46:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
9000ce48:	68bb      	ldr	r3, [r7, #8]
9000ce4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000ce4c:	68ba      	ldr	r2, [r7, #8]
9000ce4e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
9000ce50:	441a      	add	r2, r3
9000ce52:	68bb      	ldr	r3, [r7, #8]
9000ce54:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
9000ce56:	68fb      	ldr	r3, [r7, #12]
9000ce58:	68db      	ldr	r3, [r3, #12]
9000ce5a:	3314      	adds	r3, #20
9000ce5c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
9000ce5e:	68fb      	ldr	r3, [r7, #12]
9000ce60:	7a9b      	ldrb	r3, [r3, #10]
9000ce62:	f003 0301 	and.w	r3, r3, #1
9000ce66:	2b00      	cmp	r3, #0
9000ce68:	d015      	beq.n	9000ce96 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
9000ce6a:	68bb      	ldr	r3, [r7, #8]
9000ce6c:	3304      	adds	r3, #4
9000ce6e:	461a      	mov	r2, r3
9000ce70:	6879      	ldr	r1, [r7, #4]
9000ce72:	f44f 7006 	mov.w	r0, #536	; 0x218
9000ce76:	f7fc fa33 	bl	900092e0 <tcp_eff_send_mss_netif>
9000ce7a:	4603      	mov	r3, r0
9000ce7c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
9000ce7e:	8b7b      	ldrh	r3, [r7, #26]
9000ce80:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
9000ce84:	4618      	mov	r0, r3
9000ce86:	f7f8 fe68 	bl	90005b5a <lwip_htonl>
9000ce8a:	4602      	mov	r2, r0
9000ce8c:	69fb      	ldr	r3, [r7, #28]
9000ce8e:	601a      	str	r2, [r3, #0]
    opts += 1;
9000ce90:	69fb      	ldr	r3, [r7, #28]
9000ce92:	3304      	adds	r3, #4
9000ce94:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
9000ce96:	68bb      	ldr	r3, [r7, #8]
9000ce98:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
9000ce9c:	2b00      	cmp	r3, #0
9000ce9e:	da02      	bge.n	9000cea6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
9000cea0:	68bb      	ldr	r3, [r7, #8]
9000cea2:	2200      	movs	r2, #0
9000cea4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
9000cea6:	68bb      	ldr	r3, [r7, #8]
9000cea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
9000ceaa:	2b00      	cmp	r3, #0
9000ceac:	d10c      	bne.n	9000cec8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
9000ceae:	4b34      	ldr	r3, [pc, #208]	; (9000cf80 <tcp_output_segment+0x1b4>)
9000ceb0:	681a      	ldr	r2, [r3, #0]
9000ceb2:	68bb      	ldr	r3, [r7, #8]
9000ceb4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
9000ceb6:	68fb      	ldr	r3, [r7, #12]
9000ceb8:	68db      	ldr	r3, [r3, #12]
9000ceba:	685b      	ldr	r3, [r3, #4]
9000cebc:	4618      	mov	r0, r3
9000cebe:	f7f8 fe4c 	bl	90005b5a <lwip_htonl>
9000cec2:	4602      	mov	r2, r0
9000cec4:	68bb      	ldr	r3, [r7, #8]
9000cec6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
9000cec8:	68fb      	ldr	r3, [r7, #12]
9000ceca:	68da      	ldr	r2, [r3, #12]
9000cecc:	68fb      	ldr	r3, [r7, #12]
9000cece:	685b      	ldr	r3, [r3, #4]
9000ced0:	685b      	ldr	r3, [r3, #4]
9000ced2:	1ad3      	subs	r3, r2, r3
9000ced4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
9000ced6:	68fb      	ldr	r3, [r7, #12]
9000ced8:	685b      	ldr	r3, [r3, #4]
9000ceda:	8959      	ldrh	r1, [r3, #10]
9000cedc:	68fb      	ldr	r3, [r7, #12]
9000cede:	685b      	ldr	r3, [r3, #4]
9000cee0:	8b3a      	ldrh	r2, [r7, #24]
9000cee2:	1a8a      	subs	r2, r1, r2
9000cee4:	b292      	uxth	r2, r2
9000cee6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
9000cee8:	68fb      	ldr	r3, [r7, #12]
9000ceea:	685b      	ldr	r3, [r3, #4]
9000ceec:	8919      	ldrh	r1, [r3, #8]
9000ceee:	68fb      	ldr	r3, [r7, #12]
9000cef0:	685b      	ldr	r3, [r3, #4]
9000cef2:	8b3a      	ldrh	r2, [r7, #24]
9000cef4:	1a8a      	subs	r2, r1, r2
9000cef6:	b292      	uxth	r2, r2
9000cef8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
9000cefa:	68fb      	ldr	r3, [r7, #12]
9000cefc:	685b      	ldr	r3, [r3, #4]
9000cefe:	68fa      	ldr	r2, [r7, #12]
9000cf00:	68d2      	ldr	r2, [r2, #12]
9000cf02:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
9000cf04:	68fb      	ldr	r3, [r7, #12]
9000cf06:	68db      	ldr	r3, [r3, #12]
9000cf08:	2200      	movs	r2, #0
9000cf0a:	741a      	strb	r2, [r3, #16]
9000cf0c:	2200      	movs	r2, #0
9000cf0e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
9000cf10:	68fb      	ldr	r3, [r7, #12]
9000cf12:	68db      	ldr	r3, [r3, #12]
9000cf14:	f103 0214 	add.w	r2, r3, #20
9000cf18:	68fb      	ldr	r3, [r7, #12]
9000cf1a:	7a9b      	ldrb	r3, [r3, #10]
9000cf1c:	009b      	lsls	r3, r3, #2
9000cf1e:	f003 0304 	and.w	r3, r3, #4
9000cf22:	4413      	add	r3, r2
9000cf24:	69fa      	ldr	r2, [r7, #28]
9000cf26:	429a      	cmp	r2, r3
9000cf28:	d006      	beq.n	9000cf38 <tcp_output_segment+0x16c>
9000cf2a:	4b10      	ldr	r3, [pc, #64]	; (9000cf6c <tcp_output_segment+0x1a0>)
9000cf2c:	f240 621c 	movw	r2, #1564	; 0x61c
9000cf30:	4914      	ldr	r1, [pc, #80]	; (9000cf84 <tcp_output_segment+0x1b8>)
9000cf32:	4810      	ldr	r0, [pc, #64]	; (9000cf74 <tcp_output_segment+0x1a8>)
9000cf34:	f003 fada 	bl	900104ec <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
9000cf38:	68fb      	ldr	r3, [r7, #12]
9000cf3a:	6858      	ldr	r0, [r3, #4]
9000cf3c:	68b9      	ldr	r1, [r7, #8]
9000cf3e:	68bb      	ldr	r3, [r7, #8]
9000cf40:	1d1c      	adds	r4, r3, #4
9000cf42:	68bb      	ldr	r3, [r7, #8]
9000cf44:	7add      	ldrb	r5, [r3, #11]
9000cf46:	68bb      	ldr	r3, [r7, #8]
9000cf48:	7a9b      	ldrb	r3, [r3, #10]
9000cf4a:	687a      	ldr	r2, [r7, #4]
9000cf4c:	9202      	str	r2, [sp, #8]
9000cf4e:	2206      	movs	r2, #6
9000cf50:	9201      	str	r2, [sp, #4]
9000cf52:	9300      	str	r3, [sp, #0]
9000cf54:	462b      	mov	r3, r5
9000cf56:	4622      	mov	r2, r4
9000cf58:	f002 fa36 	bl	9000f3c8 <ip4_output_if>
9000cf5c:	4603      	mov	r3, r0
9000cf5e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
9000cf60:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
9000cf64:	4618      	mov	r0, r3
9000cf66:	3720      	adds	r7, #32
9000cf68:	46bd      	mov	sp, r7
9000cf6a:	bdb0      	pop	{r4, r5, r7, pc}
9000cf6c:	900133a4 	.word	0x900133a4
9000cf70:	90013968 	.word	0x90013968
9000cf74:	900133f8 	.word	0x900133f8
9000cf78:	90013988 	.word	0x90013988
9000cf7c:	900139a8 	.word	0x900139a8
9000cf80:	2000a8a0 	.word	0x2000a8a0
9000cf84:	900139cc 	.word	0x900139cc

9000cf88 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
9000cf88:	b5b0      	push	{r4, r5, r7, lr}
9000cf8a:	b084      	sub	sp, #16
9000cf8c:	af00      	add	r7, sp, #0
9000cf8e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
9000cf90:	687b      	ldr	r3, [r7, #4]
9000cf92:	2b00      	cmp	r3, #0
9000cf94:	d106      	bne.n	9000cfa4 <tcp_rexmit_rto_prepare+0x1c>
9000cf96:	4b31      	ldr	r3, [pc, #196]	; (9000d05c <tcp_rexmit_rto_prepare+0xd4>)
9000cf98:	f240 6263 	movw	r2, #1635	; 0x663
9000cf9c:	4930      	ldr	r1, [pc, #192]	; (9000d060 <tcp_rexmit_rto_prepare+0xd8>)
9000cf9e:	4831      	ldr	r0, [pc, #196]	; (9000d064 <tcp_rexmit_rto_prepare+0xdc>)
9000cfa0:	f003 faa4 	bl	900104ec <iprintf>

  if (pcb->unacked == NULL) {
9000cfa4:	687b      	ldr	r3, [r7, #4]
9000cfa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000cfa8:	2b00      	cmp	r3, #0
9000cfaa:	d102      	bne.n	9000cfb2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
9000cfac:	f06f 0305 	mvn.w	r3, #5
9000cfb0:	e050      	b.n	9000d054 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
9000cfb2:	687b      	ldr	r3, [r7, #4]
9000cfb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000cfb6:	60fb      	str	r3, [r7, #12]
9000cfb8:	e00b      	b.n	9000cfd2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
9000cfba:	68f8      	ldr	r0, [r7, #12]
9000cfbc:	f7ff fee6 	bl	9000cd8c <tcp_output_segment_busy>
9000cfc0:	4603      	mov	r3, r0
9000cfc2:	2b00      	cmp	r3, #0
9000cfc4:	d002      	beq.n	9000cfcc <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
9000cfc6:	f06f 0305 	mvn.w	r3, #5
9000cfca:	e043      	b.n	9000d054 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
9000cfcc:	68fb      	ldr	r3, [r7, #12]
9000cfce:	681b      	ldr	r3, [r3, #0]
9000cfd0:	60fb      	str	r3, [r7, #12]
9000cfd2:	68fb      	ldr	r3, [r7, #12]
9000cfd4:	681b      	ldr	r3, [r3, #0]
9000cfd6:	2b00      	cmp	r3, #0
9000cfd8:	d1ef      	bne.n	9000cfba <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
9000cfda:	68f8      	ldr	r0, [r7, #12]
9000cfdc:	f7ff fed6 	bl	9000cd8c <tcp_output_segment_busy>
9000cfe0:	4603      	mov	r3, r0
9000cfe2:	2b00      	cmp	r3, #0
9000cfe4:	d002      	beq.n	9000cfec <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
9000cfe6:	f06f 0305 	mvn.w	r3, #5
9000cfea:	e033      	b.n	9000d054 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
9000cfec:	687b      	ldr	r3, [r7, #4]
9000cfee:	6eda      	ldr	r2, [r3, #108]	; 0x6c
9000cff0:	68fb      	ldr	r3, [r7, #12]
9000cff2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
9000cff4:	687b      	ldr	r3, [r7, #4]
9000cff6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
9000cff8:	687b      	ldr	r3, [r7, #4]
9000cffa:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
9000cffc:	687b      	ldr	r3, [r7, #4]
9000cffe:	2200      	movs	r2, #0
9000d000:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
9000d002:	687b      	ldr	r3, [r7, #4]
9000d004:	8b5b      	ldrh	r3, [r3, #26]
9000d006:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
9000d00a:	b29a      	uxth	r2, r3
9000d00c:	687b      	ldr	r3, [r7, #4]
9000d00e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
9000d010:	68fb      	ldr	r3, [r7, #12]
9000d012:	68db      	ldr	r3, [r3, #12]
9000d014:	685b      	ldr	r3, [r3, #4]
9000d016:	4618      	mov	r0, r3
9000d018:	f7f8 fd9f 	bl	90005b5a <lwip_htonl>
9000d01c:	4604      	mov	r4, r0
9000d01e:	68fb      	ldr	r3, [r7, #12]
9000d020:	891b      	ldrh	r3, [r3, #8]
9000d022:	461d      	mov	r5, r3
9000d024:	68fb      	ldr	r3, [r7, #12]
9000d026:	68db      	ldr	r3, [r3, #12]
9000d028:	899b      	ldrh	r3, [r3, #12]
9000d02a:	b29b      	uxth	r3, r3
9000d02c:	4618      	mov	r0, r3
9000d02e:	f7f8 fd7f 	bl	90005b30 <lwip_htons>
9000d032:	4603      	mov	r3, r0
9000d034:	b2db      	uxtb	r3, r3
9000d036:	f003 0303 	and.w	r3, r3, #3
9000d03a:	2b00      	cmp	r3, #0
9000d03c:	d001      	beq.n	9000d042 <tcp_rexmit_rto_prepare+0xba>
9000d03e:	2301      	movs	r3, #1
9000d040:	e000      	b.n	9000d044 <tcp_rexmit_rto_prepare+0xbc>
9000d042:	2300      	movs	r3, #0
9000d044:	442b      	add	r3, r5
9000d046:	18e2      	adds	r2, r4, r3
9000d048:	687b      	ldr	r3, [r7, #4]
9000d04a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
9000d04c:	687b      	ldr	r3, [r7, #4]
9000d04e:	2200      	movs	r2, #0
9000d050:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
9000d052:	2300      	movs	r3, #0
}
9000d054:	4618      	mov	r0, r3
9000d056:	3710      	adds	r7, #16
9000d058:	46bd      	mov	sp, r7
9000d05a:	bdb0      	pop	{r4, r5, r7, pc}
9000d05c:	900133a4 	.word	0x900133a4
9000d060:	900139e0 	.word	0x900139e0
9000d064:	900133f8 	.word	0x900133f8

9000d068 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
9000d068:	b580      	push	{r7, lr}
9000d06a:	b082      	sub	sp, #8
9000d06c:	af00      	add	r7, sp, #0
9000d06e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
9000d070:	687b      	ldr	r3, [r7, #4]
9000d072:	2b00      	cmp	r3, #0
9000d074:	d106      	bne.n	9000d084 <tcp_rexmit_rto_commit+0x1c>
9000d076:	4b0d      	ldr	r3, [pc, #52]	; (9000d0ac <tcp_rexmit_rto_commit+0x44>)
9000d078:	f44f 62d3 	mov.w	r2, #1688	; 0x698
9000d07c:	490c      	ldr	r1, [pc, #48]	; (9000d0b0 <tcp_rexmit_rto_commit+0x48>)
9000d07e:	480d      	ldr	r0, [pc, #52]	; (9000d0b4 <tcp_rexmit_rto_commit+0x4c>)
9000d080:	f003 fa34 	bl	900104ec <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
9000d084:	687b      	ldr	r3, [r7, #4]
9000d086:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
9000d08a:	2bff      	cmp	r3, #255	; 0xff
9000d08c:	d007      	beq.n	9000d09e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
9000d08e:	687b      	ldr	r3, [r7, #4]
9000d090:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
9000d094:	3301      	adds	r3, #1
9000d096:	b2da      	uxtb	r2, r3
9000d098:	687b      	ldr	r3, [r7, #4]
9000d09a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
9000d09e:	6878      	ldr	r0, [r7, #4]
9000d0a0:	f7ff fc80 	bl	9000c9a4 <tcp_output>
}
9000d0a4:	bf00      	nop
9000d0a6:	3708      	adds	r7, #8
9000d0a8:	46bd      	mov	sp, r7
9000d0aa:	bd80      	pop	{r7, pc}
9000d0ac:	900133a4 	.word	0x900133a4
9000d0b0:	90013a04 	.word	0x90013a04
9000d0b4:	900133f8 	.word	0x900133f8

9000d0b8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
9000d0b8:	b580      	push	{r7, lr}
9000d0ba:	b082      	sub	sp, #8
9000d0bc:	af00      	add	r7, sp, #0
9000d0be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
9000d0c0:	687b      	ldr	r3, [r7, #4]
9000d0c2:	2b00      	cmp	r3, #0
9000d0c4:	d106      	bne.n	9000d0d4 <tcp_rexmit_rto+0x1c>
9000d0c6:	4b0a      	ldr	r3, [pc, #40]	; (9000d0f0 <tcp_rexmit_rto+0x38>)
9000d0c8:	f240 62ad 	movw	r2, #1709	; 0x6ad
9000d0cc:	4909      	ldr	r1, [pc, #36]	; (9000d0f4 <tcp_rexmit_rto+0x3c>)
9000d0ce:	480a      	ldr	r0, [pc, #40]	; (9000d0f8 <tcp_rexmit_rto+0x40>)
9000d0d0:	f003 fa0c 	bl	900104ec <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
9000d0d4:	6878      	ldr	r0, [r7, #4]
9000d0d6:	f7ff ff57 	bl	9000cf88 <tcp_rexmit_rto_prepare>
9000d0da:	4603      	mov	r3, r0
9000d0dc:	2b00      	cmp	r3, #0
9000d0de:	d102      	bne.n	9000d0e6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
9000d0e0:	6878      	ldr	r0, [r7, #4]
9000d0e2:	f7ff ffc1 	bl	9000d068 <tcp_rexmit_rto_commit>
  }
}
9000d0e6:	bf00      	nop
9000d0e8:	3708      	adds	r7, #8
9000d0ea:	46bd      	mov	sp, r7
9000d0ec:	bd80      	pop	{r7, pc}
9000d0ee:	bf00      	nop
9000d0f0:	900133a4 	.word	0x900133a4
9000d0f4:	90013a28 	.word	0x90013a28
9000d0f8:	900133f8 	.word	0x900133f8

9000d0fc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
9000d0fc:	b590      	push	{r4, r7, lr}
9000d0fe:	b085      	sub	sp, #20
9000d100:	af00      	add	r7, sp, #0
9000d102:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
9000d104:	687b      	ldr	r3, [r7, #4]
9000d106:	2b00      	cmp	r3, #0
9000d108:	d106      	bne.n	9000d118 <tcp_rexmit+0x1c>
9000d10a:	4b2f      	ldr	r3, [pc, #188]	; (9000d1c8 <tcp_rexmit+0xcc>)
9000d10c:	f240 62c1 	movw	r2, #1729	; 0x6c1
9000d110:	492e      	ldr	r1, [pc, #184]	; (9000d1cc <tcp_rexmit+0xd0>)
9000d112:	482f      	ldr	r0, [pc, #188]	; (9000d1d0 <tcp_rexmit+0xd4>)
9000d114:	f003 f9ea 	bl	900104ec <iprintf>

  if (pcb->unacked == NULL) {
9000d118:	687b      	ldr	r3, [r7, #4]
9000d11a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000d11c:	2b00      	cmp	r3, #0
9000d11e:	d102      	bne.n	9000d126 <tcp_rexmit+0x2a>
    return ERR_VAL;
9000d120:	f06f 0305 	mvn.w	r3, #5
9000d124:	e04c      	b.n	9000d1c0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
9000d126:	687b      	ldr	r3, [r7, #4]
9000d128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000d12a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
9000d12c:	68b8      	ldr	r0, [r7, #8]
9000d12e:	f7ff fe2d 	bl	9000cd8c <tcp_output_segment_busy>
9000d132:	4603      	mov	r3, r0
9000d134:	2b00      	cmp	r3, #0
9000d136:	d002      	beq.n	9000d13e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
9000d138:	f06f 0305 	mvn.w	r3, #5
9000d13c:	e040      	b.n	9000d1c0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
9000d13e:	68bb      	ldr	r3, [r7, #8]
9000d140:	681a      	ldr	r2, [r3, #0]
9000d142:	687b      	ldr	r3, [r7, #4]
9000d144:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
9000d146:	687b      	ldr	r3, [r7, #4]
9000d148:	336c      	adds	r3, #108	; 0x6c
9000d14a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
9000d14c:	e002      	b.n	9000d154 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
9000d14e:	68fb      	ldr	r3, [r7, #12]
9000d150:	681b      	ldr	r3, [r3, #0]
9000d152:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
9000d154:	68fb      	ldr	r3, [r7, #12]
9000d156:	681b      	ldr	r3, [r3, #0]
9000d158:	2b00      	cmp	r3, #0
9000d15a:	d011      	beq.n	9000d180 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
9000d15c:	68fb      	ldr	r3, [r7, #12]
9000d15e:	681b      	ldr	r3, [r3, #0]
9000d160:	68db      	ldr	r3, [r3, #12]
9000d162:	685b      	ldr	r3, [r3, #4]
9000d164:	4618      	mov	r0, r3
9000d166:	f7f8 fcf8 	bl	90005b5a <lwip_htonl>
9000d16a:	4604      	mov	r4, r0
9000d16c:	68bb      	ldr	r3, [r7, #8]
9000d16e:	68db      	ldr	r3, [r3, #12]
9000d170:	685b      	ldr	r3, [r3, #4]
9000d172:	4618      	mov	r0, r3
9000d174:	f7f8 fcf1 	bl	90005b5a <lwip_htonl>
9000d178:	4603      	mov	r3, r0
9000d17a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
9000d17c:	2b00      	cmp	r3, #0
9000d17e:	dbe6      	blt.n	9000d14e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
9000d180:	68fb      	ldr	r3, [r7, #12]
9000d182:	681a      	ldr	r2, [r3, #0]
9000d184:	68bb      	ldr	r3, [r7, #8]
9000d186:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
9000d188:	68fb      	ldr	r3, [r7, #12]
9000d18a:	68ba      	ldr	r2, [r7, #8]
9000d18c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
9000d18e:	68bb      	ldr	r3, [r7, #8]
9000d190:	681b      	ldr	r3, [r3, #0]
9000d192:	2b00      	cmp	r3, #0
9000d194:	d103      	bne.n	9000d19e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
9000d196:	687b      	ldr	r3, [r7, #4]
9000d198:	2200      	movs	r2, #0
9000d19a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
9000d19e:	687b      	ldr	r3, [r7, #4]
9000d1a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
9000d1a4:	2bff      	cmp	r3, #255	; 0xff
9000d1a6:	d007      	beq.n	9000d1b8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
9000d1a8:	687b      	ldr	r3, [r7, #4]
9000d1aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
9000d1ae:	3301      	adds	r3, #1
9000d1b0:	b2da      	uxtb	r2, r3
9000d1b2:	687b      	ldr	r3, [r7, #4]
9000d1b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
9000d1b8:	687b      	ldr	r3, [r7, #4]
9000d1ba:	2200      	movs	r2, #0
9000d1bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
9000d1be:	2300      	movs	r3, #0
}
9000d1c0:	4618      	mov	r0, r3
9000d1c2:	3714      	adds	r7, #20
9000d1c4:	46bd      	mov	sp, r7
9000d1c6:	bd90      	pop	{r4, r7, pc}
9000d1c8:	900133a4 	.word	0x900133a4
9000d1cc:	90013a44 	.word	0x90013a44
9000d1d0:	900133f8 	.word	0x900133f8

9000d1d4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
9000d1d4:	b580      	push	{r7, lr}
9000d1d6:	b082      	sub	sp, #8
9000d1d8:	af00      	add	r7, sp, #0
9000d1da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
9000d1dc:	687b      	ldr	r3, [r7, #4]
9000d1de:	2b00      	cmp	r3, #0
9000d1e0:	d106      	bne.n	9000d1f0 <tcp_rexmit_fast+0x1c>
9000d1e2:	4b2a      	ldr	r3, [pc, #168]	; (9000d28c <tcp_rexmit_fast+0xb8>)
9000d1e4:	f240 62f9 	movw	r2, #1785	; 0x6f9
9000d1e8:	4929      	ldr	r1, [pc, #164]	; (9000d290 <tcp_rexmit_fast+0xbc>)
9000d1ea:	482a      	ldr	r0, [pc, #168]	; (9000d294 <tcp_rexmit_fast+0xc0>)
9000d1ec:	f003 f97e 	bl	900104ec <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
9000d1f0:	687b      	ldr	r3, [r7, #4]
9000d1f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000d1f4:	2b00      	cmp	r3, #0
9000d1f6:	d045      	beq.n	9000d284 <tcp_rexmit_fast+0xb0>
9000d1f8:	687b      	ldr	r3, [r7, #4]
9000d1fa:	8b5b      	ldrh	r3, [r3, #26]
9000d1fc:	f003 0304 	and.w	r3, r3, #4
9000d200:	2b00      	cmp	r3, #0
9000d202:	d13f      	bne.n	9000d284 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
9000d204:	6878      	ldr	r0, [r7, #4]
9000d206:	f7ff ff79 	bl	9000d0fc <tcp_rexmit>
9000d20a:	4603      	mov	r3, r0
9000d20c:	2b00      	cmp	r3, #0
9000d20e:	d139      	bne.n	9000d284 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
9000d210:	687b      	ldr	r3, [r7, #4]
9000d212:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
9000d216:	687b      	ldr	r3, [r7, #4]
9000d218:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
9000d21c:	4293      	cmp	r3, r2
9000d21e:	bf28      	it	cs
9000d220:	4613      	movcs	r3, r2
9000d222:	b29b      	uxth	r3, r3
9000d224:	2b00      	cmp	r3, #0
9000d226:	da00      	bge.n	9000d22a <tcp_rexmit_fast+0x56>
9000d228:	3301      	adds	r3, #1
9000d22a:	105b      	asrs	r3, r3, #1
9000d22c:	b29a      	uxth	r2, r3
9000d22e:	687b      	ldr	r3, [r7, #4]
9000d230:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
9000d234:	687b      	ldr	r3, [r7, #4]
9000d236:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
9000d23a:	461a      	mov	r2, r3
9000d23c:	687b      	ldr	r3, [r7, #4]
9000d23e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000d240:	005b      	lsls	r3, r3, #1
9000d242:	429a      	cmp	r2, r3
9000d244:	d206      	bcs.n	9000d254 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
9000d246:	687b      	ldr	r3, [r7, #4]
9000d248:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000d24a:	005b      	lsls	r3, r3, #1
9000d24c:	b29a      	uxth	r2, r3
9000d24e:	687b      	ldr	r3, [r7, #4]
9000d250:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
9000d254:	687b      	ldr	r3, [r7, #4]
9000d256:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
9000d25a:	687b      	ldr	r3, [r7, #4]
9000d25c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000d25e:	4619      	mov	r1, r3
9000d260:	0049      	lsls	r1, r1, #1
9000d262:	440b      	add	r3, r1
9000d264:	b29b      	uxth	r3, r3
9000d266:	4413      	add	r3, r2
9000d268:	b29a      	uxth	r2, r3
9000d26a:	687b      	ldr	r3, [r7, #4]
9000d26c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
9000d270:	687b      	ldr	r3, [r7, #4]
9000d272:	8b5b      	ldrh	r3, [r3, #26]
9000d274:	f043 0304 	orr.w	r3, r3, #4
9000d278:	b29a      	uxth	r2, r3
9000d27a:	687b      	ldr	r3, [r7, #4]
9000d27c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
9000d27e:	687b      	ldr	r3, [r7, #4]
9000d280:	2200      	movs	r2, #0
9000d282:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
9000d284:	bf00      	nop
9000d286:	3708      	adds	r7, #8
9000d288:	46bd      	mov	sp, r7
9000d28a:	bd80      	pop	{r7, pc}
9000d28c:	900133a4 	.word	0x900133a4
9000d290:	90013a5c 	.word	0x90013a5c
9000d294:	900133f8 	.word	0x900133f8

9000d298 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
9000d298:	b580      	push	{r7, lr}
9000d29a:	b086      	sub	sp, #24
9000d29c:	af00      	add	r7, sp, #0
9000d29e:	60f8      	str	r0, [r7, #12]
9000d2a0:	607b      	str	r3, [r7, #4]
9000d2a2:	460b      	mov	r3, r1
9000d2a4:	817b      	strh	r3, [r7, #10]
9000d2a6:	4613      	mov	r3, r2
9000d2a8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
9000d2aa:	897a      	ldrh	r2, [r7, #10]
9000d2ac:	893b      	ldrh	r3, [r7, #8]
9000d2ae:	4413      	add	r3, r2
9000d2b0:	b29b      	uxth	r3, r3
9000d2b2:	3314      	adds	r3, #20
9000d2b4:	b29b      	uxth	r3, r3
9000d2b6:	f44f 7220 	mov.w	r2, #640	; 0x280
9000d2ba:	4619      	mov	r1, r3
9000d2bc:	2022      	movs	r0, #34	; 0x22
9000d2be:	f7f9 fd1b 	bl	90006cf8 <pbuf_alloc>
9000d2c2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
9000d2c4:	697b      	ldr	r3, [r7, #20]
9000d2c6:	2b00      	cmp	r3, #0
9000d2c8:	d04d      	beq.n	9000d366 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
9000d2ca:	897b      	ldrh	r3, [r7, #10]
9000d2cc:	3313      	adds	r3, #19
9000d2ce:	697a      	ldr	r2, [r7, #20]
9000d2d0:	8952      	ldrh	r2, [r2, #10]
9000d2d2:	4293      	cmp	r3, r2
9000d2d4:	db06      	blt.n	9000d2e4 <tcp_output_alloc_header_common+0x4c>
9000d2d6:	4b26      	ldr	r3, [pc, #152]	; (9000d370 <tcp_output_alloc_header_common+0xd8>)
9000d2d8:	f240 7223 	movw	r2, #1827	; 0x723
9000d2dc:	4925      	ldr	r1, [pc, #148]	; (9000d374 <tcp_output_alloc_header_common+0xdc>)
9000d2de:	4826      	ldr	r0, [pc, #152]	; (9000d378 <tcp_output_alloc_header_common+0xe0>)
9000d2e0:	f003 f904 	bl	900104ec <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
9000d2e4:	697b      	ldr	r3, [r7, #20]
9000d2e6:	685b      	ldr	r3, [r3, #4]
9000d2e8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
9000d2ea:	8c3b      	ldrh	r3, [r7, #32]
9000d2ec:	4618      	mov	r0, r3
9000d2ee:	f7f8 fc1f 	bl	90005b30 <lwip_htons>
9000d2f2:	4603      	mov	r3, r0
9000d2f4:	461a      	mov	r2, r3
9000d2f6:	693b      	ldr	r3, [r7, #16]
9000d2f8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
9000d2fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
9000d2fc:	4618      	mov	r0, r3
9000d2fe:	f7f8 fc17 	bl	90005b30 <lwip_htons>
9000d302:	4603      	mov	r3, r0
9000d304:	461a      	mov	r2, r3
9000d306:	693b      	ldr	r3, [r7, #16]
9000d308:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
9000d30a:	693b      	ldr	r3, [r7, #16]
9000d30c:	687a      	ldr	r2, [r7, #4]
9000d30e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
9000d310:	68f8      	ldr	r0, [r7, #12]
9000d312:	f7f8 fc22 	bl	90005b5a <lwip_htonl>
9000d316:	4602      	mov	r2, r0
9000d318:	693b      	ldr	r3, [r7, #16]
9000d31a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
9000d31c:	897b      	ldrh	r3, [r7, #10]
9000d31e:	089b      	lsrs	r3, r3, #2
9000d320:	b29b      	uxth	r3, r3
9000d322:	3305      	adds	r3, #5
9000d324:	b29b      	uxth	r3, r3
9000d326:	031b      	lsls	r3, r3, #12
9000d328:	b29a      	uxth	r2, r3
9000d32a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
9000d32e:	b29b      	uxth	r3, r3
9000d330:	4313      	orrs	r3, r2
9000d332:	b29b      	uxth	r3, r3
9000d334:	4618      	mov	r0, r3
9000d336:	f7f8 fbfb 	bl	90005b30 <lwip_htons>
9000d33a:	4603      	mov	r3, r0
9000d33c:	461a      	mov	r2, r3
9000d33e:	693b      	ldr	r3, [r7, #16]
9000d340:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
9000d342:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
9000d344:	4618      	mov	r0, r3
9000d346:	f7f8 fbf3 	bl	90005b30 <lwip_htons>
9000d34a:	4603      	mov	r3, r0
9000d34c:	461a      	mov	r2, r3
9000d34e:	693b      	ldr	r3, [r7, #16]
9000d350:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
9000d352:	693b      	ldr	r3, [r7, #16]
9000d354:	2200      	movs	r2, #0
9000d356:	741a      	strb	r2, [r3, #16]
9000d358:	2200      	movs	r2, #0
9000d35a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
9000d35c:	693b      	ldr	r3, [r7, #16]
9000d35e:	2200      	movs	r2, #0
9000d360:	749a      	strb	r2, [r3, #18]
9000d362:	2200      	movs	r2, #0
9000d364:	74da      	strb	r2, [r3, #19]
  }
  return p;
9000d366:	697b      	ldr	r3, [r7, #20]
}
9000d368:	4618      	mov	r0, r3
9000d36a:	3718      	adds	r7, #24
9000d36c:	46bd      	mov	sp, r7
9000d36e:	bd80      	pop	{r7, pc}
9000d370:	900133a4 	.word	0x900133a4
9000d374:	90013a7c 	.word	0x90013a7c
9000d378:	900133f8 	.word	0x900133f8

9000d37c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
9000d37c:	b5b0      	push	{r4, r5, r7, lr}
9000d37e:	b08a      	sub	sp, #40	; 0x28
9000d380:	af04      	add	r7, sp, #16
9000d382:	60f8      	str	r0, [r7, #12]
9000d384:	607b      	str	r3, [r7, #4]
9000d386:	460b      	mov	r3, r1
9000d388:	817b      	strh	r3, [r7, #10]
9000d38a:	4613      	mov	r3, r2
9000d38c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
9000d38e:	68fb      	ldr	r3, [r7, #12]
9000d390:	2b00      	cmp	r3, #0
9000d392:	d106      	bne.n	9000d3a2 <tcp_output_alloc_header+0x26>
9000d394:	4b15      	ldr	r3, [pc, #84]	; (9000d3ec <tcp_output_alloc_header+0x70>)
9000d396:	f240 7242 	movw	r2, #1858	; 0x742
9000d39a:	4915      	ldr	r1, [pc, #84]	; (9000d3f0 <tcp_output_alloc_header+0x74>)
9000d39c:	4815      	ldr	r0, [pc, #84]	; (9000d3f4 <tcp_output_alloc_header+0x78>)
9000d39e:	f003 f8a5 	bl	900104ec <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
9000d3a2:	68fb      	ldr	r3, [r7, #12]
9000d3a4:	6a58      	ldr	r0, [r3, #36]	; 0x24
9000d3a6:	68fb      	ldr	r3, [r7, #12]
9000d3a8:	8adb      	ldrh	r3, [r3, #22]
9000d3aa:	68fa      	ldr	r2, [r7, #12]
9000d3ac:	8b12      	ldrh	r2, [r2, #24]
9000d3ae:	68f9      	ldr	r1, [r7, #12]
9000d3b0:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
9000d3b2:	893d      	ldrh	r5, [r7, #8]
9000d3b4:	897c      	ldrh	r4, [r7, #10]
9000d3b6:	9103      	str	r1, [sp, #12]
9000d3b8:	2110      	movs	r1, #16
9000d3ba:	9102      	str	r1, [sp, #8]
9000d3bc:	9201      	str	r2, [sp, #4]
9000d3be:	9300      	str	r3, [sp, #0]
9000d3c0:	687b      	ldr	r3, [r7, #4]
9000d3c2:	462a      	mov	r2, r5
9000d3c4:	4621      	mov	r1, r4
9000d3c6:	f7ff ff67 	bl	9000d298 <tcp_output_alloc_header_common>
9000d3ca:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
9000d3cc:	697b      	ldr	r3, [r7, #20]
9000d3ce:	2b00      	cmp	r3, #0
9000d3d0:	d006      	beq.n	9000d3e0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
9000d3d2:	68fb      	ldr	r3, [r7, #12]
9000d3d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000d3d6:	68fa      	ldr	r2, [r7, #12]
9000d3d8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
9000d3da:	441a      	add	r2, r3
9000d3dc:	68fb      	ldr	r3, [r7, #12]
9000d3de:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
9000d3e0:	697b      	ldr	r3, [r7, #20]
}
9000d3e2:	4618      	mov	r0, r3
9000d3e4:	3718      	adds	r7, #24
9000d3e6:	46bd      	mov	sp, r7
9000d3e8:	bdb0      	pop	{r4, r5, r7, pc}
9000d3ea:	bf00      	nop
9000d3ec:	900133a4 	.word	0x900133a4
9000d3f0:	90013aac 	.word	0x90013aac
9000d3f4:	900133f8 	.word	0x900133f8

9000d3f8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
9000d3f8:	b580      	push	{r7, lr}
9000d3fa:	b088      	sub	sp, #32
9000d3fc:	af00      	add	r7, sp, #0
9000d3fe:	60f8      	str	r0, [r7, #12]
9000d400:	60b9      	str	r1, [r7, #8]
9000d402:	4611      	mov	r1, r2
9000d404:	461a      	mov	r2, r3
9000d406:	460b      	mov	r3, r1
9000d408:	71fb      	strb	r3, [r7, #7]
9000d40a:	4613      	mov	r3, r2
9000d40c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
9000d40e:	2300      	movs	r3, #0
9000d410:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
9000d412:	68bb      	ldr	r3, [r7, #8]
9000d414:	2b00      	cmp	r3, #0
9000d416:	d106      	bne.n	9000d426 <tcp_output_fill_options+0x2e>
9000d418:	4b13      	ldr	r3, [pc, #76]	; (9000d468 <tcp_output_fill_options+0x70>)
9000d41a:	f240 7256 	movw	r2, #1878	; 0x756
9000d41e:	4913      	ldr	r1, [pc, #76]	; (9000d46c <tcp_output_fill_options+0x74>)
9000d420:	4813      	ldr	r0, [pc, #76]	; (9000d470 <tcp_output_fill_options+0x78>)
9000d422:	f003 f863 	bl	900104ec <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
9000d426:	68bb      	ldr	r3, [r7, #8]
9000d428:	685b      	ldr	r3, [r3, #4]
9000d42a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
9000d42c:	69bb      	ldr	r3, [r7, #24]
9000d42e:	3314      	adds	r3, #20
9000d430:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
9000d432:	69bb      	ldr	r3, [r7, #24]
9000d434:	f103 0214 	add.w	r2, r3, #20
9000d438:	8bfb      	ldrh	r3, [r7, #30]
9000d43a:	009b      	lsls	r3, r3, #2
9000d43c:	4619      	mov	r1, r3
9000d43e:	79fb      	ldrb	r3, [r7, #7]
9000d440:	009b      	lsls	r3, r3, #2
9000d442:	f003 0304 	and.w	r3, r3, #4
9000d446:	440b      	add	r3, r1
9000d448:	4413      	add	r3, r2
9000d44a:	697a      	ldr	r2, [r7, #20]
9000d44c:	429a      	cmp	r2, r3
9000d44e:	d006      	beq.n	9000d45e <tcp_output_fill_options+0x66>
9000d450:	4b05      	ldr	r3, [pc, #20]	; (9000d468 <tcp_output_fill_options+0x70>)
9000d452:	f240 7275 	movw	r2, #1909	; 0x775
9000d456:	4907      	ldr	r1, [pc, #28]	; (9000d474 <tcp_output_fill_options+0x7c>)
9000d458:	4805      	ldr	r0, [pc, #20]	; (9000d470 <tcp_output_fill_options+0x78>)
9000d45a:	f003 f847 	bl	900104ec <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
9000d45e:	bf00      	nop
9000d460:	3720      	adds	r7, #32
9000d462:	46bd      	mov	sp, r7
9000d464:	bd80      	pop	{r7, pc}
9000d466:	bf00      	nop
9000d468:	900133a4 	.word	0x900133a4
9000d46c:	90013ad4 	.word	0x90013ad4
9000d470:	900133f8 	.word	0x900133f8
9000d474:	900139cc 	.word	0x900139cc

9000d478 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
9000d478:	b580      	push	{r7, lr}
9000d47a:	b08a      	sub	sp, #40	; 0x28
9000d47c:	af04      	add	r7, sp, #16
9000d47e:	60f8      	str	r0, [r7, #12]
9000d480:	60b9      	str	r1, [r7, #8]
9000d482:	607a      	str	r2, [r7, #4]
9000d484:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
9000d486:	68bb      	ldr	r3, [r7, #8]
9000d488:	2b00      	cmp	r3, #0
9000d48a:	d106      	bne.n	9000d49a <tcp_output_control_segment+0x22>
9000d48c:	4b1c      	ldr	r3, [pc, #112]	; (9000d500 <tcp_output_control_segment+0x88>)
9000d48e:	f240 7287 	movw	r2, #1927	; 0x787
9000d492:	491c      	ldr	r1, [pc, #112]	; (9000d504 <tcp_output_control_segment+0x8c>)
9000d494:	481c      	ldr	r0, [pc, #112]	; (9000d508 <tcp_output_control_segment+0x90>)
9000d496:	f003 f829 	bl	900104ec <iprintf>

  netif = tcp_route(pcb, src, dst);
9000d49a:	683a      	ldr	r2, [r7, #0]
9000d49c:	6879      	ldr	r1, [r7, #4]
9000d49e:	68f8      	ldr	r0, [r7, #12]
9000d4a0:	f7fe fae8 	bl	9000ba74 <tcp_route>
9000d4a4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
9000d4a6:	693b      	ldr	r3, [r7, #16]
9000d4a8:	2b00      	cmp	r3, #0
9000d4aa:	d102      	bne.n	9000d4b2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
9000d4ac:	23fc      	movs	r3, #252	; 0xfc
9000d4ae:	75fb      	strb	r3, [r7, #23]
9000d4b0:	e01c      	b.n	9000d4ec <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
9000d4b2:	68fb      	ldr	r3, [r7, #12]
9000d4b4:	2b00      	cmp	r3, #0
9000d4b6:	d006      	beq.n	9000d4c6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
9000d4b8:	68fb      	ldr	r3, [r7, #12]
9000d4ba:	7adb      	ldrb	r3, [r3, #11]
9000d4bc:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
9000d4be:	68fb      	ldr	r3, [r7, #12]
9000d4c0:	7a9b      	ldrb	r3, [r3, #10]
9000d4c2:	757b      	strb	r3, [r7, #21]
9000d4c4:	e003      	b.n	9000d4ce <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
9000d4c6:	23ff      	movs	r3, #255	; 0xff
9000d4c8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
9000d4ca:	2300      	movs	r3, #0
9000d4cc:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
9000d4ce:	7dba      	ldrb	r2, [r7, #22]
9000d4d0:	693b      	ldr	r3, [r7, #16]
9000d4d2:	9302      	str	r3, [sp, #8]
9000d4d4:	2306      	movs	r3, #6
9000d4d6:	9301      	str	r3, [sp, #4]
9000d4d8:	7d7b      	ldrb	r3, [r7, #21]
9000d4da:	9300      	str	r3, [sp, #0]
9000d4dc:	4613      	mov	r3, r2
9000d4de:	683a      	ldr	r2, [r7, #0]
9000d4e0:	6879      	ldr	r1, [r7, #4]
9000d4e2:	68b8      	ldr	r0, [r7, #8]
9000d4e4:	f001 ff70 	bl	9000f3c8 <ip4_output_if>
9000d4e8:	4603      	mov	r3, r0
9000d4ea:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
9000d4ec:	68b8      	ldr	r0, [r7, #8]
9000d4ee:	f7f9 fee7 	bl	900072c0 <pbuf_free>
  return err;
9000d4f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
9000d4f6:	4618      	mov	r0, r3
9000d4f8:	3718      	adds	r7, #24
9000d4fa:	46bd      	mov	sp, r7
9000d4fc:	bd80      	pop	{r7, pc}
9000d4fe:	bf00      	nop
9000d500:	900133a4 	.word	0x900133a4
9000d504:	90013afc 	.word	0x90013afc
9000d508:	900133f8 	.word	0x900133f8

9000d50c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
9000d50c:	b590      	push	{r4, r7, lr}
9000d50e:	b08b      	sub	sp, #44	; 0x2c
9000d510:	af04      	add	r7, sp, #16
9000d512:	60f8      	str	r0, [r7, #12]
9000d514:	60b9      	str	r1, [r7, #8]
9000d516:	607a      	str	r2, [r7, #4]
9000d518:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
9000d51a:	683b      	ldr	r3, [r7, #0]
9000d51c:	2b00      	cmp	r3, #0
9000d51e:	d106      	bne.n	9000d52e <tcp_rst+0x22>
9000d520:	4b1f      	ldr	r3, [pc, #124]	; (9000d5a0 <tcp_rst+0x94>)
9000d522:	f240 72c4 	movw	r2, #1988	; 0x7c4
9000d526:	491f      	ldr	r1, [pc, #124]	; (9000d5a4 <tcp_rst+0x98>)
9000d528:	481f      	ldr	r0, [pc, #124]	; (9000d5a8 <tcp_rst+0x9c>)
9000d52a:	f002 ffdf 	bl	900104ec <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
9000d52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000d530:	2b00      	cmp	r3, #0
9000d532:	d106      	bne.n	9000d542 <tcp_rst+0x36>
9000d534:	4b1a      	ldr	r3, [pc, #104]	; (9000d5a0 <tcp_rst+0x94>)
9000d536:	f240 72c5 	movw	r2, #1989	; 0x7c5
9000d53a:	491c      	ldr	r1, [pc, #112]	; (9000d5ac <tcp_rst+0xa0>)
9000d53c:	481a      	ldr	r0, [pc, #104]	; (9000d5a8 <tcp_rst+0x9c>)
9000d53e:	f002 ffd5 	bl	900104ec <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
9000d542:	2300      	movs	r3, #0
9000d544:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
9000d546:	f246 0308 	movw	r3, #24584	; 0x6008
9000d54a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
9000d54c:	7dfb      	ldrb	r3, [r7, #23]
9000d54e:	b29c      	uxth	r4, r3
9000d550:	68b8      	ldr	r0, [r7, #8]
9000d552:	f7f8 fb02 	bl	90005b5a <lwip_htonl>
9000d556:	4602      	mov	r2, r0
9000d558:	8abb      	ldrh	r3, [r7, #20]
9000d55a:	9303      	str	r3, [sp, #12]
9000d55c:	2314      	movs	r3, #20
9000d55e:	9302      	str	r3, [sp, #8]
9000d560:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
9000d562:	9301      	str	r3, [sp, #4]
9000d564:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
9000d566:	9300      	str	r3, [sp, #0]
9000d568:	4613      	mov	r3, r2
9000d56a:	2200      	movs	r2, #0
9000d56c:	4621      	mov	r1, r4
9000d56e:	6878      	ldr	r0, [r7, #4]
9000d570:	f7ff fe92 	bl	9000d298 <tcp_output_alloc_header_common>
9000d574:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
9000d576:	693b      	ldr	r3, [r7, #16]
9000d578:	2b00      	cmp	r3, #0
9000d57a:	d00c      	beq.n	9000d596 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
9000d57c:	7dfb      	ldrb	r3, [r7, #23]
9000d57e:	2200      	movs	r2, #0
9000d580:	6939      	ldr	r1, [r7, #16]
9000d582:	68f8      	ldr	r0, [r7, #12]
9000d584:	f7ff ff38 	bl	9000d3f8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
9000d588:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000d58a:	683a      	ldr	r2, [r7, #0]
9000d58c:	6939      	ldr	r1, [r7, #16]
9000d58e:	68f8      	ldr	r0, [r7, #12]
9000d590:	f7ff ff72 	bl	9000d478 <tcp_output_control_segment>
9000d594:	e000      	b.n	9000d598 <tcp_rst+0x8c>
    return;
9000d596:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
9000d598:	371c      	adds	r7, #28
9000d59a:	46bd      	mov	sp, r7
9000d59c:	bd90      	pop	{r4, r7, pc}
9000d59e:	bf00      	nop
9000d5a0:	900133a4 	.word	0x900133a4
9000d5a4:	90013b28 	.word	0x90013b28
9000d5a8:	900133f8 	.word	0x900133f8
9000d5ac:	90013b44 	.word	0x90013b44

9000d5b0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
9000d5b0:	b590      	push	{r4, r7, lr}
9000d5b2:	b087      	sub	sp, #28
9000d5b4:	af00      	add	r7, sp, #0
9000d5b6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
9000d5b8:	2300      	movs	r3, #0
9000d5ba:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
9000d5bc:	2300      	movs	r3, #0
9000d5be:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
9000d5c0:	687b      	ldr	r3, [r7, #4]
9000d5c2:	2b00      	cmp	r3, #0
9000d5c4:	d106      	bne.n	9000d5d4 <tcp_send_empty_ack+0x24>
9000d5c6:	4b28      	ldr	r3, [pc, #160]	; (9000d668 <tcp_send_empty_ack+0xb8>)
9000d5c8:	f240 72ea 	movw	r2, #2026	; 0x7ea
9000d5cc:	4927      	ldr	r1, [pc, #156]	; (9000d66c <tcp_send_empty_ack+0xbc>)
9000d5ce:	4828      	ldr	r0, [pc, #160]	; (9000d670 <tcp_send_empty_ack+0xc0>)
9000d5d0:	f002 ff8c 	bl	900104ec <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
9000d5d4:	7dfb      	ldrb	r3, [r7, #23]
9000d5d6:	009b      	lsls	r3, r3, #2
9000d5d8:	b2db      	uxtb	r3, r3
9000d5da:	f003 0304 	and.w	r3, r3, #4
9000d5de:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
9000d5e0:	7d7b      	ldrb	r3, [r7, #21]
9000d5e2:	b29c      	uxth	r4, r3
9000d5e4:	687b      	ldr	r3, [r7, #4]
9000d5e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9000d5e8:	4618      	mov	r0, r3
9000d5ea:	f7f8 fab6 	bl	90005b5a <lwip_htonl>
9000d5ee:	4603      	mov	r3, r0
9000d5f0:	2200      	movs	r2, #0
9000d5f2:	4621      	mov	r1, r4
9000d5f4:	6878      	ldr	r0, [r7, #4]
9000d5f6:	f7ff fec1 	bl	9000d37c <tcp_output_alloc_header>
9000d5fa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
9000d5fc:	693b      	ldr	r3, [r7, #16]
9000d5fe:	2b00      	cmp	r3, #0
9000d600:	d109      	bne.n	9000d616 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
9000d602:	687b      	ldr	r3, [r7, #4]
9000d604:	8b5b      	ldrh	r3, [r3, #26]
9000d606:	f043 0303 	orr.w	r3, r3, #3
9000d60a:	b29a      	uxth	r2, r3
9000d60c:	687b      	ldr	r3, [r7, #4]
9000d60e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
9000d610:	f06f 0301 	mvn.w	r3, #1
9000d614:	e023      	b.n	9000d65e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
9000d616:	7dbb      	ldrb	r3, [r7, #22]
9000d618:	7dfa      	ldrb	r2, [r7, #23]
9000d61a:	6939      	ldr	r1, [r7, #16]
9000d61c:	6878      	ldr	r0, [r7, #4]
9000d61e:	f7ff feeb 	bl	9000d3f8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
9000d622:	687a      	ldr	r2, [r7, #4]
9000d624:	687b      	ldr	r3, [r7, #4]
9000d626:	3304      	adds	r3, #4
9000d628:	6939      	ldr	r1, [r7, #16]
9000d62a:	6878      	ldr	r0, [r7, #4]
9000d62c:	f7ff ff24 	bl	9000d478 <tcp_output_control_segment>
9000d630:	4603      	mov	r3, r0
9000d632:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
9000d634:	f997 300f 	ldrsb.w	r3, [r7, #15]
9000d638:	2b00      	cmp	r3, #0
9000d63a:	d007      	beq.n	9000d64c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
9000d63c:	687b      	ldr	r3, [r7, #4]
9000d63e:	8b5b      	ldrh	r3, [r3, #26]
9000d640:	f043 0303 	orr.w	r3, r3, #3
9000d644:	b29a      	uxth	r2, r3
9000d646:	687b      	ldr	r3, [r7, #4]
9000d648:	835a      	strh	r2, [r3, #26]
9000d64a:	e006      	b.n	9000d65a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
9000d64c:	687b      	ldr	r3, [r7, #4]
9000d64e:	8b5b      	ldrh	r3, [r3, #26]
9000d650:	f023 0303 	bic.w	r3, r3, #3
9000d654:	b29a      	uxth	r2, r3
9000d656:	687b      	ldr	r3, [r7, #4]
9000d658:	835a      	strh	r2, [r3, #26]
  }

  return err;
9000d65a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
9000d65e:	4618      	mov	r0, r3
9000d660:	371c      	adds	r7, #28
9000d662:	46bd      	mov	sp, r7
9000d664:	bd90      	pop	{r4, r7, pc}
9000d666:	bf00      	nop
9000d668:	900133a4 	.word	0x900133a4
9000d66c:	90013b60 	.word	0x90013b60
9000d670:	900133f8 	.word	0x900133f8

9000d674 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
9000d674:	b590      	push	{r4, r7, lr}
9000d676:	b087      	sub	sp, #28
9000d678:	af00      	add	r7, sp, #0
9000d67a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
9000d67c:	2300      	movs	r3, #0
9000d67e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
9000d680:	687b      	ldr	r3, [r7, #4]
9000d682:	2b00      	cmp	r3, #0
9000d684:	d106      	bne.n	9000d694 <tcp_keepalive+0x20>
9000d686:	4b18      	ldr	r3, [pc, #96]	; (9000d6e8 <tcp_keepalive+0x74>)
9000d688:	f640 0224 	movw	r2, #2084	; 0x824
9000d68c:	4917      	ldr	r1, [pc, #92]	; (9000d6ec <tcp_keepalive+0x78>)
9000d68e:	4818      	ldr	r0, [pc, #96]	; (9000d6f0 <tcp_keepalive+0x7c>)
9000d690:	f002 ff2c 	bl	900104ec <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
9000d694:	7dfb      	ldrb	r3, [r7, #23]
9000d696:	b29c      	uxth	r4, r3
9000d698:	687b      	ldr	r3, [r7, #4]
9000d69a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9000d69c:	3b01      	subs	r3, #1
9000d69e:	4618      	mov	r0, r3
9000d6a0:	f7f8 fa5b 	bl	90005b5a <lwip_htonl>
9000d6a4:	4603      	mov	r3, r0
9000d6a6:	2200      	movs	r2, #0
9000d6a8:	4621      	mov	r1, r4
9000d6aa:	6878      	ldr	r0, [r7, #4]
9000d6ac:	f7ff fe66 	bl	9000d37c <tcp_output_alloc_header>
9000d6b0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
9000d6b2:	693b      	ldr	r3, [r7, #16]
9000d6b4:	2b00      	cmp	r3, #0
9000d6b6:	d102      	bne.n	9000d6be <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
9000d6b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000d6bc:	e010      	b.n	9000d6e0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
9000d6be:	7dfb      	ldrb	r3, [r7, #23]
9000d6c0:	2200      	movs	r2, #0
9000d6c2:	6939      	ldr	r1, [r7, #16]
9000d6c4:	6878      	ldr	r0, [r7, #4]
9000d6c6:	f7ff fe97 	bl	9000d3f8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
9000d6ca:	687a      	ldr	r2, [r7, #4]
9000d6cc:	687b      	ldr	r3, [r7, #4]
9000d6ce:	3304      	adds	r3, #4
9000d6d0:	6939      	ldr	r1, [r7, #16]
9000d6d2:	6878      	ldr	r0, [r7, #4]
9000d6d4:	f7ff fed0 	bl	9000d478 <tcp_output_control_segment>
9000d6d8:	4603      	mov	r3, r0
9000d6da:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
9000d6dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
9000d6e0:	4618      	mov	r0, r3
9000d6e2:	371c      	adds	r7, #28
9000d6e4:	46bd      	mov	sp, r7
9000d6e6:	bd90      	pop	{r4, r7, pc}
9000d6e8:	900133a4 	.word	0x900133a4
9000d6ec:	90013b80 	.word	0x90013b80
9000d6f0:	900133f8 	.word	0x900133f8

9000d6f4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
9000d6f4:	b590      	push	{r4, r7, lr}
9000d6f6:	b08b      	sub	sp, #44	; 0x2c
9000d6f8:	af00      	add	r7, sp, #0
9000d6fa:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
9000d6fc:	2300      	movs	r3, #0
9000d6fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
9000d702:	687b      	ldr	r3, [r7, #4]
9000d704:	2b00      	cmp	r3, #0
9000d706:	d106      	bne.n	9000d716 <tcp_zero_window_probe+0x22>
9000d708:	4b4c      	ldr	r3, [pc, #304]	; (9000d83c <tcp_zero_window_probe+0x148>)
9000d70a:	f640 024f 	movw	r2, #2127	; 0x84f
9000d70e:	494c      	ldr	r1, [pc, #304]	; (9000d840 <tcp_zero_window_probe+0x14c>)
9000d710:	484c      	ldr	r0, [pc, #304]	; (9000d844 <tcp_zero_window_probe+0x150>)
9000d712:	f002 feeb 	bl	900104ec <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
9000d716:	687b      	ldr	r3, [r7, #4]
9000d718:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000d71a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
9000d71c:	6a3b      	ldr	r3, [r7, #32]
9000d71e:	2b00      	cmp	r3, #0
9000d720:	d101      	bne.n	9000d726 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
9000d722:	2300      	movs	r3, #0
9000d724:	e086      	b.n	9000d834 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
9000d726:	687b      	ldr	r3, [r7, #4]
9000d728:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
9000d72c:	2bff      	cmp	r3, #255	; 0xff
9000d72e:	d007      	beq.n	9000d740 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
9000d730:	687b      	ldr	r3, [r7, #4]
9000d732:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
9000d736:	3301      	adds	r3, #1
9000d738:	b2da      	uxtb	r2, r3
9000d73a:	687b      	ldr	r3, [r7, #4]
9000d73c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
9000d740:	6a3b      	ldr	r3, [r7, #32]
9000d742:	68db      	ldr	r3, [r3, #12]
9000d744:	899b      	ldrh	r3, [r3, #12]
9000d746:	b29b      	uxth	r3, r3
9000d748:	4618      	mov	r0, r3
9000d74a:	f7f8 f9f1 	bl	90005b30 <lwip_htons>
9000d74e:	4603      	mov	r3, r0
9000d750:	b2db      	uxtb	r3, r3
9000d752:	f003 0301 	and.w	r3, r3, #1
9000d756:	2b00      	cmp	r3, #0
9000d758:	d005      	beq.n	9000d766 <tcp_zero_window_probe+0x72>
9000d75a:	6a3b      	ldr	r3, [r7, #32]
9000d75c:	891b      	ldrh	r3, [r3, #8]
9000d75e:	2b00      	cmp	r3, #0
9000d760:	d101      	bne.n	9000d766 <tcp_zero_window_probe+0x72>
9000d762:	2301      	movs	r3, #1
9000d764:	e000      	b.n	9000d768 <tcp_zero_window_probe+0x74>
9000d766:	2300      	movs	r3, #0
9000d768:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
9000d76a:	7ffb      	ldrb	r3, [r7, #31]
9000d76c:	2b00      	cmp	r3, #0
9000d76e:	bf0c      	ite	eq
9000d770:	2301      	moveq	r3, #1
9000d772:	2300      	movne	r3, #0
9000d774:	b2db      	uxtb	r3, r3
9000d776:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
9000d778:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
9000d77c:	b299      	uxth	r1, r3
9000d77e:	6a3b      	ldr	r3, [r7, #32]
9000d780:	68db      	ldr	r3, [r3, #12]
9000d782:	685b      	ldr	r3, [r3, #4]
9000d784:	8bba      	ldrh	r2, [r7, #28]
9000d786:	6878      	ldr	r0, [r7, #4]
9000d788:	f7ff fdf8 	bl	9000d37c <tcp_output_alloc_header>
9000d78c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
9000d78e:	69bb      	ldr	r3, [r7, #24]
9000d790:	2b00      	cmp	r3, #0
9000d792:	d102      	bne.n	9000d79a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
9000d794:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000d798:	e04c      	b.n	9000d834 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
9000d79a:	69bb      	ldr	r3, [r7, #24]
9000d79c:	685b      	ldr	r3, [r3, #4]
9000d79e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
9000d7a0:	7ffb      	ldrb	r3, [r7, #31]
9000d7a2:	2b00      	cmp	r3, #0
9000d7a4:	d011      	beq.n	9000d7ca <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
9000d7a6:	697b      	ldr	r3, [r7, #20]
9000d7a8:	899b      	ldrh	r3, [r3, #12]
9000d7aa:	b29b      	uxth	r3, r3
9000d7ac:	b21b      	sxth	r3, r3
9000d7ae:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
9000d7b2:	b21c      	sxth	r4, r3
9000d7b4:	2011      	movs	r0, #17
9000d7b6:	f7f8 f9bb 	bl	90005b30 <lwip_htons>
9000d7ba:	4603      	mov	r3, r0
9000d7bc:	b21b      	sxth	r3, r3
9000d7be:	4323      	orrs	r3, r4
9000d7c0:	b21b      	sxth	r3, r3
9000d7c2:	b29a      	uxth	r2, r3
9000d7c4:	697b      	ldr	r3, [r7, #20]
9000d7c6:	819a      	strh	r2, [r3, #12]
9000d7c8:	e010      	b.n	9000d7ec <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
9000d7ca:	69bb      	ldr	r3, [r7, #24]
9000d7cc:	685b      	ldr	r3, [r3, #4]
9000d7ce:	3314      	adds	r3, #20
9000d7d0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
9000d7d2:	6a3b      	ldr	r3, [r7, #32]
9000d7d4:	6858      	ldr	r0, [r3, #4]
9000d7d6:	6a3b      	ldr	r3, [r7, #32]
9000d7d8:	685b      	ldr	r3, [r3, #4]
9000d7da:	891a      	ldrh	r2, [r3, #8]
9000d7dc:	6a3b      	ldr	r3, [r7, #32]
9000d7de:	891b      	ldrh	r3, [r3, #8]
9000d7e0:	1ad3      	subs	r3, r2, r3
9000d7e2:	b29b      	uxth	r3, r3
9000d7e4:	2201      	movs	r2, #1
9000d7e6:	6939      	ldr	r1, [r7, #16]
9000d7e8:	f7f9 ff54 	bl	90007694 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
9000d7ec:	6a3b      	ldr	r3, [r7, #32]
9000d7ee:	68db      	ldr	r3, [r3, #12]
9000d7f0:	685b      	ldr	r3, [r3, #4]
9000d7f2:	4618      	mov	r0, r3
9000d7f4:	f7f8 f9b1 	bl	90005b5a <lwip_htonl>
9000d7f8:	4603      	mov	r3, r0
9000d7fa:	3301      	adds	r3, #1
9000d7fc:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
9000d7fe:	687b      	ldr	r3, [r7, #4]
9000d800:	6d1a      	ldr	r2, [r3, #80]	; 0x50
9000d802:	68fb      	ldr	r3, [r7, #12]
9000d804:	1ad3      	subs	r3, r2, r3
9000d806:	2b00      	cmp	r3, #0
9000d808:	da02      	bge.n	9000d810 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
9000d80a:	687b      	ldr	r3, [r7, #4]
9000d80c:	68fa      	ldr	r2, [r7, #12]
9000d80e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
9000d810:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
9000d814:	2200      	movs	r2, #0
9000d816:	69b9      	ldr	r1, [r7, #24]
9000d818:	6878      	ldr	r0, [r7, #4]
9000d81a:	f7ff fded 	bl	9000d3f8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
9000d81e:	687a      	ldr	r2, [r7, #4]
9000d820:	687b      	ldr	r3, [r7, #4]
9000d822:	3304      	adds	r3, #4
9000d824:	69b9      	ldr	r1, [r7, #24]
9000d826:	6878      	ldr	r0, [r7, #4]
9000d828:	f7ff fe26 	bl	9000d478 <tcp_output_control_segment>
9000d82c:	4603      	mov	r3, r0
9000d82e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
9000d830:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
9000d834:	4618      	mov	r0, r3
9000d836:	372c      	adds	r7, #44	; 0x2c
9000d838:	46bd      	mov	sp, r7
9000d83a:	bd90      	pop	{r4, r7, pc}
9000d83c:	900133a4 	.word	0x900133a4
9000d840:	90013b9c 	.word	0x90013b9c
9000d844:	900133f8 	.word	0x900133f8

9000d848 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
9000d848:	b580      	push	{r7, lr}
9000d84a:	b082      	sub	sp, #8
9000d84c:	af00      	add	r7, sp, #0
9000d84e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
9000d850:	f7fa f80e 	bl	90007870 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
9000d854:	4b0a      	ldr	r3, [pc, #40]	; (9000d880 <tcpip_tcp_timer+0x38>)
9000d856:	681b      	ldr	r3, [r3, #0]
9000d858:	2b00      	cmp	r3, #0
9000d85a:	d103      	bne.n	9000d864 <tcpip_tcp_timer+0x1c>
9000d85c:	4b09      	ldr	r3, [pc, #36]	; (9000d884 <tcpip_tcp_timer+0x3c>)
9000d85e:	681b      	ldr	r3, [r3, #0]
9000d860:	2b00      	cmp	r3, #0
9000d862:	d005      	beq.n	9000d870 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
9000d864:	2200      	movs	r2, #0
9000d866:	4908      	ldr	r1, [pc, #32]	; (9000d888 <tcpip_tcp_timer+0x40>)
9000d868:	20fa      	movs	r0, #250	; 0xfa
9000d86a:	f000 f8f3 	bl	9000da54 <sys_timeout>
9000d86e:	e003      	b.n	9000d878 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
9000d870:	4b06      	ldr	r3, [pc, #24]	; (9000d88c <tcpip_tcp_timer+0x44>)
9000d872:	2200      	movs	r2, #0
9000d874:	601a      	str	r2, [r3, #0]
  }
}
9000d876:	bf00      	nop
9000d878:	bf00      	nop
9000d87a:	3708      	adds	r7, #8
9000d87c:	46bd      	mov	sp, r7
9000d87e:	bd80      	pop	{r7, pc}
9000d880:	2000a8ac 	.word	0x2000a8ac
9000d884:	2000a8b0 	.word	0x2000a8b0
9000d888:	9000d849 	.word	0x9000d849
9000d88c:	2000a8f8 	.word	0x2000a8f8

9000d890 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
9000d890:	b580      	push	{r7, lr}
9000d892:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
9000d894:	4b0a      	ldr	r3, [pc, #40]	; (9000d8c0 <tcp_timer_needed+0x30>)
9000d896:	681b      	ldr	r3, [r3, #0]
9000d898:	2b00      	cmp	r3, #0
9000d89a:	d10f      	bne.n	9000d8bc <tcp_timer_needed+0x2c>
9000d89c:	4b09      	ldr	r3, [pc, #36]	; (9000d8c4 <tcp_timer_needed+0x34>)
9000d89e:	681b      	ldr	r3, [r3, #0]
9000d8a0:	2b00      	cmp	r3, #0
9000d8a2:	d103      	bne.n	9000d8ac <tcp_timer_needed+0x1c>
9000d8a4:	4b08      	ldr	r3, [pc, #32]	; (9000d8c8 <tcp_timer_needed+0x38>)
9000d8a6:	681b      	ldr	r3, [r3, #0]
9000d8a8:	2b00      	cmp	r3, #0
9000d8aa:	d007      	beq.n	9000d8bc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
9000d8ac:	4b04      	ldr	r3, [pc, #16]	; (9000d8c0 <tcp_timer_needed+0x30>)
9000d8ae:	2201      	movs	r2, #1
9000d8b0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
9000d8b2:	2200      	movs	r2, #0
9000d8b4:	4905      	ldr	r1, [pc, #20]	; (9000d8cc <tcp_timer_needed+0x3c>)
9000d8b6:	20fa      	movs	r0, #250	; 0xfa
9000d8b8:	f000 f8cc 	bl	9000da54 <sys_timeout>
  }
}
9000d8bc:	bf00      	nop
9000d8be:	bd80      	pop	{r7, pc}
9000d8c0:	2000a8f8 	.word	0x2000a8f8
9000d8c4:	2000a8ac 	.word	0x2000a8ac
9000d8c8:	2000a8b0 	.word	0x2000a8b0
9000d8cc:	9000d849 	.word	0x9000d849

9000d8d0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
9000d8d0:	b580      	push	{r7, lr}
9000d8d2:	b086      	sub	sp, #24
9000d8d4:	af00      	add	r7, sp, #0
9000d8d6:	60f8      	str	r0, [r7, #12]
9000d8d8:	60b9      	str	r1, [r7, #8]
9000d8da:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
9000d8dc:	2006      	movs	r0, #6
9000d8de:	f7f8 fe09 	bl	900064f4 <memp_malloc>
9000d8e2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
9000d8e4:	693b      	ldr	r3, [r7, #16]
9000d8e6:	2b00      	cmp	r3, #0
9000d8e8:	d109      	bne.n	9000d8fe <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
9000d8ea:	693b      	ldr	r3, [r7, #16]
9000d8ec:	2b00      	cmp	r3, #0
9000d8ee:	d151      	bne.n	9000d994 <sys_timeout_abs+0xc4>
9000d8f0:	4b2a      	ldr	r3, [pc, #168]	; (9000d99c <sys_timeout_abs+0xcc>)
9000d8f2:	22be      	movs	r2, #190	; 0xbe
9000d8f4:	492a      	ldr	r1, [pc, #168]	; (9000d9a0 <sys_timeout_abs+0xd0>)
9000d8f6:	482b      	ldr	r0, [pc, #172]	; (9000d9a4 <sys_timeout_abs+0xd4>)
9000d8f8:	f002 fdf8 	bl	900104ec <iprintf>
    return;
9000d8fc:	e04a      	b.n	9000d994 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
9000d8fe:	693b      	ldr	r3, [r7, #16]
9000d900:	2200      	movs	r2, #0
9000d902:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
9000d904:	693b      	ldr	r3, [r7, #16]
9000d906:	68ba      	ldr	r2, [r7, #8]
9000d908:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
9000d90a:	693b      	ldr	r3, [r7, #16]
9000d90c:	687a      	ldr	r2, [r7, #4]
9000d90e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
9000d910:	693b      	ldr	r3, [r7, #16]
9000d912:	68fa      	ldr	r2, [r7, #12]
9000d914:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
9000d916:	4b24      	ldr	r3, [pc, #144]	; (9000d9a8 <sys_timeout_abs+0xd8>)
9000d918:	681b      	ldr	r3, [r3, #0]
9000d91a:	2b00      	cmp	r3, #0
9000d91c:	d103      	bne.n	9000d926 <sys_timeout_abs+0x56>
    next_timeout = timeout;
9000d91e:	4a22      	ldr	r2, [pc, #136]	; (9000d9a8 <sys_timeout_abs+0xd8>)
9000d920:	693b      	ldr	r3, [r7, #16]
9000d922:	6013      	str	r3, [r2, #0]
    return;
9000d924:	e037      	b.n	9000d996 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
9000d926:	693b      	ldr	r3, [r7, #16]
9000d928:	685a      	ldr	r2, [r3, #4]
9000d92a:	4b1f      	ldr	r3, [pc, #124]	; (9000d9a8 <sys_timeout_abs+0xd8>)
9000d92c:	681b      	ldr	r3, [r3, #0]
9000d92e:	685b      	ldr	r3, [r3, #4]
9000d930:	1ad3      	subs	r3, r2, r3
9000d932:	0fdb      	lsrs	r3, r3, #31
9000d934:	f003 0301 	and.w	r3, r3, #1
9000d938:	b2db      	uxtb	r3, r3
9000d93a:	2b00      	cmp	r3, #0
9000d93c:	d007      	beq.n	9000d94e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
9000d93e:	4b1a      	ldr	r3, [pc, #104]	; (9000d9a8 <sys_timeout_abs+0xd8>)
9000d940:	681a      	ldr	r2, [r3, #0]
9000d942:	693b      	ldr	r3, [r7, #16]
9000d944:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
9000d946:	4a18      	ldr	r2, [pc, #96]	; (9000d9a8 <sys_timeout_abs+0xd8>)
9000d948:	693b      	ldr	r3, [r7, #16]
9000d94a:	6013      	str	r3, [r2, #0]
9000d94c:	e023      	b.n	9000d996 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
9000d94e:	4b16      	ldr	r3, [pc, #88]	; (9000d9a8 <sys_timeout_abs+0xd8>)
9000d950:	681b      	ldr	r3, [r3, #0]
9000d952:	617b      	str	r3, [r7, #20]
9000d954:	e01a      	b.n	9000d98c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
9000d956:	697b      	ldr	r3, [r7, #20]
9000d958:	681b      	ldr	r3, [r3, #0]
9000d95a:	2b00      	cmp	r3, #0
9000d95c:	d00b      	beq.n	9000d976 <sys_timeout_abs+0xa6>
9000d95e:	693b      	ldr	r3, [r7, #16]
9000d960:	685a      	ldr	r2, [r3, #4]
9000d962:	697b      	ldr	r3, [r7, #20]
9000d964:	681b      	ldr	r3, [r3, #0]
9000d966:	685b      	ldr	r3, [r3, #4]
9000d968:	1ad3      	subs	r3, r2, r3
9000d96a:	0fdb      	lsrs	r3, r3, #31
9000d96c:	f003 0301 	and.w	r3, r3, #1
9000d970:	b2db      	uxtb	r3, r3
9000d972:	2b00      	cmp	r3, #0
9000d974:	d007      	beq.n	9000d986 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
9000d976:	697b      	ldr	r3, [r7, #20]
9000d978:	681a      	ldr	r2, [r3, #0]
9000d97a:	693b      	ldr	r3, [r7, #16]
9000d97c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
9000d97e:	697b      	ldr	r3, [r7, #20]
9000d980:	693a      	ldr	r2, [r7, #16]
9000d982:	601a      	str	r2, [r3, #0]
        break;
9000d984:	e007      	b.n	9000d996 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
9000d986:	697b      	ldr	r3, [r7, #20]
9000d988:	681b      	ldr	r3, [r3, #0]
9000d98a:	617b      	str	r3, [r7, #20]
9000d98c:	697b      	ldr	r3, [r7, #20]
9000d98e:	2b00      	cmp	r3, #0
9000d990:	d1e1      	bne.n	9000d956 <sys_timeout_abs+0x86>
9000d992:	e000      	b.n	9000d996 <sys_timeout_abs+0xc6>
    return;
9000d994:	bf00      	nop
      }
    }
  }
}
9000d996:	3718      	adds	r7, #24
9000d998:	46bd      	mov	sp, r7
9000d99a:	bd80      	pop	{r7, pc}
9000d99c:	90013bc0 	.word	0x90013bc0
9000d9a0:	90013bf4 	.word	0x90013bf4
9000d9a4:	90013c34 	.word	0x90013c34
9000d9a8:	2000a8f0 	.word	0x2000a8f0

9000d9ac <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
9000d9ac:	b580      	push	{r7, lr}
9000d9ae:	b086      	sub	sp, #24
9000d9b0:	af00      	add	r7, sp, #0
9000d9b2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
9000d9b4:	687b      	ldr	r3, [r7, #4]
9000d9b6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
9000d9b8:	697b      	ldr	r3, [r7, #20]
9000d9ba:	685b      	ldr	r3, [r3, #4]
9000d9bc:	4798      	blx	r3

  now = sys_now();
9000d9be:	f7f6 fb39 	bl	90004034 <sys_now>
9000d9c2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
9000d9c4:	697b      	ldr	r3, [r7, #20]
9000d9c6:	681a      	ldr	r2, [r3, #0]
9000d9c8:	4b0f      	ldr	r3, [pc, #60]	; (9000da08 <lwip_cyclic_timer+0x5c>)
9000d9ca:	681b      	ldr	r3, [r3, #0]
9000d9cc:	4413      	add	r3, r2
9000d9ce:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
9000d9d0:	68fa      	ldr	r2, [r7, #12]
9000d9d2:	693b      	ldr	r3, [r7, #16]
9000d9d4:	1ad3      	subs	r3, r2, r3
9000d9d6:	0fdb      	lsrs	r3, r3, #31
9000d9d8:	f003 0301 	and.w	r3, r3, #1
9000d9dc:	b2db      	uxtb	r3, r3
9000d9de:	2b00      	cmp	r3, #0
9000d9e0:	d009      	beq.n	9000d9f6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
9000d9e2:	697b      	ldr	r3, [r7, #20]
9000d9e4:	681a      	ldr	r2, [r3, #0]
9000d9e6:	693b      	ldr	r3, [r7, #16]
9000d9e8:	4413      	add	r3, r2
9000d9ea:	687a      	ldr	r2, [r7, #4]
9000d9ec:	4907      	ldr	r1, [pc, #28]	; (9000da0c <lwip_cyclic_timer+0x60>)
9000d9ee:	4618      	mov	r0, r3
9000d9f0:	f7ff ff6e 	bl	9000d8d0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
9000d9f4:	e004      	b.n	9000da00 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
9000d9f6:	687a      	ldr	r2, [r7, #4]
9000d9f8:	4904      	ldr	r1, [pc, #16]	; (9000da0c <lwip_cyclic_timer+0x60>)
9000d9fa:	68f8      	ldr	r0, [r7, #12]
9000d9fc:	f7ff ff68 	bl	9000d8d0 <sys_timeout_abs>
}
9000da00:	bf00      	nop
9000da02:	3718      	adds	r7, #24
9000da04:	46bd      	mov	sp, r7
9000da06:	bd80      	pop	{r7, pc}
9000da08:	2000a8f4 	.word	0x2000a8f4
9000da0c:	9000d9ad 	.word	0x9000d9ad

9000da10 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
9000da10:	b580      	push	{r7, lr}
9000da12:	b082      	sub	sp, #8
9000da14:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
9000da16:	2301      	movs	r3, #1
9000da18:	607b      	str	r3, [r7, #4]
9000da1a:	e00e      	b.n	9000da3a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
9000da1c:	4a0b      	ldr	r2, [pc, #44]	; (9000da4c <sys_timeouts_init+0x3c>)
9000da1e:	687b      	ldr	r3, [r7, #4]
9000da20:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
9000da24:	687b      	ldr	r3, [r7, #4]
9000da26:	00db      	lsls	r3, r3, #3
9000da28:	4a08      	ldr	r2, [pc, #32]	; (9000da4c <sys_timeouts_init+0x3c>)
9000da2a:	4413      	add	r3, r2
9000da2c:	461a      	mov	r2, r3
9000da2e:	4908      	ldr	r1, [pc, #32]	; (9000da50 <sys_timeouts_init+0x40>)
9000da30:	f000 f810 	bl	9000da54 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
9000da34:	687b      	ldr	r3, [r7, #4]
9000da36:	3301      	adds	r3, #1
9000da38:	607b      	str	r3, [r7, #4]
9000da3a:	687b      	ldr	r3, [r7, #4]
9000da3c:	2b02      	cmp	r3, #2
9000da3e:	d9ed      	bls.n	9000da1c <sys_timeouts_init+0xc>
  }
}
9000da40:	bf00      	nop
9000da42:	bf00      	nop
9000da44:	3708      	adds	r7, #8
9000da46:	46bd      	mov	sp, r7
9000da48:	bd80      	pop	{r7, pc}
9000da4a:	bf00      	nop
9000da4c:	90015b10 	.word	0x90015b10
9000da50:	9000d9ad 	.word	0x9000d9ad

9000da54 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
9000da54:	b580      	push	{r7, lr}
9000da56:	b086      	sub	sp, #24
9000da58:	af00      	add	r7, sp, #0
9000da5a:	60f8      	str	r0, [r7, #12]
9000da5c:	60b9      	str	r1, [r7, #8]
9000da5e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
9000da60:	68fb      	ldr	r3, [r7, #12]
9000da62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
9000da66:	d306      	bcc.n	9000da76 <sys_timeout+0x22>
9000da68:	4b0a      	ldr	r3, [pc, #40]	; (9000da94 <sys_timeout+0x40>)
9000da6a:	f240 1229 	movw	r2, #297	; 0x129
9000da6e:	490a      	ldr	r1, [pc, #40]	; (9000da98 <sys_timeout+0x44>)
9000da70:	480a      	ldr	r0, [pc, #40]	; (9000da9c <sys_timeout+0x48>)
9000da72:	f002 fd3b 	bl	900104ec <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
9000da76:	f7f6 fadd 	bl	90004034 <sys_now>
9000da7a:	4602      	mov	r2, r0
9000da7c:	68fb      	ldr	r3, [r7, #12]
9000da7e:	4413      	add	r3, r2
9000da80:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
9000da82:	687a      	ldr	r2, [r7, #4]
9000da84:	68b9      	ldr	r1, [r7, #8]
9000da86:	6978      	ldr	r0, [r7, #20]
9000da88:	f7ff ff22 	bl	9000d8d0 <sys_timeout_abs>
#endif
}
9000da8c:	bf00      	nop
9000da8e:	3718      	adds	r7, #24
9000da90:	46bd      	mov	sp, r7
9000da92:	bd80      	pop	{r7, pc}
9000da94:	90013bc0 	.word	0x90013bc0
9000da98:	90013c5c 	.word	0x90013c5c
9000da9c:	90013c34 	.word	0x90013c34

9000daa0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
9000daa0:	b580      	push	{r7, lr}
9000daa2:	b084      	sub	sp, #16
9000daa4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
9000daa6:	f7f6 fac5 	bl	90004034 <sys_now>
9000daaa:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
9000daac:	4b1a      	ldr	r3, [pc, #104]	; (9000db18 <sys_check_timeouts+0x78>)
9000daae:	781b      	ldrb	r3, [r3, #0]
9000dab0:	b2db      	uxtb	r3, r3
9000dab2:	2b00      	cmp	r3, #0
9000dab4:	d001      	beq.n	9000daba <sys_check_timeouts+0x1a>
9000dab6:	f7f9 f8c9 	bl	90006c4c <pbuf_free_ooseq>

    tmptimeout = next_timeout;
9000daba:	4b18      	ldr	r3, [pc, #96]	; (9000db1c <sys_check_timeouts+0x7c>)
9000dabc:	681b      	ldr	r3, [r3, #0]
9000dabe:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
9000dac0:	68bb      	ldr	r3, [r7, #8]
9000dac2:	2b00      	cmp	r3, #0
9000dac4:	d022      	beq.n	9000db0c <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
9000dac6:	68bb      	ldr	r3, [r7, #8]
9000dac8:	685b      	ldr	r3, [r3, #4]
9000daca:	68fa      	ldr	r2, [r7, #12]
9000dacc:	1ad3      	subs	r3, r2, r3
9000dace:	0fdb      	lsrs	r3, r3, #31
9000dad0:	f003 0301 	and.w	r3, r3, #1
9000dad4:	b2db      	uxtb	r3, r3
9000dad6:	2b00      	cmp	r3, #0
9000dad8:	d11a      	bne.n	9000db10 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
9000dada:	68bb      	ldr	r3, [r7, #8]
9000dadc:	681b      	ldr	r3, [r3, #0]
9000dade:	4a0f      	ldr	r2, [pc, #60]	; (9000db1c <sys_check_timeouts+0x7c>)
9000dae0:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
9000dae2:	68bb      	ldr	r3, [r7, #8]
9000dae4:	689b      	ldr	r3, [r3, #8]
9000dae6:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
9000dae8:	68bb      	ldr	r3, [r7, #8]
9000daea:	68db      	ldr	r3, [r3, #12]
9000daec:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
9000daee:	68bb      	ldr	r3, [r7, #8]
9000daf0:	685b      	ldr	r3, [r3, #4]
9000daf2:	4a0b      	ldr	r2, [pc, #44]	; (9000db20 <sys_check_timeouts+0x80>)
9000daf4:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
9000daf6:	68b9      	ldr	r1, [r7, #8]
9000daf8:	2006      	movs	r0, #6
9000dafa:	f7f8 fd6b 	bl	900065d4 <memp_free>
    if (handler != NULL) {
9000dafe:	687b      	ldr	r3, [r7, #4]
9000db00:	2b00      	cmp	r3, #0
9000db02:	d0d3      	beq.n	9000daac <sys_check_timeouts+0xc>
      handler(arg);
9000db04:	687b      	ldr	r3, [r7, #4]
9000db06:	6838      	ldr	r0, [r7, #0]
9000db08:	4798      	blx	r3
  do {
9000db0a:	e7cf      	b.n	9000daac <sys_check_timeouts+0xc>
      return;
9000db0c:	bf00      	nop
9000db0e:	e000      	b.n	9000db12 <sys_check_timeouts+0x72>
      return;
9000db10:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
9000db12:	3710      	adds	r7, #16
9000db14:	46bd      	mov	sp, r7
9000db16:	bd80      	pop	{r7, pc}
9000db18:	2000a89d 	.word	0x2000a89d
9000db1c:	2000a8f0 	.word	0x2000a8f0
9000db20:	2000a8f4 	.word	0x2000a8f4

9000db24 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
9000db24:	b580      	push	{r7, lr}
9000db26:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
9000db28:	f002 fcf8 	bl	9001051c <rand>
9000db2c:	4603      	mov	r3, r0
9000db2e:	b29b      	uxth	r3, r3
9000db30:	f3c3 030d 	ubfx	r3, r3, #0, #14
9000db34:	b29b      	uxth	r3, r3
9000db36:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
9000db3a:	b29a      	uxth	r2, r3
9000db3c:	4b01      	ldr	r3, [pc, #4]	; (9000db44 <udp_init+0x20>)
9000db3e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
9000db40:	bf00      	nop
9000db42:	bd80      	pop	{r7, pc}
9000db44:	20000038 	.word	0x20000038

9000db48 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
9000db48:	b580      	push	{r7, lr}
9000db4a:	b084      	sub	sp, #16
9000db4c:	af00      	add	r7, sp, #0
9000db4e:	60f8      	str	r0, [r7, #12]
9000db50:	60b9      	str	r1, [r7, #8]
9000db52:	4613      	mov	r3, r2
9000db54:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
9000db56:	68fb      	ldr	r3, [r7, #12]
9000db58:	2b00      	cmp	r3, #0
9000db5a:	d105      	bne.n	9000db68 <udp_input_local_match+0x20>
9000db5c:	4b27      	ldr	r3, [pc, #156]	; (9000dbfc <udp_input_local_match+0xb4>)
9000db5e:	2287      	movs	r2, #135	; 0x87
9000db60:	4927      	ldr	r1, [pc, #156]	; (9000dc00 <udp_input_local_match+0xb8>)
9000db62:	4828      	ldr	r0, [pc, #160]	; (9000dc04 <udp_input_local_match+0xbc>)
9000db64:	f002 fcc2 	bl	900104ec <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
9000db68:	68bb      	ldr	r3, [r7, #8]
9000db6a:	2b00      	cmp	r3, #0
9000db6c:	d105      	bne.n	9000db7a <udp_input_local_match+0x32>
9000db6e:	4b23      	ldr	r3, [pc, #140]	; (9000dbfc <udp_input_local_match+0xb4>)
9000db70:	2288      	movs	r2, #136	; 0x88
9000db72:	4925      	ldr	r1, [pc, #148]	; (9000dc08 <udp_input_local_match+0xc0>)
9000db74:	4823      	ldr	r0, [pc, #140]	; (9000dc04 <udp_input_local_match+0xbc>)
9000db76:	f002 fcb9 	bl	900104ec <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
9000db7a:	68fb      	ldr	r3, [r7, #12]
9000db7c:	7a1b      	ldrb	r3, [r3, #8]
9000db7e:	2b00      	cmp	r3, #0
9000db80:	d00b      	beq.n	9000db9a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
9000db82:	68fb      	ldr	r3, [r7, #12]
9000db84:	7a1a      	ldrb	r2, [r3, #8]
9000db86:	4b21      	ldr	r3, [pc, #132]	; (9000dc0c <udp_input_local_match+0xc4>)
9000db88:	685b      	ldr	r3, [r3, #4]
9000db8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
9000db8e:	3301      	adds	r3, #1
9000db90:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
9000db92:	429a      	cmp	r2, r3
9000db94:	d001      	beq.n	9000db9a <udp_input_local_match+0x52>
    return 0;
9000db96:	2300      	movs	r3, #0
9000db98:	e02b      	b.n	9000dbf2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
9000db9a:	79fb      	ldrb	r3, [r7, #7]
9000db9c:	2b00      	cmp	r3, #0
9000db9e:	d018      	beq.n	9000dbd2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
9000dba0:	68fb      	ldr	r3, [r7, #12]
9000dba2:	2b00      	cmp	r3, #0
9000dba4:	d013      	beq.n	9000dbce <udp_input_local_match+0x86>
9000dba6:	68fb      	ldr	r3, [r7, #12]
9000dba8:	681b      	ldr	r3, [r3, #0]
9000dbaa:	2b00      	cmp	r3, #0
9000dbac:	d00f      	beq.n	9000dbce <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
9000dbae:	4b17      	ldr	r3, [pc, #92]	; (9000dc0c <udp_input_local_match+0xc4>)
9000dbb0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
9000dbb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
9000dbb6:	d00a      	beq.n	9000dbce <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
9000dbb8:	68fb      	ldr	r3, [r7, #12]
9000dbba:	681a      	ldr	r2, [r3, #0]
9000dbbc:	4b13      	ldr	r3, [pc, #76]	; (9000dc0c <udp_input_local_match+0xc4>)
9000dbbe:	695b      	ldr	r3, [r3, #20]
9000dbc0:	405a      	eors	r2, r3
9000dbc2:	68bb      	ldr	r3, [r7, #8]
9000dbc4:	3308      	adds	r3, #8
9000dbc6:	681b      	ldr	r3, [r3, #0]
9000dbc8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
9000dbca:	2b00      	cmp	r3, #0
9000dbcc:	d110      	bne.n	9000dbf0 <udp_input_local_match+0xa8>
          return 1;
9000dbce:	2301      	movs	r3, #1
9000dbd0:	e00f      	b.n	9000dbf2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
9000dbd2:	68fb      	ldr	r3, [r7, #12]
9000dbd4:	2b00      	cmp	r3, #0
9000dbd6:	d009      	beq.n	9000dbec <udp_input_local_match+0xa4>
9000dbd8:	68fb      	ldr	r3, [r7, #12]
9000dbda:	681b      	ldr	r3, [r3, #0]
9000dbdc:	2b00      	cmp	r3, #0
9000dbde:	d005      	beq.n	9000dbec <udp_input_local_match+0xa4>
9000dbe0:	68fb      	ldr	r3, [r7, #12]
9000dbe2:	681a      	ldr	r2, [r3, #0]
9000dbe4:	4b09      	ldr	r3, [pc, #36]	; (9000dc0c <udp_input_local_match+0xc4>)
9000dbe6:	695b      	ldr	r3, [r3, #20]
9000dbe8:	429a      	cmp	r2, r3
9000dbea:	d101      	bne.n	9000dbf0 <udp_input_local_match+0xa8>
        return 1;
9000dbec:	2301      	movs	r3, #1
9000dbee:	e000      	b.n	9000dbf2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
9000dbf0:	2300      	movs	r3, #0
}
9000dbf2:	4618      	mov	r0, r3
9000dbf4:	3710      	adds	r7, #16
9000dbf6:	46bd      	mov	sp, r7
9000dbf8:	bd80      	pop	{r7, pc}
9000dbfa:	bf00      	nop
9000dbfc:	90013ca8 	.word	0x90013ca8
9000dc00:	90013cd8 	.word	0x90013cd8
9000dc04:	90013cfc 	.word	0x90013cfc
9000dc08:	90013d24 	.word	0x90013d24
9000dc0c:	20005170 	.word	0x20005170

9000dc10 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
9000dc10:	b590      	push	{r4, r7, lr}
9000dc12:	b08d      	sub	sp, #52	; 0x34
9000dc14:	af02      	add	r7, sp, #8
9000dc16:	6078      	str	r0, [r7, #4]
9000dc18:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
9000dc1a:	2300      	movs	r3, #0
9000dc1c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
9000dc1e:	687b      	ldr	r3, [r7, #4]
9000dc20:	2b00      	cmp	r3, #0
9000dc22:	d105      	bne.n	9000dc30 <udp_input+0x20>
9000dc24:	4b7c      	ldr	r3, [pc, #496]	; (9000de18 <udp_input+0x208>)
9000dc26:	22cf      	movs	r2, #207	; 0xcf
9000dc28:	497c      	ldr	r1, [pc, #496]	; (9000de1c <udp_input+0x20c>)
9000dc2a:	487d      	ldr	r0, [pc, #500]	; (9000de20 <udp_input+0x210>)
9000dc2c:	f002 fc5e 	bl	900104ec <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
9000dc30:	683b      	ldr	r3, [r7, #0]
9000dc32:	2b00      	cmp	r3, #0
9000dc34:	d105      	bne.n	9000dc42 <udp_input+0x32>
9000dc36:	4b78      	ldr	r3, [pc, #480]	; (9000de18 <udp_input+0x208>)
9000dc38:	22d0      	movs	r2, #208	; 0xd0
9000dc3a:	497a      	ldr	r1, [pc, #488]	; (9000de24 <udp_input+0x214>)
9000dc3c:	4878      	ldr	r0, [pc, #480]	; (9000de20 <udp_input+0x210>)
9000dc3e:	f002 fc55 	bl	900104ec <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
9000dc42:	687b      	ldr	r3, [r7, #4]
9000dc44:	895b      	ldrh	r3, [r3, #10]
9000dc46:	2b07      	cmp	r3, #7
9000dc48:	d803      	bhi.n	9000dc52 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
9000dc4a:	6878      	ldr	r0, [r7, #4]
9000dc4c:	f7f9 fb38 	bl	900072c0 <pbuf_free>
    goto end;
9000dc50:	e0de      	b.n	9000de10 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
9000dc52:	687b      	ldr	r3, [r7, #4]
9000dc54:	685b      	ldr	r3, [r3, #4]
9000dc56:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
9000dc58:	4b73      	ldr	r3, [pc, #460]	; (9000de28 <udp_input+0x218>)
9000dc5a:	695b      	ldr	r3, [r3, #20]
9000dc5c:	4a72      	ldr	r2, [pc, #456]	; (9000de28 <udp_input+0x218>)
9000dc5e:	6812      	ldr	r2, [r2, #0]
9000dc60:	4611      	mov	r1, r2
9000dc62:	4618      	mov	r0, r3
9000dc64:	f001 fc88 	bl	9000f578 <ip4_addr_isbroadcast_u32>
9000dc68:	4603      	mov	r3, r0
9000dc6a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
9000dc6c:	697b      	ldr	r3, [r7, #20]
9000dc6e:	881b      	ldrh	r3, [r3, #0]
9000dc70:	b29b      	uxth	r3, r3
9000dc72:	4618      	mov	r0, r3
9000dc74:	f7f7 ff5c 	bl	90005b30 <lwip_htons>
9000dc78:	4603      	mov	r3, r0
9000dc7a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
9000dc7c:	697b      	ldr	r3, [r7, #20]
9000dc7e:	885b      	ldrh	r3, [r3, #2]
9000dc80:	b29b      	uxth	r3, r3
9000dc82:	4618      	mov	r0, r3
9000dc84:	f7f7 ff54 	bl	90005b30 <lwip_htons>
9000dc88:	4603      	mov	r3, r0
9000dc8a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
9000dc8c:	2300      	movs	r3, #0
9000dc8e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
9000dc90:	2300      	movs	r3, #0
9000dc92:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
9000dc94:	2300      	movs	r3, #0
9000dc96:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
9000dc98:	4b64      	ldr	r3, [pc, #400]	; (9000de2c <udp_input+0x21c>)
9000dc9a:	681b      	ldr	r3, [r3, #0]
9000dc9c:	627b      	str	r3, [r7, #36]	; 0x24
9000dc9e:	e054      	b.n	9000dd4a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
9000dca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000dca2:	8a5b      	ldrh	r3, [r3, #18]
9000dca4:	89fa      	ldrh	r2, [r7, #14]
9000dca6:	429a      	cmp	r2, r3
9000dca8:	d14a      	bne.n	9000dd40 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
9000dcaa:	7cfb      	ldrb	r3, [r7, #19]
9000dcac:	461a      	mov	r2, r3
9000dcae:	6839      	ldr	r1, [r7, #0]
9000dcb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
9000dcb2:	f7ff ff49 	bl	9000db48 <udp_input_local_match>
9000dcb6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
9000dcb8:	2b00      	cmp	r3, #0
9000dcba:	d041      	beq.n	9000dd40 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
9000dcbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000dcbe:	7c1b      	ldrb	r3, [r3, #16]
9000dcc0:	f003 0304 	and.w	r3, r3, #4
9000dcc4:	2b00      	cmp	r3, #0
9000dcc6:	d11d      	bne.n	9000dd04 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
9000dcc8:	69fb      	ldr	r3, [r7, #28]
9000dcca:	2b00      	cmp	r3, #0
9000dccc:	d102      	bne.n	9000dcd4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
9000dcce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000dcd0:	61fb      	str	r3, [r7, #28]
9000dcd2:	e017      	b.n	9000dd04 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
9000dcd4:	7cfb      	ldrb	r3, [r7, #19]
9000dcd6:	2b00      	cmp	r3, #0
9000dcd8:	d014      	beq.n	9000dd04 <udp_input+0xf4>
9000dcda:	4b53      	ldr	r3, [pc, #332]	; (9000de28 <udp_input+0x218>)
9000dcdc:	695b      	ldr	r3, [r3, #20]
9000dcde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
9000dce2:	d10f      	bne.n	9000dd04 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
9000dce4:	69fb      	ldr	r3, [r7, #28]
9000dce6:	681a      	ldr	r2, [r3, #0]
9000dce8:	683b      	ldr	r3, [r7, #0]
9000dcea:	3304      	adds	r3, #4
9000dcec:	681b      	ldr	r3, [r3, #0]
9000dcee:	429a      	cmp	r2, r3
9000dcf0:	d008      	beq.n	9000dd04 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
9000dcf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000dcf4:	681a      	ldr	r2, [r3, #0]
9000dcf6:	683b      	ldr	r3, [r7, #0]
9000dcf8:	3304      	adds	r3, #4
9000dcfa:	681b      	ldr	r3, [r3, #0]
9000dcfc:	429a      	cmp	r2, r3
9000dcfe:	d101      	bne.n	9000dd04 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
9000dd00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000dd02:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
9000dd04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000dd06:	8a9b      	ldrh	r3, [r3, #20]
9000dd08:	8a3a      	ldrh	r2, [r7, #16]
9000dd0a:	429a      	cmp	r2, r3
9000dd0c:	d118      	bne.n	9000dd40 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
9000dd0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000dd10:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
9000dd12:	2b00      	cmp	r3, #0
9000dd14:	d005      	beq.n	9000dd22 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
9000dd16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000dd18:	685a      	ldr	r2, [r3, #4]
9000dd1a:	4b43      	ldr	r3, [pc, #268]	; (9000de28 <udp_input+0x218>)
9000dd1c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
9000dd1e:	429a      	cmp	r2, r3
9000dd20:	d10e      	bne.n	9000dd40 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
9000dd22:	6a3b      	ldr	r3, [r7, #32]
9000dd24:	2b00      	cmp	r3, #0
9000dd26:	d014      	beq.n	9000dd52 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
9000dd28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000dd2a:	68da      	ldr	r2, [r3, #12]
9000dd2c:	6a3b      	ldr	r3, [r7, #32]
9000dd2e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
9000dd30:	4b3e      	ldr	r3, [pc, #248]	; (9000de2c <udp_input+0x21c>)
9000dd32:	681a      	ldr	r2, [r3, #0]
9000dd34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000dd36:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
9000dd38:	4a3c      	ldr	r2, [pc, #240]	; (9000de2c <udp_input+0x21c>)
9000dd3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000dd3c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
9000dd3e:	e008      	b.n	9000dd52 <udp_input+0x142>
      }
    }

    prev = pcb;
9000dd40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000dd42:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
9000dd44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000dd46:	68db      	ldr	r3, [r3, #12]
9000dd48:	627b      	str	r3, [r7, #36]	; 0x24
9000dd4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000dd4c:	2b00      	cmp	r3, #0
9000dd4e:	d1a7      	bne.n	9000dca0 <udp_input+0x90>
9000dd50:	e000      	b.n	9000dd54 <udp_input+0x144>
        break;
9000dd52:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
9000dd54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000dd56:	2b00      	cmp	r3, #0
9000dd58:	d101      	bne.n	9000dd5e <udp_input+0x14e>
    pcb = uncon_pcb;
9000dd5a:	69fb      	ldr	r3, [r7, #28]
9000dd5c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
9000dd5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000dd60:	2b00      	cmp	r3, #0
9000dd62:	d002      	beq.n	9000dd6a <udp_input+0x15a>
    for_us = 1;
9000dd64:	2301      	movs	r3, #1
9000dd66:	76fb      	strb	r3, [r7, #27]
9000dd68:	e00a      	b.n	9000dd80 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
9000dd6a:	683b      	ldr	r3, [r7, #0]
9000dd6c:	3304      	adds	r3, #4
9000dd6e:	681a      	ldr	r2, [r3, #0]
9000dd70:	4b2d      	ldr	r3, [pc, #180]	; (9000de28 <udp_input+0x218>)
9000dd72:	695b      	ldr	r3, [r3, #20]
9000dd74:	429a      	cmp	r2, r3
9000dd76:	bf0c      	ite	eq
9000dd78:	2301      	moveq	r3, #1
9000dd7a:	2300      	movne	r3, #0
9000dd7c:	b2db      	uxtb	r3, r3
9000dd7e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
9000dd80:	7efb      	ldrb	r3, [r7, #27]
9000dd82:	2b00      	cmp	r3, #0
9000dd84:	d041      	beq.n	9000de0a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
9000dd86:	2108      	movs	r1, #8
9000dd88:	6878      	ldr	r0, [r7, #4]
9000dd8a:	f7f9 fa13 	bl	900071b4 <pbuf_remove_header>
9000dd8e:	4603      	mov	r3, r0
9000dd90:	2b00      	cmp	r3, #0
9000dd92:	d00a      	beq.n	9000ddaa <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
9000dd94:	4b20      	ldr	r3, [pc, #128]	; (9000de18 <udp_input+0x208>)
9000dd96:	f44f 72b8 	mov.w	r2, #368	; 0x170
9000dd9a:	4925      	ldr	r1, [pc, #148]	; (9000de30 <udp_input+0x220>)
9000dd9c:	4820      	ldr	r0, [pc, #128]	; (9000de20 <udp_input+0x210>)
9000dd9e:	f002 fba5 	bl	900104ec <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
9000dda2:	6878      	ldr	r0, [r7, #4]
9000dda4:	f7f9 fa8c 	bl	900072c0 <pbuf_free>
      goto end;
9000dda8:	e032      	b.n	9000de10 <udp_input+0x200>
    }

    if (pcb != NULL) {
9000ddaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000ddac:	2b00      	cmp	r3, #0
9000ddae:	d012      	beq.n	9000ddd6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
9000ddb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000ddb2:	699b      	ldr	r3, [r3, #24]
9000ddb4:	2b00      	cmp	r3, #0
9000ddb6:	d00a      	beq.n	9000ddce <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
9000ddb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000ddba:	699c      	ldr	r4, [r3, #24]
9000ddbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000ddbe:	69d8      	ldr	r0, [r3, #28]
9000ddc0:	8a3b      	ldrh	r3, [r7, #16]
9000ddc2:	9300      	str	r3, [sp, #0]
9000ddc4:	4b1b      	ldr	r3, [pc, #108]	; (9000de34 <udp_input+0x224>)
9000ddc6:	687a      	ldr	r2, [r7, #4]
9000ddc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
9000ddca:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
9000ddcc:	e021      	b.n	9000de12 <udp_input+0x202>
        pbuf_free(p);
9000ddce:	6878      	ldr	r0, [r7, #4]
9000ddd0:	f7f9 fa76 	bl	900072c0 <pbuf_free>
        goto end;
9000ddd4:	e01c      	b.n	9000de10 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
9000ddd6:	7cfb      	ldrb	r3, [r7, #19]
9000ddd8:	2b00      	cmp	r3, #0
9000ddda:	d112      	bne.n	9000de02 <udp_input+0x1f2>
9000dddc:	4b12      	ldr	r3, [pc, #72]	; (9000de28 <udp_input+0x218>)
9000ddde:	695b      	ldr	r3, [r3, #20]
9000dde0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
9000dde4:	2be0      	cmp	r3, #224	; 0xe0
9000dde6:	d00c      	beq.n	9000de02 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
9000dde8:	4b0f      	ldr	r3, [pc, #60]	; (9000de28 <udp_input+0x218>)
9000ddea:	899b      	ldrh	r3, [r3, #12]
9000ddec:	3308      	adds	r3, #8
9000ddee:	b29b      	uxth	r3, r3
9000ddf0:	b21b      	sxth	r3, r3
9000ddf2:	4619      	mov	r1, r3
9000ddf4:	6878      	ldr	r0, [r7, #4]
9000ddf6:	f7f9 fa50 	bl	9000729a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
9000ddfa:	2103      	movs	r1, #3
9000ddfc:	6878      	ldr	r0, [r7, #4]
9000ddfe:	f001 f89b 	bl	9000ef38 <icmp_dest_unreach>
      pbuf_free(p);
9000de02:	6878      	ldr	r0, [r7, #4]
9000de04:	f7f9 fa5c 	bl	900072c0 <pbuf_free>
  return;
9000de08:	e003      	b.n	9000de12 <udp_input+0x202>
    pbuf_free(p);
9000de0a:	6878      	ldr	r0, [r7, #4]
9000de0c:	f7f9 fa58 	bl	900072c0 <pbuf_free>
  return;
9000de10:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
9000de12:	372c      	adds	r7, #44	; 0x2c
9000de14:	46bd      	mov	sp, r7
9000de16:	bd90      	pop	{r4, r7, pc}
9000de18:	90013ca8 	.word	0x90013ca8
9000de1c:	90013d4c 	.word	0x90013d4c
9000de20:	90013cfc 	.word	0x90013cfc
9000de24:	90013d64 	.word	0x90013d64
9000de28:	20005170 	.word	0x20005170
9000de2c:	2000a8fc 	.word	0x2000a8fc
9000de30:	90013d80 	.word	0x90013d80
9000de34:	20005180 	.word	0x20005180

9000de38 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
9000de38:	b480      	push	{r7}
9000de3a:	b085      	sub	sp, #20
9000de3c:	af00      	add	r7, sp, #0
9000de3e:	6078      	str	r0, [r7, #4]
9000de40:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
9000de42:	687b      	ldr	r3, [r7, #4]
9000de44:	2b00      	cmp	r3, #0
9000de46:	d01e      	beq.n	9000de86 <udp_netif_ip_addr_changed+0x4e>
9000de48:	687b      	ldr	r3, [r7, #4]
9000de4a:	681b      	ldr	r3, [r3, #0]
9000de4c:	2b00      	cmp	r3, #0
9000de4e:	d01a      	beq.n	9000de86 <udp_netif_ip_addr_changed+0x4e>
9000de50:	683b      	ldr	r3, [r7, #0]
9000de52:	2b00      	cmp	r3, #0
9000de54:	d017      	beq.n	9000de86 <udp_netif_ip_addr_changed+0x4e>
9000de56:	683b      	ldr	r3, [r7, #0]
9000de58:	681b      	ldr	r3, [r3, #0]
9000de5a:	2b00      	cmp	r3, #0
9000de5c:	d013      	beq.n	9000de86 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
9000de5e:	4b0d      	ldr	r3, [pc, #52]	; (9000de94 <udp_netif_ip_addr_changed+0x5c>)
9000de60:	681b      	ldr	r3, [r3, #0]
9000de62:	60fb      	str	r3, [r7, #12]
9000de64:	e00c      	b.n	9000de80 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
9000de66:	68fb      	ldr	r3, [r7, #12]
9000de68:	681a      	ldr	r2, [r3, #0]
9000de6a:	687b      	ldr	r3, [r7, #4]
9000de6c:	681b      	ldr	r3, [r3, #0]
9000de6e:	429a      	cmp	r2, r3
9000de70:	d103      	bne.n	9000de7a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
9000de72:	683b      	ldr	r3, [r7, #0]
9000de74:	681a      	ldr	r2, [r3, #0]
9000de76:	68fb      	ldr	r3, [r7, #12]
9000de78:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
9000de7a:	68fb      	ldr	r3, [r7, #12]
9000de7c:	68db      	ldr	r3, [r3, #12]
9000de7e:	60fb      	str	r3, [r7, #12]
9000de80:	68fb      	ldr	r3, [r7, #12]
9000de82:	2b00      	cmp	r3, #0
9000de84:	d1ef      	bne.n	9000de66 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
9000de86:	bf00      	nop
9000de88:	3714      	adds	r7, #20
9000de8a:	46bd      	mov	sp, r7
9000de8c:	f85d 7b04 	ldr.w	r7, [sp], #4
9000de90:	4770      	bx	lr
9000de92:	bf00      	nop
9000de94:	2000a8fc 	.word	0x2000a8fc

9000de98 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
9000de98:	b580      	push	{r7, lr}
9000de9a:	b082      	sub	sp, #8
9000de9c:	af00      	add	r7, sp, #0
9000de9e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
9000dea0:	4915      	ldr	r1, [pc, #84]	; (9000def8 <etharp_free_entry+0x60>)
9000dea2:	687a      	ldr	r2, [r7, #4]
9000dea4:	4613      	mov	r3, r2
9000dea6:	005b      	lsls	r3, r3, #1
9000dea8:	4413      	add	r3, r2
9000deaa:	00db      	lsls	r3, r3, #3
9000deac:	440b      	add	r3, r1
9000deae:	681b      	ldr	r3, [r3, #0]
9000deb0:	2b00      	cmp	r3, #0
9000deb2:	d013      	beq.n	9000dedc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
9000deb4:	4910      	ldr	r1, [pc, #64]	; (9000def8 <etharp_free_entry+0x60>)
9000deb6:	687a      	ldr	r2, [r7, #4]
9000deb8:	4613      	mov	r3, r2
9000deba:	005b      	lsls	r3, r3, #1
9000debc:	4413      	add	r3, r2
9000debe:	00db      	lsls	r3, r3, #3
9000dec0:	440b      	add	r3, r1
9000dec2:	681b      	ldr	r3, [r3, #0]
9000dec4:	4618      	mov	r0, r3
9000dec6:	f7f9 f9fb 	bl	900072c0 <pbuf_free>
    arp_table[i].q = NULL;
9000deca:	490b      	ldr	r1, [pc, #44]	; (9000def8 <etharp_free_entry+0x60>)
9000decc:	687a      	ldr	r2, [r7, #4]
9000dece:	4613      	mov	r3, r2
9000ded0:	005b      	lsls	r3, r3, #1
9000ded2:	4413      	add	r3, r2
9000ded4:	00db      	lsls	r3, r3, #3
9000ded6:	440b      	add	r3, r1
9000ded8:	2200      	movs	r2, #0
9000deda:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
9000dedc:	4906      	ldr	r1, [pc, #24]	; (9000def8 <etharp_free_entry+0x60>)
9000dede:	687a      	ldr	r2, [r7, #4]
9000dee0:	4613      	mov	r3, r2
9000dee2:	005b      	lsls	r3, r3, #1
9000dee4:	4413      	add	r3, r2
9000dee6:	00db      	lsls	r3, r3, #3
9000dee8:	440b      	add	r3, r1
9000deea:	3314      	adds	r3, #20
9000deec:	2200      	movs	r2, #0
9000deee:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
9000def0:	bf00      	nop
9000def2:	3708      	adds	r7, #8
9000def4:	46bd      	mov	sp, r7
9000def6:	bd80      	pop	{r7, pc}
9000def8:	2000a900 	.word	0x2000a900

9000defc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
9000defc:	b580      	push	{r7, lr}
9000defe:	b082      	sub	sp, #8
9000df00:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
9000df02:	2300      	movs	r3, #0
9000df04:	607b      	str	r3, [r7, #4]
9000df06:	e096      	b.n	9000e036 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
9000df08:	494f      	ldr	r1, [pc, #316]	; (9000e048 <etharp_tmr+0x14c>)
9000df0a:	687a      	ldr	r2, [r7, #4]
9000df0c:	4613      	mov	r3, r2
9000df0e:	005b      	lsls	r3, r3, #1
9000df10:	4413      	add	r3, r2
9000df12:	00db      	lsls	r3, r3, #3
9000df14:	440b      	add	r3, r1
9000df16:	3314      	adds	r3, #20
9000df18:	781b      	ldrb	r3, [r3, #0]
9000df1a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
9000df1c:	78fb      	ldrb	r3, [r7, #3]
9000df1e:	2b00      	cmp	r3, #0
9000df20:	f000 8086 	beq.w	9000e030 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
9000df24:	4948      	ldr	r1, [pc, #288]	; (9000e048 <etharp_tmr+0x14c>)
9000df26:	687a      	ldr	r2, [r7, #4]
9000df28:	4613      	mov	r3, r2
9000df2a:	005b      	lsls	r3, r3, #1
9000df2c:	4413      	add	r3, r2
9000df2e:	00db      	lsls	r3, r3, #3
9000df30:	440b      	add	r3, r1
9000df32:	3312      	adds	r3, #18
9000df34:	881b      	ldrh	r3, [r3, #0]
9000df36:	3301      	adds	r3, #1
9000df38:	b298      	uxth	r0, r3
9000df3a:	4943      	ldr	r1, [pc, #268]	; (9000e048 <etharp_tmr+0x14c>)
9000df3c:	687a      	ldr	r2, [r7, #4]
9000df3e:	4613      	mov	r3, r2
9000df40:	005b      	lsls	r3, r3, #1
9000df42:	4413      	add	r3, r2
9000df44:	00db      	lsls	r3, r3, #3
9000df46:	440b      	add	r3, r1
9000df48:	3312      	adds	r3, #18
9000df4a:	4602      	mov	r2, r0
9000df4c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
9000df4e:	493e      	ldr	r1, [pc, #248]	; (9000e048 <etharp_tmr+0x14c>)
9000df50:	687a      	ldr	r2, [r7, #4]
9000df52:	4613      	mov	r3, r2
9000df54:	005b      	lsls	r3, r3, #1
9000df56:	4413      	add	r3, r2
9000df58:	00db      	lsls	r3, r3, #3
9000df5a:	440b      	add	r3, r1
9000df5c:	3312      	adds	r3, #18
9000df5e:	881b      	ldrh	r3, [r3, #0]
9000df60:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
9000df64:	d215      	bcs.n	9000df92 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
9000df66:	4938      	ldr	r1, [pc, #224]	; (9000e048 <etharp_tmr+0x14c>)
9000df68:	687a      	ldr	r2, [r7, #4]
9000df6a:	4613      	mov	r3, r2
9000df6c:	005b      	lsls	r3, r3, #1
9000df6e:	4413      	add	r3, r2
9000df70:	00db      	lsls	r3, r3, #3
9000df72:	440b      	add	r3, r1
9000df74:	3314      	adds	r3, #20
9000df76:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
9000df78:	2b01      	cmp	r3, #1
9000df7a:	d10e      	bne.n	9000df9a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
9000df7c:	4932      	ldr	r1, [pc, #200]	; (9000e048 <etharp_tmr+0x14c>)
9000df7e:	687a      	ldr	r2, [r7, #4]
9000df80:	4613      	mov	r3, r2
9000df82:	005b      	lsls	r3, r3, #1
9000df84:	4413      	add	r3, r2
9000df86:	00db      	lsls	r3, r3, #3
9000df88:	440b      	add	r3, r1
9000df8a:	3312      	adds	r3, #18
9000df8c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
9000df8e:	2b04      	cmp	r3, #4
9000df90:	d903      	bls.n	9000df9a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
9000df92:	6878      	ldr	r0, [r7, #4]
9000df94:	f7ff ff80 	bl	9000de98 <etharp_free_entry>
9000df98:	e04a      	b.n	9000e030 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
9000df9a:	492b      	ldr	r1, [pc, #172]	; (9000e048 <etharp_tmr+0x14c>)
9000df9c:	687a      	ldr	r2, [r7, #4]
9000df9e:	4613      	mov	r3, r2
9000dfa0:	005b      	lsls	r3, r3, #1
9000dfa2:	4413      	add	r3, r2
9000dfa4:	00db      	lsls	r3, r3, #3
9000dfa6:	440b      	add	r3, r1
9000dfa8:	3314      	adds	r3, #20
9000dfaa:	781b      	ldrb	r3, [r3, #0]
9000dfac:	2b03      	cmp	r3, #3
9000dfae:	d10a      	bne.n	9000dfc6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
9000dfb0:	4925      	ldr	r1, [pc, #148]	; (9000e048 <etharp_tmr+0x14c>)
9000dfb2:	687a      	ldr	r2, [r7, #4]
9000dfb4:	4613      	mov	r3, r2
9000dfb6:	005b      	lsls	r3, r3, #1
9000dfb8:	4413      	add	r3, r2
9000dfba:	00db      	lsls	r3, r3, #3
9000dfbc:	440b      	add	r3, r1
9000dfbe:	3314      	adds	r3, #20
9000dfc0:	2204      	movs	r2, #4
9000dfc2:	701a      	strb	r2, [r3, #0]
9000dfc4:	e034      	b.n	9000e030 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
9000dfc6:	4920      	ldr	r1, [pc, #128]	; (9000e048 <etharp_tmr+0x14c>)
9000dfc8:	687a      	ldr	r2, [r7, #4]
9000dfca:	4613      	mov	r3, r2
9000dfcc:	005b      	lsls	r3, r3, #1
9000dfce:	4413      	add	r3, r2
9000dfd0:	00db      	lsls	r3, r3, #3
9000dfd2:	440b      	add	r3, r1
9000dfd4:	3314      	adds	r3, #20
9000dfd6:	781b      	ldrb	r3, [r3, #0]
9000dfd8:	2b04      	cmp	r3, #4
9000dfda:	d10a      	bne.n	9000dff2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
9000dfdc:	491a      	ldr	r1, [pc, #104]	; (9000e048 <etharp_tmr+0x14c>)
9000dfde:	687a      	ldr	r2, [r7, #4]
9000dfe0:	4613      	mov	r3, r2
9000dfe2:	005b      	lsls	r3, r3, #1
9000dfe4:	4413      	add	r3, r2
9000dfe6:	00db      	lsls	r3, r3, #3
9000dfe8:	440b      	add	r3, r1
9000dfea:	3314      	adds	r3, #20
9000dfec:	2202      	movs	r2, #2
9000dfee:	701a      	strb	r2, [r3, #0]
9000dff0:	e01e      	b.n	9000e030 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
9000dff2:	4915      	ldr	r1, [pc, #84]	; (9000e048 <etharp_tmr+0x14c>)
9000dff4:	687a      	ldr	r2, [r7, #4]
9000dff6:	4613      	mov	r3, r2
9000dff8:	005b      	lsls	r3, r3, #1
9000dffa:	4413      	add	r3, r2
9000dffc:	00db      	lsls	r3, r3, #3
9000dffe:	440b      	add	r3, r1
9000e000:	3314      	adds	r3, #20
9000e002:	781b      	ldrb	r3, [r3, #0]
9000e004:	2b01      	cmp	r3, #1
9000e006:	d113      	bne.n	9000e030 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
9000e008:	490f      	ldr	r1, [pc, #60]	; (9000e048 <etharp_tmr+0x14c>)
9000e00a:	687a      	ldr	r2, [r7, #4]
9000e00c:	4613      	mov	r3, r2
9000e00e:	005b      	lsls	r3, r3, #1
9000e010:	4413      	add	r3, r2
9000e012:	00db      	lsls	r3, r3, #3
9000e014:	440b      	add	r3, r1
9000e016:	3308      	adds	r3, #8
9000e018:	6818      	ldr	r0, [r3, #0]
9000e01a:	687a      	ldr	r2, [r7, #4]
9000e01c:	4613      	mov	r3, r2
9000e01e:	005b      	lsls	r3, r3, #1
9000e020:	4413      	add	r3, r2
9000e022:	00db      	lsls	r3, r3, #3
9000e024:	4a08      	ldr	r2, [pc, #32]	; (9000e048 <etharp_tmr+0x14c>)
9000e026:	4413      	add	r3, r2
9000e028:	3304      	adds	r3, #4
9000e02a:	4619      	mov	r1, r3
9000e02c:	f000 fe6e 	bl	9000ed0c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
9000e030:	687b      	ldr	r3, [r7, #4]
9000e032:	3301      	adds	r3, #1
9000e034:	607b      	str	r3, [r7, #4]
9000e036:	687b      	ldr	r3, [r7, #4]
9000e038:	2b09      	cmp	r3, #9
9000e03a:	f77f af65 	ble.w	9000df08 <etharp_tmr+0xc>
      }
    }
  }
}
9000e03e:	bf00      	nop
9000e040:	bf00      	nop
9000e042:	3708      	adds	r7, #8
9000e044:	46bd      	mov	sp, r7
9000e046:	bd80      	pop	{r7, pc}
9000e048:	2000a900 	.word	0x2000a900

9000e04c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
9000e04c:	b580      	push	{r7, lr}
9000e04e:	b08a      	sub	sp, #40	; 0x28
9000e050:	af00      	add	r7, sp, #0
9000e052:	60f8      	str	r0, [r7, #12]
9000e054:	460b      	mov	r3, r1
9000e056:	607a      	str	r2, [r7, #4]
9000e058:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
9000e05a:	230a      	movs	r3, #10
9000e05c:	84fb      	strh	r3, [r7, #38]	; 0x26
9000e05e:	230a      	movs	r3, #10
9000e060:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
9000e062:	230a      	movs	r3, #10
9000e064:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
9000e066:	2300      	movs	r3, #0
9000e068:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
9000e06a:	230a      	movs	r3, #10
9000e06c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
9000e06e:	2300      	movs	r3, #0
9000e070:	83bb      	strh	r3, [r7, #28]
9000e072:	2300      	movs	r3, #0
9000e074:	837b      	strh	r3, [r7, #26]
9000e076:	2300      	movs	r3, #0
9000e078:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
9000e07a:	2300      	movs	r3, #0
9000e07c:	843b      	strh	r3, [r7, #32]
9000e07e:	e0ae      	b.n	9000e1de <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
9000e080:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
9000e084:	49a6      	ldr	r1, [pc, #664]	; (9000e320 <etharp_find_entry+0x2d4>)
9000e086:	4613      	mov	r3, r2
9000e088:	005b      	lsls	r3, r3, #1
9000e08a:	4413      	add	r3, r2
9000e08c:	00db      	lsls	r3, r3, #3
9000e08e:	440b      	add	r3, r1
9000e090:	3314      	adds	r3, #20
9000e092:	781b      	ldrb	r3, [r3, #0]
9000e094:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
9000e096:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
9000e09a:	2b0a      	cmp	r3, #10
9000e09c:	d105      	bne.n	9000e0aa <etharp_find_entry+0x5e>
9000e09e:	7dfb      	ldrb	r3, [r7, #23]
9000e0a0:	2b00      	cmp	r3, #0
9000e0a2:	d102      	bne.n	9000e0aa <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
9000e0a4:	8c3b      	ldrh	r3, [r7, #32]
9000e0a6:	847b      	strh	r3, [r7, #34]	; 0x22
9000e0a8:	e095      	b.n	9000e1d6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
9000e0aa:	7dfb      	ldrb	r3, [r7, #23]
9000e0ac:	2b00      	cmp	r3, #0
9000e0ae:	f000 8092 	beq.w	9000e1d6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
9000e0b2:	7dfb      	ldrb	r3, [r7, #23]
9000e0b4:	2b01      	cmp	r3, #1
9000e0b6:	d009      	beq.n	9000e0cc <etharp_find_entry+0x80>
9000e0b8:	7dfb      	ldrb	r3, [r7, #23]
9000e0ba:	2b01      	cmp	r3, #1
9000e0bc:	d806      	bhi.n	9000e0cc <etharp_find_entry+0x80>
9000e0be:	4b99      	ldr	r3, [pc, #612]	; (9000e324 <etharp_find_entry+0x2d8>)
9000e0c0:	f240 1223 	movw	r2, #291	; 0x123
9000e0c4:	4998      	ldr	r1, [pc, #608]	; (9000e328 <etharp_find_entry+0x2dc>)
9000e0c6:	4899      	ldr	r0, [pc, #612]	; (9000e32c <etharp_find_entry+0x2e0>)
9000e0c8:	f002 fa10 	bl	900104ec <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
9000e0cc:	68fb      	ldr	r3, [r7, #12]
9000e0ce:	2b00      	cmp	r3, #0
9000e0d0:	d020      	beq.n	9000e114 <etharp_find_entry+0xc8>
9000e0d2:	68fb      	ldr	r3, [r7, #12]
9000e0d4:	6819      	ldr	r1, [r3, #0]
9000e0d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
9000e0da:	4891      	ldr	r0, [pc, #580]	; (9000e320 <etharp_find_entry+0x2d4>)
9000e0dc:	4613      	mov	r3, r2
9000e0de:	005b      	lsls	r3, r3, #1
9000e0e0:	4413      	add	r3, r2
9000e0e2:	00db      	lsls	r3, r3, #3
9000e0e4:	4403      	add	r3, r0
9000e0e6:	3304      	adds	r3, #4
9000e0e8:	681b      	ldr	r3, [r3, #0]
9000e0ea:	4299      	cmp	r1, r3
9000e0ec:	d112      	bne.n	9000e114 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
9000e0ee:	687b      	ldr	r3, [r7, #4]
9000e0f0:	2b00      	cmp	r3, #0
9000e0f2:	d00c      	beq.n	9000e10e <etharp_find_entry+0xc2>
9000e0f4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
9000e0f8:	4989      	ldr	r1, [pc, #548]	; (9000e320 <etharp_find_entry+0x2d4>)
9000e0fa:	4613      	mov	r3, r2
9000e0fc:	005b      	lsls	r3, r3, #1
9000e0fe:	4413      	add	r3, r2
9000e100:	00db      	lsls	r3, r3, #3
9000e102:	440b      	add	r3, r1
9000e104:	3308      	adds	r3, #8
9000e106:	681b      	ldr	r3, [r3, #0]
9000e108:	687a      	ldr	r2, [r7, #4]
9000e10a:	429a      	cmp	r2, r3
9000e10c:	d102      	bne.n	9000e114 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
9000e10e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
9000e112:	e100      	b.n	9000e316 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
9000e114:	7dfb      	ldrb	r3, [r7, #23]
9000e116:	2b01      	cmp	r3, #1
9000e118:	d140      	bne.n	9000e19c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
9000e11a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
9000e11e:	4980      	ldr	r1, [pc, #512]	; (9000e320 <etharp_find_entry+0x2d4>)
9000e120:	4613      	mov	r3, r2
9000e122:	005b      	lsls	r3, r3, #1
9000e124:	4413      	add	r3, r2
9000e126:	00db      	lsls	r3, r3, #3
9000e128:	440b      	add	r3, r1
9000e12a:	681b      	ldr	r3, [r3, #0]
9000e12c:	2b00      	cmp	r3, #0
9000e12e:	d01a      	beq.n	9000e166 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
9000e130:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
9000e134:	497a      	ldr	r1, [pc, #488]	; (9000e320 <etharp_find_entry+0x2d4>)
9000e136:	4613      	mov	r3, r2
9000e138:	005b      	lsls	r3, r3, #1
9000e13a:	4413      	add	r3, r2
9000e13c:	00db      	lsls	r3, r3, #3
9000e13e:	440b      	add	r3, r1
9000e140:	3312      	adds	r3, #18
9000e142:	881b      	ldrh	r3, [r3, #0]
9000e144:	8bba      	ldrh	r2, [r7, #28]
9000e146:	429a      	cmp	r2, r3
9000e148:	d845      	bhi.n	9000e1d6 <etharp_find_entry+0x18a>
            old_queue = i;
9000e14a:	8c3b      	ldrh	r3, [r7, #32]
9000e14c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
9000e14e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
9000e152:	4973      	ldr	r1, [pc, #460]	; (9000e320 <etharp_find_entry+0x2d4>)
9000e154:	4613      	mov	r3, r2
9000e156:	005b      	lsls	r3, r3, #1
9000e158:	4413      	add	r3, r2
9000e15a:	00db      	lsls	r3, r3, #3
9000e15c:	440b      	add	r3, r1
9000e15e:	3312      	adds	r3, #18
9000e160:	881b      	ldrh	r3, [r3, #0]
9000e162:	83bb      	strh	r3, [r7, #28]
9000e164:	e037      	b.n	9000e1d6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
9000e166:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
9000e16a:	496d      	ldr	r1, [pc, #436]	; (9000e320 <etharp_find_entry+0x2d4>)
9000e16c:	4613      	mov	r3, r2
9000e16e:	005b      	lsls	r3, r3, #1
9000e170:	4413      	add	r3, r2
9000e172:	00db      	lsls	r3, r3, #3
9000e174:	440b      	add	r3, r1
9000e176:	3312      	adds	r3, #18
9000e178:	881b      	ldrh	r3, [r3, #0]
9000e17a:	8b7a      	ldrh	r2, [r7, #26]
9000e17c:	429a      	cmp	r2, r3
9000e17e:	d82a      	bhi.n	9000e1d6 <etharp_find_entry+0x18a>
            old_pending = i;
9000e180:	8c3b      	ldrh	r3, [r7, #32]
9000e182:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
9000e184:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
9000e188:	4965      	ldr	r1, [pc, #404]	; (9000e320 <etharp_find_entry+0x2d4>)
9000e18a:	4613      	mov	r3, r2
9000e18c:	005b      	lsls	r3, r3, #1
9000e18e:	4413      	add	r3, r2
9000e190:	00db      	lsls	r3, r3, #3
9000e192:	440b      	add	r3, r1
9000e194:	3312      	adds	r3, #18
9000e196:	881b      	ldrh	r3, [r3, #0]
9000e198:	837b      	strh	r3, [r7, #26]
9000e19a:	e01c      	b.n	9000e1d6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
9000e19c:	7dfb      	ldrb	r3, [r7, #23]
9000e19e:	2b01      	cmp	r3, #1
9000e1a0:	d919      	bls.n	9000e1d6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
9000e1a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
9000e1a6:	495e      	ldr	r1, [pc, #376]	; (9000e320 <etharp_find_entry+0x2d4>)
9000e1a8:	4613      	mov	r3, r2
9000e1aa:	005b      	lsls	r3, r3, #1
9000e1ac:	4413      	add	r3, r2
9000e1ae:	00db      	lsls	r3, r3, #3
9000e1b0:	440b      	add	r3, r1
9000e1b2:	3312      	adds	r3, #18
9000e1b4:	881b      	ldrh	r3, [r3, #0]
9000e1b6:	8b3a      	ldrh	r2, [r7, #24]
9000e1b8:	429a      	cmp	r2, r3
9000e1ba:	d80c      	bhi.n	9000e1d6 <etharp_find_entry+0x18a>
            old_stable = i;
9000e1bc:	8c3b      	ldrh	r3, [r7, #32]
9000e1be:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
9000e1c0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
9000e1c4:	4956      	ldr	r1, [pc, #344]	; (9000e320 <etharp_find_entry+0x2d4>)
9000e1c6:	4613      	mov	r3, r2
9000e1c8:	005b      	lsls	r3, r3, #1
9000e1ca:	4413      	add	r3, r2
9000e1cc:	00db      	lsls	r3, r3, #3
9000e1ce:	440b      	add	r3, r1
9000e1d0:	3312      	adds	r3, #18
9000e1d2:	881b      	ldrh	r3, [r3, #0]
9000e1d4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
9000e1d6:	8c3b      	ldrh	r3, [r7, #32]
9000e1d8:	3301      	adds	r3, #1
9000e1da:	b29b      	uxth	r3, r3
9000e1dc:	843b      	strh	r3, [r7, #32]
9000e1de:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
9000e1e2:	2b09      	cmp	r3, #9
9000e1e4:	f77f af4c 	ble.w	9000e080 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
9000e1e8:	7afb      	ldrb	r3, [r7, #11]
9000e1ea:	f003 0302 	and.w	r3, r3, #2
9000e1ee:	2b00      	cmp	r3, #0
9000e1f0:	d108      	bne.n	9000e204 <etharp_find_entry+0x1b8>
9000e1f2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
9000e1f6:	2b0a      	cmp	r3, #10
9000e1f8:	d107      	bne.n	9000e20a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
9000e1fa:	7afb      	ldrb	r3, [r7, #11]
9000e1fc:	f003 0301 	and.w	r3, r3, #1
9000e200:	2b00      	cmp	r3, #0
9000e202:	d102      	bne.n	9000e20a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
9000e204:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000e208:	e085      	b.n	9000e316 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
9000e20a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
9000e20e:	2b09      	cmp	r3, #9
9000e210:	dc02      	bgt.n	9000e218 <etharp_find_entry+0x1cc>
    i = empty;
9000e212:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
9000e214:	843b      	strh	r3, [r7, #32]
9000e216:	e039      	b.n	9000e28c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
9000e218:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
9000e21c:	2b09      	cmp	r3, #9
9000e21e:	dc14      	bgt.n	9000e24a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
9000e220:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
9000e222:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
9000e224:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
9000e228:	493d      	ldr	r1, [pc, #244]	; (9000e320 <etharp_find_entry+0x2d4>)
9000e22a:	4613      	mov	r3, r2
9000e22c:	005b      	lsls	r3, r3, #1
9000e22e:	4413      	add	r3, r2
9000e230:	00db      	lsls	r3, r3, #3
9000e232:	440b      	add	r3, r1
9000e234:	681b      	ldr	r3, [r3, #0]
9000e236:	2b00      	cmp	r3, #0
9000e238:	d018      	beq.n	9000e26c <etharp_find_entry+0x220>
9000e23a:	4b3a      	ldr	r3, [pc, #232]	; (9000e324 <etharp_find_entry+0x2d8>)
9000e23c:	f240 126d 	movw	r2, #365	; 0x16d
9000e240:	493b      	ldr	r1, [pc, #236]	; (9000e330 <etharp_find_entry+0x2e4>)
9000e242:	483a      	ldr	r0, [pc, #232]	; (9000e32c <etharp_find_entry+0x2e0>)
9000e244:	f002 f952 	bl	900104ec <iprintf>
9000e248:	e010      	b.n	9000e26c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
9000e24a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
9000e24e:	2b09      	cmp	r3, #9
9000e250:	dc02      	bgt.n	9000e258 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
9000e252:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
9000e254:	843b      	strh	r3, [r7, #32]
9000e256:	e009      	b.n	9000e26c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
9000e258:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
9000e25c:	2b09      	cmp	r3, #9
9000e25e:	dc02      	bgt.n	9000e266 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
9000e260:	8bfb      	ldrh	r3, [r7, #30]
9000e262:	843b      	strh	r3, [r7, #32]
9000e264:	e002      	b.n	9000e26c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
9000e266:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000e26a:	e054      	b.n	9000e316 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
9000e26c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
9000e270:	2b09      	cmp	r3, #9
9000e272:	dd06      	ble.n	9000e282 <etharp_find_entry+0x236>
9000e274:	4b2b      	ldr	r3, [pc, #172]	; (9000e324 <etharp_find_entry+0x2d8>)
9000e276:	f240 127f 	movw	r2, #383	; 0x17f
9000e27a:	492e      	ldr	r1, [pc, #184]	; (9000e334 <etharp_find_entry+0x2e8>)
9000e27c:	482b      	ldr	r0, [pc, #172]	; (9000e32c <etharp_find_entry+0x2e0>)
9000e27e:	f002 f935 	bl	900104ec <iprintf>
    etharp_free_entry(i);
9000e282:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
9000e286:	4618      	mov	r0, r3
9000e288:	f7ff fe06 	bl	9000de98 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
9000e28c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
9000e290:	2b09      	cmp	r3, #9
9000e292:	dd06      	ble.n	9000e2a2 <etharp_find_entry+0x256>
9000e294:	4b23      	ldr	r3, [pc, #140]	; (9000e324 <etharp_find_entry+0x2d8>)
9000e296:	f240 1283 	movw	r2, #387	; 0x183
9000e29a:	4926      	ldr	r1, [pc, #152]	; (9000e334 <etharp_find_entry+0x2e8>)
9000e29c:	4823      	ldr	r0, [pc, #140]	; (9000e32c <etharp_find_entry+0x2e0>)
9000e29e:	f002 f925 	bl	900104ec <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
9000e2a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
9000e2a6:	491e      	ldr	r1, [pc, #120]	; (9000e320 <etharp_find_entry+0x2d4>)
9000e2a8:	4613      	mov	r3, r2
9000e2aa:	005b      	lsls	r3, r3, #1
9000e2ac:	4413      	add	r3, r2
9000e2ae:	00db      	lsls	r3, r3, #3
9000e2b0:	440b      	add	r3, r1
9000e2b2:	3314      	adds	r3, #20
9000e2b4:	781b      	ldrb	r3, [r3, #0]
9000e2b6:	2b00      	cmp	r3, #0
9000e2b8:	d006      	beq.n	9000e2c8 <etharp_find_entry+0x27c>
9000e2ba:	4b1a      	ldr	r3, [pc, #104]	; (9000e324 <etharp_find_entry+0x2d8>)
9000e2bc:	f44f 72c2 	mov.w	r2, #388	; 0x184
9000e2c0:	491d      	ldr	r1, [pc, #116]	; (9000e338 <etharp_find_entry+0x2ec>)
9000e2c2:	481a      	ldr	r0, [pc, #104]	; (9000e32c <etharp_find_entry+0x2e0>)
9000e2c4:	f002 f912 	bl	900104ec <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
9000e2c8:	68fb      	ldr	r3, [r7, #12]
9000e2ca:	2b00      	cmp	r3, #0
9000e2cc:	d00b      	beq.n	9000e2e6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
9000e2ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
9000e2d2:	68fb      	ldr	r3, [r7, #12]
9000e2d4:	6819      	ldr	r1, [r3, #0]
9000e2d6:	4812      	ldr	r0, [pc, #72]	; (9000e320 <etharp_find_entry+0x2d4>)
9000e2d8:	4613      	mov	r3, r2
9000e2da:	005b      	lsls	r3, r3, #1
9000e2dc:	4413      	add	r3, r2
9000e2de:	00db      	lsls	r3, r3, #3
9000e2e0:	4403      	add	r3, r0
9000e2e2:	3304      	adds	r3, #4
9000e2e4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
9000e2e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
9000e2ea:	490d      	ldr	r1, [pc, #52]	; (9000e320 <etharp_find_entry+0x2d4>)
9000e2ec:	4613      	mov	r3, r2
9000e2ee:	005b      	lsls	r3, r3, #1
9000e2f0:	4413      	add	r3, r2
9000e2f2:	00db      	lsls	r3, r3, #3
9000e2f4:	440b      	add	r3, r1
9000e2f6:	3312      	adds	r3, #18
9000e2f8:	2200      	movs	r2, #0
9000e2fa:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
9000e2fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
9000e300:	4907      	ldr	r1, [pc, #28]	; (9000e320 <etharp_find_entry+0x2d4>)
9000e302:	4613      	mov	r3, r2
9000e304:	005b      	lsls	r3, r3, #1
9000e306:	4413      	add	r3, r2
9000e308:	00db      	lsls	r3, r3, #3
9000e30a:	440b      	add	r3, r1
9000e30c:	3308      	adds	r3, #8
9000e30e:	687a      	ldr	r2, [r7, #4]
9000e310:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
9000e312:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
9000e316:	4618      	mov	r0, r3
9000e318:	3728      	adds	r7, #40	; 0x28
9000e31a:	46bd      	mov	sp, r7
9000e31c:	bd80      	pop	{r7, pc}
9000e31e:	bf00      	nop
9000e320:	2000a900 	.word	0x2000a900
9000e324:	9001400c 	.word	0x9001400c
9000e328:	90014044 	.word	0x90014044
9000e32c:	90014084 	.word	0x90014084
9000e330:	900140ac 	.word	0x900140ac
9000e334:	900140c4 	.word	0x900140c4
9000e338:	900140d8 	.word	0x900140d8

9000e33c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
9000e33c:	b580      	push	{r7, lr}
9000e33e:	b088      	sub	sp, #32
9000e340:	af02      	add	r7, sp, #8
9000e342:	60f8      	str	r0, [r7, #12]
9000e344:	60b9      	str	r1, [r7, #8]
9000e346:	607a      	str	r2, [r7, #4]
9000e348:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
9000e34a:	68fb      	ldr	r3, [r7, #12]
9000e34c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
9000e350:	2b06      	cmp	r3, #6
9000e352:	d006      	beq.n	9000e362 <etharp_update_arp_entry+0x26>
9000e354:	4b48      	ldr	r3, [pc, #288]	; (9000e478 <etharp_update_arp_entry+0x13c>)
9000e356:	f240 12a9 	movw	r2, #425	; 0x1a9
9000e35a:	4948      	ldr	r1, [pc, #288]	; (9000e47c <etharp_update_arp_entry+0x140>)
9000e35c:	4848      	ldr	r0, [pc, #288]	; (9000e480 <etharp_update_arp_entry+0x144>)
9000e35e:	f002 f8c5 	bl	900104ec <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
9000e362:	68bb      	ldr	r3, [r7, #8]
9000e364:	2b00      	cmp	r3, #0
9000e366:	d012      	beq.n	9000e38e <etharp_update_arp_entry+0x52>
9000e368:	68bb      	ldr	r3, [r7, #8]
9000e36a:	681b      	ldr	r3, [r3, #0]
9000e36c:	2b00      	cmp	r3, #0
9000e36e:	d00e      	beq.n	9000e38e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
9000e370:	68bb      	ldr	r3, [r7, #8]
9000e372:	681b      	ldr	r3, [r3, #0]
9000e374:	68f9      	ldr	r1, [r7, #12]
9000e376:	4618      	mov	r0, r3
9000e378:	f001 f8fe 	bl	9000f578 <ip4_addr_isbroadcast_u32>
9000e37c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
9000e37e:	2b00      	cmp	r3, #0
9000e380:	d105      	bne.n	9000e38e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
9000e382:	68bb      	ldr	r3, [r7, #8]
9000e384:	681b      	ldr	r3, [r3, #0]
9000e386:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
9000e38a:	2be0      	cmp	r3, #224	; 0xe0
9000e38c:	d102      	bne.n	9000e394 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
9000e38e:	f06f 030f 	mvn.w	r3, #15
9000e392:	e06c      	b.n	9000e46e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
9000e394:	78fb      	ldrb	r3, [r7, #3]
9000e396:	68fa      	ldr	r2, [r7, #12]
9000e398:	4619      	mov	r1, r3
9000e39a:	68b8      	ldr	r0, [r7, #8]
9000e39c:	f7ff fe56 	bl	9000e04c <etharp_find_entry>
9000e3a0:	4603      	mov	r3, r0
9000e3a2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
9000e3a4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
9000e3a8:	2b00      	cmp	r3, #0
9000e3aa:	da02      	bge.n	9000e3b2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
9000e3ac:	8afb      	ldrh	r3, [r7, #22]
9000e3ae:	b25b      	sxtb	r3, r3
9000e3b0:	e05d      	b.n	9000e46e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
9000e3b2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
9000e3b6:	4933      	ldr	r1, [pc, #204]	; (9000e484 <etharp_update_arp_entry+0x148>)
9000e3b8:	4613      	mov	r3, r2
9000e3ba:	005b      	lsls	r3, r3, #1
9000e3bc:	4413      	add	r3, r2
9000e3be:	00db      	lsls	r3, r3, #3
9000e3c0:	440b      	add	r3, r1
9000e3c2:	3314      	adds	r3, #20
9000e3c4:	2202      	movs	r2, #2
9000e3c6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
9000e3c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
9000e3cc:	492d      	ldr	r1, [pc, #180]	; (9000e484 <etharp_update_arp_entry+0x148>)
9000e3ce:	4613      	mov	r3, r2
9000e3d0:	005b      	lsls	r3, r3, #1
9000e3d2:	4413      	add	r3, r2
9000e3d4:	00db      	lsls	r3, r3, #3
9000e3d6:	440b      	add	r3, r1
9000e3d8:	3308      	adds	r3, #8
9000e3da:	68fa      	ldr	r2, [r7, #12]
9000e3dc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
9000e3de:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
9000e3e2:	4613      	mov	r3, r2
9000e3e4:	005b      	lsls	r3, r3, #1
9000e3e6:	4413      	add	r3, r2
9000e3e8:	00db      	lsls	r3, r3, #3
9000e3ea:	3308      	adds	r3, #8
9000e3ec:	4a25      	ldr	r2, [pc, #148]	; (9000e484 <etharp_update_arp_entry+0x148>)
9000e3ee:	4413      	add	r3, r2
9000e3f0:	3304      	adds	r3, #4
9000e3f2:	2206      	movs	r2, #6
9000e3f4:	6879      	ldr	r1, [r7, #4]
9000e3f6:	4618      	mov	r0, r3
9000e3f8:	f002 f848 	bl	9001048c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
9000e3fc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
9000e400:	4920      	ldr	r1, [pc, #128]	; (9000e484 <etharp_update_arp_entry+0x148>)
9000e402:	4613      	mov	r3, r2
9000e404:	005b      	lsls	r3, r3, #1
9000e406:	4413      	add	r3, r2
9000e408:	00db      	lsls	r3, r3, #3
9000e40a:	440b      	add	r3, r1
9000e40c:	3312      	adds	r3, #18
9000e40e:	2200      	movs	r2, #0
9000e410:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
9000e412:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
9000e416:	491b      	ldr	r1, [pc, #108]	; (9000e484 <etharp_update_arp_entry+0x148>)
9000e418:	4613      	mov	r3, r2
9000e41a:	005b      	lsls	r3, r3, #1
9000e41c:	4413      	add	r3, r2
9000e41e:	00db      	lsls	r3, r3, #3
9000e420:	440b      	add	r3, r1
9000e422:	681b      	ldr	r3, [r3, #0]
9000e424:	2b00      	cmp	r3, #0
9000e426:	d021      	beq.n	9000e46c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
9000e428:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
9000e42c:	4915      	ldr	r1, [pc, #84]	; (9000e484 <etharp_update_arp_entry+0x148>)
9000e42e:	4613      	mov	r3, r2
9000e430:	005b      	lsls	r3, r3, #1
9000e432:	4413      	add	r3, r2
9000e434:	00db      	lsls	r3, r3, #3
9000e436:	440b      	add	r3, r1
9000e438:	681b      	ldr	r3, [r3, #0]
9000e43a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
9000e43c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
9000e440:	4910      	ldr	r1, [pc, #64]	; (9000e484 <etharp_update_arp_entry+0x148>)
9000e442:	4613      	mov	r3, r2
9000e444:	005b      	lsls	r3, r3, #1
9000e446:	4413      	add	r3, r2
9000e448:	00db      	lsls	r3, r3, #3
9000e44a:	440b      	add	r3, r1
9000e44c:	2200      	movs	r2, #0
9000e44e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
9000e450:	68fb      	ldr	r3, [r7, #12]
9000e452:	f103 0226 	add.w	r2, r3, #38	; 0x26
9000e456:	f44f 6300 	mov.w	r3, #2048	; 0x800
9000e45a:	9300      	str	r3, [sp, #0]
9000e45c:	687b      	ldr	r3, [r7, #4]
9000e45e:	6939      	ldr	r1, [r7, #16]
9000e460:	68f8      	ldr	r0, [r7, #12]
9000e462:	f001 ff97 	bl	90010394 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
9000e466:	6938      	ldr	r0, [r7, #16]
9000e468:	f7f8 ff2a 	bl	900072c0 <pbuf_free>
  }
  return ERR_OK;
9000e46c:	2300      	movs	r3, #0
}
9000e46e:	4618      	mov	r0, r3
9000e470:	3718      	adds	r7, #24
9000e472:	46bd      	mov	sp, r7
9000e474:	bd80      	pop	{r7, pc}
9000e476:	bf00      	nop
9000e478:	9001400c 	.word	0x9001400c
9000e47c:	90014104 	.word	0x90014104
9000e480:	90014084 	.word	0x90014084
9000e484:	2000a900 	.word	0x2000a900

9000e488 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
9000e488:	b580      	push	{r7, lr}
9000e48a:	b084      	sub	sp, #16
9000e48c:	af00      	add	r7, sp, #0
9000e48e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
9000e490:	2300      	movs	r3, #0
9000e492:	60fb      	str	r3, [r7, #12]
9000e494:	e01e      	b.n	9000e4d4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
9000e496:	4913      	ldr	r1, [pc, #76]	; (9000e4e4 <etharp_cleanup_netif+0x5c>)
9000e498:	68fa      	ldr	r2, [r7, #12]
9000e49a:	4613      	mov	r3, r2
9000e49c:	005b      	lsls	r3, r3, #1
9000e49e:	4413      	add	r3, r2
9000e4a0:	00db      	lsls	r3, r3, #3
9000e4a2:	440b      	add	r3, r1
9000e4a4:	3314      	adds	r3, #20
9000e4a6:	781b      	ldrb	r3, [r3, #0]
9000e4a8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
9000e4aa:	7afb      	ldrb	r3, [r7, #11]
9000e4ac:	2b00      	cmp	r3, #0
9000e4ae:	d00e      	beq.n	9000e4ce <etharp_cleanup_netif+0x46>
9000e4b0:	490c      	ldr	r1, [pc, #48]	; (9000e4e4 <etharp_cleanup_netif+0x5c>)
9000e4b2:	68fa      	ldr	r2, [r7, #12]
9000e4b4:	4613      	mov	r3, r2
9000e4b6:	005b      	lsls	r3, r3, #1
9000e4b8:	4413      	add	r3, r2
9000e4ba:	00db      	lsls	r3, r3, #3
9000e4bc:	440b      	add	r3, r1
9000e4be:	3308      	adds	r3, #8
9000e4c0:	681b      	ldr	r3, [r3, #0]
9000e4c2:	687a      	ldr	r2, [r7, #4]
9000e4c4:	429a      	cmp	r2, r3
9000e4c6:	d102      	bne.n	9000e4ce <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
9000e4c8:	68f8      	ldr	r0, [r7, #12]
9000e4ca:	f7ff fce5 	bl	9000de98 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
9000e4ce:	68fb      	ldr	r3, [r7, #12]
9000e4d0:	3301      	adds	r3, #1
9000e4d2:	60fb      	str	r3, [r7, #12]
9000e4d4:	68fb      	ldr	r3, [r7, #12]
9000e4d6:	2b09      	cmp	r3, #9
9000e4d8:	dddd      	ble.n	9000e496 <etharp_cleanup_netif+0xe>
    }
  }
}
9000e4da:	bf00      	nop
9000e4dc:	bf00      	nop
9000e4de:	3710      	adds	r7, #16
9000e4e0:	46bd      	mov	sp, r7
9000e4e2:	bd80      	pop	{r7, pc}
9000e4e4:	2000a900 	.word	0x2000a900

9000e4e8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
9000e4e8:	b5b0      	push	{r4, r5, r7, lr}
9000e4ea:	b08a      	sub	sp, #40	; 0x28
9000e4ec:	af04      	add	r7, sp, #16
9000e4ee:	6078      	str	r0, [r7, #4]
9000e4f0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
9000e4f2:	683b      	ldr	r3, [r7, #0]
9000e4f4:	2b00      	cmp	r3, #0
9000e4f6:	d107      	bne.n	9000e508 <etharp_input+0x20>
9000e4f8:	4b3d      	ldr	r3, [pc, #244]	; (9000e5f0 <etharp_input+0x108>)
9000e4fa:	f240 228a 	movw	r2, #650	; 0x28a
9000e4fe:	493d      	ldr	r1, [pc, #244]	; (9000e5f4 <etharp_input+0x10c>)
9000e500:	483d      	ldr	r0, [pc, #244]	; (9000e5f8 <etharp_input+0x110>)
9000e502:	f001 fff3 	bl	900104ec <iprintf>
9000e506:	e06f      	b.n	9000e5e8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
9000e508:	687b      	ldr	r3, [r7, #4]
9000e50a:	685b      	ldr	r3, [r3, #4]
9000e50c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
9000e50e:	693b      	ldr	r3, [r7, #16]
9000e510:	881b      	ldrh	r3, [r3, #0]
9000e512:	b29b      	uxth	r3, r3
9000e514:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
9000e518:	d10c      	bne.n	9000e534 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
9000e51a:	693b      	ldr	r3, [r7, #16]
9000e51c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
9000e51e:	2b06      	cmp	r3, #6
9000e520:	d108      	bne.n	9000e534 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
9000e522:	693b      	ldr	r3, [r7, #16]
9000e524:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
9000e526:	2b04      	cmp	r3, #4
9000e528:	d104      	bne.n	9000e534 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
9000e52a:	693b      	ldr	r3, [r7, #16]
9000e52c:	885b      	ldrh	r3, [r3, #2]
9000e52e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
9000e530:	2b08      	cmp	r3, #8
9000e532:	d003      	beq.n	9000e53c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
9000e534:	6878      	ldr	r0, [r7, #4]
9000e536:	f7f8 fec3 	bl	900072c0 <pbuf_free>
    return;
9000e53a:	e055      	b.n	9000e5e8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
9000e53c:	693b      	ldr	r3, [r7, #16]
9000e53e:	330e      	adds	r3, #14
9000e540:	681b      	ldr	r3, [r3, #0]
9000e542:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
9000e544:	693b      	ldr	r3, [r7, #16]
9000e546:	3318      	adds	r3, #24
9000e548:	681b      	ldr	r3, [r3, #0]
9000e54a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
9000e54c:	683b      	ldr	r3, [r7, #0]
9000e54e:	3304      	adds	r3, #4
9000e550:	681b      	ldr	r3, [r3, #0]
9000e552:	2b00      	cmp	r3, #0
9000e554:	d102      	bne.n	9000e55c <etharp_input+0x74>
    for_us = 0;
9000e556:	2300      	movs	r3, #0
9000e558:	75fb      	strb	r3, [r7, #23]
9000e55a:	e009      	b.n	9000e570 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
9000e55c:	68ba      	ldr	r2, [r7, #8]
9000e55e:	683b      	ldr	r3, [r7, #0]
9000e560:	3304      	adds	r3, #4
9000e562:	681b      	ldr	r3, [r3, #0]
9000e564:	429a      	cmp	r2, r3
9000e566:	bf0c      	ite	eq
9000e568:	2301      	moveq	r3, #1
9000e56a:	2300      	movne	r3, #0
9000e56c:	b2db      	uxtb	r3, r3
9000e56e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
9000e570:	693b      	ldr	r3, [r7, #16]
9000e572:	f103 0208 	add.w	r2, r3, #8
9000e576:	7dfb      	ldrb	r3, [r7, #23]
9000e578:	2b00      	cmp	r3, #0
9000e57a:	d001      	beq.n	9000e580 <etharp_input+0x98>
9000e57c:	2301      	movs	r3, #1
9000e57e:	e000      	b.n	9000e582 <etharp_input+0x9a>
9000e580:	2302      	movs	r3, #2
9000e582:	f107 010c 	add.w	r1, r7, #12
9000e586:	6838      	ldr	r0, [r7, #0]
9000e588:	f7ff fed8 	bl	9000e33c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
9000e58c:	693b      	ldr	r3, [r7, #16]
9000e58e:	88db      	ldrh	r3, [r3, #6]
9000e590:	b29b      	uxth	r3, r3
9000e592:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
9000e596:	d003      	beq.n	9000e5a0 <etharp_input+0xb8>
9000e598:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
9000e59c:	d01e      	beq.n	9000e5dc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
9000e59e:	e020      	b.n	9000e5e2 <etharp_input+0xfa>
      if (for_us) {
9000e5a0:	7dfb      	ldrb	r3, [r7, #23]
9000e5a2:	2b00      	cmp	r3, #0
9000e5a4:	d01c      	beq.n	9000e5e0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
9000e5a6:	683b      	ldr	r3, [r7, #0]
9000e5a8:	f103 0026 	add.w	r0, r3, #38	; 0x26
9000e5ac:	693b      	ldr	r3, [r7, #16]
9000e5ae:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
9000e5b2:	683b      	ldr	r3, [r7, #0]
9000e5b4:	f103 0526 	add.w	r5, r3, #38	; 0x26
9000e5b8:	683b      	ldr	r3, [r7, #0]
9000e5ba:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
9000e5bc:	693a      	ldr	r2, [r7, #16]
9000e5be:	3208      	adds	r2, #8
        etharp_raw(netif,
9000e5c0:	2102      	movs	r1, #2
9000e5c2:	9103      	str	r1, [sp, #12]
9000e5c4:	f107 010c 	add.w	r1, r7, #12
9000e5c8:	9102      	str	r1, [sp, #8]
9000e5ca:	9201      	str	r2, [sp, #4]
9000e5cc:	9300      	str	r3, [sp, #0]
9000e5ce:	462b      	mov	r3, r5
9000e5d0:	4622      	mov	r2, r4
9000e5d2:	4601      	mov	r1, r0
9000e5d4:	6838      	ldr	r0, [r7, #0]
9000e5d6:	f000 faeb 	bl	9000ebb0 <etharp_raw>
      break;
9000e5da:	e001      	b.n	9000e5e0 <etharp_input+0xf8>
      break;
9000e5dc:	bf00      	nop
9000e5de:	e000      	b.n	9000e5e2 <etharp_input+0xfa>
      break;
9000e5e0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
9000e5e2:	6878      	ldr	r0, [r7, #4]
9000e5e4:	f7f8 fe6c 	bl	900072c0 <pbuf_free>
}
9000e5e8:	3718      	adds	r7, #24
9000e5ea:	46bd      	mov	sp, r7
9000e5ec:	bdb0      	pop	{r4, r5, r7, pc}
9000e5ee:	bf00      	nop
9000e5f0:	9001400c 	.word	0x9001400c
9000e5f4:	9001415c 	.word	0x9001415c
9000e5f8:	90014084 	.word	0x90014084

9000e5fc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
9000e5fc:	b580      	push	{r7, lr}
9000e5fe:	b086      	sub	sp, #24
9000e600:	af02      	add	r7, sp, #8
9000e602:	60f8      	str	r0, [r7, #12]
9000e604:	60b9      	str	r1, [r7, #8]
9000e606:	4613      	mov	r3, r2
9000e608:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
9000e60a:	79fa      	ldrb	r2, [r7, #7]
9000e60c:	4944      	ldr	r1, [pc, #272]	; (9000e720 <etharp_output_to_arp_index+0x124>)
9000e60e:	4613      	mov	r3, r2
9000e610:	005b      	lsls	r3, r3, #1
9000e612:	4413      	add	r3, r2
9000e614:	00db      	lsls	r3, r3, #3
9000e616:	440b      	add	r3, r1
9000e618:	3314      	adds	r3, #20
9000e61a:	781b      	ldrb	r3, [r3, #0]
9000e61c:	2b01      	cmp	r3, #1
9000e61e:	d806      	bhi.n	9000e62e <etharp_output_to_arp_index+0x32>
9000e620:	4b40      	ldr	r3, [pc, #256]	; (9000e724 <etharp_output_to_arp_index+0x128>)
9000e622:	f240 22ee 	movw	r2, #750	; 0x2ee
9000e626:	4940      	ldr	r1, [pc, #256]	; (9000e728 <etharp_output_to_arp_index+0x12c>)
9000e628:	4840      	ldr	r0, [pc, #256]	; (9000e72c <etharp_output_to_arp_index+0x130>)
9000e62a:	f001 ff5f 	bl	900104ec <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
9000e62e:	79fa      	ldrb	r2, [r7, #7]
9000e630:	493b      	ldr	r1, [pc, #236]	; (9000e720 <etharp_output_to_arp_index+0x124>)
9000e632:	4613      	mov	r3, r2
9000e634:	005b      	lsls	r3, r3, #1
9000e636:	4413      	add	r3, r2
9000e638:	00db      	lsls	r3, r3, #3
9000e63a:	440b      	add	r3, r1
9000e63c:	3314      	adds	r3, #20
9000e63e:	781b      	ldrb	r3, [r3, #0]
9000e640:	2b02      	cmp	r3, #2
9000e642:	d153      	bne.n	9000e6ec <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
9000e644:	79fa      	ldrb	r2, [r7, #7]
9000e646:	4936      	ldr	r1, [pc, #216]	; (9000e720 <etharp_output_to_arp_index+0x124>)
9000e648:	4613      	mov	r3, r2
9000e64a:	005b      	lsls	r3, r3, #1
9000e64c:	4413      	add	r3, r2
9000e64e:	00db      	lsls	r3, r3, #3
9000e650:	440b      	add	r3, r1
9000e652:	3312      	adds	r3, #18
9000e654:	881b      	ldrh	r3, [r3, #0]
9000e656:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
9000e65a:	d919      	bls.n	9000e690 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
9000e65c:	79fa      	ldrb	r2, [r7, #7]
9000e65e:	4613      	mov	r3, r2
9000e660:	005b      	lsls	r3, r3, #1
9000e662:	4413      	add	r3, r2
9000e664:	00db      	lsls	r3, r3, #3
9000e666:	4a2e      	ldr	r2, [pc, #184]	; (9000e720 <etharp_output_to_arp_index+0x124>)
9000e668:	4413      	add	r3, r2
9000e66a:	3304      	adds	r3, #4
9000e66c:	4619      	mov	r1, r3
9000e66e:	68f8      	ldr	r0, [r7, #12]
9000e670:	f000 fb4c 	bl	9000ed0c <etharp_request>
9000e674:	4603      	mov	r3, r0
9000e676:	2b00      	cmp	r3, #0
9000e678:	d138      	bne.n	9000e6ec <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
9000e67a:	79fa      	ldrb	r2, [r7, #7]
9000e67c:	4928      	ldr	r1, [pc, #160]	; (9000e720 <etharp_output_to_arp_index+0x124>)
9000e67e:	4613      	mov	r3, r2
9000e680:	005b      	lsls	r3, r3, #1
9000e682:	4413      	add	r3, r2
9000e684:	00db      	lsls	r3, r3, #3
9000e686:	440b      	add	r3, r1
9000e688:	3314      	adds	r3, #20
9000e68a:	2203      	movs	r2, #3
9000e68c:	701a      	strb	r2, [r3, #0]
9000e68e:	e02d      	b.n	9000e6ec <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
9000e690:	79fa      	ldrb	r2, [r7, #7]
9000e692:	4923      	ldr	r1, [pc, #140]	; (9000e720 <etharp_output_to_arp_index+0x124>)
9000e694:	4613      	mov	r3, r2
9000e696:	005b      	lsls	r3, r3, #1
9000e698:	4413      	add	r3, r2
9000e69a:	00db      	lsls	r3, r3, #3
9000e69c:	440b      	add	r3, r1
9000e69e:	3312      	adds	r3, #18
9000e6a0:	881b      	ldrh	r3, [r3, #0]
9000e6a2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
9000e6a6:	d321      	bcc.n	9000e6ec <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
9000e6a8:	79fa      	ldrb	r2, [r7, #7]
9000e6aa:	4613      	mov	r3, r2
9000e6ac:	005b      	lsls	r3, r3, #1
9000e6ae:	4413      	add	r3, r2
9000e6b0:	00db      	lsls	r3, r3, #3
9000e6b2:	4a1b      	ldr	r2, [pc, #108]	; (9000e720 <etharp_output_to_arp_index+0x124>)
9000e6b4:	4413      	add	r3, r2
9000e6b6:	1d19      	adds	r1, r3, #4
9000e6b8:	79fa      	ldrb	r2, [r7, #7]
9000e6ba:	4613      	mov	r3, r2
9000e6bc:	005b      	lsls	r3, r3, #1
9000e6be:	4413      	add	r3, r2
9000e6c0:	00db      	lsls	r3, r3, #3
9000e6c2:	3308      	adds	r3, #8
9000e6c4:	4a16      	ldr	r2, [pc, #88]	; (9000e720 <etharp_output_to_arp_index+0x124>)
9000e6c6:	4413      	add	r3, r2
9000e6c8:	3304      	adds	r3, #4
9000e6ca:	461a      	mov	r2, r3
9000e6cc:	68f8      	ldr	r0, [r7, #12]
9000e6ce:	f000 fafb 	bl	9000ecc8 <etharp_request_dst>
9000e6d2:	4603      	mov	r3, r0
9000e6d4:	2b00      	cmp	r3, #0
9000e6d6:	d109      	bne.n	9000e6ec <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
9000e6d8:	79fa      	ldrb	r2, [r7, #7]
9000e6da:	4911      	ldr	r1, [pc, #68]	; (9000e720 <etharp_output_to_arp_index+0x124>)
9000e6dc:	4613      	mov	r3, r2
9000e6de:	005b      	lsls	r3, r3, #1
9000e6e0:	4413      	add	r3, r2
9000e6e2:	00db      	lsls	r3, r3, #3
9000e6e4:	440b      	add	r3, r1
9000e6e6:	3314      	adds	r3, #20
9000e6e8:	2203      	movs	r2, #3
9000e6ea:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
9000e6ec:	68fb      	ldr	r3, [r7, #12]
9000e6ee:	f103 0126 	add.w	r1, r3, #38	; 0x26
9000e6f2:	79fa      	ldrb	r2, [r7, #7]
9000e6f4:	4613      	mov	r3, r2
9000e6f6:	005b      	lsls	r3, r3, #1
9000e6f8:	4413      	add	r3, r2
9000e6fa:	00db      	lsls	r3, r3, #3
9000e6fc:	3308      	adds	r3, #8
9000e6fe:	4a08      	ldr	r2, [pc, #32]	; (9000e720 <etharp_output_to_arp_index+0x124>)
9000e700:	4413      	add	r3, r2
9000e702:	3304      	adds	r3, #4
9000e704:	f44f 6200 	mov.w	r2, #2048	; 0x800
9000e708:	9200      	str	r2, [sp, #0]
9000e70a:	460a      	mov	r2, r1
9000e70c:	68b9      	ldr	r1, [r7, #8]
9000e70e:	68f8      	ldr	r0, [r7, #12]
9000e710:	f001 fe40 	bl	90010394 <ethernet_output>
9000e714:	4603      	mov	r3, r0
}
9000e716:	4618      	mov	r0, r3
9000e718:	3710      	adds	r7, #16
9000e71a:	46bd      	mov	sp, r7
9000e71c:	bd80      	pop	{r7, pc}
9000e71e:	bf00      	nop
9000e720:	2000a900 	.word	0x2000a900
9000e724:	9001400c 	.word	0x9001400c
9000e728:	9001417c 	.word	0x9001417c
9000e72c:	90014084 	.word	0x90014084

9000e730 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
9000e730:	b580      	push	{r7, lr}
9000e732:	b08a      	sub	sp, #40	; 0x28
9000e734:	af02      	add	r7, sp, #8
9000e736:	60f8      	str	r0, [r7, #12]
9000e738:	60b9      	str	r1, [r7, #8]
9000e73a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
9000e73c:	687b      	ldr	r3, [r7, #4]
9000e73e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
9000e740:	68fb      	ldr	r3, [r7, #12]
9000e742:	2b00      	cmp	r3, #0
9000e744:	d106      	bne.n	9000e754 <etharp_output+0x24>
9000e746:	4b73      	ldr	r3, [pc, #460]	; (9000e914 <etharp_output+0x1e4>)
9000e748:	f240 321e 	movw	r2, #798	; 0x31e
9000e74c:	4972      	ldr	r1, [pc, #456]	; (9000e918 <etharp_output+0x1e8>)
9000e74e:	4873      	ldr	r0, [pc, #460]	; (9000e91c <etharp_output+0x1ec>)
9000e750:	f001 fecc 	bl	900104ec <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
9000e754:	68bb      	ldr	r3, [r7, #8]
9000e756:	2b00      	cmp	r3, #0
9000e758:	d106      	bne.n	9000e768 <etharp_output+0x38>
9000e75a:	4b6e      	ldr	r3, [pc, #440]	; (9000e914 <etharp_output+0x1e4>)
9000e75c:	f240 321f 	movw	r2, #799	; 0x31f
9000e760:	496f      	ldr	r1, [pc, #444]	; (9000e920 <etharp_output+0x1f0>)
9000e762:	486e      	ldr	r0, [pc, #440]	; (9000e91c <etharp_output+0x1ec>)
9000e764:	f001 fec2 	bl	900104ec <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
9000e768:	687b      	ldr	r3, [r7, #4]
9000e76a:	2b00      	cmp	r3, #0
9000e76c:	d106      	bne.n	9000e77c <etharp_output+0x4c>
9000e76e:	4b69      	ldr	r3, [pc, #420]	; (9000e914 <etharp_output+0x1e4>)
9000e770:	f44f 7248 	mov.w	r2, #800	; 0x320
9000e774:	496b      	ldr	r1, [pc, #428]	; (9000e924 <etharp_output+0x1f4>)
9000e776:	4869      	ldr	r0, [pc, #420]	; (9000e91c <etharp_output+0x1ec>)
9000e778:	f001 feb8 	bl	900104ec <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
9000e77c:	687b      	ldr	r3, [r7, #4]
9000e77e:	681b      	ldr	r3, [r3, #0]
9000e780:	68f9      	ldr	r1, [r7, #12]
9000e782:	4618      	mov	r0, r3
9000e784:	f000 fef8 	bl	9000f578 <ip4_addr_isbroadcast_u32>
9000e788:	4603      	mov	r3, r0
9000e78a:	2b00      	cmp	r3, #0
9000e78c:	d002      	beq.n	9000e794 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
9000e78e:	4b66      	ldr	r3, [pc, #408]	; (9000e928 <etharp_output+0x1f8>)
9000e790:	61fb      	str	r3, [r7, #28]
9000e792:	e0af      	b.n	9000e8f4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
9000e794:	687b      	ldr	r3, [r7, #4]
9000e796:	681b      	ldr	r3, [r3, #0]
9000e798:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
9000e79c:	2be0      	cmp	r3, #224	; 0xe0
9000e79e:	d118      	bne.n	9000e7d2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
9000e7a0:	2301      	movs	r3, #1
9000e7a2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
9000e7a4:	2300      	movs	r3, #0
9000e7a6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
9000e7a8:	235e      	movs	r3, #94	; 0x5e
9000e7aa:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
9000e7ac:	687b      	ldr	r3, [r7, #4]
9000e7ae:	3301      	adds	r3, #1
9000e7b0:	781b      	ldrb	r3, [r3, #0]
9000e7b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
9000e7b6:	b2db      	uxtb	r3, r3
9000e7b8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
9000e7ba:	687b      	ldr	r3, [r7, #4]
9000e7bc:	3302      	adds	r3, #2
9000e7be:	781b      	ldrb	r3, [r3, #0]
9000e7c0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
9000e7c2:	687b      	ldr	r3, [r7, #4]
9000e7c4:	3303      	adds	r3, #3
9000e7c6:	781b      	ldrb	r3, [r3, #0]
9000e7c8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
9000e7ca:	f107 0310 	add.w	r3, r7, #16
9000e7ce:	61fb      	str	r3, [r7, #28]
9000e7d0:	e090      	b.n	9000e8f4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
9000e7d2:	687b      	ldr	r3, [r7, #4]
9000e7d4:	681a      	ldr	r2, [r3, #0]
9000e7d6:	68fb      	ldr	r3, [r7, #12]
9000e7d8:	3304      	adds	r3, #4
9000e7da:	681b      	ldr	r3, [r3, #0]
9000e7dc:	405a      	eors	r2, r3
9000e7de:	68fb      	ldr	r3, [r7, #12]
9000e7e0:	3308      	adds	r3, #8
9000e7e2:	681b      	ldr	r3, [r3, #0]
9000e7e4:	4013      	ands	r3, r2
9000e7e6:	2b00      	cmp	r3, #0
9000e7e8:	d012      	beq.n	9000e810 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
9000e7ea:	687b      	ldr	r3, [r7, #4]
9000e7ec:	681b      	ldr	r3, [r3, #0]
9000e7ee:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
9000e7f0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
9000e7f4:	4293      	cmp	r3, r2
9000e7f6:	d00b      	beq.n	9000e810 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
9000e7f8:	68fb      	ldr	r3, [r7, #12]
9000e7fa:	330c      	adds	r3, #12
9000e7fc:	681b      	ldr	r3, [r3, #0]
9000e7fe:	2b00      	cmp	r3, #0
9000e800:	d003      	beq.n	9000e80a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
9000e802:	68fb      	ldr	r3, [r7, #12]
9000e804:	330c      	adds	r3, #12
9000e806:	61bb      	str	r3, [r7, #24]
9000e808:	e002      	b.n	9000e810 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
9000e80a:	f06f 0303 	mvn.w	r3, #3
9000e80e:	e07d      	b.n	9000e90c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
9000e810:	4b46      	ldr	r3, [pc, #280]	; (9000e92c <etharp_output+0x1fc>)
9000e812:	781b      	ldrb	r3, [r3, #0]
9000e814:	4619      	mov	r1, r3
9000e816:	4a46      	ldr	r2, [pc, #280]	; (9000e930 <etharp_output+0x200>)
9000e818:	460b      	mov	r3, r1
9000e81a:	005b      	lsls	r3, r3, #1
9000e81c:	440b      	add	r3, r1
9000e81e:	00db      	lsls	r3, r3, #3
9000e820:	4413      	add	r3, r2
9000e822:	3314      	adds	r3, #20
9000e824:	781b      	ldrb	r3, [r3, #0]
9000e826:	2b01      	cmp	r3, #1
9000e828:	d925      	bls.n	9000e876 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
9000e82a:	4b40      	ldr	r3, [pc, #256]	; (9000e92c <etharp_output+0x1fc>)
9000e82c:	781b      	ldrb	r3, [r3, #0]
9000e82e:	4619      	mov	r1, r3
9000e830:	4a3f      	ldr	r2, [pc, #252]	; (9000e930 <etharp_output+0x200>)
9000e832:	460b      	mov	r3, r1
9000e834:	005b      	lsls	r3, r3, #1
9000e836:	440b      	add	r3, r1
9000e838:	00db      	lsls	r3, r3, #3
9000e83a:	4413      	add	r3, r2
9000e83c:	3308      	adds	r3, #8
9000e83e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
9000e840:	68fa      	ldr	r2, [r7, #12]
9000e842:	429a      	cmp	r2, r3
9000e844:	d117      	bne.n	9000e876 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
9000e846:	69bb      	ldr	r3, [r7, #24]
9000e848:	681a      	ldr	r2, [r3, #0]
9000e84a:	4b38      	ldr	r3, [pc, #224]	; (9000e92c <etharp_output+0x1fc>)
9000e84c:	781b      	ldrb	r3, [r3, #0]
9000e84e:	4618      	mov	r0, r3
9000e850:	4937      	ldr	r1, [pc, #220]	; (9000e930 <etharp_output+0x200>)
9000e852:	4603      	mov	r3, r0
9000e854:	005b      	lsls	r3, r3, #1
9000e856:	4403      	add	r3, r0
9000e858:	00db      	lsls	r3, r3, #3
9000e85a:	440b      	add	r3, r1
9000e85c:	3304      	adds	r3, #4
9000e85e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
9000e860:	429a      	cmp	r2, r3
9000e862:	d108      	bne.n	9000e876 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
9000e864:	4b31      	ldr	r3, [pc, #196]	; (9000e92c <etharp_output+0x1fc>)
9000e866:	781b      	ldrb	r3, [r3, #0]
9000e868:	461a      	mov	r2, r3
9000e86a:	68b9      	ldr	r1, [r7, #8]
9000e86c:	68f8      	ldr	r0, [r7, #12]
9000e86e:	f7ff fec5 	bl	9000e5fc <etharp_output_to_arp_index>
9000e872:	4603      	mov	r3, r0
9000e874:	e04a      	b.n	9000e90c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
9000e876:	2300      	movs	r3, #0
9000e878:	75fb      	strb	r3, [r7, #23]
9000e87a:	e031      	b.n	9000e8e0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
9000e87c:	7dfa      	ldrb	r2, [r7, #23]
9000e87e:	492c      	ldr	r1, [pc, #176]	; (9000e930 <etharp_output+0x200>)
9000e880:	4613      	mov	r3, r2
9000e882:	005b      	lsls	r3, r3, #1
9000e884:	4413      	add	r3, r2
9000e886:	00db      	lsls	r3, r3, #3
9000e888:	440b      	add	r3, r1
9000e88a:	3314      	adds	r3, #20
9000e88c:	781b      	ldrb	r3, [r3, #0]
9000e88e:	2b01      	cmp	r3, #1
9000e890:	d923      	bls.n	9000e8da <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
9000e892:	7dfa      	ldrb	r2, [r7, #23]
9000e894:	4926      	ldr	r1, [pc, #152]	; (9000e930 <etharp_output+0x200>)
9000e896:	4613      	mov	r3, r2
9000e898:	005b      	lsls	r3, r3, #1
9000e89a:	4413      	add	r3, r2
9000e89c:	00db      	lsls	r3, r3, #3
9000e89e:	440b      	add	r3, r1
9000e8a0:	3308      	adds	r3, #8
9000e8a2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
9000e8a4:	68fa      	ldr	r2, [r7, #12]
9000e8a6:	429a      	cmp	r2, r3
9000e8a8:	d117      	bne.n	9000e8da <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
9000e8aa:	69bb      	ldr	r3, [r7, #24]
9000e8ac:	6819      	ldr	r1, [r3, #0]
9000e8ae:	7dfa      	ldrb	r2, [r7, #23]
9000e8b0:	481f      	ldr	r0, [pc, #124]	; (9000e930 <etharp_output+0x200>)
9000e8b2:	4613      	mov	r3, r2
9000e8b4:	005b      	lsls	r3, r3, #1
9000e8b6:	4413      	add	r3, r2
9000e8b8:	00db      	lsls	r3, r3, #3
9000e8ba:	4403      	add	r3, r0
9000e8bc:	3304      	adds	r3, #4
9000e8be:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
9000e8c0:	4299      	cmp	r1, r3
9000e8c2:	d10a      	bne.n	9000e8da <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
9000e8c4:	4a19      	ldr	r2, [pc, #100]	; (9000e92c <etharp_output+0x1fc>)
9000e8c6:	7dfb      	ldrb	r3, [r7, #23]
9000e8c8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
9000e8ca:	7dfb      	ldrb	r3, [r7, #23]
9000e8cc:	461a      	mov	r2, r3
9000e8ce:	68b9      	ldr	r1, [r7, #8]
9000e8d0:	68f8      	ldr	r0, [r7, #12]
9000e8d2:	f7ff fe93 	bl	9000e5fc <etharp_output_to_arp_index>
9000e8d6:	4603      	mov	r3, r0
9000e8d8:	e018      	b.n	9000e90c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
9000e8da:	7dfb      	ldrb	r3, [r7, #23]
9000e8dc:	3301      	adds	r3, #1
9000e8de:	75fb      	strb	r3, [r7, #23]
9000e8e0:	7dfb      	ldrb	r3, [r7, #23]
9000e8e2:	2b09      	cmp	r3, #9
9000e8e4:	d9ca      	bls.n	9000e87c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
9000e8e6:	68ba      	ldr	r2, [r7, #8]
9000e8e8:	69b9      	ldr	r1, [r7, #24]
9000e8ea:	68f8      	ldr	r0, [r7, #12]
9000e8ec:	f000 f822 	bl	9000e934 <etharp_query>
9000e8f0:	4603      	mov	r3, r0
9000e8f2:	e00b      	b.n	9000e90c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
9000e8f4:	68fb      	ldr	r3, [r7, #12]
9000e8f6:	f103 0226 	add.w	r2, r3, #38	; 0x26
9000e8fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
9000e8fe:	9300      	str	r3, [sp, #0]
9000e900:	69fb      	ldr	r3, [r7, #28]
9000e902:	68b9      	ldr	r1, [r7, #8]
9000e904:	68f8      	ldr	r0, [r7, #12]
9000e906:	f001 fd45 	bl	90010394 <ethernet_output>
9000e90a:	4603      	mov	r3, r0
}
9000e90c:	4618      	mov	r0, r3
9000e90e:	3720      	adds	r7, #32
9000e910:	46bd      	mov	sp, r7
9000e912:	bd80      	pop	{r7, pc}
9000e914:	9001400c 	.word	0x9001400c
9000e918:	9001415c 	.word	0x9001415c
9000e91c:	90014084 	.word	0x90014084
9000e920:	900141ac 	.word	0x900141ac
9000e924:	9001414c 	.word	0x9001414c
9000e928:	90015b2c 	.word	0x90015b2c
9000e92c:	2000a9f0 	.word	0x2000a9f0
9000e930:	2000a900 	.word	0x2000a900

9000e934 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
9000e934:	b580      	push	{r7, lr}
9000e936:	b08c      	sub	sp, #48	; 0x30
9000e938:	af02      	add	r7, sp, #8
9000e93a:	60f8      	str	r0, [r7, #12]
9000e93c:	60b9      	str	r1, [r7, #8]
9000e93e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
9000e940:	68fb      	ldr	r3, [r7, #12]
9000e942:	3326      	adds	r3, #38	; 0x26
9000e944:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
9000e946:	23ff      	movs	r3, #255	; 0xff
9000e948:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
9000e94c:	2300      	movs	r3, #0
9000e94e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
9000e950:	68bb      	ldr	r3, [r7, #8]
9000e952:	681b      	ldr	r3, [r3, #0]
9000e954:	68f9      	ldr	r1, [r7, #12]
9000e956:	4618      	mov	r0, r3
9000e958:	f000 fe0e 	bl	9000f578 <ip4_addr_isbroadcast_u32>
9000e95c:	4603      	mov	r3, r0
9000e95e:	2b00      	cmp	r3, #0
9000e960:	d10c      	bne.n	9000e97c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
9000e962:	68bb      	ldr	r3, [r7, #8]
9000e964:	681b      	ldr	r3, [r3, #0]
9000e966:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
9000e96a:	2be0      	cmp	r3, #224	; 0xe0
9000e96c:	d006      	beq.n	9000e97c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
9000e96e:	68bb      	ldr	r3, [r7, #8]
9000e970:	2b00      	cmp	r3, #0
9000e972:	d003      	beq.n	9000e97c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
9000e974:	68bb      	ldr	r3, [r7, #8]
9000e976:	681b      	ldr	r3, [r3, #0]
9000e978:	2b00      	cmp	r3, #0
9000e97a:	d102      	bne.n	9000e982 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
9000e97c:	f06f 030f 	mvn.w	r3, #15
9000e980:	e101      	b.n	9000eb86 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
9000e982:	68fa      	ldr	r2, [r7, #12]
9000e984:	2101      	movs	r1, #1
9000e986:	68b8      	ldr	r0, [r7, #8]
9000e988:	f7ff fb60 	bl	9000e04c <etharp_find_entry>
9000e98c:	4603      	mov	r3, r0
9000e98e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
9000e990:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
9000e994:	2b00      	cmp	r3, #0
9000e996:	da02      	bge.n	9000e99e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
9000e998:	8a7b      	ldrh	r3, [r7, #18]
9000e99a:	b25b      	sxtb	r3, r3
9000e99c:	e0f3      	b.n	9000eb86 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
9000e99e:	8a7b      	ldrh	r3, [r7, #18]
9000e9a0:	2b7e      	cmp	r3, #126	; 0x7e
9000e9a2:	d906      	bls.n	9000e9b2 <etharp_query+0x7e>
9000e9a4:	4b7a      	ldr	r3, [pc, #488]	; (9000eb90 <etharp_query+0x25c>)
9000e9a6:	f240 32c1 	movw	r2, #961	; 0x3c1
9000e9aa:	497a      	ldr	r1, [pc, #488]	; (9000eb94 <etharp_query+0x260>)
9000e9ac:	487a      	ldr	r0, [pc, #488]	; (9000eb98 <etharp_query+0x264>)
9000e9ae:	f001 fd9d 	bl	900104ec <iprintf>
  i = (netif_addr_idx_t)i_err;
9000e9b2:	8a7b      	ldrh	r3, [r7, #18]
9000e9b4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
9000e9b6:	7c7a      	ldrb	r2, [r7, #17]
9000e9b8:	4978      	ldr	r1, [pc, #480]	; (9000eb9c <etharp_query+0x268>)
9000e9ba:	4613      	mov	r3, r2
9000e9bc:	005b      	lsls	r3, r3, #1
9000e9be:	4413      	add	r3, r2
9000e9c0:	00db      	lsls	r3, r3, #3
9000e9c2:	440b      	add	r3, r1
9000e9c4:	3314      	adds	r3, #20
9000e9c6:	781b      	ldrb	r3, [r3, #0]
9000e9c8:	2b00      	cmp	r3, #0
9000e9ca:	d115      	bne.n	9000e9f8 <etharp_query+0xc4>
    is_new_entry = 1;
9000e9cc:	2301      	movs	r3, #1
9000e9ce:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
9000e9d0:	7c7a      	ldrb	r2, [r7, #17]
9000e9d2:	4972      	ldr	r1, [pc, #456]	; (9000eb9c <etharp_query+0x268>)
9000e9d4:	4613      	mov	r3, r2
9000e9d6:	005b      	lsls	r3, r3, #1
9000e9d8:	4413      	add	r3, r2
9000e9da:	00db      	lsls	r3, r3, #3
9000e9dc:	440b      	add	r3, r1
9000e9de:	3314      	adds	r3, #20
9000e9e0:	2201      	movs	r2, #1
9000e9e2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
9000e9e4:	7c7a      	ldrb	r2, [r7, #17]
9000e9e6:	496d      	ldr	r1, [pc, #436]	; (9000eb9c <etharp_query+0x268>)
9000e9e8:	4613      	mov	r3, r2
9000e9ea:	005b      	lsls	r3, r3, #1
9000e9ec:	4413      	add	r3, r2
9000e9ee:	00db      	lsls	r3, r3, #3
9000e9f0:	440b      	add	r3, r1
9000e9f2:	3308      	adds	r3, #8
9000e9f4:	68fa      	ldr	r2, [r7, #12]
9000e9f6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
9000e9f8:	7c7a      	ldrb	r2, [r7, #17]
9000e9fa:	4968      	ldr	r1, [pc, #416]	; (9000eb9c <etharp_query+0x268>)
9000e9fc:	4613      	mov	r3, r2
9000e9fe:	005b      	lsls	r3, r3, #1
9000ea00:	4413      	add	r3, r2
9000ea02:	00db      	lsls	r3, r3, #3
9000ea04:	440b      	add	r3, r1
9000ea06:	3314      	adds	r3, #20
9000ea08:	781b      	ldrb	r3, [r3, #0]
9000ea0a:	2b01      	cmp	r3, #1
9000ea0c:	d011      	beq.n	9000ea32 <etharp_query+0xfe>
9000ea0e:	7c7a      	ldrb	r2, [r7, #17]
9000ea10:	4962      	ldr	r1, [pc, #392]	; (9000eb9c <etharp_query+0x268>)
9000ea12:	4613      	mov	r3, r2
9000ea14:	005b      	lsls	r3, r3, #1
9000ea16:	4413      	add	r3, r2
9000ea18:	00db      	lsls	r3, r3, #3
9000ea1a:	440b      	add	r3, r1
9000ea1c:	3314      	adds	r3, #20
9000ea1e:	781b      	ldrb	r3, [r3, #0]
9000ea20:	2b01      	cmp	r3, #1
9000ea22:	d806      	bhi.n	9000ea32 <etharp_query+0xfe>
9000ea24:	4b5a      	ldr	r3, [pc, #360]	; (9000eb90 <etharp_query+0x25c>)
9000ea26:	f240 32cd 	movw	r2, #973	; 0x3cd
9000ea2a:	495d      	ldr	r1, [pc, #372]	; (9000eba0 <etharp_query+0x26c>)
9000ea2c:	485a      	ldr	r0, [pc, #360]	; (9000eb98 <etharp_query+0x264>)
9000ea2e:	f001 fd5d 	bl	900104ec <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
9000ea32:	6a3b      	ldr	r3, [r7, #32]
9000ea34:	2b00      	cmp	r3, #0
9000ea36:	d102      	bne.n	9000ea3e <etharp_query+0x10a>
9000ea38:	687b      	ldr	r3, [r7, #4]
9000ea3a:	2b00      	cmp	r3, #0
9000ea3c:	d10c      	bne.n	9000ea58 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
9000ea3e:	68b9      	ldr	r1, [r7, #8]
9000ea40:	68f8      	ldr	r0, [r7, #12]
9000ea42:	f000 f963 	bl	9000ed0c <etharp_request>
9000ea46:	4603      	mov	r3, r0
9000ea48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
9000ea4c:	687b      	ldr	r3, [r7, #4]
9000ea4e:	2b00      	cmp	r3, #0
9000ea50:	d102      	bne.n	9000ea58 <etharp_query+0x124>
      return result;
9000ea52:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
9000ea56:	e096      	b.n	9000eb86 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
9000ea58:	687b      	ldr	r3, [r7, #4]
9000ea5a:	2b00      	cmp	r3, #0
9000ea5c:	d106      	bne.n	9000ea6c <etharp_query+0x138>
9000ea5e:	4b4c      	ldr	r3, [pc, #304]	; (9000eb90 <etharp_query+0x25c>)
9000ea60:	f240 32e1 	movw	r2, #993	; 0x3e1
9000ea64:	494f      	ldr	r1, [pc, #316]	; (9000eba4 <etharp_query+0x270>)
9000ea66:	484c      	ldr	r0, [pc, #304]	; (9000eb98 <etharp_query+0x264>)
9000ea68:	f001 fd40 	bl	900104ec <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
9000ea6c:	7c7a      	ldrb	r2, [r7, #17]
9000ea6e:	494b      	ldr	r1, [pc, #300]	; (9000eb9c <etharp_query+0x268>)
9000ea70:	4613      	mov	r3, r2
9000ea72:	005b      	lsls	r3, r3, #1
9000ea74:	4413      	add	r3, r2
9000ea76:	00db      	lsls	r3, r3, #3
9000ea78:	440b      	add	r3, r1
9000ea7a:	3314      	adds	r3, #20
9000ea7c:	781b      	ldrb	r3, [r3, #0]
9000ea7e:	2b01      	cmp	r3, #1
9000ea80:	d917      	bls.n	9000eab2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
9000ea82:	4a49      	ldr	r2, [pc, #292]	; (9000eba8 <etharp_query+0x274>)
9000ea84:	7c7b      	ldrb	r3, [r7, #17]
9000ea86:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
9000ea88:	7c7a      	ldrb	r2, [r7, #17]
9000ea8a:	4613      	mov	r3, r2
9000ea8c:	005b      	lsls	r3, r3, #1
9000ea8e:	4413      	add	r3, r2
9000ea90:	00db      	lsls	r3, r3, #3
9000ea92:	3308      	adds	r3, #8
9000ea94:	4a41      	ldr	r2, [pc, #260]	; (9000eb9c <etharp_query+0x268>)
9000ea96:	4413      	add	r3, r2
9000ea98:	3304      	adds	r3, #4
9000ea9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
9000ea9e:	9200      	str	r2, [sp, #0]
9000eaa0:	697a      	ldr	r2, [r7, #20]
9000eaa2:	6879      	ldr	r1, [r7, #4]
9000eaa4:	68f8      	ldr	r0, [r7, #12]
9000eaa6:	f001 fc75 	bl	90010394 <ethernet_output>
9000eaaa:	4603      	mov	r3, r0
9000eaac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
9000eab0:	e067      	b.n	9000eb82 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
9000eab2:	7c7a      	ldrb	r2, [r7, #17]
9000eab4:	4939      	ldr	r1, [pc, #228]	; (9000eb9c <etharp_query+0x268>)
9000eab6:	4613      	mov	r3, r2
9000eab8:	005b      	lsls	r3, r3, #1
9000eaba:	4413      	add	r3, r2
9000eabc:	00db      	lsls	r3, r3, #3
9000eabe:	440b      	add	r3, r1
9000eac0:	3314      	adds	r3, #20
9000eac2:	781b      	ldrb	r3, [r3, #0]
9000eac4:	2b01      	cmp	r3, #1
9000eac6:	d15c      	bne.n	9000eb82 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
9000eac8:	2300      	movs	r3, #0
9000eaca:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
9000eacc:	687b      	ldr	r3, [r7, #4]
9000eace:	61fb      	str	r3, [r7, #28]
    while (p) {
9000ead0:	e01c      	b.n	9000eb0c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
9000ead2:	69fb      	ldr	r3, [r7, #28]
9000ead4:	895a      	ldrh	r2, [r3, #10]
9000ead6:	69fb      	ldr	r3, [r7, #28]
9000ead8:	891b      	ldrh	r3, [r3, #8]
9000eada:	429a      	cmp	r2, r3
9000eadc:	d10a      	bne.n	9000eaf4 <etharp_query+0x1c0>
9000eade:	69fb      	ldr	r3, [r7, #28]
9000eae0:	681b      	ldr	r3, [r3, #0]
9000eae2:	2b00      	cmp	r3, #0
9000eae4:	d006      	beq.n	9000eaf4 <etharp_query+0x1c0>
9000eae6:	4b2a      	ldr	r3, [pc, #168]	; (9000eb90 <etharp_query+0x25c>)
9000eae8:	f240 32f1 	movw	r2, #1009	; 0x3f1
9000eaec:	492f      	ldr	r1, [pc, #188]	; (9000ebac <etharp_query+0x278>)
9000eaee:	482a      	ldr	r0, [pc, #168]	; (9000eb98 <etharp_query+0x264>)
9000eaf0:	f001 fcfc 	bl	900104ec <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
9000eaf4:	69fb      	ldr	r3, [r7, #28]
9000eaf6:	7b1b      	ldrb	r3, [r3, #12]
9000eaf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
9000eafc:	2b00      	cmp	r3, #0
9000eafe:	d002      	beq.n	9000eb06 <etharp_query+0x1d2>
        copy_needed = 1;
9000eb00:	2301      	movs	r3, #1
9000eb02:	61bb      	str	r3, [r7, #24]
        break;
9000eb04:	e005      	b.n	9000eb12 <etharp_query+0x1de>
      }
      p = p->next;
9000eb06:	69fb      	ldr	r3, [r7, #28]
9000eb08:	681b      	ldr	r3, [r3, #0]
9000eb0a:	61fb      	str	r3, [r7, #28]
    while (p) {
9000eb0c:	69fb      	ldr	r3, [r7, #28]
9000eb0e:	2b00      	cmp	r3, #0
9000eb10:	d1df      	bne.n	9000ead2 <etharp_query+0x19e>
    }
    if (copy_needed) {
9000eb12:	69bb      	ldr	r3, [r7, #24]
9000eb14:	2b00      	cmp	r3, #0
9000eb16:	d007      	beq.n	9000eb28 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
9000eb18:	687a      	ldr	r2, [r7, #4]
9000eb1a:	f44f 7120 	mov.w	r1, #640	; 0x280
9000eb1e:	200e      	movs	r0, #14
9000eb20:	f7f8 fe2a 	bl	90007778 <pbuf_clone>
9000eb24:	61f8      	str	r0, [r7, #28]
9000eb26:	e004      	b.n	9000eb32 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
9000eb28:	687b      	ldr	r3, [r7, #4]
9000eb2a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
9000eb2c:	69f8      	ldr	r0, [r7, #28]
9000eb2e:	f7f8 fc67 	bl	90007400 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
9000eb32:	69fb      	ldr	r3, [r7, #28]
9000eb34:	2b00      	cmp	r3, #0
9000eb36:	d021      	beq.n	9000eb7c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
9000eb38:	7c7a      	ldrb	r2, [r7, #17]
9000eb3a:	4918      	ldr	r1, [pc, #96]	; (9000eb9c <etharp_query+0x268>)
9000eb3c:	4613      	mov	r3, r2
9000eb3e:	005b      	lsls	r3, r3, #1
9000eb40:	4413      	add	r3, r2
9000eb42:	00db      	lsls	r3, r3, #3
9000eb44:	440b      	add	r3, r1
9000eb46:	681b      	ldr	r3, [r3, #0]
9000eb48:	2b00      	cmp	r3, #0
9000eb4a:	d00a      	beq.n	9000eb62 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
9000eb4c:	7c7a      	ldrb	r2, [r7, #17]
9000eb4e:	4913      	ldr	r1, [pc, #76]	; (9000eb9c <etharp_query+0x268>)
9000eb50:	4613      	mov	r3, r2
9000eb52:	005b      	lsls	r3, r3, #1
9000eb54:	4413      	add	r3, r2
9000eb56:	00db      	lsls	r3, r3, #3
9000eb58:	440b      	add	r3, r1
9000eb5a:	681b      	ldr	r3, [r3, #0]
9000eb5c:	4618      	mov	r0, r3
9000eb5e:	f7f8 fbaf 	bl	900072c0 <pbuf_free>
      }
      arp_table[i].q = p;
9000eb62:	7c7a      	ldrb	r2, [r7, #17]
9000eb64:	490d      	ldr	r1, [pc, #52]	; (9000eb9c <etharp_query+0x268>)
9000eb66:	4613      	mov	r3, r2
9000eb68:	005b      	lsls	r3, r3, #1
9000eb6a:	4413      	add	r3, r2
9000eb6c:	00db      	lsls	r3, r3, #3
9000eb6e:	440b      	add	r3, r1
9000eb70:	69fa      	ldr	r2, [r7, #28]
9000eb72:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
9000eb74:	2300      	movs	r3, #0
9000eb76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
9000eb7a:	e002      	b.n	9000eb82 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
9000eb7c:	23ff      	movs	r3, #255	; 0xff
9000eb7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
9000eb82:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
9000eb86:	4618      	mov	r0, r3
9000eb88:	3728      	adds	r7, #40	; 0x28
9000eb8a:	46bd      	mov	sp, r7
9000eb8c:	bd80      	pop	{r7, pc}
9000eb8e:	bf00      	nop
9000eb90:	9001400c 	.word	0x9001400c
9000eb94:	900141b8 	.word	0x900141b8
9000eb98:	90014084 	.word	0x90014084
9000eb9c:	2000a900 	.word	0x2000a900
9000eba0:	900141c8 	.word	0x900141c8
9000eba4:	900141ac 	.word	0x900141ac
9000eba8:	2000a9f0 	.word	0x2000a9f0
9000ebac:	900141f0 	.word	0x900141f0

9000ebb0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
9000ebb0:	b580      	push	{r7, lr}
9000ebb2:	b08a      	sub	sp, #40	; 0x28
9000ebb4:	af02      	add	r7, sp, #8
9000ebb6:	60f8      	str	r0, [r7, #12]
9000ebb8:	60b9      	str	r1, [r7, #8]
9000ebba:	607a      	str	r2, [r7, #4]
9000ebbc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
9000ebbe:	2300      	movs	r3, #0
9000ebc0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
9000ebc2:	68fb      	ldr	r3, [r7, #12]
9000ebc4:	2b00      	cmp	r3, #0
9000ebc6:	d106      	bne.n	9000ebd6 <etharp_raw+0x26>
9000ebc8:	4b3a      	ldr	r3, [pc, #232]	; (9000ecb4 <etharp_raw+0x104>)
9000ebca:	f240 4257 	movw	r2, #1111	; 0x457
9000ebce:	493a      	ldr	r1, [pc, #232]	; (9000ecb8 <etharp_raw+0x108>)
9000ebd0:	483a      	ldr	r0, [pc, #232]	; (9000ecbc <etharp_raw+0x10c>)
9000ebd2:	f001 fc8b 	bl	900104ec <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
9000ebd6:	f44f 7220 	mov.w	r2, #640	; 0x280
9000ebda:	211c      	movs	r1, #28
9000ebdc:	200e      	movs	r0, #14
9000ebde:	f7f8 f88b 	bl	90006cf8 <pbuf_alloc>
9000ebe2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
9000ebe4:	69bb      	ldr	r3, [r7, #24]
9000ebe6:	2b00      	cmp	r3, #0
9000ebe8:	d102      	bne.n	9000ebf0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
9000ebea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000ebee:	e05d      	b.n	9000ecac <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
9000ebf0:	69bb      	ldr	r3, [r7, #24]
9000ebf2:	895b      	ldrh	r3, [r3, #10]
9000ebf4:	2b1b      	cmp	r3, #27
9000ebf6:	d806      	bhi.n	9000ec06 <etharp_raw+0x56>
9000ebf8:	4b2e      	ldr	r3, [pc, #184]	; (9000ecb4 <etharp_raw+0x104>)
9000ebfa:	f240 4262 	movw	r2, #1122	; 0x462
9000ebfe:	4930      	ldr	r1, [pc, #192]	; (9000ecc0 <etharp_raw+0x110>)
9000ec00:	482e      	ldr	r0, [pc, #184]	; (9000ecbc <etharp_raw+0x10c>)
9000ec02:	f001 fc73 	bl	900104ec <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
9000ec06:	69bb      	ldr	r3, [r7, #24]
9000ec08:	685b      	ldr	r3, [r3, #4]
9000ec0a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
9000ec0c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
9000ec0e:	4618      	mov	r0, r3
9000ec10:	f7f6 ff8e 	bl	90005b30 <lwip_htons>
9000ec14:	4603      	mov	r3, r0
9000ec16:	461a      	mov	r2, r3
9000ec18:	697b      	ldr	r3, [r7, #20]
9000ec1a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
9000ec1c:	68fb      	ldr	r3, [r7, #12]
9000ec1e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
9000ec22:	2b06      	cmp	r3, #6
9000ec24:	d006      	beq.n	9000ec34 <etharp_raw+0x84>
9000ec26:	4b23      	ldr	r3, [pc, #140]	; (9000ecb4 <etharp_raw+0x104>)
9000ec28:	f240 4269 	movw	r2, #1129	; 0x469
9000ec2c:	4925      	ldr	r1, [pc, #148]	; (9000ecc4 <etharp_raw+0x114>)
9000ec2e:	4823      	ldr	r0, [pc, #140]	; (9000ecbc <etharp_raw+0x10c>)
9000ec30:	f001 fc5c 	bl	900104ec <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
9000ec34:	697b      	ldr	r3, [r7, #20]
9000ec36:	3308      	adds	r3, #8
9000ec38:	2206      	movs	r2, #6
9000ec3a:	6839      	ldr	r1, [r7, #0]
9000ec3c:	4618      	mov	r0, r3
9000ec3e:	f001 fc25 	bl	9001048c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
9000ec42:	697b      	ldr	r3, [r7, #20]
9000ec44:	3312      	adds	r3, #18
9000ec46:	2206      	movs	r2, #6
9000ec48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
9000ec4a:	4618      	mov	r0, r3
9000ec4c:	f001 fc1e 	bl	9001048c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
9000ec50:	697b      	ldr	r3, [r7, #20]
9000ec52:	330e      	adds	r3, #14
9000ec54:	6aba      	ldr	r2, [r7, #40]	; 0x28
9000ec56:	6812      	ldr	r2, [r2, #0]
9000ec58:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
9000ec5a:	697b      	ldr	r3, [r7, #20]
9000ec5c:	3318      	adds	r3, #24
9000ec5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
9000ec60:	6812      	ldr	r2, [r2, #0]
9000ec62:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
9000ec64:	697b      	ldr	r3, [r7, #20]
9000ec66:	2200      	movs	r2, #0
9000ec68:	701a      	strb	r2, [r3, #0]
9000ec6a:	2200      	movs	r2, #0
9000ec6c:	f042 0201 	orr.w	r2, r2, #1
9000ec70:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
9000ec72:	697b      	ldr	r3, [r7, #20]
9000ec74:	2200      	movs	r2, #0
9000ec76:	f042 0208 	orr.w	r2, r2, #8
9000ec7a:	709a      	strb	r2, [r3, #2]
9000ec7c:	2200      	movs	r2, #0
9000ec7e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
9000ec80:	697b      	ldr	r3, [r7, #20]
9000ec82:	2206      	movs	r2, #6
9000ec84:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
9000ec86:	697b      	ldr	r3, [r7, #20]
9000ec88:	2204      	movs	r2, #4
9000ec8a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
9000ec8c:	f640 0306 	movw	r3, #2054	; 0x806
9000ec90:	9300      	str	r3, [sp, #0]
9000ec92:	687b      	ldr	r3, [r7, #4]
9000ec94:	68ba      	ldr	r2, [r7, #8]
9000ec96:	69b9      	ldr	r1, [r7, #24]
9000ec98:	68f8      	ldr	r0, [r7, #12]
9000ec9a:	f001 fb7b 	bl	90010394 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
9000ec9e:	69b8      	ldr	r0, [r7, #24]
9000eca0:	f7f8 fb0e 	bl	900072c0 <pbuf_free>
  p = NULL;
9000eca4:	2300      	movs	r3, #0
9000eca6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
9000eca8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
9000ecac:	4618      	mov	r0, r3
9000ecae:	3720      	adds	r7, #32
9000ecb0:	46bd      	mov	sp, r7
9000ecb2:	bd80      	pop	{r7, pc}
9000ecb4:	9001400c 	.word	0x9001400c
9000ecb8:	9001415c 	.word	0x9001415c
9000ecbc:	90014084 	.word	0x90014084
9000ecc0:	9001420c 	.word	0x9001420c
9000ecc4:	90014240 	.word	0x90014240

9000ecc8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
9000ecc8:	b580      	push	{r7, lr}
9000ecca:	b088      	sub	sp, #32
9000eccc:	af04      	add	r7, sp, #16
9000ecce:	60f8      	str	r0, [r7, #12]
9000ecd0:	60b9      	str	r1, [r7, #8]
9000ecd2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
9000ecd4:	68fb      	ldr	r3, [r7, #12]
9000ecd6:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
9000ecda:	68fb      	ldr	r3, [r7, #12]
9000ecdc:	f103 0026 	add.w	r0, r3, #38	; 0x26
9000ece0:	68fb      	ldr	r3, [r7, #12]
9000ece2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
9000ece4:	2201      	movs	r2, #1
9000ece6:	9203      	str	r2, [sp, #12]
9000ece8:	68ba      	ldr	r2, [r7, #8]
9000ecea:	9202      	str	r2, [sp, #8]
9000ecec:	4a06      	ldr	r2, [pc, #24]	; (9000ed08 <etharp_request_dst+0x40>)
9000ecee:	9201      	str	r2, [sp, #4]
9000ecf0:	9300      	str	r3, [sp, #0]
9000ecf2:	4603      	mov	r3, r0
9000ecf4:	687a      	ldr	r2, [r7, #4]
9000ecf6:	68f8      	ldr	r0, [r7, #12]
9000ecf8:	f7ff ff5a 	bl	9000ebb0 <etharp_raw>
9000ecfc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
9000ecfe:	4618      	mov	r0, r3
9000ed00:	3710      	adds	r7, #16
9000ed02:	46bd      	mov	sp, r7
9000ed04:	bd80      	pop	{r7, pc}
9000ed06:	bf00      	nop
9000ed08:	90015b34 	.word	0x90015b34

9000ed0c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
9000ed0c:	b580      	push	{r7, lr}
9000ed0e:	b082      	sub	sp, #8
9000ed10:	af00      	add	r7, sp, #0
9000ed12:	6078      	str	r0, [r7, #4]
9000ed14:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
9000ed16:	4a05      	ldr	r2, [pc, #20]	; (9000ed2c <etharp_request+0x20>)
9000ed18:	6839      	ldr	r1, [r7, #0]
9000ed1a:	6878      	ldr	r0, [r7, #4]
9000ed1c:	f7ff ffd4 	bl	9000ecc8 <etharp_request_dst>
9000ed20:	4603      	mov	r3, r0
}
9000ed22:	4618      	mov	r0, r3
9000ed24:	3708      	adds	r7, #8
9000ed26:	46bd      	mov	sp, r7
9000ed28:	bd80      	pop	{r7, pc}
9000ed2a:	bf00      	nop
9000ed2c:	90015b2c 	.word	0x90015b2c

9000ed30 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
9000ed30:	b580      	push	{r7, lr}
9000ed32:	b08e      	sub	sp, #56	; 0x38
9000ed34:	af04      	add	r7, sp, #16
9000ed36:	6078      	str	r0, [r7, #4]
9000ed38:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
9000ed3a:	4b79      	ldr	r3, [pc, #484]	; (9000ef20 <icmp_input+0x1f0>)
9000ed3c:	689b      	ldr	r3, [r3, #8]
9000ed3e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
9000ed40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000ed42:	781b      	ldrb	r3, [r3, #0]
9000ed44:	f003 030f 	and.w	r3, r3, #15
9000ed48:	b2db      	uxtb	r3, r3
9000ed4a:	009b      	lsls	r3, r3, #2
9000ed4c:	b2db      	uxtb	r3, r3
9000ed4e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
9000ed50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
9000ed52:	2b13      	cmp	r3, #19
9000ed54:	f240 80cd 	bls.w	9000eef2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
9000ed58:	687b      	ldr	r3, [r7, #4]
9000ed5a:	895b      	ldrh	r3, [r3, #10]
9000ed5c:	2b03      	cmp	r3, #3
9000ed5e:	f240 80ca 	bls.w	9000eef6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
9000ed62:	687b      	ldr	r3, [r7, #4]
9000ed64:	685b      	ldr	r3, [r3, #4]
9000ed66:	781b      	ldrb	r3, [r3, #0]
9000ed68:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
9000ed6c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
9000ed70:	2b00      	cmp	r3, #0
9000ed72:	f000 80b7 	beq.w	9000eee4 <icmp_input+0x1b4>
9000ed76:	2b08      	cmp	r3, #8
9000ed78:	f040 80b7 	bne.w	9000eeea <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
9000ed7c:	4b69      	ldr	r3, [pc, #420]	; (9000ef24 <icmp_input+0x1f4>)
9000ed7e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
9000ed80:	4b67      	ldr	r3, [pc, #412]	; (9000ef20 <icmp_input+0x1f0>)
9000ed82:	695b      	ldr	r3, [r3, #20]
9000ed84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
9000ed88:	2be0      	cmp	r3, #224	; 0xe0
9000ed8a:	f000 80bb 	beq.w	9000ef04 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
9000ed8e:	4b64      	ldr	r3, [pc, #400]	; (9000ef20 <icmp_input+0x1f0>)
9000ed90:	695b      	ldr	r3, [r3, #20]
9000ed92:	4a63      	ldr	r2, [pc, #396]	; (9000ef20 <icmp_input+0x1f0>)
9000ed94:	6812      	ldr	r2, [r2, #0]
9000ed96:	4611      	mov	r1, r2
9000ed98:	4618      	mov	r0, r3
9000ed9a:	f000 fbed 	bl	9000f578 <ip4_addr_isbroadcast_u32>
9000ed9e:	4603      	mov	r3, r0
9000eda0:	2b00      	cmp	r3, #0
9000eda2:	f040 80b1 	bne.w	9000ef08 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
9000eda6:	687b      	ldr	r3, [r7, #4]
9000eda8:	891b      	ldrh	r3, [r3, #8]
9000edaa:	2b07      	cmp	r3, #7
9000edac:	f240 80a5 	bls.w	9000eefa <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
9000edb0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
9000edb2:	330e      	adds	r3, #14
9000edb4:	4619      	mov	r1, r3
9000edb6:	6878      	ldr	r0, [r7, #4]
9000edb8:	f7f8 f9ec 	bl	90007194 <pbuf_add_header>
9000edbc:	4603      	mov	r3, r0
9000edbe:	2b00      	cmp	r3, #0
9000edc0:	d04b      	beq.n	9000ee5a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
9000edc2:	687b      	ldr	r3, [r7, #4]
9000edc4:	891a      	ldrh	r2, [r3, #8]
9000edc6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
9000edc8:	4413      	add	r3, r2
9000edca:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
9000edcc:	687b      	ldr	r3, [r7, #4]
9000edce:	891b      	ldrh	r3, [r3, #8]
9000edd0:	8b7a      	ldrh	r2, [r7, #26]
9000edd2:	429a      	cmp	r2, r3
9000edd4:	f0c0 809a 	bcc.w	9000ef0c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
9000edd8:	8b7b      	ldrh	r3, [r7, #26]
9000edda:	f44f 7220 	mov.w	r2, #640	; 0x280
9000edde:	4619      	mov	r1, r3
9000ede0:	200e      	movs	r0, #14
9000ede2:	f7f7 ff89 	bl	90006cf8 <pbuf_alloc>
9000ede6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
9000ede8:	697b      	ldr	r3, [r7, #20]
9000edea:	2b00      	cmp	r3, #0
9000edec:	f000 8090 	beq.w	9000ef10 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
9000edf0:	697b      	ldr	r3, [r7, #20]
9000edf2:	895b      	ldrh	r3, [r3, #10]
9000edf4:	461a      	mov	r2, r3
9000edf6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
9000edf8:	3308      	adds	r3, #8
9000edfa:	429a      	cmp	r2, r3
9000edfc:	d203      	bcs.n	9000ee06 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
9000edfe:	6978      	ldr	r0, [r7, #20]
9000ee00:	f7f8 fa5e 	bl	900072c0 <pbuf_free>
          goto icmperr;
9000ee04:	e085      	b.n	9000ef12 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
9000ee06:	697b      	ldr	r3, [r7, #20]
9000ee08:	685b      	ldr	r3, [r3, #4]
9000ee0a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
9000ee0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
9000ee0e:	4618      	mov	r0, r3
9000ee10:	f001 fb3c 	bl	9001048c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
9000ee14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
9000ee16:	4619      	mov	r1, r3
9000ee18:	6978      	ldr	r0, [r7, #20]
9000ee1a:	f7f8 f9cb 	bl	900071b4 <pbuf_remove_header>
9000ee1e:	4603      	mov	r3, r0
9000ee20:	2b00      	cmp	r3, #0
9000ee22:	d009      	beq.n	9000ee38 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
9000ee24:	4b40      	ldr	r3, [pc, #256]	; (9000ef28 <icmp_input+0x1f8>)
9000ee26:	22b6      	movs	r2, #182	; 0xb6
9000ee28:	4940      	ldr	r1, [pc, #256]	; (9000ef2c <icmp_input+0x1fc>)
9000ee2a:	4841      	ldr	r0, [pc, #260]	; (9000ef30 <icmp_input+0x200>)
9000ee2c:	f001 fb5e 	bl	900104ec <iprintf>
          pbuf_free(r);
9000ee30:	6978      	ldr	r0, [r7, #20]
9000ee32:	f7f8 fa45 	bl	900072c0 <pbuf_free>
          goto icmperr;
9000ee36:	e06c      	b.n	9000ef12 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
9000ee38:	6879      	ldr	r1, [r7, #4]
9000ee3a:	6978      	ldr	r0, [r7, #20]
9000ee3c:	f7f8 fb58 	bl	900074f0 <pbuf_copy>
9000ee40:	4603      	mov	r3, r0
9000ee42:	2b00      	cmp	r3, #0
9000ee44:	d003      	beq.n	9000ee4e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
9000ee46:	6978      	ldr	r0, [r7, #20]
9000ee48:	f7f8 fa3a 	bl	900072c0 <pbuf_free>
          goto icmperr;
9000ee4c:	e061      	b.n	9000ef12 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
9000ee4e:	6878      	ldr	r0, [r7, #4]
9000ee50:	f7f8 fa36 	bl	900072c0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
9000ee54:	697b      	ldr	r3, [r7, #20]
9000ee56:	607b      	str	r3, [r7, #4]
9000ee58:	e00f      	b.n	9000ee7a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
9000ee5a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
9000ee5c:	330e      	adds	r3, #14
9000ee5e:	4619      	mov	r1, r3
9000ee60:	6878      	ldr	r0, [r7, #4]
9000ee62:	f7f8 f9a7 	bl	900071b4 <pbuf_remove_header>
9000ee66:	4603      	mov	r3, r0
9000ee68:	2b00      	cmp	r3, #0
9000ee6a:	d006      	beq.n	9000ee7a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
9000ee6c:	4b2e      	ldr	r3, [pc, #184]	; (9000ef28 <icmp_input+0x1f8>)
9000ee6e:	22c7      	movs	r2, #199	; 0xc7
9000ee70:	4930      	ldr	r1, [pc, #192]	; (9000ef34 <icmp_input+0x204>)
9000ee72:	482f      	ldr	r0, [pc, #188]	; (9000ef30 <icmp_input+0x200>)
9000ee74:	f001 fb3a 	bl	900104ec <iprintf>
          goto icmperr;
9000ee78:	e04b      	b.n	9000ef12 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
9000ee7a:	687b      	ldr	r3, [r7, #4]
9000ee7c:	685b      	ldr	r3, [r3, #4]
9000ee7e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
9000ee80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
9000ee82:	4619      	mov	r1, r3
9000ee84:	6878      	ldr	r0, [r7, #4]
9000ee86:	f7f8 f985 	bl	90007194 <pbuf_add_header>
9000ee8a:	4603      	mov	r3, r0
9000ee8c:	2b00      	cmp	r3, #0
9000ee8e:	d12b      	bne.n	9000eee8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
9000ee90:	687b      	ldr	r3, [r7, #4]
9000ee92:	685b      	ldr	r3, [r3, #4]
9000ee94:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
9000ee96:	69fb      	ldr	r3, [r7, #28]
9000ee98:	681a      	ldr	r2, [r3, #0]
9000ee9a:	68fb      	ldr	r3, [r7, #12]
9000ee9c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
9000ee9e:	4b20      	ldr	r3, [pc, #128]	; (9000ef20 <icmp_input+0x1f0>)
9000eea0:	691a      	ldr	r2, [r3, #16]
9000eea2:	68fb      	ldr	r3, [r7, #12]
9000eea4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
9000eea6:	693b      	ldr	r3, [r7, #16]
9000eea8:	2200      	movs	r2, #0
9000eeaa:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
9000eeac:	693b      	ldr	r3, [r7, #16]
9000eeae:	2200      	movs	r2, #0
9000eeb0:	709a      	strb	r2, [r3, #2]
9000eeb2:	2200      	movs	r2, #0
9000eeb4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
9000eeb6:	68fb      	ldr	r3, [r7, #12]
9000eeb8:	22ff      	movs	r2, #255	; 0xff
9000eeba:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
9000eebc:	68fb      	ldr	r3, [r7, #12]
9000eebe:	2200      	movs	r2, #0
9000eec0:	729a      	strb	r2, [r3, #10]
9000eec2:	2200      	movs	r2, #0
9000eec4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
9000eec6:	683b      	ldr	r3, [r7, #0]
9000eec8:	9302      	str	r3, [sp, #8]
9000eeca:	2301      	movs	r3, #1
9000eecc:	9301      	str	r3, [sp, #4]
9000eece:	2300      	movs	r3, #0
9000eed0:	9300      	str	r3, [sp, #0]
9000eed2:	23ff      	movs	r3, #255	; 0xff
9000eed4:	2200      	movs	r2, #0
9000eed6:	69f9      	ldr	r1, [r7, #28]
9000eed8:	6878      	ldr	r0, [r7, #4]
9000eeda:	f000 fa75 	bl	9000f3c8 <ip4_output_if>
9000eede:	4603      	mov	r3, r0
9000eee0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
9000eee2:	e001      	b.n	9000eee8 <icmp_input+0x1b8>
      break;
9000eee4:	bf00      	nop
9000eee6:	e000      	b.n	9000eeea <icmp_input+0x1ba>
      break;
9000eee8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
9000eeea:	6878      	ldr	r0, [r7, #4]
9000eeec:	f7f8 f9e8 	bl	900072c0 <pbuf_free>
  return;
9000eef0:	e013      	b.n	9000ef1a <icmp_input+0x1ea>
    goto lenerr;
9000eef2:	bf00      	nop
9000eef4:	e002      	b.n	9000eefc <icmp_input+0x1cc>
    goto lenerr;
9000eef6:	bf00      	nop
9000eef8:	e000      	b.n	9000eefc <icmp_input+0x1cc>
        goto lenerr;
9000eefa:	bf00      	nop
lenerr:
  pbuf_free(p);
9000eefc:	6878      	ldr	r0, [r7, #4]
9000eefe:	f7f8 f9df 	bl	900072c0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
9000ef02:	e00a      	b.n	9000ef1a <icmp_input+0x1ea>
        goto icmperr;
9000ef04:	bf00      	nop
9000ef06:	e004      	b.n	9000ef12 <icmp_input+0x1e2>
        goto icmperr;
9000ef08:	bf00      	nop
9000ef0a:	e002      	b.n	9000ef12 <icmp_input+0x1e2>
          goto icmperr;
9000ef0c:	bf00      	nop
9000ef0e:	e000      	b.n	9000ef12 <icmp_input+0x1e2>
          goto icmperr;
9000ef10:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
9000ef12:	6878      	ldr	r0, [r7, #4]
9000ef14:	f7f8 f9d4 	bl	900072c0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
9000ef18:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
9000ef1a:	3728      	adds	r7, #40	; 0x28
9000ef1c:	46bd      	mov	sp, r7
9000ef1e:	bd80      	pop	{r7, pc}
9000ef20:	20005170 	.word	0x20005170
9000ef24:	20005184 	.word	0x20005184
9000ef28:	90014284 	.word	0x90014284
9000ef2c:	900142bc 	.word	0x900142bc
9000ef30:	900142f4 	.word	0x900142f4
9000ef34:	9001431c 	.word	0x9001431c

9000ef38 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
9000ef38:	b580      	push	{r7, lr}
9000ef3a:	b082      	sub	sp, #8
9000ef3c:	af00      	add	r7, sp, #0
9000ef3e:	6078      	str	r0, [r7, #4]
9000ef40:	460b      	mov	r3, r1
9000ef42:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
9000ef44:	78fb      	ldrb	r3, [r7, #3]
9000ef46:	461a      	mov	r2, r3
9000ef48:	2103      	movs	r1, #3
9000ef4a:	6878      	ldr	r0, [r7, #4]
9000ef4c:	f000 f814 	bl	9000ef78 <icmp_send_response>
}
9000ef50:	bf00      	nop
9000ef52:	3708      	adds	r7, #8
9000ef54:	46bd      	mov	sp, r7
9000ef56:	bd80      	pop	{r7, pc}

9000ef58 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
9000ef58:	b580      	push	{r7, lr}
9000ef5a:	b082      	sub	sp, #8
9000ef5c:	af00      	add	r7, sp, #0
9000ef5e:	6078      	str	r0, [r7, #4]
9000ef60:	460b      	mov	r3, r1
9000ef62:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
9000ef64:	78fb      	ldrb	r3, [r7, #3]
9000ef66:	461a      	mov	r2, r3
9000ef68:	210b      	movs	r1, #11
9000ef6a:	6878      	ldr	r0, [r7, #4]
9000ef6c:	f000 f804 	bl	9000ef78 <icmp_send_response>
}
9000ef70:	bf00      	nop
9000ef72:	3708      	adds	r7, #8
9000ef74:	46bd      	mov	sp, r7
9000ef76:	bd80      	pop	{r7, pc}

9000ef78 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
9000ef78:	b580      	push	{r7, lr}
9000ef7a:	b08c      	sub	sp, #48	; 0x30
9000ef7c:	af04      	add	r7, sp, #16
9000ef7e:	6078      	str	r0, [r7, #4]
9000ef80:	460b      	mov	r3, r1
9000ef82:	70fb      	strb	r3, [r7, #3]
9000ef84:	4613      	mov	r3, r2
9000ef86:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
9000ef88:	f44f 7220 	mov.w	r2, #640	; 0x280
9000ef8c:	2124      	movs	r1, #36	; 0x24
9000ef8e:	2022      	movs	r0, #34	; 0x22
9000ef90:	f7f7 feb2 	bl	90006cf8 <pbuf_alloc>
9000ef94:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
9000ef96:	69fb      	ldr	r3, [r7, #28]
9000ef98:	2b00      	cmp	r3, #0
9000ef9a:	d04c      	beq.n	9000f036 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
9000ef9c:	69fb      	ldr	r3, [r7, #28]
9000ef9e:	895b      	ldrh	r3, [r3, #10]
9000efa0:	2b23      	cmp	r3, #35	; 0x23
9000efa2:	d806      	bhi.n	9000efb2 <icmp_send_response+0x3a>
9000efa4:	4b26      	ldr	r3, [pc, #152]	; (9000f040 <icmp_send_response+0xc8>)
9000efa6:	f44f 72b4 	mov.w	r2, #360	; 0x168
9000efaa:	4926      	ldr	r1, [pc, #152]	; (9000f044 <icmp_send_response+0xcc>)
9000efac:	4826      	ldr	r0, [pc, #152]	; (9000f048 <icmp_send_response+0xd0>)
9000efae:	f001 fa9d 	bl	900104ec <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
9000efb2:	687b      	ldr	r3, [r7, #4]
9000efb4:	685b      	ldr	r3, [r3, #4]
9000efb6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
9000efb8:	69fb      	ldr	r3, [r7, #28]
9000efba:	685b      	ldr	r3, [r3, #4]
9000efbc:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
9000efbe:	697b      	ldr	r3, [r7, #20]
9000efc0:	78fa      	ldrb	r2, [r7, #3]
9000efc2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
9000efc4:	697b      	ldr	r3, [r7, #20]
9000efc6:	78ba      	ldrb	r2, [r7, #2]
9000efc8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
9000efca:	697b      	ldr	r3, [r7, #20]
9000efcc:	2200      	movs	r2, #0
9000efce:	711a      	strb	r2, [r3, #4]
9000efd0:	2200      	movs	r2, #0
9000efd2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
9000efd4:	697b      	ldr	r3, [r7, #20]
9000efd6:	2200      	movs	r2, #0
9000efd8:	719a      	strb	r2, [r3, #6]
9000efda:	2200      	movs	r2, #0
9000efdc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
9000efde:	69fb      	ldr	r3, [r7, #28]
9000efe0:	685b      	ldr	r3, [r3, #4]
9000efe2:	f103 0008 	add.w	r0, r3, #8
9000efe6:	687b      	ldr	r3, [r7, #4]
9000efe8:	685b      	ldr	r3, [r3, #4]
9000efea:	221c      	movs	r2, #28
9000efec:	4619      	mov	r1, r3
9000efee:	f001 fa4d 	bl	9001048c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
9000eff2:	69bb      	ldr	r3, [r7, #24]
9000eff4:	68db      	ldr	r3, [r3, #12]
9000eff6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
9000eff8:	f107 030c 	add.w	r3, r7, #12
9000effc:	4618      	mov	r0, r3
9000effe:	f000 f825 	bl	9000f04c <ip4_route>
9000f002:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
9000f004:	693b      	ldr	r3, [r7, #16]
9000f006:	2b00      	cmp	r3, #0
9000f008:	d011      	beq.n	9000f02e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
9000f00a:	697b      	ldr	r3, [r7, #20]
9000f00c:	2200      	movs	r2, #0
9000f00e:	709a      	strb	r2, [r3, #2]
9000f010:	2200      	movs	r2, #0
9000f012:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
9000f014:	f107 020c 	add.w	r2, r7, #12
9000f018:	693b      	ldr	r3, [r7, #16]
9000f01a:	9302      	str	r3, [sp, #8]
9000f01c:	2301      	movs	r3, #1
9000f01e:	9301      	str	r3, [sp, #4]
9000f020:	2300      	movs	r3, #0
9000f022:	9300      	str	r3, [sp, #0]
9000f024:	23ff      	movs	r3, #255	; 0xff
9000f026:	2100      	movs	r1, #0
9000f028:	69f8      	ldr	r0, [r7, #28]
9000f02a:	f000 f9cd 	bl	9000f3c8 <ip4_output_if>
  }
  pbuf_free(q);
9000f02e:	69f8      	ldr	r0, [r7, #28]
9000f030:	f7f8 f946 	bl	900072c0 <pbuf_free>
9000f034:	e000      	b.n	9000f038 <icmp_send_response+0xc0>
    return;
9000f036:	bf00      	nop
}
9000f038:	3720      	adds	r7, #32
9000f03a:	46bd      	mov	sp, r7
9000f03c:	bd80      	pop	{r7, pc}
9000f03e:	bf00      	nop
9000f040:	90014284 	.word	0x90014284
9000f044:	90014350 	.word	0x90014350
9000f048:	900142f4 	.word	0x900142f4

9000f04c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
9000f04c:	b480      	push	{r7}
9000f04e:	b085      	sub	sp, #20
9000f050:	af00      	add	r7, sp, #0
9000f052:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
9000f054:	4b33      	ldr	r3, [pc, #204]	; (9000f124 <ip4_route+0xd8>)
9000f056:	681b      	ldr	r3, [r3, #0]
9000f058:	60fb      	str	r3, [r7, #12]
9000f05a:	e036      	b.n	9000f0ca <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
9000f05c:	68fb      	ldr	r3, [r7, #12]
9000f05e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
9000f062:	f003 0301 	and.w	r3, r3, #1
9000f066:	b2db      	uxtb	r3, r3
9000f068:	2b00      	cmp	r3, #0
9000f06a:	d02b      	beq.n	9000f0c4 <ip4_route+0x78>
9000f06c:	68fb      	ldr	r3, [r7, #12]
9000f06e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
9000f072:	089b      	lsrs	r3, r3, #2
9000f074:	f003 0301 	and.w	r3, r3, #1
9000f078:	b2db      	uxtb	r3, r3
9000f07a:	2b00      	cmp	r3, #0
9000f07c:	d022      	beq.n	9000f0c4 <ip4_route+0x78>
9000f07e:	68fb      	ldr	r3, [r7, #12]
9000f080:	3304      	adds	r3, #4
9000f082:	681b      	ldr	r3, [r3, #0]
9000f084:	2b00      	cmp	r3, #0
9000f086:	d01d      	beq.n	9000f0c4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
9000f088:	687b      	ldr	r3, [r7, #4]
9000f08a:	681a      	ldr	r2, [r3, #0]
9000f08c:	68fb      	ldr	r3, [r7, #12]
9000f08e:	3304      	adds	r3, #4
9000f090:	681b      	ldr	r3, [r3, #0]
9000f092:	405a      	eors	r2, r3
9000f094:	68fb      	ldr	r3, [r7, #12]
9000f096:	3308      	adds	r3, #8
9000f098:	681b      	ldr	r3, [r3, #0]
9000f09a:	4013      	ands	r3, r2
9000f09c:	2b00      	cmp	r3, #0
9000f09e:	d101      	bne.n	9000f0a4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
9000f0a0:	68fb      	ldr	r3, [r7, #12]
9000f0a2:	e038      	b.n	9000f116 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
9000f0a4:	68fb      	ldr	r3, [r7, #12]
9000f0a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
9000f0aa:	f003 0302 	and.w	r3, r3, #2
9000f0ae:	2b00      	cmp	r3, #0
9000f0b0:	d108      	bne.n	9000f0c4 <ip4_route+0x78>
9000f0b2:	687b      	ldr	r3, [r7, #4]
9000f0b4:	681a      	ldr	r2, [r3, #0]
9000f0b6:	68fb      	ldr	r3, [r7, #12]
9000f0b8:	330c      	adds	r3, #12
9000f0ba:	681b      	ldr	r3, [r3, #0]
9000f0bc:	429a      	cmp	r2, r3
9000f0be:	d101      	bne.n	9000f0c4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
9000f0c0:	68fb      	ldr	r3, [r7, #12]
9000f0c2:	e028      	b.n	9000f116 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
9000f0c4:	68fb      	ldr	r3, [r7, #12]
9000f0c6:	681b      	ldr	r3, [r3, #0]
9000f0c8:	60fb      	str	r3, [r7, #12]
9000f0ca:	68fb      	ldr	r3, [r7, #12]
9000f0cc:	2b00      	cmp	r3, #0
9000f0ce:	d1c5      	bne.n	9000f05c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
9000f0d0:	4b15      	ldr	r3, [pc, #84]	; (9000f128 <ip4_route+0xdc>)
9000f0d2:	681b      	ldr	r3, [r3, #0]
9000f0d4:	2b00      	cmp	r3, #0
9000f0d6:	d01a      	beq.n	9000f10e <ip4_route+0xc2>
9000f0d8:	4b13      	ldr	r3, [pc, #76]	; (9000f128 <ip4_route+0xdc>)
9000f0da:	681b      	ldr	r3, [r3, #0]
9000f0dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
9000f0e0:	f003 0301 	and.w	r3, r3, #1
9000f0e4:	2b00      	cmp	r3, #0
9000f0e6:	d012      	beq.n	9000f10e <ip4_route+0xc2>
9000f0e8:	4b0f      	ldr	r3, [pc, #60]	; (9000f128 <ip4_route+0xdc>)
9000f0ea:	681b      	ldr	r3, [r3, #0]
9000f0ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
9000f0f0:	f003 0304 	and.w	r3, r3, #4
9000f0f4:	2b00      	cmp	r3, #0
9000f0f6:	d00a      	beq.n	9000f10e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
9000f0f8:	4b0b      	ldr	r3, [pc, #44]	; (9000f128 <ip4_route+0xdc>)
9000f0fa:	681b      	ldr	r3, [r3, #0]
9000f0fc:	3304      	adds	r3, #4
9000f0fe:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
9000f100:	2b00      	cmp	r3, #0
9000f102:	d004      	beq.n	9000f10e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
9000f104:	687b      	ldr	r3, [r7, #4]
9000f106:	681b      	ldr	r3, [r3, #0]
9000f108:	b2db      	uxtb	r3, r3
9000f10a:	2b7f      	cmp	r3, #127	; 0x7f
9000f10c:	d101      	bne.n	9000f112 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
9000f10e:	2300      	movs	r3, #0
9000f110:	e001      	b.n	9000f116 <ip4_route+0xca>
  }

  return netif_default;
9000f112:	4b05      	ldr	r3, [pc, #20]	; (9000f128 <ip4_route+0xdc>)
9000f114:	681b      	ldr	r3, [r3, #0]
}
9000f116:	4618      	mov	r0, r3
9000f118:	3714      	adds	r7, #20
9000f11a:	46bd      	mov	sp, r7
9000f11c:	f85d 7b04 	ldr.w	r7, [sp], #4
9000f120:	4770      	bx	lr
9000f122:	bf00      	nop
9000f124:	2000a894 	.word	0x2000a894
9000f128:	2000a898 	.word	0x2000a898

9000f12c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
9000f12c:	b580      	push	{r7, lr}
9000f12e:	b082      	sub	sp, #8
9000f130:	af00      	add	r7, sp, #0
9000f132:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
9000f134:	687b      	ldr	r3, [r7, #4]
9000f136:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
9000f13a:	f003 0301 	and.w	r3, r3, #1
9000f13e:	b2db      	uxtb	r3, r3
9000f140:	2b00      	cmp	r3, #0
9000f142:	d016      	beq.n	9000f172 <ip4_input_accept+0x46>
9000f144:	687b      	ldr	r3, [r7, #4]
9000f146:	3304      	adds	r3, #4
9000f148:	681b      	ldr	r3, [r3, #0]
9000f14a:	2b00      	cmp	r3, #0
9000f14c:	d011      	beq.n	9000f172 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
9000f14e:	4b0b      	ldr	r3, [pc, #44]	; (9000f17c <ip4_input_accept+0x50>)
9000f150:	695a      	ldr	r2, [r3, #20]
9000f152:	687b      	ldr	r3, [r7, #4]
9000f154:	3304      	adds	r3, #4
9000f156:	681b      	ldr	r3, [r3, #0]
9000f158:	429a      	cmp	r2, r3
9000f15a:	d008      	beq.n	9000f16e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
9000f15c:	4b07      	ldr	r3, [pc, #28]	; (9000f17c <ip4_input_accept+0x50>)
9000f15e:	695b      	ldr	r3, [r3, #20]
9000f160:	6879      	ldr	r1, [r7, #4]
9000f162:	4618      	mov	r0, r3
9000f164:	f000 fa08 	bl	9000f578 <ip4_addr_isbroadcast_u32>
9000f168:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
9000f16a:	2b00      	cmp	r3, #0
9000f16c:	d001      	beq.n	9000f172 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
9000f16e:	2301      	movs	r3, #1
9000f170:	e000      	b.n	9000f174 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
9000f172:	2300      	movs	r3, #0
}
9000f174:	4618      	mov	r0, r3
9000f176:	3708      	adds	r7, #8
9000f178:	46bd      	mov	sp, r7
9000f17a:	bd80      	pop	{r7, pc}
9000f17c:	20005170 	.word	0x20005170

9000f180 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
9000f180:	b580      	push	{r7, lr}
9000f182:	b086      	sub	sp, #24
9000f184:	af00      	add	r7, sp, #0
9000f186:	6078      	str	r0, [r7, #4]
9000f188:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
9000f18a:	687b      	ldr	r3, [r7, #4]
9000f18c:	685b      	ldr	r3, [r3, #4]
9000f18e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
9000f190:	697b      	ldr	r3, [r7, #20]
9000f192:	781b      	ldrb	r3, [r3, #0]
9000f194:	091b      	lsrs	r3, r3, #4
9000f196:	b2db      	uxtb	r3, r3
9000f198:	2b04      	cmp	r3, #4
9000f19a:	d004      	beq.n	9000f1a6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
9000f19c:	6878      	ldr	r0, [r7, #4]
9000f19e:	f7f8 f88f 	bl	900072c0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
9000f1a2:	2300      	movs	r3, #0
9000f1a4:	e107      	b.n	9000f3b6 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
9000f1a6:	697b      	ldr	r3, [r7, #20]
9000f1a8:	781b      	ldrb	r3, [r3, #0]
9000f1aa:	f003 030f 	and.w	r3, r3, #15
9000f1ae:	b2db      	uxtb	r3, r3
9000f1b0:	009b      	lsls	r3, r3, #2
9000f1b2:	b2db      	uxtb	r3, r3
9000f1b4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
9000f1b6:	697b      	ldr	r3, [r7, #20]
9000f1b8:	885b      	ldrh	r3, [r3, #2]
9000f1ba:	b29b      	uxth	r3, r3
9000f1bc:	4618      	mov	r0, r3
9000f1be:	f7f6 fcb7 	bl	90005b30 <lwip_htons>
9000f1c2:	4603      	mov	r3, r0
9000f1c4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
9000f1c6:	687b      	ldr	r3, [r7, #4]
9000f1c8:	891b      	ldrh	r3, [r3, #8]
9000f1ca:	89ba      	ldrh	r2, [r7, #12]
9000f1cc:	429a      	cmp	r2, r3
9000f1ce:	d204      	bcs.n	9000f1da <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
9000f1d0:	89bb      	ldrh	r3, [r7, #12]
9000f1d2:	4619      	mov	r1, r3
9000f1d4:	6878      	ldr	r0, [r7, #4]
9000f1d6:	f7f7 feed 	bl	90006fb4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
9000f1da:	687b      	ldr	r3, [r7, #4]
9000f1dc:	895b      	ldrh	r3, [r3, #10]
9000f1de:	89fa      	ldrh	r2, [r7, #14]
9000f1e0:	429a      	cmp	r2, r3
9000f1e2:	d807      	bhi.n	9000f1f4 <ip4_input+0x74>
9000f1e4:	687b      	ldr	r3, [r7, #4]
9000f1e6:	891b      	ldrh	r3, [r3, #8]
9000f1e8:	89ba      	ldrh	r2, [r7, #12]
9000f1ea:	429a      	cmp	r2, r3
9000f1ec:	d802      	bhi.n	9000f1f4 <ip4_input+0x74>
9000f1ee:	89fb      	ldrh	r3, [r7, #14]
9000f1f0:	2b13      	cmp	r3, #19
9000f1f2:	d804      	bhi.n	9000f1fe <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
9000f1f4:	6878      	ldr	r0, [r7, #4]
9000f1f6:	f7f8 f863 	bl	900072c0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
9000f1fa:	2300      	movs	r3, #0
9000f1fc:	e0db      	b.n	9000f3b6 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
9000f1fe:	697b      	ldr	r3, [r7, #20]
9000f200:	691b      	ldr	r3, [r3, #16]
9000f202:	4a6f      	ldr	r2, [pc, #444]	; (9000f3c0 <ip4_input+0x240>)
9000f204:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
9000f206:	697b      	ldr	r3, [r7, #20]
9000f208:	68db      	ldr	r3, [r3, #12]
9000f20a:	4a6d      	ldr	r2, [pc, #436]	; (9000f3c0 <ip4_input+0x240>)
9000f20c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
9000f20e:	4b6c      	ldr	r3, [pc, #432]	; (9000f3c0 <ip4_input+0x240>)
9000f210:	695b      	ldr	r3, [r3, #20]
9000f212:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
9000f216:	2be0      	cmp	r3, #224	; 0xe0
9000f218:	d112      	bne.n	9000f240 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
9000f21a:	683b      	ldr	r3, [r7, #0]
9000f21c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
9000f220:	f003 0301 	and.w	r3, r3, #1
9000f224:	b2db      	uxtb	r3, r3
9000f226:	2b00      	cmp	r3, #0
9000f228:	d007      	beq.n	9000f23a <ip4_input+0xba>
9000f22a:	683b      	ldr	r3, [r7, #0]
9000f22c:	3304      	adds	r3, #4
9000f22e:	681b      	ldr	r3, [r3, #0]
9000f230:	2b00      	cmp	r3, #0
9000f232:	d002      	beq.n	9000f23a <ip4_input+0xba>
      netif = inp;
9000f234:	683b      	ldr	r3, [r7, #0]
9000f236:	613b      	str	r3, [r7, #16]
9000f238:	e02a      	b.n	9000f290 <ip4_input+0x110>
    } else {
      netif = NULL;
9000f23a:	2300      	movs	r3, #0
9000f23c:	613b      	str	r3, [r7, #16]
9000f23e:	e027      	b.n	9000f290 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
9000f240:	6838      	ldr	r0, [r7, #0]
9000f242:	f7ff ff73 	bl	9000f12c <ip4_input_accept>
9000f246:	4603      	mov	r3, r0
9000f248:	2b00      	cmp	r3, #0
9000f24a:	d002      	beq.n	9000f252 <ip4_input+0xd2>
      netif = inp;
9000f24c:	683b      	ldr	r3, [r7, #0]
9000f24e:	613b      	str	r3, [r7, #16]
9000f250:	e01e      	b.n	9000f290 <ip4_input+0x110>
    } else {
      netif = NULL;
9000f252:	2300      	movs	r3, #0
9000f254:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
9000f256:	4b5a      	ldr	r3, [pc, #360]	; (9000f3c0 <ip4_input+0x240>)
9000f258:	695b      	ldr	r3, [r3, #20]
9000f25a:	b2db      	uxtb	r3, r3
9000f25c:	2b7f      	cmp	r3, #127	; 0x7f
9000f25e:	d017      	beq.n	9000f290 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
9000f260:	4b58      	ldr	r3, [pc, #352]	; (9000f3c4 <ip4_input+0x244>)
9000f262:	681b      	ldr	r3, [r3, #0]
9000f264:	613b      	str	r3, [r7, #16]
9000f266:	e00e      	b.n	9000f286 <ip4_input+0x106>
          if (netif == inp) {
9000f268:	693a      	ldr	r2, [r7, #16]
9000f26a:	683b      	ldr	r3, [r7, #0]
9000f26c:	429a      	cmp	r2, r3
9000f26e:	d006      	beq.n	9000f27e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
9000f270:	6938      	ldr	r0, [r7, #16]
9000f272:	f7ff ff5b 	bl	9000f12c <ip4_input_accept>
9000f276:	4603      	mov	r3, r0
9000f278:	2b00      	cmp	r3, #0
9000f27a:	d108      	bne.n	9000f28e <ip4_input+0x10e>
9000f27c:	e000      	b.n	9000f280 <ip4_input+0x100>
            continue;
9000f27e:	bf00      	nop
        NETIF_FOREACH(netif) {
9000f280:	693b      	ldr	r3, [r7, #16]
9000f282:	681b      	ldr	r3, [r3, #0]
9000f284:	613b      	str	r3, [r7, #16]
9000f286:	693b      	ldr	r3, [r7, #16]
9000f288:	2b00      	cmp	r3, #0
9000f28a:	d1ed      	bne.n	9000f268 <ip4_input+0xe8>
9000f28c:	e000      	b.n	9000f290 <ip4_input+0x110>
            break;
9000f28e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
9000f290:	4b4b      	ldr	r3, [pc, #300]	; (9000f3c0 <ip4_input+0x240>)
9000f292:	691b      	ldr	r3, [r3, #16]
9000f294:	6839      	ldr	r1, [r7, #0]
9000f296:	4618      	mov	r0, r3
9000f298:	f000 f96e 	bl	9000f578 <ip4_addr_isbroadcast_u32>
9000f29c:	4603      	mov	r3, r0
9000f29e:	2b00      	cmp	r3, #0
9000f2a0:	d105      	bne.n	9000f2ae <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
9000f2a2:	4b47      	ldr	r3, [pc, #284]	; (9000f3c0 <ip4_input+0x240>)
9000f2a4:	691b      	ldr	r3, [r3, #16]
9000f2a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
9000f2aa:	2be0      	cmp	r3, #224	; 0xe0
9000f2ac:	d104      	bne.n	9000f2b8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
9000f2ae:	6878      	ldr	r0, [r7, #4]
9000f2b0:	f7f8 f806 	bl	900072c0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
9000f2b4:	2300      	movs	r3, #0
9000f2b6:	e07e      	b.n	9000f3b6 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
9000f2b8:	693b      	ldr	r3, [r7, #16]
9000f2ba:	2b00      	cmp	r3, #0
9000f2bc:	d104      	bne.n	9000f2c8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
9000f2be:	6878      	ldr	r0, [r7, #4]
9000f2c0:	f7f7 fffe 	bl	900072c0 <pbuf_free>
    return ERR_OK;
9000f2c4:	2300      	movs	r3, #0
9000f2c6:	e076      	b.n	9000f3b6 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
9000f2c8:	697b      	ldr	r3, [r7, #20]
9000f2ca:	88db      	ldrh	r3, [r3, #6]
9000f2cc:	b29b      	uxth	r3, r3
9000f2ce:	461a      	mov	r2, r3
9000f2d0:	f64f 733f 	movw	r3, #65343	; 0xff3f
9000f2d4:	4013      	ands	r3, r2
9000f2d6:	2b00      	cmp	r3, #0
9000f2d8:	d00b      	beq.n	9000f2f2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
9000f2da:	6878      	ldr	r0, [r7, #4]
9000f2dc:	f000 fc92 	bl	9000fc04 <ip4_reass>
9000f2e0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
9000f2e2:	687b      	ldr	r3, [r7, #4]
9000f2e4:	2b00      	cmp	r3, #0
9000f2e6:	d101      	bne.n	9000f2ec <ip4_input+0x16c>
      return ERR_OK;
9000f2e8:	2300      	movs	r3, #0
9000f2ea:	e064      	b.n	9000f3b6 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
9000f2ec:	687b      	ldr	r3, [r7, #4]
9000f2ee:	685b      	ldr	r3, [r3, #4]
9000f2f0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
9000f2f2:	4a33      	ldr	r2, [pc, #204]	; (9000f3c0 <ip4_input+0x240>)
9000f2f4:	693b      	ldr	r3, [r7, #16]
9000f2f6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
9000f2f8:	4a31      	ldr	r2, [pc, #196]	; (9000f3c0 <ip4_input+0x240>)
9000f2fa:	683b      	ldr	r3, [r7, #0]
9000f2fc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
9000f2fe:	4a30      	ldr	r2, [pc, #192]	; (9000f3c0 <ip4_input+0x240>)
9000f300:	697b      	ldr	r3, [r7, #20]
9000f302:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
9000f304:	697b      	ldr	r3, [r7, #20]
9000f306:	781b      	ldrb	r3, [r3, #0]
9000f308:	f003 030f 	and.w	r3, r3, #15
9000f30c:	b2db      	uxtb	r3, r3
9000f30e:	009b      	lsls	r3, r3, #2
9000f310:	b2db      	uxtb	r3, r3
9000f312:	b29a      	uxth	r2, r3
9000f314:	4b2a      	ldr	r3, [pc, #168]	; (9000f3c0 <ip4_input+0x240>)
9000f316:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
9000f318:	89fb      	ldrh	r3, [r7, #14]
9000f31a:	4619      	mov	r1, r3
9000f31c:	6878      	ldr	r0, [r7, #4]
9000f31e:	f7f7 ff49 	bl	900071b4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
9000f322:	697b      	ldr	r3, [r7, #20]
9000f324:	7a5b      	ldrb	r3, [r3, #9]
9000f326:	2b11      	cmp	r3, #17
9000f328:	d006      	beq.n	9000f338 <ip4_input+0x1b8>
9000f32a:	2b11      	cmp	r3, #17
9000f32c:	dc13      	bgt.n	9000f356 <ip4_input+0x1d6>
9000f32e:	2b01      	cmp	r3, #1
9000f330:	d00c      	beq.n	9000f34c <ip4_input+0x1cc>
9000f332:	2b06      	cmp	r3, #6
9000f334:	d005      	beq.n	9000f342 <ip4_input+0x1c2>
9000f336:	e00e      	b.n	9000f356 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
9000f338:	6839      	ldr	r1, [r7, #0]
9000f33a:	6878      	ldr	r0, [r7, #4]
9000f33c:	f7fe fc68 	bl	9000dc10 <udp_input>
        break;
9000f340:	e026      	b.n	9000f390 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
9000f342:	6839      	ldr	r1, [r7, #0]
9000f344:	6878      	ldr	r0, [r7, #4]
9000f346:	f7fa f889 	bl	9000945c <tcp_input>
        break;
9000f34a:	e021      	b.n	9000f390 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
9000f34c:	6839      	ldr	r1, [r7, #0]
9000f34e:	6878      	ldr	r0, [r7, #4]
9000f350:	f7ff fcee 	bl	9000ed30 <icmp_input>
        break;
9000f354:	e01c      	b.n	9000f390 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
9000f356:	4b1a      	ldr	r3, [pc, #104]	; (9000f3c0 <ip4_input+0x240>)
9000f358:	695b      	ldr	r3, [r3, #20]
9000f35a:	6939      	ldr	r1, [r7, #16]
9000f35c:	4618      	mov	r0, r3
9000f35e:	f000 f90b 	bl	9000f578 <ip4_addr_isbroadcast_u32>
9000f362:	4603      	mov	r3, r0
9000f364:	2b00      	cmp	r3, #0
9000f366:	d10f      	bne.n	9000f388 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
9000f368:	4b15      	ldr	r3, [pc, #84]	; (9000f3c0 <ip4_input+0x240>)
9000f36a:	695b      	ldr	r3, [r3, #20]
9000f36c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
9000f370:	2be0      	cmp	r3, #224	; 0xe0
9000f372:	d009      	beq.n	9000f388 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
9000f374:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
9000f378:	4619      	mov	r1, r3
9000f37a:	6878      	ldr	r0, [r7, #4]
9000f37c:	f7f7 ff8d 	bl	9000729a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
9000f380:	2102      	movs	r1, #2
9000f382:	6878      	ldr	r0, [r7, #4]
9000f384:	f7ff fdd8 	bl	9000ef38 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
9000f388:	6878      	ldr	r0, [r7, #4]
9000f38a:	f7f7 ff99 	bl	900072c0 <pbuf_free>
        break;
9000f38e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
9000f390:	4b0b      	ldr	r3, [pc, #44]	; (9000f3c0 <ip4_input+0x240>)
9000f392:	2200      	movs	r2, #0
9000f394:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
9000f396:	4b0a      	ldr	r3, [pc, #40]	; (9000f3c0 <ip4_input+0x240>)
9000f398:	2200      	movs	r2, #0
9000f39a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
9000f39c:	4b08      	ldr	r3, [pc, #32]	; (9000f3c0 <ip4_input+0x240>)
9000f39e:	2200      	movs	r2, #0
9000f3a0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
9000f3a2:	4b07      	ldr	r3, [pc, #28]	; (9000f3c0 <ip4_input+0x240>)
9000f3a4:	2200      	movs	r2, #0
9000f3a6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
9000f3a8:	4b05      	ldr	r3, [pc, #20]	; (9000f3c0 <ip4_input+0x240>)
9000f3aa:	2200      	movs	r2, #0
9000f3ac:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
9000f3ae:	4b04      	ldr	r3, [pc, #16]	; (9000f3c0 <ip4_input+0x240>)
9000f3b0:	2200      	movs	r2, #0
9000f3b2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
9000f3b4:	2300      	movs	r3, #0
}
9000f3b6:	4618      	mov	r0, r3
9000f3b8:	3718      	adds	r7, #24
9000f3ba:	46bd      	mov	sp, r7
9000f3bc:	bd80      	pop	{r7, pc}
9000f3be:	bf00      	nop
9000f3c0:	20005170 	.word	0x20005170
9000f3c4:	2000a894 	.word	0x2000a894

9000f3c8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
9000f3c8:	b580      	push	{r7, lr}
9000f3ca:	b08a      	sub	sp, #40	; 0x28
9000f3cc:	af04      	add	r7, sp, #16
9000f3ce:	60f8      	str	r0, [r7, #12]
9000f3d0:	60b9      	str	r1, [r7, #8]
9000f3d2:	607a      	str	r2, [r7, #4]
9000f3d4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
9000f3d6:	68bb      	ldr	r3, [r7, #8]
9000f3d8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
9000f3da:	687b      	ldr	r3, [r7, #4]
9000f3dc:	2b00      	cmp	r3, #0
9000f3de:	d009      	beq.n	9000f3f4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
9000f3e0:	68bb      	ldr	r3, [r7, #8]
9000f3e2:	2b00      	cmp	r3, #0
9000f3e4:	d003      	beq.n	9000f3ee <ip4_output_if+0x26>
9000f3e6:	68bb      	ldr	r3, [r7, #8]
9000f3e8:	681b      	ldr	r3, [r3, #0]
9000f3ea:	2b00      	cmp	r3, #0
9000f3ec:	d102      	bne.n	9000f3f4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
9000f3ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000f3f0:	3304      	adds	r3, #4
9000f3f2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
9000f3f4:	78fa      	ldrb	r2, [r7, #3]
9000f3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000f3f8:	9302      	str	r3, [sp, #8]
9000f3fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
9000f3fe:	9301      	str	r3, [sp, #4]
9000f400:	f897 3020 	ldrb.w	r3, [r7, #32]
9000f404:	9300      	str	r3, [sp, #0]
9000f406:	4613      	mov	r3, r2
9000f408:	687a      	ldr	r2, [r7, #4]
9000f40a:	6979      	ldr	r1, [r7, #20]
9000f40c:	68f8      	ldr	r0, [r7, #12]
9000f40e:	f000 f805 	bl	9000f41c <ip4_output_if_src>
9000f412:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
9000f414:	4618      	mov	r0, r3
9000f416:	3718      	adds	r7, #24
9000f418:	46bd      	mov	sp, r7
9000f41a:	bd80      	pop	{r7, pc}

9000f41c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
9000f41c:	b580      	push	{r7, lr}
9000f41e:	b088      	sub	sp, #32
9000f420:	af00      	add	r7, sp, #0
9000f422:	60f8      	str	r0, [r7, #12]
9000f424:	60b9      	str	r1, [r7, #8]
9000f426:	607a      	str	r2, [r7, #4]
9000f428:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
9000f42a:	68fb      	ldr	r3, [r7, #12]
9000f42c:	7b9b      	ldrb	r3, [r3, #14]
9000f42e:	2b01      	cmp	r3, #1
9000f430:	d006      	beq.n	9000f440 <ip4_output_if_src+0x24>
9000f432:	4b4b      	ldr	r3, [pc, #300]	; (9000f560 <ip4_output_if_src+0x144>)
9000f434:	f44f 7255 	mov.w	r2, #852	; 0x354
9000f438:	494a      	ldr	r1, [pc, #296]	; (9000f564 <ip4_output_if_src+0x148>)
9000f43a:	484b      	ldr	r0, [pc, #300]	; (9000f568 <ip4_output_if_src+0x14c>)
9000f43c:	f001 f856 	bl	900104ec <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
9000f440:	687b      	ldr	r3, [r7, #4]
9000f442:	2b00      	cmp	r3, #0
9000f444:	d060      	beq.n	9000f508 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
9000f446:	2314      	movs	r3, #20
9000f448:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
9000f44a:	2114      	movs	r1, #20
9000f44c:	68f8      	ldr	r0, [r7, #12]
9000f44e:	f7f7 fea1 	bl	90007194 <pbuf_add_header>
9000f452:	4603      	mov	r3, r0
9000f454:	2b00      	cmp	r3, #0
9000f456:	d002      	beq.n	9000f45e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
9000f458:	f06f 0301 	mvn.w	r3, #1
9000f45c:	e07c      	b.n	9000f558 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
9000f45e:	68fb      	ldr	r3, [r7, #12]
9000f460:	685b      	ldr	r3, [r3, #4]
9000f462:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
9000f464:	68fb      	ldr	r3, [r7, #12]
9000f466:	895b      	ldrh	r3, [r3, #10]
9000f468:	2b13      	cmp	r3, #19
9000f46a:	d806      	bhi.n	9000f47a <ip4_output_if_src+0x5e>
9000f46c:	4b3c      	ldr	r3, [pc, #240]	; (9000f560 <ip4_output_if_src+0x144>)
9000f46e:	f44f 7262 	mov.w	r2, #904	; 0x388
9000f472:	493e      	ldr	r1, [pc, #248]	; (9000f56c <ip4_output_if_src+0x150>)
9000f474:	483c      	ldr	r0, [pc, #240]	; (9000f568 <ip4_output_if_src+0x14c>)
9000f476:	f001 f839 	bl	900104ec <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
9000f47a:	69fb      	ldr	r3, [r7, #28]
9000f47c:	78fa      	ldrb	r2, [r7, #3]
9000f47e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
9000f480:	69fb      	ldr	r3, [r7, #28]
9000f482:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
9000f486:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
9000f488:	687b      	ldr	r3, [r7, #4]
9000f48a:	681a      	ldr	r2, [r3, #0]
9000f48c:	69fb      	ldr	r3, [r7, #28]
9000f48e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
9000f490:	8b7b      	ldrh	r3, [r7, #26]
9000f492:	089b      	lsrs	r3, r3, #2
9000f494:	b29b      	uxth	r3, r3
9000f496:	b2db      	uxtb	r3, r3
9000f498:	f043 0340 	orr.w	r3, r3, #64	; 0x40
9000f49c:	b2da      	uxtb	r2, r3
9000f49e:	69fb      	ldr	r3, [r7, #28]
9000f4a0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
9000f4a2:	69fb      	ldr	r3, [r7, #28]
9000f4a4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
9000f4a8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
9000f4aa:	68fb      	ldr	r3, [r7, #12]
9000f4ac:	891b      	ldrh	r3, [r3, #8]
9000f4ae:	4618      	mov	r0, r3
9000f4b0:	f7f6 fb3e 	bl	90005b30 <lwip_htons>
9000f4b4:	4603      	mov	r3, r0
9000f4b6:	461a      	mov	r2, r3
9000f4b8:	69fb      	ldr	r3, [r7, #28]
9000f4ba:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
9000f4bc:	69fb      	ldr	r3, [r7, #28]
9000f4be:	2200      	movs	r2, #0
9000f4c0:	719a      	strb	r2, [r3, #6]
9000f4c2:	2200      	movs	r2, #0
9000f4c4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
9000f4c6:	4b2a      	ldr	r3, [pc, #168]	; (9000f570 <ip4_output_if_src+0x154>)
9000f4c8:	881b      	ldrh	r3, [r3, #0]
9000f4ca:	4618      	mov	r0, r3
9000f4cc:	f7f6 fb30 	bl	90005b30 <lwip_htons>
9000f4d0:	4603      	mov	r3, r0
9000f4d2:	461a      	mov	r2, r3
9000f4d4:	69fb      	ldr	r3, [r7, #28]
9000f4d6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
9000f4d8:	4b25      	ldr	r3, [pc, #148]	; (9000f570 <ip4_output_if_src+0x154>)
9000f4da:	881b      	ldrh	r3, [r3, #0]
9000f4dc:	3301      	adds	r3, #1
9000f4de:	b29a      	uxth	r2, r3
9000f4e0:	4b23      	ldr	r3, [pc, #140]	; (9000f570 <ip4_output_if_src+0x154>)
9000f4e2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
9000f4e4:	68bb      	ldr	r3, [r7, #8]
9000f4e6:	2b00      	cmp	r3, #0
9000f4e8:	d104      	bne.n	9000f4f4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
9000f4ea:	4b22      	ldr	r3, [pc, #136]	; (9000f574 <ip4_output_if_src+0x158>)
9000f4ec:	681a      	ldr	r2, [r3, #0]
9000f4ee:	69fb      	ldr	r3, [r7, #28]
9000f4f0:	60da      	str	r2, [r3, #12]
9000f4f2:	e003      	b.n	9000f4fc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
9000f4f4:	68bb      	ldr	r3, [r7, #8]
9000f4f6:	681a      	ldr	r2, [r3, #0]
9000f4f8:	69fb      	ldr	r3, [r7, #28]
9000f4fa:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
9000f4fc:	69fb      	ldr	r3, [r7, #28]
9000f4fe:	2200      	movs	r2, #0
9000f500:	729a      	strb	r2, [r3, #10]
9000f502:	2200      	movs	r2, #0
9000f504:	72da      	strb	r2, [r3, #11]
9000f506:	e00f      	b.n	9000f528 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
9000f508:	68fb      	ldr	r3, [r7, #12]
9000f50a:	895b      	ldrh	r3, [r3, #10]
9000f50c:	2b13      	cmp	r3, #19
9000f50e:	d802      	bhi.n	9000f516 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
9000f510:	f06f 0301 	mvn.w	r3, #1
9000f514:	e020      	b.n	9000f558 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
9000f516:	68fb      	ldr	r3, [r7, #12]
9000f518:	685b      	ldr	r3, [r3, #4]
9000f51a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
9000f51c:	69fb      	ldr	r3, [r7, #28]
9000f51e:	691b      	ldr	r3, [r3, #16]
9000f520:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
9000f522:	f107 0314 	add.w	r3, r7, #20
9000f526:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
9000f528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000f52a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
9000f52c:	2b00      	cmp	r3, #0
9000f52e:	d00c      	beq.n	9000f54a <ip4_output_if_src+0x12e>
9000f530:	68fb      	ldr	r3, [r7, #12]
9000f532:	891a      	ldrh	r2, [r3, #8]
9000f534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000f536:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
9000f538:	429a      	cmp	r2, r3
9000f53a:	d906      	bls.n	9000f54a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
9000f53c:	687a      	ldr	r2, [r7, #4]
9000f53e:	6b39      	ldr	r1, [r7, #48]	; 0x30
9000f540:	68f8      	ldr	r0, [r7, #12]
9000f542:	f000 fd53 	bl	9000ffec <ip4_frag>
9000f546:	4603      	mov	r3, r0
9000f548:	e006      	b.n	9000f558 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
9000f54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000f54c:	695b      	ldr	r3, [r3, #20]
9000f54e:	687a      	ldr	r2, [r7, #4]
9000f550:	68f9      	ldr	r1, [r7, #12]
9000f552:	6b38      	ldr	r0, [r7, #48]	; 0x30
9000f554:	4798      	blx	r3
9000f556:	4603      	mov	r3, r0
}
9000f558:	4618      	mov	r0, r3
9000f55a:	3720      	adds	r7, #32
9000f55c:	46bd      	mov	sp, r7
9000f55e:	bd80      	pop	{r7, pc}
9000f560:	9001437c 	.word	0x9001437c
9000f564:	900143b0 	.word	0x900143b0
9000f568:	900143bc 	.word	0x900143bc
9000f56c:	900143e4 	.word	0x900143e4
9000f570:	2000a9f2 	.word	0x2000a9f2
9000f574:	90015b28 	.word	0x90015b28

9000f578 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
9000f578:	b480      	push	{r7}
9000f57a:	b085      	sub	sp, #20
9000f57c:	af00      	add	r7, sp, #0
9000f57e:	6078      	str	r0, [r7, #4]
9000f580:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
9000f582:	687b      	ldr	r3, [r7, #4]
9000f584:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
9000f586:	687b      	ldr	r3, [r7, #4]
9000f588:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
9000f58c:	d002      	beq.n	9000f594 <ip4_addr_isbroadcast_u32+0x1c>
9000f58e:	687b      	ldr	r3, [r7, #4]
9000f590:	2b00      	cmp	r3, #0
9000f592:	d101      	bne.n	9000f598 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
9000f594:	2301      	movs	r3, #1
9000f596:	e02a      	b.n	9000f5ee <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
9000f598:	683b      	ldr	r3, [r7, #0]
9000f59a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
9000f59e:	f003 0302 	and.w	r3, r3, #2
9000f5a2:	2b00      	cmp	r3, #0
9000f5a4:	d101      	bne.n	9000f5aa <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
9000f5a6:	2300      	movs	r3, #0
9000f5a8:	e021      	b.n	9000f5ee <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
9000f5aa:	683b      	ldr	r3, [r7, #0]
9000f5ac:	3304      	adds	r3, #4
9000f5ae:	681b      	ldr	r3, [r3, #0]
9000f5b0:	687a      	ldr	r2, [r7, #4]
9000f5b2:	429a      	cmp	r2, r3
9000f5b4:	d101      	bne.n	9000f5ba <ip4_addr_isbroadcast_u32+0x42>
    return 0;
9000f5b6:	2300      	movs	r3, #0
9000f5b8:	e019      	b.n	9000f5ee <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
9000f5ba:	68fa      	ldr	r2, [r7, #12]
9000f5bc:	683b      	ldr	r3, [r7, #0]
9000f5be:	3304      	adds	r3, #4
9000f5c0:	681b      	ldr	r3, [r3, #0]
9000f5c2:	405a      	eors	r2, r3
9000f5c4:	683b      	ldr	r3, [r7, #0]
9000f5c6:	3308      	adds	r3, #8
9000f5c8:	681b      	ldr	r3, [r3, #0]
9000f5ca:	4013      	ands	r3, r2
9000f5cc:	2b00      	cmp	r3, #0
9000f5ce:	d10d      	bne.n	9000f5ec <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
9000f5d0:	683b      	ldr	r3, [r7, #0]
9000f5d2:	3308      	adds	r3, #8
9000f5d4:	681b      	ldr	r3, [r3, #0]
9000f5d6:	43da      	mvns	r2, r3
9000f5d8:	687b      	ldr	r3, [r7, #4]
9000f5da:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
9000f5dc:	683b      	ldr	r3, [r7, #0]
9000f5de:	3308      	adds	r3, #8
9000f5e0:	681b      	ldr	r3, [r3, #0]
9000f5e2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
9000f5e4:	429a      	cmp	r2, r3
9000f5e6:	d101      	bne.n	9000f5ec <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
9000f5e8:	2301      	movs	r3, #1
9000f5ea:	e000      	b.n	9000f5ee <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
9000f5ec:	2300      	movs	r3, #0
  }
}
9000f5ee:	4618      	mov	r0, r3
9000f5f0:	3714      	adds	r7, #20
9000f5f2:	46bd      	mov	sp, r7
9000f5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
9000f5f8:	4770      	bx	lr
	...

9000f5fc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
9000f5fc:	b580      	push	{r7, lr}
9000f5fe:	b084      	sub	sp, #16
9000f600:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
9000f602:	2300      	movs	r3, #0
9000f604:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
9000f606:	4b12      	ldr	r3, [pc, #72]	; (9000f650 <ip_reass_tmr+0x54>)
9000f608:	681b      	ldr	r3, [r3, #0]
9000f60a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
9000f60c:	e018      	b.n	9000f640 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
9000f60e:	68fb      	ldr	r3, [r7, #12]
9000f610:	7fdb      	ldrb	r3, [r3, #31]
9000f612:	2b00      	cmp	r3, #0
9000f614:	d00b      	beq.n	9000f62e <ip_reass_tmr+0x32>
      r->timer--;
9000f616:	68fb      	ldr	r3, [r7, #12]
9000f618:	7fdb      	ldrb	r3, [r3, #31]
9000f61a:	3b01      	subs	r3, #1
9000f61c:	b2da      	uxtb	r2, r3
9000f61e:	68fb      	ldr	r3, [r7, #12]
9000f620:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
9000f622:	68fb      	ldr	r3, [r7, #12]
9000f624:	60bb      	str	r3, [r7, #8]
      r = r->next;
9000f626:	68fb      	ldr	r3, [r7, #12]
9000f628:	681b      	ldr	r3, [r3, #0]
9000f62a:	60fb      	str	r3, [r7, #12]
9000f62c:	e008      	b.n	9000f640 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
9000f62e:	68fb      	ldr	r3, [r7, #12]
9000f630:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
9000f632:	68fb      	ldr	r3, [r7, #12]
9000f634:	681b      	ldr	r3, [r3, #0]
9000f636:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
9000f638:	68b9      	ldr	r1, [r7, #8]
9000f63a:	6878      	ldr	r0, [r7, #4]
9000f63c:	f000 f80a 	bl	9000f654 <ip_reass_free_complete_datagram>
  while (r != NULL) {
9000f640:	68fb      	ldr	r3, [r7, #12]
9000f642:	2b00      	cmp	r3, #0
9000f644:	d1e3      	bne.n	9000f60e <ip_reass_tmr+0x12>
    }
  }
}
9000f646:	bf00      	nop
9000f648:	bf00      	nop
9000f64a:	3710      	adds	r7, #16
9000f64c:	46bd      	mov	sp, r7
9000f64e:	bd80      	pop	{r7, pc}
9000f650:	2000a9f4 	.word	0x2000a9f4

9000f654 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
9000f654:	b580      	push	{r7, lr}
9000f656:	b088      	sub	sp, #32
9000f658:	af00      	add	r7, sp, #0
9000f65a:	6078      	str	r0, [r7, #4]
9000f65c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
9000f65e:	2300      	movs	r3, #0
9000f660:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
9000f662:	683a      	ldr	r2, [r7, #0]
9000f664:	687b      	ldr	r3, [r7, #4]
9000f666:	429a      	cmp	r2, r3
9000f668:	d105      	bne.n	9000f676 <ip_reass_free_complete_datagram+0x22>
9000f66a:	4b45      	ldr	r3, [pc, #276]	; (9000f780 <ip_reass_free_complete_datagram+0x12c>)
9000f66c:	22ab      	movs	r2, #171	; 0xab
9000f66e:	4945      	ldr	r1, [pc, #276]	; (9000f784 <ip_reass_free_complete_datagram+0x130>)
9000f670:	4845      	ldr	r0, [pc, #276]	; (9000f788 <ip_reass_free_complete_datagram+0x134>)
9000f672:	f000 ff3b 	bl	900104ec <iprintf>
  if (prev != NULL) {
9000f676:	683b      	ldr	r3, [r7, #0]
9000f678:	2b00      	cmp	r3, #0
9000f67a:	d00a      	beq.n	9000f692 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
9000f67c:	683b      	ldr	r3, [r7, #0]
9000f67e:	681b      	ldr	r3, [r3, #0]
9000f680:	687a      	ldr	r2, [r7, #4]
9000f682:	429a      	cmp	r2, r3
9000f684:	d005      	beq.n	9000f692 <ip_reass_free_complete_datagram+0x3e>
9000f686:	4b3e      	ldr	r3, [pc, #248]	; (9000f780 <ip_reass_free_complete_datagram+0x12c>)
9000f688:	22ad      	movs	r2, #173	; 0xad
9000f68a:	4940      	ldr	r1, [pc, #256]	; (9000f78c <ip_reass_free_complete_datagram+0x138>)
9000f68c:	483e      	ldr	r0, [pc, #248]	; (9000f788 <ip_reass_free_complete_datagram+0x134>)
9000f68e:	f000 ff2d 	bl	900104ec <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
9000f692:	687b      	ldr	r3, [r7, #4]
9000f694:	685b      	ldr	r3, [r3, #4]
9000f696:	685b      	ldr	r3, [r3, #4]
9000f698:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
9000f69a:	697b      	ldr	r3, [r7, #20]
9000f69c:	889b      	ldrh	r3, [r3, #4]
9000f69e:	b29b      	uxth	r3, r3
9000f6a0:	2b00      	cmp	r3, #0
9000f6a2:	d12a      	bne.n	9000f6fa <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
9000f6a4:	687b      	ldr	r3, [r7, #4]
9000f6a6:	685b      	ldr	r3, [r3, #4]
9000f6a8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
9000f6aa:	697b      	ldr	r3, [r7, #20]
9000f6ac:	681a      	ldr	r2, [r3, #0]
9000f6ae:	687b      	ldr	r3, [r7, #4]
9000f6b0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
9000f6b2:	69bb      	ldr	r3, [r7, #24]
9000f6b4:	6858      	ldr	r0, [r3, #4]
9000f6b6:	687b      	ldr	r3, [r7, #4]
9000f6b8:	3308      	adds	r3, #8
9000f6ba:	2214      	movs	r2, #20
9000f6bc:	4619      	mov	r1, r3
9000f6be:	f000 fee5 	bl	9001048c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
9000f6c2:	2101      	movs	r1, #1
9000f6c4:	69b8      	ldr	r0, [r7, #24]
9000f6c6:	f7ff fc47 	bl	9000ef58 <icmp_time_exceeded>
    clen = pbuf_clen(p);
9000f6ca:	69b8      	ldr	r0, [r7, #24]
9000f6cc:	f7f7 fe80 	bl	900073d0 <pbuf_clen>
9000f6d0:	4603      	mov	r3, r0
9000f6d2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
9000f6d4:	8bfa      	ldrh	r2, [r7, #30]
9000f6d6:	8a7b      	ldrh	r3, [r7, #18]
9000f6d8:	4413      	add	r3, r2
9000f6da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000f6de:	db05      	blt.n	9000f6ec <ip_reass_free_complete_datagram+0x98>
9000f6e0:	4b27      	ldr	r3, [pc, #156]	; (9000f780 <ip_reass_free_complete_datagram+0x12c>)
9000f6e2:	22bc      	movs	r2, #188	; 0xbc
9000f6e4:	492a      	ldr	r1, [pc, #168]	; (9000f790 <ip_reass_free_complete_datagram+0x13c>)
9000f6e6:	4828      	ldr	r0, [pc, #160]	; (9000f788 <ip_reass_free_complete_datagram+0x134>)
9000f6e8:	f000 ff00 	bl	900104ec <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
9000f6ec:	8bfa      	ldrh	r2, [r7, #30]
9000f6ee:	8a7b      	ldrh	r3, [r7, #18]
9000f6f0:	4413      	add	r3, r2
9000f6f2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
9000f6f4:	69b8      	ldr	r0, [r7, #24]
9000f6f6:	f7f7 fde3 	bl	900072c0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
9000f6fa:	687b      	ldr	r3, [r7, #4]
9000f6fc:	685b      	ldr	r3, [r3, #4]
9000f6fe:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
9000f700:	e01f      	b.n	9000f742 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
9000f702:	69bb      	ldr	r3, [r7, #24]
9000f704:	685b      	ldr	r3, [r3, #4]
9000f706:	617b      	str	r3, [r7, #20]
    pcur = p;
9000f708:	69bb      	ldr	r3, [r7, #24]
9000f70a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
9000f70c:	697b      	ldr	r3, [r7, #20]
9000f70e:	681b      	ldr	r3, [r3, #0]
9000f710:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
9000f712:	68f8      	ldr	r0, [r7, #12]
9000f714:	f7f7 fe5c 	bl	900073d0 <pbuf_clen>
9000f718:	4603      	mov	r3, r0
9000f71a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
9000f71c:	8bfa      	ldrh	r2, [r7, #30]
9000f71e:	8a7b      	ldrh	r3, [r7, #18]
9000f720:	4413      	add	r3, r2
9000f722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000f726:	db05      	blt.n	9000f734 <ip_reass_free_complete_datagram+0xe0>
9000f728:	4b15      	ldr	r3, [pc, #84]	; (9000f780 <ip_reass_free_complete_datagram+0x12c>)
9000f72a:	22cc      	movs	r2, #204	; 0xcc
9000f72c:	4918      	ldr	r1, [pc, #96]	; (9000f790 <ip_reass_free_complete_datagram+0x13c>)
9000f72e:	4816      	ldr	r0, [pc, #88]	; (9000f788 <ip_reass_free_complete_datagram+0x134>)
9000f730:	f000 fedc 	bl	900104ec <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
9000f734:	8bfa      	ldrh	r2, [r7, #30]
9000f736:	8a7b      	ldrh	r3, [r7, #18]
9000f738:	4413      	add	r3, r2
9000f73a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
9000f73c:	68f8      	ldr	r0, [r7, #12]
9000f73e:	f7f7 fdbf 	bl	900072c0 <pbuf_free>
  while (p != NULL) {
9000f742:	69bb      	ldr	r3, [r7, #24]
9000f744:	2b00      	cmp	r3, #0
9000f746:	d1dc      	bne.n	9000f702 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
9000f748:	6839      	ldr	r1, [r7, #0]
9000f74a:	6878      	ldr	r0, [r7, #4]
9000f74c:	f000 f8c2 	bl	9000f8d4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
9000f750:	4b10      	ldr	r3, [pc, #64]	; (9000f794 <ip_reass_free_complete_datagram+0x140>)
9000f752:	881b      	ldrh	r3, [r3, #0]
9000f754:	8bfa      	ldrh	r2, [r7, #30]
9000f756:	429a      	cmp	r2, r3
9000f758:	d905      	bls.n	9000f766 <ip_reass_free_complete_datagram+0x112>
9000f75a:	4b09      	ldr	r3, [pc, #36]	; (9000f780 <ip_reass_free_complete_datagram+0x12c>)
9000f75c:	22d2      	movs	r2, #210	; 0xd2
9000f75e:	490e      	ldr	r1, [pc, #56]	; (9000f798 <ip_reass_free_complete_datagram+0x144>)
9000f760:	4809      	ldr	r0, [pc, #36]	; (9000f788 <ip_reass_free_complete_datagram+0x134>)
9000f762:	f000 fec3 	bl	900104ec <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
9000f766:	4b0b      	ldr	r3, [pc, #44]	; (9000f794 <ip_reass_free_complete_datagram+0x140>)
9000f768:	881a      	ldrh	r2, [r3, #0]
9000f76a:	8bfb      	ldrh	r3, [r7, #30]
9000f76c:	1ad3      	subs	r3, r2, r3
9000f76e:	b29a      	uxth	r2, r3
9000f770:	4b08      	ldr	r3, [pc, #32]	; (9000f794 <ip_reass_free_complete_datagram+0x140>)
9000f772:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
9000f774:	8bfb      	ldrh	r3, [r7, #30]
}
9000f776:	4618      	mov	r0, r3
9000f778:	3720      	adds	r7, #32
9000f77a:	46bd      	mov	sp, r7
9000f77c:	bd80      	pop	{r7, pc}
9000f77e:	bf00      	nop
9000f780:	90014414 	.word	0x90014414
9000f784:	90014450 	.word	0x90014450
9000f788:	9001445c 	.word	0x9001445c
9000f78c:	90014484 	.word	0x90014484
9000f790:	90014498 	.word	0x90014498
9000f794:	2000a9f8 	.word	0x2000a9f8
9000f798:	900144b8 	.word	0x900144b8

9000f79c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
9000f79c:	b580      	push	{r7, lr}
9000f79e:	b08a      	sub	sp, #40	; 0x28
9000f7a0:	af00      	add	r7, sp, #0
9000f7a2:	6078      	str	r0, [r7, #4]
9000f7a4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
9000f7a6:	2300      	movs	r3, #0
9000f7a8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
9000f7aa:	2300      	movs	r3, #0
9000f7ac:	623b      	str	r3, [r7, #32]
    prev = NULL;
9000f7ae:	2300      	movs	r3, #0
9000f7b0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
9000f7b2:	2300      	movs	r3, #0
9000f7b4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
9000f7b6:	2300      	movs	r3, #0
9000f7b8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
9000f7ba:	4b28      	ldr	r3, [pc, #160]	; (9000f85c <ip_reass_remove_oldest_datagram+0xc0>)
9000f7bc:	681b      	ldr	r3, [r3, #0]
9000f7be:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
9000f7c0:	e030      	b.n	9000f824 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
9000f7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000f7c4:	695a      	ldr	r2, [r3, #20]
9000f7c6:	687b      	ldr	r3, [r7, #4]
9000f7c8:	68db      	ldr	r3, [r3, #12]
9000f7ca:	429a      	cmp	r2, r3
9000f7cc:	d10c      	bne.n	9000f7e8 <ip_reass_remove_oldest_datagram+0x4c>
9000f7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000f7d0:	699a      	ldr	r2, [r3, #24]
9000f7d2:	687b      	ldr	r3, [r7, #4]
9000f7d4:	691b      	ldr	r3, [r3, #16]
9000f7d6:	429a      	cmp	r2, r3
9000f7d8:	d106      	bne.n	9000f7e8 <ip_reass_remove_oldest_datagram+0x4c>
9000f7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000f7dc:	899a      	ldrh	r2, [r3, #12]
9000f7de:	687b      	ldr	r3, [r7, #4]
9000f7e0:	889b      	ldrh	r3, [r3, #4]
9000f7e2:	b29b      	uxth	r3, r3
9000f7e4:	429a      	cmp	r2, r3
9000f7e6:	d014      	beq.n	9000f812 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
9000f7e8:	693b      	ldr	r3, [r7, #16]
9000f7ea:	3301      	adds	r3, #1
9000f7ec:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
9000f7ee:	6a3b      	ldr	r3, [r7, #32]
9000f7f0:	2b00      	cmp	r3, #0
9000f7f2:	d104      	bne.n	9000f7fe <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
9000f7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000f7f6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
9000f7f8:	69fb      	ldr	r3, [r7, #28]
9000f7fa:	61bb      	str	r3, [r7, #24]
9000f7fc:	e009      	b.n	9000f812 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
9000f7fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000f800:	7fda      	ldrb	r2, [r3, #31]
9000f802:	6a3b      	ldr	r3, [r7, #32]
9000f804:	7fdb      	ldrb	r3, [r3, #31]
9000f806:	429a      	cmp	r2, r3
9000f808:	d803      	bhi.n	9000f812 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
9000f80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000f80c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
9000f80e:	69fb      	ldr	r3, [r7, #28]
9000f810:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
9000f812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000f814:	681b      	ldr	r3, [r3, #0]
9000f816:	2b00      	cmp	r3, #0
9000f818:	d001      	beq.n	9000f81e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
9000f81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000f81c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
9000f81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000f820:	681b      	ldr	r3, [r3, #0]
9000f822:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
9000f824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000f826:	2b00      	cmp	r3, #0
9000f828:	d1cb      	bne.n	9000f7c2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
9000f82a:	6a3b      	ldr	r3, [r7, #32]
9000f82c:	2b00      	cmp	r3, #0
9000f82e:	d008      	beq.n	9000f842 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
9000f830:	69b9      	ldr	r1, [r7, #24]
9000f832:	6a38      	ldr	r0, [r7, #32]
9000f834:	f7ff ff0e 	bl	9000f654 <ip_reass_free_complete_datagram>
9000f838:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
9000f83a:	697a      	ldr	r2, [r7, #20]
9000f83c:	68fb      	ldr	r3, [r7, #12]
9000f83e:	4413      	add	r3, r2
9000f840:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
9000f842:	697a      	ldr	r2, [r7, #20]
9000f844:	683b      	ldr	r3, [r7, #0]
9000f846:	429a      	cmp	r2, r3
9000f848:	da02      	bge.n	9000f850 <ip_reass_remove_oldest_datagram+0xb4>
9000f84a:	693b      	ldr	r3, [r7, #16]
9000f84c:	2b01      	cmp	r3, #1
9000f84e:	dcac      	bgt.n	9000f7aa <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
9000f850:	697b      	ldr	r3, [r7, #20]
}
9000f852:	4618      	mov	r0, r3
9000f854:	3728      	adds	r7, #40	; 0x28
9000f856:	46bd      	mov	sp, r7
9000f858:	bd80      	pop	{r7, pc}
9000f85a:	bf00      	nop
9000f85c:	2000a9f4 	.word	0x2000a9f4

9000f860 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
9000f860:	b580      	push	{r7, lr}
9000f862:	b084      	sub	sp, #16
9000f864:	af00      	add	r7, sp, #0
9000f866:	6078      	str	r0, [r7, #4]
9000f868:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
9000f86a:	2004      	movs	r0, #4
9000f86c:	f7f6 fe42 	bl	900064f4 <memp_malloc>
9000f870:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
9000f872:	68fb      	ldr	r3, [r7, #12]
9000f874:	2b00      	cmp	r3, #0
9000f876:	d110      	bne.n	9000f89a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
9000f878:	6839      	ldr	r1, [r7, #0]
9000f87a:	6878      	ldr	r0, [r7, #4]
9000f87c:	f7ff ff8e 	bl	9000f79c <ip_reass_remove_oldest_datagram>
9000f880:	4602      	mov	r2, r0
9000f882:	683b      	ldr	r3, [r7, #0]
9000f884:	4293      	cmp	r3, r2
9000f886:	dc03      	bgt.n	9000f890 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
9000f888:	2004      	movs	r0, #4
9000f88a:	f7f6 fe33 	bl	900064f4 <memp_malloc>
9000f88e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
9000f890:	68fb      	ldr	r3, [r7, #12]
9000f892:	2b00      	cmp	r3, #0
9000f894:	d101      	bne.n	9000f89a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
9000f896:	2300      	movs	r3, #0
9000f898:	e016      	b.n	9000f8c8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
9000f89a:	2220      	movs	r2, #32
9000f89c:	2100      	movs	r1, #0
9000f89e:	68f8      	ldr	r0, [r7, #12]
9000f8a0:	f000 fe1c 	bl	900104dc <memset>
  ipr->timer = IP_REASS_MAXAGE;
9000f8a4:	68fb      	ldr	r3, [r7, #12]
9000f8a6:	220f      	movs	r2, #15
9000f8a8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
9000f8aa:	4b09      	ldr	r3, [pc, #36]	; (9000f8d0 <ip_reass_enqueue_new_datagram+0x70>)
9000f8ac:	681a      	ldr	r2, [r3, #0]
9000f8ae:	68fb      	ldr	r3, [r7, #12]
9000f8b0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
9000f8b2:	4a07      	ldr	r2, [pc, #28]	; (9000f8d0 <ip_reass_enqueue_new_datagram+0x70>)
9000f8b4:	68fb      	ldr	r3, [r7, #12]
9000f8b6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
9000f8b8:	68fb      	ldr	r3, [r7, #12]
9000f8ba:	3308      	adds	r3, #8
9000f8bc:	2214      	movs	r2, #20
9000f8be:	6879      	ldr	r1, [r7, #4]
9000f8c0:	4618      	mov	r0, r3
9000f8c2:	f000 fde3 	bl	9001048c <memcpy>
  return ipr;
9000f8c6:	68fb      	ldr	r3, [r7, #12]
}
9000f8c8:	4618      	mov	r0, r3
9000f8ca:	3710      	adds	r7, #16
9000f8cc:	46bd      	mov	sp, r7
9000f8ce:	bd80      	pop	{r7, pc}
9000f8d0:	2000a9f4 	.word	0x2000a9f4

9000f8d4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
9000f8d4:	b580      	push	{r7, lr}
9000f8d6:	b082      	sub	sp, #8
9000f8d8:	af00      	add	r7, sp, #0
9000f8da:	6078      	str	r0, [r7, #4]
9000f8dc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
9000f8de:	4b10      	ldr	r3, [pc, #64]	; (9000f920 <ip_reass_dequeue_datagram+0x4c>)
9000f8e0:	681b      	ldr	r3, [r3, #0]
9000f8e2:	687a      	ldr	r2, [r7, #4]
9000f8e4:	429a      	cmp	r2, r3
9000f8e6:	d104      	bne.n	9000f8f2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
9000f8e8:	687b      	ldr	r3, [r7, #4]
9000f8ea:	681b      	ldr	r3, [r3, #0]
9000f8ec:	4a0c      	ldr	r2, [pc, #48]	; (9000f920 <ip_reass_dequeue_datagram+0x4c>)
9000f8ee:	6013      	str	r3, [r2, #0]
9000f8f0:	e00d      	b.n	9000f90e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
9000f8f2:	683b      	ldr	r3, [r7, #0]
9000f8f4:	2b00      	cmp	r3, #0
9000f8f6:	d106      	bne.n	9000f906 <ip_reass_dequeue_datagram+0x32>
9000f8f8:	4b0a      	ldr	r3, [pc, #40]	; (9000f924 <ip_reass_dequeue_datagram+0x50>)
9000f8fa:	f240 1245 	movw	r2, #325	; 0x145
9000f8fe:	490a      	ldr	r1, [pc, #40]	; (9000f928 <ip_reass_dequeue_datagram+0x54>)
9000f900:	480a      	ldr	r0, [pc, #40]	; (9000f92c <ip_reass_dequeue_datagram+0x58>)
9000f902:	f000 fdf3 	bl	900104ec <iprintf>
    prev->next = ipr->next;
9000f906:	687b      	ldr	r3, [r7, #4]
9000f908:	681a      	ldr	r2, [r3, #0]
9000f90a:	683b      	ldr	r3, [r7, #0]
9000f90c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
9000f90e:	6879      	ldr	r1, [r7, #4]
9000f910:	2004      	movs	r0, #4
9000f912:	f7f6 fe5f 	bl	900065d4 <memp_free>
}
9000f916:	bf00      	nop
9000f918:	3708      	adds	r7, #8
9000f91a:	46bd      	mov	sp, r7
9000f91c:	bd80      	pop	{r7, pc}
9000f91e:	bf00      	nop
9000f920:	2000a9f4 	.word	0x2000a9f4
9000f924:	90014414 	.word	0x90014414
9000f928:	900144dc 	.word	0x900144dc
9000f92c:	9001445c 	.word	0x9001445c

9000f930 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
9000f930:	b580      	push	{r7, lr}
9000f932:	b08c      	sub	sp, #48	; 0x30
9000f934:	af00      	add	r7, sp, #0
9000f936:	60f8      	str	r0, [r7, #12]
9000f938:	60b9      	str	r1, [r7, #8]
9000f93a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
9000f93c:	2300      	movs	r3, #0
9000f93e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
9000f940:	2301      	movs	r3, #1
9000f942:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
9000f944:	68bb      	ldr	r3, [r7, #8]
9000f946:	685b      	ldr	r3, [r3, #4]
9000f948:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
9000f94a:	69fb      	ldr	r3, [r7, #28]
9000f94c:	885b      	ldrh	r3, [r3, #2]
9000f94e:	b29b      	uxth	r3, r3
9000f950:	4618      	mov	r0, r3
9000f952:	f7f6 f8ed 	bl	90005b30 <lwip_htons>
9000f956:	4603      	mov	r3, r0
9000f958:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
9000f95a:	69fb      	ldr	r3, [r7, #28]
9000f95c:	781b      	ldrb	r3, [r3, #0]
9000f95e:	f003 030f 	and.w	r3, r3, #15
9000f962:	b2db      	uxtb	r3, r3
9000f964:	009b      	lsls	r3, r3, #2
9000f966:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
9000f968:	7e7b      	ldrb	r3, [r7, #25]
9000f96a:	b29b      	uxth	r3, r3
9000f96c:	8b7a      	ldrh	r2, [r7, #26]
9000f96e:	429a      	cmp	r2, r3
9000f970:	d202      	bcs.n	9000f978 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
9000f972:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000f976:	e135      	b.n	9000fbe4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
9000f978:	7e7b      	ldrb	r3, [r7, #25]
9000f97a:	b29b      	uxth	r3, r3
9000f97c:	8b7a      	ldrh	r2, [r7, #26]
9000f97e:	1ad3      	subs	r3, r2, r3
9000f980:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
9000f982:	69fb      	ldr	r3, [r7, #28]
9000f984:	88db      	ldrh	r3, [r3, #6]
9000f986:	b29b      	uxth	r3, r3
9000f988:	4618      	mov	r0, r3
9000f98a:	f7f6 f8d1 	bl	90005b30 <lwip_htons>
9000f98e:	4603      	mov	r3, r0
9000f990:	f3c3 030c 	ubfx	r3, r3, #0, #13
9000f994:	b29b      	uxth	r3, r3
9000f996:	00db      	lsls	r3, r3, #3
9000f998:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
9000f99a:	68bb      	ldr	r3, [r7, #8]
9000f99c:	685b      	ldr	r3, [r3, #4]
9000f99e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
9000f9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000f9a2:	2200      	movs	r2, #0
9000f9a4:	701a      	strb	r2, [r3, #0]
9000f9a6:	2200      	movs	r2, #0
9000f9a8:	705a      	strb	r2, [r3, #1]
9000f9aa:	2200      	movs	r2, #0
9000f9ac:	709a      	strb	r2, [r3, #2]
9000f9ae:	2200      	movs	r2, #0
9000f9b0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
9000f9b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000f9b4:	8afa      	ldrh	r2, [r7, #22]
9000f9b6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
9000f9b8:	8afa      	ldrh	r2, [r7, #22]
9000f9ba:	8b7b      	ldrh	r3, [r7, #26]
9000f9bc:	4413      	add	r3, r2
9000f9be:	b29a      	uxth	r2, r3
9000f9c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000f9c2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
9000f9c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000f9c6:	88db      	ldrh	r3, [r3, #6]
9000f9c8:	b29b      	uxth	r3, r3
9000f9ca:	8afa      	ldrh	r2, [r7, #22]
9000f9cc:	429a      	cmp	r2, r3
9000f9ce:	d902      	bls.n	9000f9d6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
9000f9d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000f9d4:	e106      	b.n	9000fbe4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
9000f9d6:	68fb      	ldr	r3, [r7, #12]
9000f9d8:	685b      	ldr	r3, [r3, #4]
9000f9da:	627b      	str	r3, [r7, #36]	; 0x24
9000f9dc:	e068      	b.n	9000fab0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
9000f9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000f9e0:	685b      	ldr	r3, [r3, #4]
9000f9e2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
9000f9e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000f9e6:	889b      	ldrh	r3, [r3, #4]
9000f9e8:	b29a      	uxth	r2, r3
9000f9ea:	693b      	ldr	r3, [r7, #16]
9000f9ec:	889b      	ldrh	r3, [r3, #4]
9000f9ee:	b29b      	uxth	r3, r3
9000f9f0:	429a      	cmp	r2, r3
9000f9f2:	d235      	bcs.n	9000fa60 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
9000f9f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000f9f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
9000f9f8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
9000f9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000f9fc:	2b00      	cmp	r3, #0
9000f9fe:	d020      	beq.n	9000fa42 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
9000fa00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000fa02:	889b      	ldrh	r3, [r3, #4]
9000fa04:	b29a      	uxth	r2, r3
9000fa06:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000fa08:	88db      	ldrh	r3, [r3, #6]
9000fa0a:	b29b      	uxth	r3, r3
9000fa0c:	429a      	cmp	r2, r3
9000fa0e:	d307      	bcc.n	9000fa20 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
9000fa10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000fa12:	88db      	ldrh	r3, [r3, #6]
9000fa14:	b29a      	uxth	r2, r3
9000fa16:	693b      	ldr	r3, [r7, #16]
9000fa18:	889b      	ldrh	r3, [r3, #4]
9000fa1a:	b29b      	uxth	r3, r3
9000fa1c:	429a      	cmp	r2, r3
9000fa1e:	d902      	bls.n	9000fa26 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
9000fa20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000fa24:	e0de      	b.n	9000fbe4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
9000fa26:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000fa28:	68ba      	ldr	r2, [r7, #8]
9000fa2a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
9000fa2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000fa2e:	88db      	ldrh	r3, [r3, #6]
9000fa30:	b29a      	uxth	r2, r3
9000fa32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000fa34:	889b      	ldrh	r3, [r3, #4]
9000fa36:	b29b      	uxth	r3, r3
9000fa38:	429a      	cmp	r2, r3
9000fa3a:	d03d      	beq.n	9000fab8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
9000fa3c:	2300      	movs	r3, #0
9000fa3e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
9000fa40:	e03a      	b.n	9000fab8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
9000fa42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000fa44:	88db      	ldrh	r3, [r3, #6]
9000fa46:	b29a      	uxth	r2, r3
9000fa48:	693b      	ldr	r3, [r7, #16]
9000fa4a:	889b      	ldrh	r3, [r3, #4]
9000fa4c:	b29b      	uxth	r3, r3
9000fa4e:	429a      	cmp	r2, r3
9000fa50:	d902      	bls.n	9000fa58 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
9000fa52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000fa56:	e0c5      	b.n	9000fbe4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
9000fa58:	68fb      	ldr	r3, [r7, #12]
9000fa5a:	68ba      	ldr	r2, [r7, #8]
9000fa5c:	605a      	str	r2, [r3, #4]
      break;
9000fa5e:	e02b      	b.n	9000fab8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
9000fa60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000fa62:	889b      	ldrh	r3, [r3, #4]
9000fa64:	b29a      	uxth	r2, r3
9000fa66:	693b      	ldr	r3, [r7, #16]
9000fa68:	889b      	ldrh	r3, [r3, #4]
9000fa6a:	b29b      	uxth	r3, r3
9000fa6c:	429a      	cmp	r2, r3
9000fa6e:	d102      	bne.n	9000fa76 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
9000fa70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000fa74:	e0b6      	b.n	9000fbe4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
9000fa76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000fa78:	889b      	ldrh	r3, [r3, #4]
9000fa7a:	b29a      	uxth	r2, r3
9000fa7c:	693b      	ldr	r3, [r7, #16]
9000fa7e:	88db      	ldrh	r3, [r3, #6]
9000fa80:	b29b      	uxth	r3, r3
9000fa82:	429a      	cmp	r2, r3
9000fa84:	d202      	bcs.n	9000fa8c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
9000fa86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000fa8a:	e0ab      	b.n	9000fbe4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
9000fa8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000fa8e:	2b00      	cmp	r3, #0
9000fa90:	d009      	beq.n	9000faa6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
9000fa92:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000fa94:	88db      	ldrh	r3, [r3, #6]
9000fa96:	b29a      	uxth	r2, r3
9000fa98:	693b      	ldr	r3, [r7, #16]
9000fa9a:	889b      	ldrh	r3, [r3, #4]
9000fa9c:	b29b      	uxth	r3, r3
9000fa9e:	429a      	cmp	r2, r3
9000faa0:	d001      	beq.n	9000faa6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
9000faa2:	2300      	movs	r3, #0
9000faa4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
9000faa6:	693b      	ldr	r3, [r7, #16]
9000faa8:	681b      	ldr	r3, [r3, #0]
9000faaa:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
9000faac:	693b      	ldr	r3, [r7, #16]
9000faae:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
9000fab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000fab2:	2b00      	cmp	r3, #0
9000fab4:	d193      	bne.n	9000f9de <ip_reass_chain_frag_into_datagram_and_validate+0xae>
9000fab6:	e000      	b.n	9000faba <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
9000fab8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
9000faba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000fabc:	2b00      	cmp	r3, #0
9000fabe:	d12d      	bne.n	9000fb1c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
9000fac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000fac2:	2b00      	cmp	r3, #0
9000fac4:	d01c      	beq.n	9000fb00 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
9000fac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000fac8:	88db      	ldrh	r3, [r3, #6]
9000faca:	b29a      	uxth	r2, r3
9000facc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000face:	889b      	ldrh	r3, [r3, #4]
9000fad0:	b29b      	uxth	r3, r3
9000fad2:	429a      	cmp	r2, r3
9000fad4:	d906      	bls.n	9000fae4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
9000fad6:	4b45      	ldr	r3, [pc, #276]	; (9000fbec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
9000fad8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
9000fadc:	4944      	ldr	r1, [pc, #272]	; (9000fbf0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
9000fade:	4845      	ldr	r0, [pc, #276]	; (9000fbf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
9000fae0:	f000 fd04 	bl	900104ec <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
9000fae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000fae6:	68ba      	ldr	r2, [r7, #8]
9000fae8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
9000faea:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000faec:	88db      	ldrh	r3, [r3, #6]
9000faee:	b29a      	uxth	r2, r3
9000faf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000faf2:	889b      	ldrh	r3, [r3, #4]
9000faf4:	b29b      	uxth	r3, r3
9000faf6:	429a      	cmp	r2, r3
9000faf8:	d010      	beq.n	9000fb1c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
9000fafa:	2300      	movs	r3, #0
9000fafc:	623b      	str	r3, [r7, #32]
9000fafe:	e00d      	b.n	9000fb1c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
9000fb00:	68fb      	ldr	r3, [r7, #12]
9000fb02:	685b      	ldr	r3, [r3, #4]
9000fb04:	2b00      	cmp	r3, #0
9000fb06:	d006      	beq.n	9000fb16 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
9000fb08:	4b38      	ldr	r3, [pc, #224]	; (9000fbec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
9000fb0a:	f44f 72df 	mov.w	r2, #446	; 0x1be
9000fb0e:	493a      	ldr	r1, [pc, #232]	; (9000fbf8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
9000fb10:	4838      	ldr	r0, [pc, #224]	; (9000fbf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
9000fb12:	f000 fceb 	bl	900104ec <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
9000fb16:	68fb      	ldr	r3, [r7, #12]
9000fb18:	68ba      	ldr	r2, [r7, #8]
9000fb1a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
9000fb1c:	687b      	ldr	r3, [r7, #4]
9000fb1e:	2b00      	cmp	r3, #0
9000fb20:	d105      	bne.n	9000fb2e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
9000fb22:	68fb      	ldr	r3, [r7, #12]
9000fb24:	7f9b      	ldrb	r3, [r3, #30]
9000fb26:	f003 0301 	and.w	r3, r3, #1
9000fb2a:	2b00      	cmp	r3, #0
9000fb2c:	d059      	beq.n	9000fbe2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
9000fb2e:	6a3b      	ldr	r3, [r7, #32]
9000fb30:	2b00      	cmp	r3, #0
9000fb32:	d04f      	beq.n	9000fbd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
9000fb34:	68fb      	ldr	r3, [r7, #12]
9000fb36:	685b      	ldr	r3, [r3, #4]
9000fb38:	2b00      	cmp	r3, #0
9000fb3a:	d006      	beq.n	9000fb4a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
9000fb3c:	68fb      	ldr	r3, [r7, #12]
9000fb3e:	685b      	ldr	r3, [r3, #4]
9000fb40:	685b      	ldr	r3, [r3, #4]
9000fb42:	889b      	ldrh	r3, [r3, #4]
9000fb44:	b29b      	uxth	r3, r3
9000fb46:	2b00      	cmp	r3, #0
9000fb48:	d002      	beq.n	9000fb50 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
9000fb4a:	2300      	movs	r3, #0
9000fb4c:	623b      	str	r3, [r7, #32]
9000fb4e:	e041      	b.n	9000fbd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
9000fb50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000fb52:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
9000fb54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000fb56:	681b      	ldr	r3, [r3, #0]
9000fb58:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
9000fb5a:	e012      	b.n	9000fb82 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
9000fb5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000fb5e:	685b      	ldr	r3, [r3, #4]
9000fb60:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
9000fb62:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000fb64:	88db      	ldrh	r3, [r3, #6]
9000fb66:	b29a      	uxth	r2, r3
9000fb68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000fb6a:	889b      	ldrh	r3, [r3, #4]
9000fb6c:	b29b      	uxth	r3, r3
9000fb6e:	429a      	cmp	r2, r3
9000fb70:	d002      	beq.n	9000fb78 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
9000fb72:	2300      	movs	r3, #0
9000fb74:	623b      	str	r3, [r7, #32]
            break;
9000fb76:	e007      	b.n	9000fb88 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
9000fb78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000fb7a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
9000fb7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000fb7e:	681b      	ldr	r3, [r3, #0]
9000fb80:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
9000fb82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000fb84:	2b00      	cmp	r3, #0
9000fb86:	d1e9      	bne.n	9000fb5c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
9000fb88:	6a3b      	ldr	r3, [r7, #32]
9000fb8a:	2b00      	cmp	r3, #0
9000fb8c:	d022      	beq.n	9000fbd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
9000fb8e:	68fb      	ldr	r3, [r7, #12]
9000fb90:	685b      	ldr	r3, [r3, #4]
9000fb92:	2b00      	cmp	r3, #0
9000fb94:	d106      	bne.n	9000fba4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
9000fb96:	4b15      	ldr	r3, [pc, #84]	; (9000fbec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
9000fb98:	f240 12df 	movw	r2, #479	; 0x1df
9000fb9c:	4917      	ldr	r1, [pc, #92]	; (9000fbfc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
9000fb9e:	4815      	ldr	r0, [pc, #84]	; (9000fbf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
9000fba0:	f000 fca4 	bl	900104ec <iprintf>
          LWIP_ASSERT("sanity check",
9000fba4:	68fb      	ldr	r3, [r7, #12]
9000fba6:	685b      	ldr	r3, [r3, #4]
9000fba8:	685b      	ldr	r3, [r3, #4]
9000fbaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
9000fbac:	429a      	cmp	r2, r3
9000fbae:	d106      	bne.n	9000fbbe <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
9000fbb0:	4b0e      	ldr	r3, [pc, #56]	; (9000fbec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
9000fbb2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
9000fbb6:	4911      	ldr	r1, [pc, #68]	; (9000fbfc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
9000fbb8:	480e      	ldr	r0, [pc, #56]	; (9000fbf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
9000fbba:	f000 fc97 	bl	900104ec <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
9000fbbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000fbc0:	681b      	ldr	r3, [r3, #0]
9000fbc2:	2b00      	cmp	r3, #0
9000fbc4:	d006      	beq.n	9000fbd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
9000fbc6:	4b09      	ldr	r3, [pc, #36]	; (9000fbec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
9000fbc8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
9000fbcc:	490c      	ldr	r1, [pc, #48]	; (9000fc00 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
9000fbce:	4809      	ldr	r0, [pc, #36]	; (9000fbf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
9000fbd0:	f000 fc8c 	bl	900104ec <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
9000fbd4:	6a3b      	ldr	r3, [r7, #32]
9000fbd6:	2b00      	cmp	r3, #0
9000fbd8:	bf14      	ite	ne
9000fbda:	2301      	movne	r3, #1
9000fbdc:	2300      	moveq	r3, #0
9000fbde:	b2db      	uxtb	r3, r3
9000fbe0:	e000      	b.n	9000fbe4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
9000fbe2:	2300      	movs	r3, #0
}
9000fbe4:	4618      	mov	r0, r3
9000fbe6:	3730      	adds	r7, #48	; 0x30
9000fbe8:	46bd      	mov	sp, r7
9000fbea:	bd80      	pop	{r7, pc}
9000fbec:	90014414 	.word	0x90014414
9000fbf0:	900144f8 	.word	0x900144f8
9000fbf4:	9001445c 	.word	0x9001445c
9000fbf8:	90014518 	.word	0x90014518
9000fbfc:	90014550 	.word	0x90014550
9000fc00:	90014560 	.word	0x90014560

9000fc04 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
9000fc04:	b580      	push	{r7, lr}
9000fc06:	b08e      	sub	sp, #56	; 0x38
9000fc08:	af00      	add	r7, sp, #0
9000fc0a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
9000fc0c:	687b      	ldr	r3, [r7, #4]
9000fc0e:	685b      	ldr	r3, [r3, #4]
9000fc10:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
9000fc12:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000fc14:	781b      	ldrb	r3, [r3, #0]
9000fc16:	f003 030f 	and.w	r3, r3, #15
9000fc1a:	b2db      	uxtb	r3, r3
9000fc1c:	009b      	lsls	r3, r3, #2
9000fc1e:	b2db      	uxtb	r3, r3
9000fc20:	2b14      	cmp	r3, #20
9000fc22:	f040 8171 	bne.w	9000ff08 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
9000fc26:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000fc28:	88db      	ldrh	r3, [r3, #6]
9000fc2a:	b29b      	uxth	r3, r3
9000fc2c:	4618      	mov	r0, r3
9000fc2e:	f7f5 ff7f 	bl	90005b30 <lwip_htons>
9000fc32:	4603      	mov	r3, r0
9000fc34:	f3c3 030c 	ubfx	r3, r3, #0, #13
9000fc38:	b29b      	uxth	r3, r3
9000fc3a:	00db      	lsls	r3, r3, #3
9000fc3c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
9000fc3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000fc40:	885b      	ldrh	r3, [r3, #2]
9000fc42:	b29b      	uxth	r3, r3
9000fc44:	4618      	mov	r0, r3
9000fc46:	f7f5 ff73 	bl	90005b30 <lwip_htons>
9000fc4a:	4603      	mov	r3, r0
9000fc4c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
9000fc4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000fc50:	781b      	ldrb	r3, [r3, #0]
9000fc52:	f003 030f 	and.w	r3, r3, #15
9000fc56:	b2db      	uxtb	r3, r3
9000fc58:	009b      	lsls	r3, r3, #2
9000fc5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
9000fc5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
9000fc62:	b29b      	uxth	r3, r3
9000fc64:	8cba      	ldrh	r2, [r7, #36]	; 0x24
9000fc66:	429a      	cmp	r2, r3
9000fc68:	f0c0 8150 	bcc.w	9000ff0c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
9000fc6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
9000fc70:	b29b      	uxth	r3, r3
9000fc72:	8cba      	ldrh	r2, [r7, #36]	; 0x24
9000fc74:	1ad3      	subs	r3, r2, r3
9000fc76:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
9000fc78:	6878      	ldr	r0, [r7, #4]
9000fc7a:	f7f7 fba9 	bl	900073d0 <pbuf_clen>
9000fc7e:	4603      	mov	r3, r0
9000fc80:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
9000fc82:	4b8c      	ldr	r3, [pc, #560]	; (9000feb4 <ip4_reass+0x2b0>)
9000fc84:	881b      	ldrh	r3, [r3, #0]
9000fc86:	461a      	mov	r2, r3
9000fc88:	8c3b      	ldrh	r3, [r7, #32]
9000fc8a:	4413      	add	r3, r2
9000fc8c:	2b0a      	cmp	r3, #10
9000fc8e:	dd10      	ble.n	9000fcb2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
9000fc90:	8c3b      	ldrh	r3, [r7, #32]
9000fc92:	4619      	mov	r1, r3
9000fc94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
9000fc96:	f7ff fd81 	bl	9000f79c <ip_reass_remove_oldest_datagram>
9000fc9a:	4603      	mov	r3, r0
9000fc9c:	2b00      	cmp	r3, #0
9000fc9e:	f000 8137 	beq.w	9000ff10 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
9000fca2:	4b84      	ldr	r3, [pc, #528]	; (9000feb4 <ip4_reass+0x2b0>)
9000fca4:	881b      	ldrh	r3, [r3, #0]
9000fca6:	461a      	mov	r2, r3
9000fca8:	8c3b      	ldrh	r3, [r7, #32]
9000fcaa:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
9000fcac:	2b0a      	cmp	r3, #10
9000fcae:	f300 812f 	bgt.w	9000ff10 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
9000fcb2:	4b81      	ldr	r3, [pc, #516]	; (9000feb8 <ip4_reass+0x2b4>)
9000fcb4:	681b      	ldr	r3, [r3, #0]
9000fcb6:	633b      	str	r3, [r7, #48]	; 0x30
9000fcb8:	e015      	b.n	9000fce6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
9000fcba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000fcbc:	695a      	ldr	r2, [r3, #20]
9000fcbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000fcc0:	68db      	ldr	r3, [r3, #12]
9000fcc2:	429a      	cmp	r2, r3
9000fcc4:	d10c      	bne.n	9000fce0 <ip4_reass+0xdc>
9000fcc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000fcc8:	699a      	ldr	r2, [r3, #24]
9000fcca:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000fccc:	691b      	ldr	r3, [r3, #16]
9000fcce:	429a      	cmp	r2, r3
9000fcd0:	d106      	bne.n	9000fce0 <ip4_reass+0xdc>
9000fcd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000fcd4:	899a      	ldrh	r2, [r3, #12]
9000fcd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000fcd8:	889b      	ldrh	r3, [r3, #4]
9000fcda:	b29b      	uxth	r3, r3
9000fcdc:	429a      	cmp	r2, r3
9000fcde:	d006      	beq.n	9000fcee <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
9000fce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000fce2:	681b      	ldr	r3, [r3, #0]
9000fce4:	633b      	str	r3, [r7, #48]	; 0x30
9000fce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000fce8:	2b00      	cmp	r3, #0
9000fcea:	d1e6      	bne.n	9000fcba <ip4_reass+0xb6>
9000fcec:	e000      	b.n	9000fcf0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
9000fcee:	bf00      	nop
    }
  }

  if (ipr == NULL) {
9000fcf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000fcf2:	2b00      	cmp	r3, #0
9000fcf4:	d109      	bne.n	9000fd0a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
9000fcf6:	8c3b      	ldrh	r3, [r7, #32]
9000fcf8:	4619      	mov	r1, r3
9000fcfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
9000fcfc:	f7ff fdb0 	bl	9000f860 <ip_reass_enqueue_new_datagram>
9000fd00:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
9000fd02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000fd04:	2b00      	cmp	r3, #0
9000fd06:	d11c      	bne.n	9000fd42 <ip4_reass+0x13e>
      goto nullreturn;
9000fd08:	e105      	b.n	9000ff16 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
9000fd0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000fd0c:	88db      	ldrh	r3, [r3, #6]
9000fd0e:	b29b      	uxth	r3, r3
9000fd10:	4618      	mov	r0, r3
9000fd12:	f7f5 ff0d 	bl	90005b30 <lwip_htons>
9000fd16:	4603      	mov	r3, r0
9000fd18:	f3c3 030c 	ubfx	r3, r3, #0, #13
9000fd1c:	2b00      	cmp	r3, #0
9000fd1e:	d110      	bne.n	9000fd42 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
9000fd20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000fd22:	89db      	ldrh	r3, [r3, #14]
9000fd24:	4618      	mov	r0, r3
9000fd26:	f7f5 ff03 	bl	90005b30 <lwip_htons>
9000fd2a:	4603      	mov	r3, r0
9000fd2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
9000fd30:	2b00      	cmp	r3, #0
9000fd32:	d006      	beq.n	9000fd42 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
9000fd34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000fd36:	3308      	adds	r3, #8
9000fd38:	2214      	movs	r2, #20
9000fd3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
9000fd3c:	4618      	mov	r0, r3
9000fd3e:	f000 fba5 	bl	9001048c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
9000fd42:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000fd44:	88db      	ldrh	r3, [r3, #6]
9000fd46:	b29b      	uxth	r3, r3
9000fd48:	f003 0320 	and.w	r3, r3, #32
9000fd4c:	2b00      	cmp	r3, #0
9000fd4e:	bf0c      	ite	eq
9000fd50:	2301      	moveq	r3, #1
9000fd52:	2300      	movne	r3, #0
9000fd54:	b2db      	uxtb	r3, r3
9000fd56:	61fb      	str	r3, [r7, #28]
  if (is_last) {
9000fd58:	69fb      	ldr	r3, [r7, #28]
9000fd5a:	2b00      	cmp	r3, #0
9000fd5c:	d00e      	beq.n	9000fd7c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
9000fd5e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
9000fd60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
9000fd62:	4413      	add	r3, r2
9000fd64:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
9000fd66:	8b7a      	ldrh	r2, [r7, #26]
9000fd68:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
9000fd6a:	429a      	cmp	r2, r3
9000fd6c:	f0c0 80a0 	bcc.w	9000feb0 <ip4_reass+0x2ac>
9000fd70:	8b7b      	ldrh	r3, [r7, #26]
9000fd72:	f64f 72eb 	movw	r2, #65515	; 0xffeb
9000fd76:	4293      	cmp	r3, r2
9000fd78:	f200 809a 	bhi.w	9000feb0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
9000fd7c:	69fa      	ldr	r2, [r7, #28]
9000fd7e:	6879      	ldr	r1, [r7, #4]
9000fd80:	6b38      	ldr	r0, [r7, #48]	; 0x30
9000fd82:	f7ff fdd5 	bl	9000f930 <ip_reass_chain_frag_into_datagram_and_validate>
9000fd86:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
9000fd88:	697b      	ldr	r3, [r7, #20]
9000fd8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
9000fd8e:	f000 809b 	beq.w	9000fec8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
9000fd92:	4b48      	ldr	r3, [pc, #288]	; (9000feb4 <ip4_reass+0x2b0>)
9000fd94:	881a      	ldrh	r2, [r3, #0]
9000fd96:	8c3b      	ldrh	r3, [r7, #32]
9000fd98:	4413      	add	r3, r2
9000fd9a:	b29a      	uxth	r2, r3
9000fd9c:	4b45      	ldr	r3, [pc, #276]	; (9000feb4 <ip4_reass+0x2b0>)
9000fd9e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
9000fda0:	69fb      	ldr	r3, [r7, #28]
9000fda2:	2b00      	cmp	r3, #0
9000fda4:	d00d      	beq.n	9000fdc2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
9000fda6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
9000fda8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
9000fdaa:	4413      	add	r3, r2
9000fdac:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
9000fdae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000fdb0:	8a7a      	ldrh	r2, [r7, #18]
9000fdb2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
9000fdb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000fdb6:	7f9b      	ldrb	r3, [r3, #30]
9000fdb8:	f043 0301 	orr.w	r3, r3, #1
9000fdbc:	b2da      	uxtb	r2, r3
9000fdbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000fdc0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
9000fdc2:	697b      	ldr	r3, [r7, #20]
9000fdc4:	2b01      	cmp	r3, #1
9000fdc6:	d171      	bne.n	9000feac <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
9000fdc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000fdca:	8b9b      	ldrh	r3, [r3, #28]
9000fdcc:	3314      	adds	r3, #20
9000fdce:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
9000fdd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000fdd2:	685b      	ldr	r3, [r3, #4]
9000fdd4:	685b      	ldr	r3, [r3, #4]
9000fdd6:	681b      	ldr	r3, [r3, #0]
9000fdd8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
9000fdda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000fddc:	685b      	ldr	r3, [r3, #4]
9000fdde:	685b      	ldr	r3, [r3, #4]
9000fde0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
9000fde2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000fde4:	3308      	adds	r3, #8
9000fde6:	2214      	movs	r2, #20
9000fde8:	4619      	mov	r1, r3
9000fdea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
9000fdec:	f000 fb4e 	bl	9001048c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
9000fdf0:	8a3b      	ldrh	r3, [r7, #16]
9000fdf2:	4618      	mov	r0, r3
9000fdf4:	f7f5 fe9c 	bl	90005b30 <lwip_htons>
9000fdf8:	4603      	mov	r3, r0
9000fdfa:	461a      	mov	r2, r3
9000fdfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000fdfe:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
9000fe00:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000fe02:	2200      	movs	r2, #0
9000fe04:	719a      	strb	r2, [r3, #6]
9000fe06:	2200      	movs	r2, #0
9000fe08:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
9000fe0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000fe0c:	2200      	movs	r2, #0
9000fe0e:	729a      	strb	r2, [r3, #10]
9000fe10:	2200      	movs	r2, #0
9000fe12:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
9000fe14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000fe16:	685b      	ldr	r3, [r3, #4]
9000fe18:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
9000fe1a:	e00d      	b.n	9000fe38 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
9000fe1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000fe1e:	685b      	ldr	r3, [r3, #4]
9000fe20:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
9000fe22:	2114      	movs	r1, #20
9000fe24:	6b78      	ldr	r0, [r7, #52]	; 0x34
9000fe26:	f7f7 f9c5 	bl	900071b4 <pbuf_remove_header>
      pbuf_cat(p, r);
9000fe2a:	6b79      	ldr	r1, [r7, #52]	; 0x34
9000fe2c:	6878      	ldr	r0, [r7, #4]
9000fe2e:	f7f7 fb09 	bl	90007444 <pbuf_cat>
      r = iprh->next_pbuf;
9000fe32:	68fb      	ldr	r3, [r7, #12]
9000fe34:	681b      	ldr	r3, [r3, #0]
9000fe36:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
9000fe38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000fe3a:	2b00      	cmp	r3, #0
9000fe3c:	d1ee      	bne.n	9000fe1c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
9000fe3e:	4b1e      	ldr	r3, [pc, #120]	; (9000feb8 <ip4_reass+0x2b4>)
9000fe40:	681b      	ldr	r3, [r3, #0]
9000fe42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
9000fe44:	429a      	cmp	r2, r3
9000fe46:	d102      	bne.n	9000fe4e <ip4_reass+0x24a>
      ipr_prev = NULL;
9000fe48:	2300      	movs	r3, #0
9000fe4a:	62fb      	str	r3, [r7, #44]	; 0x2c
9000fe4c:	e010      	b.n	9000fe70 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
9000fe4e:	4b1a      	ldr	r3, [pc, #104]	; (9000feb8 <ip4_reass+0x2b4>)
9000fe50:	681b      	ldr	r3, [r3, #0]
9000fe52:	62fb      	str	r3, [r7, #44]	; 0x2c
9000fe54:	e007      	b.n	9000fe66 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
9000fe56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000fe58:	681b      	ldr	r3, [r3, #0]
9000fe5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
9000fe5c:	429a      	cmp	r2, r3
9000fe5e:	d006      	beq.n	9000fe6e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
9000fe60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000fe62:	681b      	ldr	r3, [r3, #0]
9000fe64:	62fb      	str	r3, [r7, #44]	; 0x2c
9000fe66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000fe68:	2b00      	cmp	r3, #0
9000fe6a:	d1f4      	bne.n	9000fe56 <ip4_reass+0x252>
9000fe6c:	e000      	b.n	9000fe70 <ip4_reass+0x26c>
          break;
9000fe6e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
9000fe70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
9000fe72:	6b38      	ldr	r0, [r7, #48]	; 0x30
9000fe74:	f7ff fd2e 	bl	9000f8d4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
9000fe78:	6878      	ldr	r0, [r7, #4]
9000fe7a:	f7f7 faa9 	bl	900073d0 <pbuf_clen>
9000fe7e:	4603      	mov	r3, r0
9000fe80:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
9000fe82:	4b0c      	ldr	r3, [pc, #48]	; (9000feb4 <ip4_reass+0x2b0>)
9000fe84:	881b      	ldrh	r3, [r3, #0]
9000fe86:	8c3a      	ldrh	r2, [r7, #32]
9000fe88:	429a      	cmp	r2, r3
9000fe8a:	d906      	bls.n	9000fe9a <ip4_reass+0x296>
9000fe8c:	4b0b      	ldr	r3, [pc, #44]	; (9000febc <ip4_reass+0x2b8>)
9000fe8e:	f240 229b 	movw	r2, #667	; 0x29b
9000fe92:	490b      	ldr	r1, [pc, #44]	; (9000fec0 <ip4_reass+0x2bc>)
9000fe94:	480b      	ldr	r0, [pc, #44]	; (9000fec4 <ip4_reass+0x2c0>)
9000fe96:	f000 fb29 	bl	900104ec <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
9000fe9a:	4b06      	ldr	r3, [pc, #24]	; (9000feb4 <ip4_reass+0x2b0>)
9000fe9c:	881a      	ldrh	r2, [r3, #0]
9000fe9e:	8c3b      	ldrh	r3, [r7, #32]
9000fea0:	1ad3      	subs	r3, r2, r3
9000fea2:	b29a      	uxth	r2, r3
9000fea4:	4b03      	ldr	r3, [pc, #12]	; (9000feb4 <ip4_reass+0x2b0>)
9000fea6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
9000fea8:	687b      	ldr	r3, [r7, #4]
9000feaa:	e038      	b.n	9000ff1e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
9000feac:	2300      	movs	r3, #0
9000feae:	e036      	b.n	9000ff1e <ip4_reass+0x31a>
      goto nullreturn_ipr;
9000feb0:	bf00      	nop
9000feb2:	e00a      	b.n	9000feca <ip4_reass+0x2c6>
9000feb4:	2000a9f8 	.word	0x2000a9f8
9000feb8:	2000a9f4 	.word	0x2000a9f4
9000febc:	90014414 	.word	0x90014414
9000fec0:	90014584 	.word	0x90014584
9000fec4:	9001445c 	.word	0x9001445c
    goto nullreturn_ipr;
9000fec8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
9000feca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000fecc:	2b00      	cmp	r3, #0
9000fece:	d106      	bne.n	9000fede <ip4_reass+0x2da>
9000fed0:	4b15      	ldr	r3, [pc, #84]	; (9000ff28 <ip4_reass+0x324>)
9000fed2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
9000fed6:	4915      	ldr	r1, [pc, #84]	; (9000ff2c <ip4_reass+0x328>)
9000fed8:	4815      	ldr	r0, [pc, #84]	; (9000ff30 <ip4_reass+0x32c>)
9000feda:	f000 fb07 	bl	900104ec <iprintf>
  if (ipr->p == NULL) {
9000fede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000fee0:	685b      	ldr	r3, [r3, #4]
9000fee2:	2b00      	cmp	r3, #0
9000fee4:	d116      	bne.n	9000ff14 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
9000fee6:	4b13      	ldr	r3, [pc, #76]	; (9000ff34 <ip4_reass+0x330>)
9000fee8:	681b      	ldr	r3, [r3, #0]
9000feea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
9000feec:	429a      	cmp	r2, r3
9000feee:	d006      	beq.n	9000fefe <ip4_reass+0x2fa>
9000fef0:	4b0d      	ldr	r3, [pc, #52]	; (9000ff28 <ip4_reass+0x324>)
9000fef2:	f240 22ab 	movw	r2, #683	; 0x2ab
9000fef6:	4910      	ldr	r1, [pc, #64]	; (9000ff38 <ip4_reass+0x334>)
9000fef8:	480d      	ldr	r0, [pc, #52]	; (9000ff30 <ip4_reass+0x32c>)
9000fefa:	f000 faf7 	bl	900104ec <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
9000fefe:	2100      	movs	r1, #0
9000ff00:	6b38      	ldr	r0, [r7, #48]	; 0x30
9000ff02:	f7ff fce7 	bl	9000f8d4 <ip_reass_dequeue_datagram>
9000ff06:	e006      	b.n	9000ff16 <ip4_reass+0x312>
    goto nullreturn;
9000ff08:	bf00      	nop
9000ff0a:	e004      	b.n	9000ff16 <ip4_reass+0x312>
    goto nullreturn;
9000ff0c:	bf00      	nop
9000ff0e:	e002      	b.n	9000ff16 <ip4_reass+0x312>
      goto nullreturn;
9000ff10:	bf00      	nop
9000ff12:	e000      	b.n	9000ff16 <ip4_reass+0x312>
  }

nullreturn:
9000ff14:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
9000ff16:	6878      	ldr	r0, [r7, #4]
9000ff18:	f7f7 f9d2 	bl	900072c0 <pbuf_free>
  return NULL;
9000ff1c:	2300      	movs	r3, #0
}
9000ff1e:	4618      	mov	r0, r3
9000ff20:	3738      	adds	r7, #56	; 0x38
9000ff22:	46bd      	mov	sp, r7
9000ff24:	bd80      	pop	{r7, pc}
9000ff26:	bf00      	nop
9000ff28:	90014414 	.word	0x90014414
9000ff2c:	900145a0 	.word	0x900145a0
9000ff30:	9001445c 	.word	0x9001445c
9000ff34:	2000a9f4 	.word	0x2000a9f4
9000ff38:	900145ac 	.word	0x900145ac

9000ff3c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
9000ff3c:	b580      	push	{r7, lr}
9000ff3e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
9000ff40:	2005      	movs	r0, #5
9000ff42:	f7f6 fad7 	bl	900064f4 <memp_malloc>
9000ff46:	4603      	mov	r3, r0
}
9000ff48:	4618      	mov	r0, r3
9000ff4a:	bd80      	pop	{r7, pc}

9000ff4c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
9000ff4c:	b580      	push	{r7, lr}
9000ff4e:	b082      	sub	sp, #8
9000ff50:	af00      	add	r7, sp, #0
9000ff52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
9000ff54:	687b      	ldr	r3, [r7, #4]
9000ff56:	2b00      	cmp	r3, #0
9000ff58:	d106      	bne.n	9000ff68 <ip_frag_free_pbuf_custom_ref+0x1c>
9000ff5a:	4b07      	ldr	r3, [pc, #28]	; (9000ff78 <ip_frag_free_pbuf_custom_ref+0x2c>)
9000ff5c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
9000ff60:	4906      	ldr	r1, [pc, #24]	; (9000ff7c <ip_frag_free_pbuf_custom_ref+0x30>)
9000ff62:	4807      	ldr	r0, [pc, #28]	; (9000ff80 <ip_frag_free_pbuf_custom_ref+0x34>)
9000ff64:	f000 fac2 	bl	900104ec <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
9000ff68:	6879      	ldr	r1, [r7, #4]
9000ff6a:	2005      	movs	r0, #5
9000ff6c:	f7f6 fb32 	bl	900065d4 <memp_free>
}
9000ff70:	bf00      	nop
9000ff72:	3708      	adds	r7, #8
9000ff74:	46bd      	mov	sp, r7
9000ff76:	bd80      	pop	{r7, pc}
9000ff78:	90014414 	.word	0x90014414
9000ff7c:	900145cc 	.word	0x900145cc
9000ff80:	9001445c 	.word	0x9001445c

9000ff84 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
9000ff84:	b580      	push	{r7, lr}
9000ff86:	b084      	sub	sp, #16
9000ff88:	af00      	add	r7, sp, #0
9000ff8a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
9000ff8c:	687b      	ldr	r3, [r7, #4]
9000ff8e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
9000ff90:	68fb      	ldr	r3, [r7, #12]
9000ff92:	2b00      	cmp	r3, #0
9000ff94:	d106      	bne.n	9000ffa4 <ipfrag_free_pbuf_custom+0x20>
9000ff96:	4b11      	ldr	r3, [pc, #68]	; (9000ffdc <ipfrag_free_pbuf_custom+0x58>)
9000ff98:	f240 22ce 	movw	r2, #718	; 0x2ce
9000ff9c:	4910      	ldr	r1, [pc, #64]	; (9000ffe0 <ipfrag_free_pbuf_custom+0x5c>)
9000ff9e:	4811      	ldr	r0, [pc, #68]	; (9000ffe4 <ipfrag_free_pbuf_custom+0x60>)
9000ffa0:	f000 faa4 	bl	900104ec <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
9000ffa4:	68fa      	ldr	r2, [r7, #12]
9000ffa6:	687b      	ldr	r3, [r7, #4]
9000ffa8:	429a      	cmp	r2, r3
9000ffaa:	d006      	beq.n	9000ffba <ipfrag_free_pbuf_custom+0x36>
9000ffac:	4b0b      	ldr	r3, [pc, #44]	; (9000ffdc <ipfrag_free_pbuf_custom+0x58>)
9000ffae:	f240 22cf 	movw	r2, #719	; 0x2cf
9000ffb2:	490d      	ldr	r1, [pc, #52]	; (9000ffe8 <ipfrag_free_pbuf_custom+0x64>)
9000ffb4:	480b      	ldr	r0, [pc, #44]	; (9000ffe4 <ipfrag_free_pbuf_custom+0x60>)
9000ffb6:	f000 fa99 	bl	900104ec <iprintf>
  if (pcr->original != NULL) {
9000ffba:	68fb      	ldr	r3, [r7, #12]
9000ffbc:	695b      	ldr	r3, [r3, #20]
9000ffbe:	2b00      	cmp	r3, #0
9000ffc0:	d004      	beq.n	9000ffcc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
9000ffc2:	68fb      	ldr	r3, [r7, #12]
9000ffc4:	695b      	ldr	r3, [r3, #20]
9000ffc6:	4618      	mov	r0, r3
9000ffc8:	f7f7 f97a 	bl	900072c0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
9000ffcc:	68f8      	ldr	r0, [r7, #12]
9000ffce:	f7ff ffbd 	bl	9000ff4c <ip_frag_free_pbuf_custom_ref>
}
9000ffd2:	bf00      	nop
9000ffd4:	3710      	adds	r7, #16
9000ffd6:	46bd      	mov	sp, r7
9000ffd8:	bd80      	pop	{r7, pc}
9000ffda:	bf00      	nop
9000ffdc:	90014414 	.word	0x90014414
9000ffe0:	900145d8 	.word	0x900145d8
9000ffe4:	9001445c 	.word	0x9001445c
9000ffe8:	900145e4 	.word	0x900145e4

9000ffec <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
9000ffec:	b580      	push	{r7, lr}
9000ffee:	b094      	sub	sp, #80	; 0x50
9000fff0:	af02      	add	r7, sp, #8
9000fff2:	60f8      	str	r0, [r7, #12]
9000fff4:	60b9      	str	r1, [r7, #8]
9000fff6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
9000fff8:	2300      	movs	r3, #0
9000fffa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
9000fffe:	68bb      	ldr	r3, [r7, #8]
90010000:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
90010002:	3b14      	subs	r3, #20
90010004:	2b00      	cmp	r3, #0
90010006:	da00      	bge.n	9001000a <ip4_frag+0x1e>
90010008:	3307      	adds	r3, #7
9001000a:	10db      	asrs	r3, r3, #3
9001000c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
9001000e:	2314      	movs	r3, #20
90010010:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
90010012:	68fb      	ldr	r3, [r7, #12]
90010014:	685b      	ldr	r3, [r3, #4]
90010016:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
90010018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9001001a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
9001001c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9001001e:	781b      	ldrb	r3, [r3, #0]
90010020:	f003 030f 	and.w	r3, r3, #15
90010024:	b2db      	uxtb	r3, r3
90010026:	009b      	lsls	r3, r3, #2
90010028:	b2db      	uxtb	r3, r3
9001002a:	2b14      	cmp	r3, #20
9001002c:	d002      	beq.n	90010034 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
9001002e:	f06f 0305 	mvn.w	r3, #5
90010032:	e110      	b.n	90010256 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
90010034:	68fb      	ldr	r3, [r7, #12]
90010036:	895b      	ldrh	r3, [r3, #10]
90010038:	2b13      	cmp	r3, #19
9001003a:	d809      	bhi.n	90010050 <ip4_frag+0x64>
9001003c:	4b88      	ldr	r3, [pc, #544]	; (90010260 <ip4_frag+0x274>)
9001003e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
90010042:	4988      	ldr	r1, [pc, #544]	; (90010264 <ip4_frag+0x278>)
90010044:	4888      	ldr	r0, [pc, #544]	; (90010268 <ip4_frag+0x27c>)
90010046:	f000 fa51 	bl	900104ec <iprintf>
9001004a:	f06f 0305 	mvn.w	r3, #5
9001004e:	e102      	b.n	90010256 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
90010050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90010052:	88db      	ldrh	r3, [r3, #6]
90010054:	b29b      	uxth	r3, r3
90010056:	4618      	mov	r0, r3
90010058:	f7f5 fd6a 	bl	90005b30 <lwip_htons>
9001005c:	4603      	mov	r3, r0
9001005e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
90010060:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
90010062:	f3c3 030c 	ubfx	r3, r3, #0, #13
90010066:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
9001006a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
9001006c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
90010070:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
90010072:	68fb      	ldr	r3, [r7, #12]
90010074:	891b      	ldrh	r3, [r3, #8]
90010076:	3b14      	subs	r3, #20
90010078:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
9001007c:	e0e1      	b.n	90010242 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
9001007e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
90010080:	00db      	lsls	r3, r3, #3
90010082:	b29b      	uxth	r3, r3
90010084:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
90010088:	4293      	cmp	r3, r2
9001008a:	bf28      	it	cs
9001008c:	4613      	movcs	r3, r2
9001008e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
90010090:	f44f 7220 	mov.w	r2, #640	; 0x280
90010094:	2114      	movs	r1, #20
90010096:	200e      	movs	r0, #14
90010098:	f7f6 fe2e 	bl	90006cf8 <pbuf_alloc>
9001009c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
9001009e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900100a0:	2b00      	cmp	r3, #0
900100a2:	f000 80d5 	beq.w	90010250 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
900100a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900100a8:	895b      	ldrh	r3, [r3, #10]
900100aa:	2b13      	cmp	r3, #19
900100ac:	d806      	bhi.n	900100bc <ip4_frag+0xd0>
900100ae:	4b6c      	ldr	r3, [pc, #432]	; (90010260 <ip4_frag+0x274>)
900100b0:	f44f 7249 	mov.w	r2, #804	; 0x324
900100b4:	496d      	ldr	r1, [pc, #436]	; (9001026c <ip4_frag+0x280>)
900100b6:	486c      	ldr	r0, [pc, #432]	; (90010268 <ip4_frag+0x27c>)
900100b8:	f000 fa18 	bl	900104ec <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
900100bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900100be:	685b      	ldr	r3, [r3, #4]
900100c0:	2214      	movs	r2, #20
900100c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
900100c4:	4618      	mov	r0, r3
900100c6:	f000 f9e1 	bl	9001048c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
900100ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900100cc:	685b      	ldr	r3, [r3, #4]
900100ce:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
900100d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
900100d2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
900100d6:	e064      	b.n	900101a2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
900100d8:	68fb      	ldr	r3, [r7, #12]
900100da:	895a      	ldrh	r2, [r3, #10]
900100dc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
900100de:	1ad3      	subs	r3, r2, r3
900100e0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
900100e2:	68fb      	ldr	r3, [r7, #12]
900100e4:	895b      	ldrh	r3, [r3, #10]
900100e6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
900100e8:	429a      	cmp	r2, r3
900100ea:	d906      	bls.n	900100fa <ip4_frag+0x10e>
900100ec:	4b5c      	ldr	r3, [pc, #368]	; (90010260 <ip4_frag+0x274>)
900100ee:	f240 322d 	movw	r2, #813	; 0x32d
900100f2:	495f      	ldr	r1, [pc, #380]	; (90010270 <ip4_frag+0x284>)
900100f4:	485c      	ldr	r0, [pc, #368]	; (90010268 <ip4_frag+0x27c>)
900100f6:	f000 f9f9 	bl	900104ec <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
900100fa:	8bfa      	ldrh	r2, [r7, #30]
900100fc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
90010100:	4293      	cmp	r3, r2
90010102:	bf28      	it	cs
90010104:	4613      	movcs	r3, r2
90010106:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
9001010a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
9001010e:	2b00      	cmp	r3, #0
90010110:	d105      	bne.n	9001011e <ip4_frag+0x132>
        poff = 0;
90010112:	2300      	movs	r3, #0
90010114:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
90010116:	68fb      	ldr	r3, [r7, #12]
90010118:	681b      	ldr	r3, [r3, #0]
9001011a:	60fb      	str	r3, [r7, #12]
        continue;
9001011c:	e041      	b.n	900101a2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
9001011e:	f7ff ff0d 	bl	9000ff3c <ip_frag_alloc_pbuf_custom_ref>
90010122:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
90010124:	69bb      	ldr	r3, [r7, #24]
90010126:	2b00      	cmp	r3, #0
90010128:	d103      	bne.n	90010132 <ip4_frag+0x146>
        pbuf_free(rambuf);
9001012a:	6a78      	ldr	r0, [r7, #36]	; 0x24
9001012c:	f7f7 f8c8 	bl	900072c0 <pbuf_free>
        goto memerr;
90010130:	e08f      	b.n	90010252 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
90010132:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
90010134:	68fb      	ldr	r3, [r7, #12]
90010136:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
90010138:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
9001013a:	4413      	add	r3, r2
9001013c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
90010140:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
90010144:	9201      	str	r2, [sp, #4]
90010146:	9300      	str	r3, [sp, #0]
90010148:	4603      	mov	r3, r0
9001014a:	2241      	movs	r2, #65	; 0x41
9001014c:	2000      	movs	r0, #0
9001014e:	f7f6 fefd 	bl	90006f4c <pbuf_alloced_custom>
90010152:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
90010154:	697b      	ldr	r3, [r7, #20]
90010156:	2b00      	cmp	r3, #0
90010158:	d106      	bne.n	90010168 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
9001015a:	69b8      	ldr	r0, [r7, #24]
9001015c:	f7ff fef6 	bl	9000ff4c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
90010160:	6a78      	ldr	r0, [r7, #36]	; 0x24
90010162:	f7f7 f8ad 	bl	900072c0 <pbuf_free>
        goto memerr;
90010166:	e074      	b.n	90010252 <ip4_frag+0x266>
      }
      pbuf_ref(p);
90010168:	68f8      	ldr	r0, [r7, #12]
9001016a:	f7f7 f949 	bl	90007400 <pbuf_ref>
      pcr->original = p;
9001016e:	69bb      	ldr	r3, [r7, #24]
90010170:	68fa      	ldr	r2, [r7, #12]
90010172:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
90010174:	69bb      	ldr	r3, [r7, #24]
90010176:	4a3f      	ldr	r2, [pc, #252]	; (90010274 <ip4_frag+0x288>)
90010178:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
9001017a:	6979      	ldr	r1, [r7, #20]
9001017c:	6a78      	ldr	r0, [r7, #36]	; 0x24
9001017e:	f7f7 f961 	bl	90007444 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
90010182:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
90010186:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
9001018a:	1ad3      	subs	r3, r2, r3
9001018c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
90010190:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
90010194:	2b00      	cmp	r3, #0
90010196:	d004      	beq.n	900101a2 <ip4_frag+0x1b6>
        poff = 0;
90010198:	2300      	movs	r3, #0
9001019a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
9001019c:	68fb      	ldr	r3, [r7, #12]
9001019e:	681b      	ldr	r3, [r3, #0]
900101a0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
900101a2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
900101a6:	2b00      	cmp	r3, #0
900101a8:	d196      	bne.n	900100d8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
900101aa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
900101ac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
900101b0:	4413      	add	r3, r2
900101b2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
900101b4:	68bb      	ldr	r3, [r7, #8]
900101b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
900101b8:	f1a3 0213 	sub.w	r2, r3, #19
900101bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
900101c0:	429a      	cmp	r2, r3
900101c2:	bfcc      	ite	gt
900101c4:	2301      	movgt	r3, #1
900101c6:	2300      	movle	r3, #0
900101c8:	b2db      	uxtb	r3, r3
900101ca:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
900101cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
900101d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
900101d4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
900101d6:	6a3b      	ldr	r3, [r7, #32]
900101d8:	2b00      	cmp	r3, #0
900101da:	d002      	beq.n	900101e2 <ip4_frag+0x1f6>
900101dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900101de:	2b00      	cmp	r3, #0
900101e0:	d003      	beq.n	900101ea <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
900101e2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
900101e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
900101e8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
900101ea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
900101ec:	4618      	mov	r0, r3
900101ee:	f7f5 fc9f 	bl	90005b30 <lwip_htons>
900101f2:	4603      	mov	r3, r0
900101f4:	461a      	mov	r2, r3
900101f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900101f8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
900101fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
900101fc:	3314      	adds	r3, #20
900101fe:	b29b      	uxth	r3, r3
90010200:	4618      	mov	r0, r3
90010202:	f7f5 fc95 	bl	90005b30 <lwip_htons>
90010206:	4603      	mov	r3, r0
90010208:	461a      	mov	r2, r3
9001020a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9001020c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
9001020e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90010210:	2200      	movs	r2, #0
90010212:	729a      	strb	r2, [r3, #10]
90010214:	2200      	movs	r2, #0
90010216:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
90010218:	68bb      	ldr	r3, [r7, #8]
9001021a:	695b      	ldr	r3, [r3, #20]
9001021c:	687a      	ldr	r2, [r7, #4]
9001021e:	6a79      	ldr	r1, [r7, #36]	; 0x24
90010220:	68b8      	ldr	r0, [r7, #8]
90010222:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
90010224:	6a78      	ldr	r0, [r7, #36]	; 0x24
90010226:	f7f7 f84b 	bl	900072c0 <pbuf_free>
    left = (u16_t)(left - fragsize);
9001022a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
9001022e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
90010230:	1ad3      	subs	r3, r2, r3
90010232:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
90010236:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
9001023a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
9001023c:	4413      	add	r3, r2
9001023e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
90010242:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
90010246:	2b00      	cmp	r3, #0
90010248:	f47f af19 	bne.w	9001007e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
9001024c:	2300      	movs	r3, #0
9001024e:	e002      	b.n	90010256 <ip4_frag+0x26a>
      goto memerr;
90010250:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
90010252:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
90010256:	4618      	mov	r0, r3
90010258:	3748      	adds	r7, #72	; 0x48
9001025a:	46bd      	mov	sp, r7
9001025c:	bd80      	pop	{r7, pc}
9001025e:	bf00      	nop
90010260:	90014414 	.word	0x90014414
90010264:	900145f0 	.word	0x900145f0
90010268:	9001445c 	.word	0x9001445c
9001026c:	9001460c 	.word	0x9001460c
90010270:	9001462c 	.word	0x9001462c
90010274:	9000ff85 	.word	0x9000ff85

90010278 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
90010278:	b580      	push	{r7, lr}
9001027a:	b086      	sub	sp, #24
9001027c:	af00      	add	r7, sp, #0
9001027e:	6078      	str	r0, [r7, #4]
90010280:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
90010282:	230e      	movs	r3, #14
90010284:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
90010286:	687b      	ldr	r3, [r7, #4]
90010288:	895b      	ldrh	r3, [r3, #10]
9001028a:	2b0e      	cmp	r3, #14
9001028c:	d96e      	bls.n	9001036c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
9001028e:	687b      	ldr	r3, [r7, #4]
90010290:	7bdb      	ldrb	r3, [r3, #15]
90010292:	2b00      	cmp	r3, #0
90010294:	d106      	bne.n	900102a4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
90010296:	683b      	ldr	r3, [r7, #0]
90010298:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
9001029c:	3301      	adds	r3, #1
9001029e:	b2da      	uxtb	r2, r3
900102a0:	687b      	ldr	r3, [r7, #4]
900102a2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
900102a4:	687b      	ldr	r3, [r7, #4]
900102a6:	685b      	ldr	r3, [r3, #4]
900102a8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
900102aa:	693b      	ldr	r3, [r7, #16]
900102ac:	7b1a      	ldrb	r2, [r3, #12]
900102ae:	7b5b      	ldrb	r3, [r3, #13]
900102b0:	021b      	lsls	r3, r3, #8
900102b2:	4313      	orrs	r3, r2
900102b4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
900102b6:	693b      	ldr	r3, [r7, #16]
900102b8:	781b      	ldrb	r3, [r3, #0]
900102ba:	f003 0301 	and.w	r3, r3, #1
900102be:	2b00      	cmp	r3, #0
900102c0:	d023      	beq.n	9001030a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
900102c2:	693b      	ldr	r3, [r7, #16]
900102c4:	781b      	ldrb	r3, [r3, #0]
900102c6:	2b01      	cmp	r3, #1
900102c8:	d10f      	bne.n	900102ea <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
900102ca:	693b      	ldr	r3, [r7, #16]
900102cc:	785b      	ldrb	r3, [r3, #1]
900102ce:	2b00      	cmp	r3, #0
900102d0:	d11b      	bne.n	9001030a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
900102d2:	693b      	ldr	r3, [r7, #16]
900102d4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
900102d6:	2b5e      	cmp	r3, #94	; 0x5e
900102d8:	d117      	bne.n	9001030a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
900102da:	687b      	ldr	r3, [r7, #4]
900102dc:	7b5b      	ldrb	r3, [r3, #13]
900102de:	f043 0310 	orr.w	r3, r3, #16
900102e2:	b2da      	uxtb	r2, r3
900102e4:	687b      	ldr	r3, [r7, #4]
900102e6:	735a      	strb	r2, [r3, #13]
900102e8:	e00f      	b.n	9001030a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
900102ea:	693b      	ldr	r3, [r7, #16]
900102ec:	2206      	movs	r2, #6
900102ee:	4928      	ldr	r1, [pc, #160]	; (90010390 <ethernet_input+0x118>)
900102f0:	4618      	mov	r0, r3
900102f2:	f000 f8bb 	bl	9001046c <memcmp>
900102f6:	4603      	mov	r3, r0
900102f8:	2b00      	cmp	r3, #0
900102fa:	d106      	bne.n	9001030a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
900102fc:	687b      	ldr	r3, [r7, #4]
900102fe:	7b5b      	ldrb	r3, [r3, #13]
90010300:	f043 0308 	orr.w	r3, r3, #8
90010304:	b2da      	uxtb	r2, r3
90010306:	687b      	ldr	r3, [r7, #4]
90010308:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
9001030a:	89fb      	ldrh	r3, [r7, #14]
9001030c:	2b08      	cmp	r3, #8
9001030e:	d003      	beq.n	90010318 <ethernet_input+0xa0>
90010310:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
90010314:	d014      	beq.n	90010340 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
90010316:	e032      	b.n	9001037e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
90010318:	683b      	ldr	r3, [r7, #0]
9001031a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
9001031e:	f003 0308 	and.w	r3, r3, #8
90010322:	2b00      	cmp	r3, #0
90010324:	d024      	beq.n	90010370 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
90010326:	8afb      	ldrh	r3, [r7, #22]
90010328:	4619      	mov	r1, r3
9001032a:	6878      	ldr	r0, [r7, #4]
9001032c:	f7f6 ff42 	bl	900071b4 <pbuf_remove_header>
90010330:	4603      	mov	r3, r0
90010332:	2b00      	cmp	r3, #0
90010334:	d11e      	bne.n	90010374 <ethernet_input+0xfc>
        ip4_input(p, netif);
90010336:	6839      	ldr	r1, [r7, #0]
90010338:	6878      	ldr	r0, [r7, #4]
9001033a:	f7fe ff21 	bl	9000f180 <ip4_input>
      break;
9001033e:	e013      	b.n	90010368 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
90010340:	683b      	ldr	r3, [r7, #0]
90010342:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
90010346:	f003 0308 	and.w	r3, r3, #8
9001034a:	2b00      	cmp	r3, #0
9001034c:	d014      	beq.n	90010378 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
9001034e:	8afb      	ldrh	r3, [r7, #22]
90010350:	4619      	mov	r1, r3
90010352:	6878      	ldr	r0, [r7, #4]
90010354:	f7f6 ff2e 	bl	900071b4 <pbuf_remove_header>
90010358:	4603      	mov	r3, r0
9001035a:	2b00      	cmp	r3, #0
9001035c:	d10e      	bne.n	9001037c <ethernet_input+0x104>
        etharp_input(p, netif);
9001035e:	6839      	ldr	r1, [r7, #0]
90010360:	6878      	ldr	r0, [r7, #4]
90010362:	f7fe f8c1 	bl	9000e4e8 <etharp_input>
      break;
90010366:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
90010368:	2300      	movs	r3, #0
9001036a:	e00c      	b.n	90010386 <ethernet_input+0x10e>
    goto free_and_return;
9001036c:	bf00      	nop
9001036e:	e006      	b.n	9001037e <ethernet_input+0x106>
        goto free_and_return;
90010370:	bf00      	nop
90010372:	e004      	b.n	9001037e <ethernet_input+0x106>
        goto free_and_return;
90010374:	bf00      	nop
90010376:	e002      	b.n	9001037e <ethernet_input+0x106>
        goto free_and_return;
90010378:	bf00      	nop
9001037a:	e000      	b.n	9001037e <ethernet_input+0x106>
        goto free_and_return;
9001037c:	bf00      	nop

free_and_return:
  pbuf_free(p);
9001037e:	6878      	ldr	r0, [r7, #4]
90010380:	f7f6 ff9e 	bl	900072c0 <pbuf_free>
  return ERR_OK;
90010384:	2300      	movs	r3, #0
}
90010386:	4618      	mov	r0, r3
90010388:	3718      	adds	r7, #24
9001038a:	46bd      	mov	sp, r7
9001038c:	bd80      	pop	{r7, pc}
9001038e:	bf00      	nop
90010390:	90015b2c 	.word	0x90015b2c

90010394 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
90010394:	b580      	push	{r7, lr}
90010396:	b086      	sub	sp, #24
90010398:	af00      	add	r7, sp, #0
9001039a:	60f8      	str	r0, [r7, #12]
9001039c:	60b9      	str	r1, [r7, #8]
9001039e:	607a      	str	r2, [r7, #4]
900103a0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
900103a2:	8c3b      	ldrh	r3, [r7, #32]
900103a4:	4618      	mov	r0, r3
900103a6:	f7f5 fbc3 	bl	90005b30 <lwip_htons>
900103aa:	4603      	mov	r3, r0
900103ac:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
900103ae:	210e      	movs	r1, #14
900103b0:	68b8      	ldr	r0, [r7, #8]
900103b2:	f7f6 feef 	bl	90007194 <pbuf_add_header>
900103b6:	4603      	mov	r3, r0
900103b8:	2b00      	cmp	r3, #0
900103ba:	d125      	bne.n	90010408 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
900103bc:	68bb      	ldr	r3, [r7, #8]
900103be:	685b      	ldr	r3, [r3, #4]
900103c0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
900103c2:	693b      	ldr	r3, [r7, #16]
900103c4:	8afa      	ldrh	r2, [r7, #22]
900103c6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
900103c8:	693b      	ldr	r3, [r7, #16]
900103ca:	2206      	movs	r2, #6
900103cc:	6839      	ldr	r1, [r7, #0]
900103ce:	4618      	mov	r0, r3
900103d0:	f000 f85c 	bl	9001048c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
900103d4:	693b      	ldr	r3, [r7, #16]
900103d6:	3306      	adds	r3, #6
900103d8:	2206      	movs	r2, #6
900103da:	6879      	ldr	r1, [r7, #4]
900103dc:	4618      	mov	r0, r3
900103de:	f000 f855 	bl	9001048c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
900103e2:	68fb      	ldr	r3, [r7, #12]
900103e4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
900103e8:	2b06      	cmp	r3, #6
900103ea:	d006      	beq.n	900103fa <ethernet_output+0x66>
900103ec:	4b0a      	ldr	r3, [pc, #40]	; (90010418 <ethernet_output+0x84>)
900103ee:	f44f 7299 	mov.w	r2, #306	; 0x132
900103f2:	490a      	ldr	r1, [pc, #40]	; (9001041c <ethernet_output+0x88>)
900103f4:	480a      	ldr	r0, [pc, #40]	; (90010420 <ethernet_output+0x8c>)
900103f6:	f000 f879 	bl	900104ec <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
900103fa:	68fb      	ldr	r3, [r7, #12]
900103fc:	699b      	ldr	r3, [r3, #24]
900103fe:	68b9      	ldr	r1, [r7, #8]
90010400:	68f8      	ldr	r0, [r7, #12]
90010402:	4798      	blx	r3
90010404:	4603      	mov	r3, r0
90010406:	e002      	b.n	9001040e <ethernet_output+0x7a>
      goto pbuf_header_failed;
90010408:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
9001040a:	f06f 0301 	mvn.w	r3, #1
}
9001040e:	4618      	mov	r0, r3
90010410:	3718      	adds	r7, #24
90010412:	46bd      	mov	sp, r7
90010414:	bd80      	pop	{r7, pc}
90010416:	bf00      	nop
90010418:	9001463c 	.word	0x9001463c
9001041c:	90014674 	.word	0x90014674
90010420:	900146a8 	.word	0x900146a8

90010424 <__libc_init_array>:
90010424:	b570      	push	{r4, r5, r6, lr}
90010426:	4d0d      	ldr	r5, [pc, #52]	; (9001045c <__libc_init_array+0x38>)
90010428:	4c0d      	ldr	r4, [pc, #52]	; (90010460 <__libc_init_array+0x3c>)
9001042a:	1b64      	subs	r4, r4, r5
9001042c:	10a4      	asrs	r4, r4, #2
9001042e:	2600      	movs	r6, #0
90010430:	42a6      	cmp	r6, r4
90010432:	d109      	bne.n	90010448 <__libc_init_array+0x24>
90010434:	4d0b      	ldr	r5, [pc, #44]	; (90010464 <__libc_init_array+0x40>)
90010436:	4c0c      	ldr	r4, [pc, #48]	; (90010468 <__libc_init_array+0x44>)
90010438:	f001 fa94 	bl	90011964 <_init>
9001043c:	1b64      	subs	r4, r4, r5
9001043e:	10a4      	asrs	r4, r4, #2
90010440:	2600      	movs	r6, #0
90010442:	42a6      	cmp	r6, r4
90010444:	d105      	bne.n	90010452 <__libc_init_array+0x2e>
90010446:	bd70      	pop	{r4, r5, r6, pc}
90010448:	f855 3b04 	ldr.w	r3, [r5], #4
9001044c:	4798      	blx	r3
9001044e:	3601      	adds	r6, #1
90010450:	e7ee      	b.n	90010430 <__libc_init_array+0xc>
90010452:	f855 3b04 	ldr.w	r3, [r5], #4
90010456:	4798      	blx	r3
90010458:	3601      	adds	r6, #1
9001045a:	e7f2      	b.n	90010442 <__libc_init_array+0x1e>
9001045c:	90015c8c 	.word	0x90015c8c
90010460:	90015c8c 	.word	0x90015c8c
90010464:	90015c8c 	.word	0x90015c8c
90010468:	90015c90 	.word	0x90015c90

9001046c <memcmp>:
9001046c:	b510      	push	{r4, lr}
9001046e:	3901      	subs	r1, #1
90010470:	4402      	add	r2, r0
90010472:	4290      	cmp	r0, r2
90010474:	d101      	bne.n	9001047a <memcmp+0xe>
90010476:	2000      	movs	r0, #0
90010478:	e005      	b.n	90010486 <memcmp+0x1a>
9001047a:	7803      	ldrb	r3, [r0, #0]
9001047c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
90010480:	42a3      	cmp	r3, r4
90010482:	d001      	beq.n	90010488 <memcmp+0x1c>
90010484:	1b18      	subs	r0, r3, r4
90010486:	bd10      	pop	{r4, pc}
90010488:	3001      	adds	r0, #1
9001048a:	e7f2      	b.n	90010472 <memcmp+0x6>

9001048c <memcpy>:
9001048c:	440a      	add	r2, r1
9001048e:	4291      	cmp	r1, r2
90010490:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
90010494:	d100      	bne.n	90010498 <memcpy+0xc>
90010496:	4770      	bx	lr
90010498:	b510      	push	{r4, lr}
9001049a:	f811 4b01 	ldrb.w	r4, [r1], #1
9001049e:	f803 4f01 	strb.w	r4, [r3, #1]!
900104a2:	4291      	cmp	r1, r2
900104a4:	d1f9      	bne.n	9001049a <memcpy+0xe>
900104a6:	bd10      	pop	{r4, pc}

900104a8 <memmove>:
900104a8:	4288      	cmp	r0, r1
900104aa:	b510      	push	{r4, lr}
900104ac:	eb01 0402 	add.w	r4, r1, r2
900104b0:	d902      	bls.n	900104b8 <memmove+0x10>
900104b2:	4284      	cmp	r4, r0
900104b4:	4623      	mov	r3, r4
900104b6:	d807      	bhi.n	900104c8 <memmove+0x20>
900104b8:	1e43      	subs	r3, r0, #1
900104ba:	42a1      	cmp	r1, r4
900104bc:	d008      	beq.n	900104d0 <memmove+0x28>
900104be:	f811 2b01 	ldrb.w	r2, [r1], #1
900104c2:	f803 2f01 	strb.w	r2, [r3, #1]!
900104c6:	e7f8      	b.n	900104ba <memmove+0x12>
900104c8:	4402      	add	r2, r0
900104ca:	4601      	mov	r1, r0
900104cc:	428a      	cmp	r2, r1
900104ce:	d100      	bne.n	900104d2 <memmove+0x2a>
900104d0:	bd10      	pop	{r4, pc}
900104d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
900104d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
900104da:	e7f7      	b.n	900104cc <memmove+0x24>

900104dc <memset>:
900104dc:	4402      	add	r2, r0
900104de:	4603      	mov	r3, r0
900104e0:	4293      	cmp	r3, r2
900104e2:	d100      	bne.n	900104e6 <memset+0xa>
900104e4:	4770      	bx	lr
900104e6:	f803 1b01 	strb.w	r1, [r3], #1
900104ea:	e7f9      	b.n	900104e0 <memset+0x4>

900104ec <iprintf>:
900104ec:	b40f      	push	{r0, r1, r2, r3}
900104ee:	4b0a      	ldr	r3, [pc, #40]	; (90010518 <iprintf+0x2c>)
900104f0:	b513      	push	{r0, r1, r4, lr}
900104f2:	681c      	ldr	r4, [r3, #0]
900104f4:	b124      	cbz	r4, 90010500 <iprintf+0x14>
900104f6:	69a3      	ldr	r3, [r4, #24]
900104f8:	b913      	cbnz	r3, 90010500 <iprintf+0x14>
900104fa:	4620      	mov	r0, r4
900104fc:	f000 f91a 	bl	90010734 <__sinit>
90010500:	ab05      	add	r3, sp, #20
90010502:	9a04      	ldr	r2, [sp, #16]
90010504:	68a1      	ldr	r1, [r4, #8]
90010506:	9301      	str	r3, [sp, #4]
90010508:	4620      	mov	r0, r4
9001050a:	f000 fc33 	bl	90010d74 <_vfiprintf_r>
9001050e:	b002      	add	sp, #8
90010510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90010514:	b004      	add	sp, #16
90010516:	4770      	bx	lr
90010518:	2000003c 	.word	0x2000003c

9001051c <rand>:
9001051c:	4b16      	ldr	r3, [pc, #88]	; (90010578 <rand+0x5c>)
9001051e:	b510      	push	{r4, lr}
90010520:	681c      	ldr	r4, [r3, #0]
90010522:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90010524:	b9b3      	cbnz	r3, 90010554 <rand+0x38>
90010526:	2018      	movs	r0, #24
90010528:	f000 f9b6 	bl	90010898 <malloc>
9001052c:	63a0      	str	r0, [r4, #56]	; 0x38
9001052e:	b928      	cbnz	r0, 9001053c <rand+0x20>
90010530:	4602      	mov	r2, r0
90010532:	4b12      	ldr	r3, [pc, #72]	; (9001057c <rand+0x60>)
90010534:	4812      	ldr	r0, [pc, #72]	; (90010580 <rand+0x64>)
90010536:	214e      	movs	r1, #78	; 0x4e
90010538:	f000 f886 	bl	90010648 <__assert_func>
9001053c:	4a11      	ldr	r2, [pc, #68]	; (90010584 <rand+0x68>)
9001053e:	4b12      	ldr	r3, [pc, #72]	; (90010588 <rand+0x6c>)
90010540:	e9c0 2300 	strd	r2, r3, [r0]
90010544:	4b11      	ldr	r3, [pc, #68]	; (9001058c <rand+0x70>)
90010546:	6083      	str	r3, [r0, #8]
90010548:	230b      	movs	r3, #11
9001054a:	8183      	strh	r3, [r0, #12]
9001054c:	2201      	movs	r2, #1
9001054e:	2300      	movs	r3, #0
90010550:	e9c0 2304 	strd	r2, r3, [r0, #16]
90010554:	6ba4      	ldr	r4, [r4, #56]	; 0x38
90010556:	4a0e      	ldr	r2, [pc, #56]	; (90010590 <rand+0x74>)
90010558:	6920      	ldr	r0, [r4, #16]
9001055a:	6963      	ldr	r3, [r4, #20]
9001055c:	490d      	ldr	r1, [pc, #52]	; (90010594 <rand+0x78>)
9001055e:	4342      	muls	r2, r0
90010560:	fb01 2203 	mla	r2, r1, r3, r2
90010564:	fba0 0101 	umull	r0, r1, r0, r1
90010568:	1c43      	adds	r3, r0, #1
9001056a:	eb42 0001 	adc.w	r0, r2, r1
9001056e:	e9c4 3004 	strd	r3, r0, [r4, #16]
90010572:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
90010576:	bd10      	pop	{r4, pc}
90010578:	2000003c 	.word	0x2000003c
9001057c:	90015b40 	.word	0x90015b40
90010580:	90015b57 	.word	0x90015b57
90010584:	abcd330e 	.word	0xabcd330e
90010588:	e66d1234 	.word	0xe66d1234
9001058c:	0005deec 	.word	0x0005deec
90010590:	5851f42d 	.word	0x5851f42d
90010594:	4c957f2d 	.word	0x4c957f2d

90010598 <siprintf>:
90010598:	b40e      	push	{r1, r2, r3}
9001059a:	b500      	push	{lr}
9001059c:	b09c      	sub	sp, #112	; 0x70
9001059e:	ab1d      	add	r3, sp, #116	; 0x74
900105a0:	9002      	str	r0, [sp, #8]
900105a2:	9006      	str	r0, [sp, #24]
900105a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
900105a8:	4809      	ldr	r0, [pc, #36]	; (900105d0 <siprintf+0x38>)
900105aa:	9107      	str	r1, [sp, #28]
900105ac:	9104      	str	r1, [sp, #16]
900105ae:	4909      	ldr	r1, [pc, #36]	; (900105d4 <siprintf+0x3c>)
900105b0:	f853 2b04 	ldr.w	r2, [r3], #4
900105b4:	9105      	str	r1, [sp, #20]
900105b6:	6800      	ldr	r0, [r0, #0]
900105b8:	9301      	str	r3, [sp, #4]
900105ba:	a902      	add	r1, sp, #8
900105bc:	f000 fab0 	bl	90010b20 <_svfiprintf_r>
900105c0:	9b02      	ldr	r3, [sp, #8]
900105c2:	2200      	movs	r2, #0
900105c4:	701a      	strb	r2, [r3, #0]
900105c6:	b01c      	add	sp, #112	; 0x70
900105c8:	f85d eb04 	ldr.w	lr, [sp], #4
900105cc:	b003      	add	sp, #12
900105ce:	4770      	bx	lr
900105d0:	2000003c 	.word	0x2000003c
900105d4:	ffff0208 	.word	0xffff0208

900105d8 <strcat>:
900105d8:	b510      	push	{r4, lr}
900105da:	4602      	mov	r2, r0
900105dc:	7814      	ldrb	r4, [r2, #0]
900105de:	4613      	mov	r3, r2
900105e0:	3201      	adds	r2, #1
900105e2:	2c00      	cmp	r4, #0
900105e4:	d1fa      	bne.n	900105dc <strcat+0x4>
900105e6:	3b01      	subs	r3, #1
900105e8:	f811 2b01 	ldrb.w	r2, [r1], #1
900105ec:	f803 2f01 	strb.w	r2, [r3, #1]!
900105f0:	2a00      	cmp	r2, #0
900105f2:	d1f9      	bne.n	900105e8 <strcat+0x10>
900105f4:	bd10      	pop	{r4, pc}

900105f6 <strchr>:
900105f6:	b2c9      	uxtb	r1, r1
900105f8:	4603      	mov	r3, r0
900105fa:	f810 2b01 	ldrb.w	r2, [r0], #1
900105fe:	b11a      	cbz	r2, 90010608 <strchr+0x12>
90010600:	428a      	cmp	r2, r1
90010602:	d1f9      	bne.n	900105f8 <strchr+0x2>
90010604:	4618      	mov	r0, r3
90010606:	4770      	bx	lr
90010608:	2900      	cmp	r1, #0
9001060a:	bf18      	it	ne
9001060c:	2300      	movne	r3, #0
9001060e:	e7f9      	b.n	90010604 <strchr+0xe>

90010610 <strcpy>:
90010610:	4603      	mov	r3, r0
90010612:	f811 2b01 	ldrb.w	r2, [r1], #1
90010616:	f803 2b01 	strb.w	r2, [r3], #1
9001061a:	2a00      	cmp	r2, #0
9001061c:	d1f9      	bne.n	90010612 <strcpy+0x2>
9001061e:	4770      	bx	lr

90010620 <strncmp>:
90010620:	b510      	push	{r4, lr}
90010622:	b17a      	cbz	r2, 90010644 <strncmp+0x24>
90010624:	4603      	mov	r3, r0
90010626:	3901      	subs	r1, #1
90010628:	1884      	adds	r4, r0, r2
9001062a:	f813 0b01 	ldrb.w	r0, [r3], #1
9001062e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
90010632:	4290      	cmp	r0, r2
90010634:	d101      	bne.n	9001063a <strncmp+0x1a>
90010636:	42a3      	cmp	r3, r4
90010638:	d101      	bne.n	9001063e <strncmp+0x1e>
9001063a:	1a80      	subs	r0, r0, r2
9001063c:	bd10      	pop	{r4, pc}
9001063e:	2800      	cmp	r0, #0
90010640:	d1f3      	bne.n	9001062a <strncmp+0xa>
90010642:	e7fa      	b.n	9001063a <strncmp+0x1a>
90010644:	4610      	mov	r0, r2
90010646:	e7f9      	b.n	9001063c <strncmp+0x1c>

90010648 <__assert_func>:
90010648:	b51f      	push	{r0, r1, r2, r3, r4, lr}
9001064a:	4614      	mov	r4, r2
9001064c:	461a      	mov	r2, r3
9001064e:	4b09      	ldr	r3, [pc, #36]	; (90010674 <__assert_func+0x2c>)
90010650:	681b      	ldr	r3, [r3, #0]
90010652:	4605      	mov	r5, r0
90010654:	68d8      	ldr	r0, [r3, #12]
90010656:	b14c      	cbz	r4, 9001066c <__assert_func+0x24>
90010658:	4b07      	ldr	r3, [pc, #28]	; (90010678 <__assert_func+0x30>)
9001065a:	9100      	str	r1, [sp, #0]
9001065c:	e9cd 3401 	strd	r3, r4, [sp, #4]
90010660:	4906      	ldr	r1, [pc, #24]	; (9001067c <__assert_func+0x34>)
90010662:	462b      	mov	r3, r5
90010664:	f000 f8e4 	bl	90010830 <fiprintf>
90010668:	f000 ff6e 	bl	90011548 <abort>
9001066c:	4b04      	ldr	r3, [pc, #16]	; (90010680 <__assert_func+0x38>)
9001066e:	461c      	mov	r4, r3
90010670:	e7f3      	b.n	9001065a <__assert_func+0x12>
90010672:	bf00      	nop
90010674:	2000003c 	.word	0x2000003c
90010678:	90015bb2 	.word	0x90015bb2
9001067c:	90015bbf 	.word	0x90015bbf
90010680:	90015bed 	.word	0x90015bed

90010684 <std>:
90010684:	2300      	movs	r3, #0
90010686:	b510      	push	{r4, lr}
90010688:	4604      	mov	r4, r0
9001068a:	e9c0 3300 	strd	r3, r3, [r0]
9001068e:	e9c0 3304 	strd	r3, r3, [r0, #16]
90010692:	6083      	str	r3, [r0, #8]
90010694:	8181      	strh	r1, [r0, #12]
90010696:	6643      	str	r3, [r0, #100]	; 0x64
90010698:	81c2      	strh	r2, [r0, #14]
9001069a:	6183      	str	r3, [r0, #24]
9001069c:	4619      	mov	r1, r3
9001069e:	2208      	movs	r2, #8
900106a0:	305c      	adds	r0, #92	; 0x5c
900106a2:	f7ff ff1b 	bl	900104dc <memset>
900106a6:	4b05      	ldr	r3, [pc, #20]	; (900106bc <std+0x38>)
900106a8:	6263      	str	r3, [r4, #36]	; 0x24
900106aa:	4b05      	ldr	r3, [pc, #20]	; (900106c0 <std+0x3c>)
900106ac:	62a3      	str	r3, [r4, #40]	; 0x28
900106ae:	4b05      	ldr	r3, [pc, #20]	; (900106c4 <std+0x40>)
900106b0:	62e3      	str	r3, [r4, #44]	; 0x2c
900106b2:	4b05      	ldr	r3, [pc, #20]	; (900106c8 <std+0x44>)
900106b4:	6224      	str	r4, [r4, #32]
900106b6:	6323      	str	r3, [r4, #48]	; 0x30
900106b8:	bd10      	pop	{r4, pc}
900106ba:	bf00      	nop
900106bc:	9001131d 	.word	0x9001131d
900106c0:	9001133f 	.word	0x9001133f
900106c4:	90011377 	.word	0x90011377
900106c8:	9001139b 	.word	0x9001139b

900106cc <_cleanup_r>:
900106cc:	4901      	ldr	r1, [pc, #4]	; (900106d4 <_cleanup_r+0x8>)
900106ce:	f000 b8c1 	b.w	90010854 <_fwalk_reent>
900106d2:	bf00      	nop
900106d4:	90011685 	.word	0x90011685

900106d8 <__sfmoreglue>:
900106d8:	b570      	push	{r4, r5, r6, lr}
900106da:	2268      	movs	r2, #104	; 0x68
900106dc:	1e4d      	subs	r5, r1, #1
900106de:	4355      	muls	r5, r2
900106e0:	460e      	mov	r6, r1
900106e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
900106e6:	f000 f94b 	bl	90010980 <_malloc_r>
900106ea:	4604      	mov	r4, r0
900106ec:	b140      	cbz	r0, 90010700 <__sfmoreglue+0x28>
900106ee:	2100      	movs	r1, #0
900106f0:	e9c0 1600 	strd	r1, r6, [r0]
900106f4:	300c      	adds	r0, #12
900106f6:	60a0      	str	r0, [r4, #8]
900106f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
900106fc:	f7ff feee 	bl	900104dc <memset>
90010700:	4620      	mov	r0, r4
90010702:	bd70      	pop	{r4, r5, r6, pc}

90010704 <__sfp_lock_acquire>:
90010704:	4801      	ldr	r0, [pc, #4]	; (9001070c <__sfp_lock_acquire+0x8>)
90010706:	f000 b8c5 	b.w	90010894 <__retarget_lock_acquire_recursive>
9001070a:	bf00      	nop
9001070c:	2000aa01 	.word	0x2000aa01

90010710 <__sfp_lock_release>:
90010710:	4801      	ldr	r0, [pc, #4]	; (90010718 <__sfp_lock_release+0x8>)
90010712:	f000 b8c0 	b.w	90010896 <__retarget_lock_release_recursive>
90010716:	bf00      	nop
90010718:	2000aa01 	.word	0x2000aa01

9001071c <__sinit_lock_acquire>:
9001071c:	4801      	ldr	r0, [pc, #4]	; (90010724 <__sinit_lock_acquire+0x8>)
9001071e:	f000 b8b9 	b.w	90010894 <__retarget_lock_acquire_recursive>
90010722:	bf00      	nop
90010724:	2000aa02 	.word	0x2000aa02

90010728 <__sinit_lock_release>:
90010728:	4801      	ldr	r0, [pc, #4]	; (90010730 <__sinit_lock_release+0x8>)
9001072a:	f000 b8b4 	b.w	90010896 <__retarget_lock_release_recursive>
9001072e:	bf00      	nop
90010730:	2000aa02 	.word	0x2000aa02

90010734 <__sinit>:
90010734:	b510      	push	{r4, lr}
90010736:	4604      	mov	r4, r0
90010738:	f7ff fff0 	bl	9001071c <__sinit_lock_acquire>
9001073c:	69a3      	ldr	r3, [r4, #24]
9001073e:	b11b      	cbz	r3, 90010748 <__sinit+0x14>
90010740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90010744:	f7ff bff0 	b.w	90010728 <__sinit_lock_release>
90010748:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
9001074c:	6523      	str	r3, [r4, #80]	; 0x50
9001074e:	4b13      	ldr	r3, [pc, #76]	; (9001079c <__sinit+0x68>)
90010750:	4a13      	ldr	r2, [pc, #76]	; (900107a0 <__sinit+0x6c>)
90010752:	681b      	ldr	r3, [r3, #0]
90010754:	62a2      	str	r2, [r4, #40]	; 0x28
90010756:	42a3      	cmp	r3, r4
90010758:	bf04      	itt	eq
9001075a:	2301      	moveq	r3, #1
9001075c:	61a3      	streq	r3, [r4, #24]
9001075e:	4620      	mov	r0, r4
90010760:	f000 f820 	bl	900107a4 <__sfp>
90010764:	6060      	str	r0, [r4, #4]
90010766:	4620      	mov	r0, r4
90010768:	f000 f81c 	bl	900107a4 <__sfp>
9001076c:	60a0      	str	r0, [r4, #8]
9001076e:	4620      	mov	r0, r4
90010770:	f000 f818 	bl	900107a4 <__sfp>
90010774:	2200      	movs	r2, #0
90010776:	60e0      	str	r0, [r4, #12]
90010778:	2104      	movs	r1, #4
9001077a:	6860      	ldr	r0, [r4, #4]
9001077c:	f7ff ff82 	bl	90010684 <std>
90010780:	68a0      	ldr	r0, [r4, #8]
90010782:	2201      	movs	r2, #1
90010784:	2109      	movs	r1, #9
90010786:	f7ff ff7d 	bl	90010684 <std>
9001078a:	68e0      	ldr	r0, [r4, #12]
9001078c:	2202      	movs	r2, #2
9001078e:	2112      	movs	r1, #18
90010790:	f7ff ff78 	bl	90010684 <std>
90010794:	2301      	movs	r3, #1
90010796:	61a3      	str	r3, [r4, #24]
90010798:	e7d2      	b.n	90010740 <__sinit+0xc>
9001079a:	bf00      	nop
9001079c:	90015b3c 	.word	0x90015b3c
900107a0:	900106cd 	.word	0x900106cd

900107a4 <__sfp>:
900107a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
900107a6:	4607      	mov	r7, r0
900107a8:	f7ff ffac 	bl	90010704 <__sfp_lock_acquire>
900107ac:	4b1e      	ldr	r3, [pc, #120]	; (90010828 <__sfp+0x84>)
900107ae:	681e      	ldr	r6, [r3, #0]
900107b0:	69b3      	ldr	r3, [r6, #24]
900107b2:	b913      	cbnz	r3, 900107ba <__sfp+0x16>
900107b4:	4630      	mov	r0, r6
900107b6:	f7ff ffbd 	bl	90010734 <__sinit>
900107ba:	3648      	adds	r6, #72	; 0x48
900107bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
900107c0:	3b01      	subs	r3, #1
900107c2:	d503      	bpl.n	900107cc <__sfp+0x28>
900107c4:	6833      	ldr	r3, [r6, #0]
900107c6:	b30b      	cbz	r3, 9001080c <__sfp+0x68>
900107c8:	6836      	ldr	r6, [r6, #0]
900107ca:	e7f7      	b.n	900107bc <__sfp+0x18>
900107cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
900107d0:	b9d5      	cbnz	r5, 90010808 <__sfp+0x64>
900107d2:	4b16      	ldr	r3, [pc, #88]	; (9001082c <__sfp+0x88>)
900107d4:	60e3      	str	r3, [r4, #12]
900107d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
900107da:	6665      	str	r5, [r4, #100]	; 0x64
900107dc:	f000 f859 	bl	90010892 <__retarget_lock_init_recursive>
900107e0:	f7ff ff96 	bl	90010710 <__sfp_lock_release>
900107e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
900107e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
900107ec:	6025      	str	r5, [r4, #0]
900107ee:	61a5      	str	r5, [r4, #24]
900107f0:	2208      	movs	r2, #8
900107f2:	4629      	mov	r1, r5
900107f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
900107f8:	f7ff fe70 	bl	900104dc <memset>
900107fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
90010800:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
90010804:	4620      	mov	r0, r4
90010806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90010808:	3468      	adds	r4, #104	; 0x68
9001080a:	e7d9      	b.n	900107c0 <__sfp+0x1c>
9001080c:	2104      	movs	r1, #4
9001080e:	4638      	mov	r0, r7
90010810:	f7ff ff62 	bl	900106d8 <__sfmoreglue>
90010814:	4604      	mov	r4, r0
90010816:	6030      	str	r0, [r6, #0]
90010818:	2800      	cmp	r0, #0
9001081a:	d1d5      	bne.n	900107c8 <__sfp+0x24>
9001081c:	f7ff ff78 	bl	90010710 <__sfp_lock_release>
90010820:	230c      	movs	r3, #12
90010822:	603b      	str	r3, [r7, #0]
90010824:	e7ee      	b.n	90010804 <__sfp+0x60>
90010826:	bf00      	nop
90010828:	90015b3c 	.word	0x90015b3c
9001082c:	ffff0001 	.word	0xffff0001

90010830 <fiprintf>:
90010830:	b40e      	push	{r1, r2, r3}
90010832:	b503      	push	{r0, r1, lr}
90010834:	4601      	mov	r1, r0
90010836:	ab03      	add	r3, sp, #12
90010838:	4805      	ldr	r0, [pc, #20]	; (90010850 <fiprintf+0x20>)
9001083a:	f853 2b04 	ldr.w	r2, [r3], #4
9001083e:	6800      	ldr	r0, [r0, #0]
90010840:	9301      	str	r3, [sp, #4]
90010842:	f000 fa97 	bl	90010d74 <_vfiprintf_r>
90010846:	b002      	add	sp, #8
90010848:	f85d eb04 	ldr.w	lr, [sp], #4
9001084c:	b003      	add	sp, #12
9001084e:	4770      	bx	lr
90010850:	2000003c 	.word	0x2000003c

90010854 <_fwalk_reent>:
90010854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90010858:	4606      	mov	r6, r0
9001085a:	4688      	mov	r8, r1
9001085c:	f100 0448 	add.w	r4, r0, #72	; 0x48
90010860:	2700      	movs	r7, #0
90010862:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
90010866:	f1b9 0901 	subs.w	r9, r9, #1
9001086a:	d505      	bpl.n	90010878 <_fwalk_reent+0x24>
9001086c:	6824      	ldr	r4, [r4, #0]
9001086e:	2c00      	cmp	r4, #0
90010870:	d1f7      	bne.n	90010862 <_fwalk_reent+0xe>
90010872:	4638      	mov	r0, r7
90010874:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
90010878:	89ab      	ldrh	r3, [r5, #12]
9001087a:	2b01      	cmp	r3, #1
9001087c:	d907      	bls.n	9001088e <_fwalk_reent+0x3a>
9001087e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
90010882:	3301      	adds	r3, #1
90010884:	d003      	beq.n	9001088e <_fwalk_reent+0x3a>
90010886:	4629      	mov	r1, r5
90010888:	4630      	mov	r0, r6
9001088a:	47c0      	blx	r8
9001088c:	4307      	orrs	r7, r0
9001088e:	3568      	adds	r5, #104	; 0x68
90010890:	e7e9      	b.n	90010866 <_fwalk_reent+0x12>

90010892 <__retarget_lock_init_recursive>:
90010892:	4770      	bx	lr

90010894 <__retarget_lock_acquire_recursive>:
90010894:	4770      	bx	lr

90010896 <__retarget_lock_release_recursive>:
90010896:	4770      	bx	lr

90010898 <malloc>:
90010898:	4b02      	ldr	r3, [pc, #8]	; (900108a4 <malloc+0xc>)
9001089a:	4601      	mov	r1, r0
9001089c:	6818      	ldr	r0, [r3, #0]
9001089e:	f000 b86f 	b.w	90010980 <_malloc_r>
900108a2:	bf00      	nop
900108a4:	2000003c 	.word	0x2000003c

900108a8 <_free_r>:
900108a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
900108aa:	2900      	cmp	r1, #0
900108ac:	d044      	beq.n	90010938 <_free_r+0x90>
900108ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
900108b2:	9001      	str	r0, [sp, #4]
900108b4:	2b00      	cmp	r3, #0
900108b6:	f1a1 0404 	sub.w	r4, r1, #4
900108ba:	bfb8      	it	lt
900108bc:	18e4      	addlt	r4, r4, r3
900108be:	f000 ff95 	bl	900117ec <__malloc_lock>
900108c2:	4a1e      	ldr	r2, [pc, #120]	; (9001093c <_free_r+0x94>)
900108c4:	9801      	ldr	r0, [sp, #4]
900108c6:	6813      	ldr	r3, [r2, #0]
900108c8:	b933      	cbnz	r3, 900108d8 <_free_r+0x30>
900108ca:	6063      	str	r3, [r4, #4]
900108cc:	6014      	str	r4, [r2, #0]
900108ce:	b003      	add	sp, #12
900108d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
900108d4:	f000 bf90 	b.w	900117f8 <__malloc_unlock>
900108d8:	42a3      	cmp	r3, r4
900108da:	d908      	bls.n	900108ee <_free_r+0x46>
900108dc:	6825      	ldr	r5, [r4, #0]
900108de:	1961      	adds	r1, r4, r5
900108e0:	428b      	cmp	r3, r1
900108e2:	bf01      	itttt	eq
900108e4:	6819      	ldreq	r1, [r3, #0]
900108e6:	685b      	ldreq	r3, [r3, #4]
900108e8:	1949      	addeq	r1, r1, r5
900108ea:	6021      	streq	r1, [r4, #0]
900108ec:	e7ed      	b.n	900108ca <_free_r+0x22>
900108ee:	461a      	mov	r2, r3
900108f0:	685b      	ldr	r3, [r3, #4]
900108f2:	b10b      	cbz	r3, 900108f8 <_free_r+0x50>
900108f4:	42a3      	cmp	r3, r4
900108f6:	d9fa      	bls.n	900108ee <_free_r+0x46>
900108f8:	6811      	ldr	r1, [r2, #0]
900108fa:	1855      	adds	r5, r2, r1
900108fc:	42a5      	cmp	r5, r4
900108fe:	d10b      	bne.n	90010918 <_free_r+0x70>
90010900:	6824      	ldr	r4, [r4, #0]
90010902:	4421      	add	r1, r4
90010904:	1854      	adds	r4, r2, r1
90010906:	42a3      	cmp	r3, r4
90010908:	6011      	str	r1, [r2, #0]
9001090a:	d1e0      	bne.n	900108ce <_free_r+0x26>
9001090c:	681c      	ldr	r4, [r3, #0]
9001090e:	685b      	ldr	r3, [r3, #4]
90010910:	6053      	str	r3, [r2, #4]
90010912:	4421      	add	r1, r4
90010914:	6011      	str	r1, [r2, #0]
90010916:	e7da      	b.n	900108ce <_free_r+0x26>
90010918:	d902      	bls.n	90010920 <_free_r+0x78>
9001091a:	230c      	movs	r3, #12
9001091c:	6003      	str	r3, [r0, #0]
9001091e:	e7d6      	b.n	900108ce <_free_r+0x26>
90010920:	6825      	ldr	r5, [r4, #0]
90010922:	1961      	adds	r1, r4, r5
90010924:	428b      	cmp	r3, r1
90010926:	bf04      	itt	eq
90010928:	6819      	ldreq	r1, [r3, #0]
9001092a:	685b      	ldreq	r3, [r3, #4]
9001092c:	6063      	str	r3, [r4, #4]
9001092e:	bf04      	itt	eq
90010930:	1949      	addeq	r1, r1, r5
90010932:	6021      	streq	r1, [r4, #0]
90010934:	6054      	str	r4, [r2, #4]
90010936:	e7ca      	b.n	900108ce <_free_r+0x26>
90010938:	b003      	add	sp, #12
9001093a:	bd30      	pop	{r4, r5, pc}
9001093c:	2000aa04 	.word	0x2000aa04

90010940 <sbrk_aligned>:
90010940:	b570      	push	{r4, r5, r6, lr}
90010942:	4e0e      	ldr	r6, [pc, #56]	; (9001097c <sbrk_aligned+0x3c>)
90010944:	460c      	mov	r4, r1
90010946:	6831      	ldr	r1, [r6, #0]
90010948:	4605      	mov	r5, r0
9001094a:	b911      	cbnz	r1, 90010952 <sbrk_aligned+0x12>
9001094c:	f000 fcd6 	bl	900112fc <_sbrk_r>
90010950:	6030      	str	r0, [r6, #0]
90010952:	4621      	mov	r1, r4
90010954:	4628      	mov	r0, r5
90010956:	f000 fcd1 	bl	900112fc <_sbrk_r>
9001095a:	1c43      	adds	r3, r0, #1
9001095c:	d00a      	beq.n	90010974 <sbrk_aligned+0x34>
9001095e:	1cc4      	adds	r4, r0, #3
90010960:	f024 0403 	bic.w	r4, r4, #3
90010964:	42a0      	cmp	r0, r4
90010966:	d007      	beq.n	90010978 <sbrk_aligned+0x38>
90010968:	1a21      	subs	r1, r4, r0
9001096a:	4628      	mov	r0, r5
9001096c:	f000 fcc6 	bl	900112fc <_sbrk_r>
90010970:	3001      	adds	r0, #1
90010972:	d101      	bne.n	90010978 <sbrk_aligned+0x38>
90010974:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
90010978:	4620      	mov	r0, r4
9001097a:	bd70      	pop	{r4, r5, r6, pc}
9001097c:	2000aa08 	.word	0x2000aa08

90010980 <_malloc_r>:
90010980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90010984:	1ccd      	adds	r5, r1, #3
90010986:	f025 0503 	bic.w	r5, r5, #3
9001098a:	3508      	adds	r5, #8
9001098c:	2d0c      	cmp	r5, #12
9001098e:	bf38      	it	cc
90010990:	250c      	movcc	r5, #12
90010992:	2d00      	cmp	r5, #0
90010994:	4607      	mov	r7, r0
90010996:	db01      	blt.n	9001099c <_malloc_r+0x1c>
90010998:	42a9      	cmp	r1, r5
9001099a:	d905      	bls.n	900109a8 <_malloc_r+0x28>
9001099c:	230c      	movs	r3, #12
9001099e:	603b      	str	r3, [r7, #0]
900109a0:	2600      	movs	r6, #0
900109a2:	4630      	mov	r0, r6
900109a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
900109a8:	4e2e      	ldr	r6, [pc, #184]	; (90010a64 <_malloc_r+0xe4>)
900109aa:	f000 ff1f 	bl	900117ec <__malloc_lock>
900109ae:	6833      	ldr	r3, [r6, #0]
900109b0:	461c      	mov	r4, r3
900109b2:	bb34      	cbnz	r4, 90010a02 <_malloc_r+0x82>
900109b4:	4629      	mov	r1, r5
900109b6:	4638      	mov	r0, r7
900109b8:	f7ff ffc2 	bl	90010940 <sbrk_aligned>
900109bc:	1c43      	adds	r3, r0, #1
900109be:	4604      	mov	r4, r0
900109c0:	d14d      	bne.n	90010a5e <_malloc_r+0xde>
900109c2:	6834      	ldr	r4, [r6, #0]
900109c4:	4626      	mov	r6, r4
900109c6:	2e00      	cmp	r6, #0
900109c8:	d140      	bne.n	90010a4c <_malloc_r+0xcc>
900109ca:	6823      	ldr	r3, [r4, #0]
900109cc:	4631      	mov	r1, r6
900109ce:	4638      	mov	r0, r7
900109d0:	eb04 0803 	add.w	r8, r4, r3
900109d4:	f000 fc92 	bl	900112fc <_sbrk_r>
900109d8:	4580      	cmp	r8, r0
900109da:	d13a      	bne.n	90010a52 <_malloc_r+0xd2>
900109dc:	6821      	ldr	r1, [r4, #0]
900109de:	3503      	adds	r5, #3
900109e0:	1a6d      	subs	r5, r5, r1
900109e2:	f025 0503 	bic.w	r5, r5, #3
900109e6:	3508      	adds	r5, #8
900109e8:	2d0c      	cmp	r5, #12
900109ea:	bf38      	it	cc
900109ec:	250c      	movcc	r5, #12
900109ee:	4629      	mov	r1, r5
900109f0:	4638      	mov	r0, r7
900109f2:	f7ff ffa5 	bl	90010940 <sbrk_aligned>
900109f6:	3001      	adds	r0, #1
900109f8:	d02b      	beq.n	90010a52 <_malloc_r+0xd2>
900109fa:	6823      	ldr	r3, [r4, #0]
900109fc:	442b      	add	r3, r5
900109fe:	6023      	str	r3, [r4, #0]
90010a00:	e00e      	b.n	90010a20 <_malloc_r+0xa0>
90010a02:	6822      	ldr	r2, [r4, #0]
90010a04:	1b52      	subs	r2, r2, r5
90010a06:	d41e      	bmi.n	90010a46 <_malloc_r+0xc6>
90010a08:	2a0b      	cmp	r2, #11
90010a0a:	d916      	bls.n	90010a3a <_malloc_r+0xba>
90010a0c:	1961      	adds	r1, r4, r5
90010a0e:	42a3      	cmp	r3, r4
90010a10:	6025      	str	r5, [r4, #0]
90010a12:	bf18      	it	ne
90010a14:	6059      	strne	r1, [r3, #4]
90010a16:	6863      	ldr	r3, [r4, #4]
90010a18:	bf08      	it	eq
90010a1a:	6031      	streq	r1, [r6, #0]
90010a1c:	5162      	str	r2, [r4, r5]
90010a1e:	604b      	str	r3, [r1, #4]
90010a20:	4638      	mov	r0, r7
90010a22:	f104 060b 	add.w	r6, r4, #11
90010a26:	f000 fee7 	bl	900117f8 <__malloc_unlock>
90010a2a:	f026 0607 	bic.w	r6, r6, #7
90010a2e:	1d23      	adds	r3, r4, #4
90010a30:	1af2      	subs	r2, r6, r3
90010a32:	d0b6      	beq.n	900109a2 <_malloc_r+0x22>
90010a34:	1b9b      	subs	r3, r3, r6
90010a36:	50a3      	str	r3, [r4, r2]
90010a38:	e7b3      	b.n	900109a2 <_malloc_r+0x22>
90010a3a:	6862      	ldr	r2, [r4, #4]
90010a3c:	42a3      	cmp	r3, r4
90010a3e:	bf0c      	ite	eq
90010a40:	6032      	streq	r2, [r6, #0]
90010a42:	605a      	strne	r2, [r3, #4]
90010a44:	e7ec      	b.n	90010a20 <_malloc_r+0xa0>
90010a46:	4623      	mov	r3, r4
90010a48:	6864      	ldr	r4, [r4, #4]
90010a4a:	e7b2      	b.n	900109b2 <_malloc_r+0x32>
90010a4c:	4634      	mov	r4, r6
90010a4e:	6876      	ldr	r6, [r6, #4]
90010a50:	e7b9      	b.n	900109c6 <_malloc_r+0x46>
90010a52:	230c      	movs	r3, #12
90010a54:	603b      	str	r3, [r7, #0]
90010a56:	4638      	mov	r0, r7
90010a58:	f000 fece 	bl	900117f8 <__malloc_unlock>
90010a5c:	e7a1      	b.n	900109a2 <_malloc_r+0x22>
90010a5e:	6025      	str	r5, [r4, #0]
90010a60:	e7de      	b.n	90010a20 <_malloc_r+0xa0>
90010a62:	bf00      	nop
90010a64:	2000aa04 	.word	0x2000aa04

90010a68 <__ssputs_r>:
90010a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90010a6c:	688e      	ldr	r6, [r1, #8]
90010a6e:	429e      	cmp	r6, r3
90010a70:	4682      	mov	sl, r0
90010a72:	460c      	mov	r4, r1
90010a74:	4690      	mov	r8, r2
90010a76:	461f      	mov	r7, r3
90010a78:	d838      	bhi.n	90010aec <__ssputs_r+0x84>
90010a7a:	898a      	ldrh	r2, [r1, #12]
90010a7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
90010a80:	d032      	beq.n	90010ae8 <__ssputs_r+0x80>
90010a82:	6825      	ldr	r5, [r4, #0]
90010a84:	6909      	ldr	r1, [r1, #16]
90010a86:	eba5 0901 	sub.w	r9, r5, r1
90010a8a:	6965      	ldr	r5, [r4, #20]
90010a8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
90010a90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
90010a94:	3301      	adds	r3, #1
90010a96:	444b      	add	r3, r9
90010a98:	106d      	asrs	r5, r5, #1
90010a9a:	429d      	cmp	r5, r3
90010a9c:	bf38      	it	cc
90010a9e:	461d      	movcc	r5, r3
90010aa0:	0553      	lsls	r3, r2, #21
90010aa2:	d531      	bpl.n	90010b08 <__ssputs_r+0xa0>
90010aa4:	4629      	mov	r1, r5
90010aa6:	f7ff ff6b 	bl	90010980 <_malloc_r>
90010aaa:	4606      	mov	r6, r0
90010aac:	b950      	cbnz	r0, 90010ac4 <__ssputs_r+0x5c>
90010aae:	230c      	movs	r3, #12
90010ab0:	f8ca 3000 	str.w	r3, [sl]
90010ab4:	89a3      	ldrh	r3, [r4, #12]
90010ab6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90010aba:	81a3      	strh	r3, [r4, #12]
90010abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
90010ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90010ac4:	6921      	ldr	r1, [r4, #16]
90010ac6:	464a      	mov	r2, r9
90010ac8:	f7ff fce0 	bl	9001048c <memcpy>
90010acc:	89a3      	ldrh	r3, [r4, #12]
90010ace:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
90010ad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90010ad6:	81a3      	strh	r3, [r4, #12]
90010ad8:	6126      	str	r6, [r4, #16]
90010ada:	6165      	str	r5, [r4, #20]
90010adc:	444e      	add	r6, r9
90010ade:	eba5 0509 	sub.w	r5, r5, r9
90010ae2:	6026      	str	r6, [r4, #0]
90010ae4:	60a5      	str	r5, [r4, #8]
90010ae6:	463e      	mov	r6, r7
90010ae8:	42be      	cmp	r6, r7
90010aea:	d900      	bls.n	90010aee <__ssputs_r+0x86>
90010aec:	463e      	mov	r6, r7
90010aee:	6820      	ldr	r0, [r4, #0]
90010af0:	4632      	mov	r2, r6
90010af2:	4641      	mov	r1, r8
90010af4:	f7ff fcd8 	bl	900104a8 <memmove>
90010af8:	68a3      	ldr	r3, [r4, #8]
90010afa:	1b9b      	subs	r3, r3, r6
90010afc:	60a3      	str	r3, [r4, #8]
90010afe:	6823      	ldr	r3, [r4, #0]
90010b00:	4433      	add	r3, r6
90010b02:	6023      	str	r3, [r4, #0]
90010b04:	2000      	movs	r0, #0
90010b06:	e7db      	b.n	90010ac0 <__ssputs_r+0x58>
90010b08:	462a      	mov	r2, r5
90010b0a:	f000 fe7b 	bl	90011804 <_realloc_r>
90010b0e:	4606      	mov	r6, r0
90010b10:	2800      	cmp	r0, #0
90010b12:	d1e1      	bne.n	90010ad8 <__ssputs_r+0x70>
90010b14:	6921      	ldr	r1, [r4, #16]
90010b16:	4650      	mov	r0, sl
90010b18:	f7ff fec6 	bl	900108a8 <_free_r>
90010b1c:	e7c7      	b.n	90010aae <__ssputs_r+0x46>
	...

90010b20 <_svfiprintf_r>:
90010b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90010b24:	4698      	mov	r8, r3
90010b26:	898b      	ldrh	r3, [r1, #12]
90010b28:	061b      	lsls	r3, r3, #24
90010b2a:	b09d      	sub	sp, #116	; 0x74
90010b2c:	4607      	mov	r7, r0
90010b2e:	460d      	mov	r5, r1
90010b30:	4614      	mov	r4, r2
90010b32:	d50e      	bpl.n	90010b52 <_svfiprintf_r+0x32>
90010b34:	690b      	ldr	r3, [r1, #16]
90010b36:	b963      	cbnz	r3, 90010b52 <_svfiprintf_r+0x32>
90010b38:	2140      	movs	r1, #64	; 0x40
90010b3a:	f7ff ff21 	bl	90010980 <_malloc_r>
90010b3e:	6028      	str	r0, [r5, #0]
90010b40:	6128      	str	r0, [r5, #16]
90010b42:	b920      	cbnz	r0, 90010b4e <_svfiprintf_r+0x2e>
90010b44:	230c      	movs	r3, #12
90010b46:	603b      	str	r3, [r7, #0]
90010b48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
90010b4c:	e0d1      	b.n	90010cf2 <_svfiprintf_r+0x1d2>
90010b4e:	2340      	movs	r3, #64	; 0x40
90010b50:	616b      	str	r3, [r5, #20]
90010b52:	2300      	movs	r3, #0
90010b54:	9309      	str	r3, [sp, #36]	; 0x24
90010b56:	2320      	movs	r3, #32
90010b58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
90010b5c:	f8cd 800c 	str.w	r8, [sp, #12]
90010b60:	2330      	movs	r3, #48	; 0x30
90010b62:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 90010d0c <_svfiprintf_r+0x1ec>
90010b66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
90010b6a:	f04f 0901 	mov.w	r9, #1
90010b6e:	4623      	mov	r3, r4
90010b70:	469a      	mov	sl, r3
90010b72:	f813 2b01 	ldrb.w	r2, [r3], #1
90010b76:	b10a      	cbz	r2, 90010b7c <_svfiprintf_r+0x5c>
90010b78:	2a25      	cmp	r2, #37	; 0x25
90010b7a:	d1f9      	bne.n	90010b70 <_svfiprintf_r+0x50>
90010b7c:	ebba 0b04 	subs.w	fp, sl, r4
90010b80:	d00b      	beq.n	90010b9a <_svfiprintf_r+0x7a>
90010b82:	465b      	mov	r3, fp
90010b84:	4622      	mov	r2, r4
90010b86:	4629      	mov	r1, r5
90010b88:	4638      	mov	r0, r7
90010b8a:	f7ff ff6d 	bl	90010a68 <__ssputs_r>
90010b8e:	3001      	adds	r0, #1
90010b90:	f000 80aa 	beq.w	90010ce8 <_svfiprintf_r+0x1c8>
90010b94:	9a09      	ldr	r2, [sp, #36]	; 0x24
90010b96:	445a      	add	r2, fp
90010b98:	9209      	str	r2, [sp, #36]	; 0x24
90010b9a:	f89a 3000 	ldrb.w	r3, [sl]
90010b9e:	2b00      	cmp	r3, #0
90010ba0:	f000 80a2 	beq.w	90010ce8 <_svfiprintf_r+0x1c8>
90010ba4:	2300      	movs	r3, #0
90010ba6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
90010baa:	e9cd 2305 	strd	r2, r3, [sp, #20]
90010bae:	f10a 0a01 	add.w	sl, sl, #1
90010bb2:	9304      	str	r3, [sp, #16]
90010bb4:	9307      	str	r3, [sp, #28]
90010bb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
90010bba:	931a      	str	r3, [sp, #104]	; 0x68
90010bbc:	4654      	mov	r4, sl
90010bbe:	2205      	movs	r2, #5
90010bc0:	f814 1b01 	ldrb.w	r1, [r4], #1
90010bc4:	4851      	ldr	r0, [pc, #324]	; (90010d0c <_svfiprintf_r+0x1ec>)
90010bc6:	f7ef fb3b 	bl	90000240 <memchr>
90010bca:	9a04      	ldr	r2, [sp, #16]
90010bcc:	b9d8      	cbnz	r0, 90010c06 <_svfiprintf_r+0xe6>
90010bce:	06d0      	lsls	r0, r2, #27
90010bd0:	bf44      	itt	mi
90010bd2:	2320      	movmi	r3, #32
90010bd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
90010bd8:	0711      	lsls	r1, r2, #28
90010bda:	bf44      	itt	mi
90010bdc:	232b      	movmi	r3, #43	; 0x2b
90010bde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
90010be2:	f89a 3000 	ldrb.w	r3, [sl]
90010be6:	2b2a      	cmp	r3, #42	; 0x2a
90010be8:	d015      	beq.n	90010c16 <_svfiprintf_r+0xf6>
90010bea:	9a07      	ldr	r2, [sp, #28]
90010bec:	4654      	mov	r4, sl
90010bee:	2000      	movs	r0, #0
90010bf0:	f04f 0c0a 	mov.w	ip, #10
90010bf4:	4621      	mov	r1, r4
90010bf6:	f811 3b01 	ldrb.w	r3, [r1], #1
90010bfa:	3b30      	subs	r3, #48	; 0x30
90010bfc:	2b09      	cmp	r3, #9
90010bfe:	d94e      	bls.n	90010c9e <_svfiprintf_r+0x17e>
90010c00:	b1b0      	cbz	r0, 90010c30 <_svfiprintf_r+0x110>
90010c02:	9207      	str	r2, [sp, #28]
90010c04:	e014      	b.n	90010c30 <_svfiprintf_r+0x110>
90010c06:	eba0 0308 	sub.w	r3, r0, r8
90010c0a:	fa09 f303 	lsl.w	r3, r9, r3
90010c0e:	4313      	orrs	r3, r2
90010c10:	9304      	str	r3, [sp, #16]
90010c12:	46a2      	mov	sl, r4
90010c14:	e7d2      	b.n	90010bbc <_svfiprintf_r+0x9c>
90010c16:	9b03      	ldr	r3, [sp, #12]
90010c18:	1d19      	adds	r1, r3, #4
90010c1a:	681b      	ldr	r3, [r3, #0]
90010c1c:	9103      	str	r1, [sp, #12]
90010c1e:	2b00      	cmp	r3, #0
90010c20:	bfbb      	ittet	lt
90010c22:	425b      	neglt	r3, r3
90010c24:	f042 0202 	orrlt.w	r2, r2, #2
90010c28:	9307      	strge	r3, [sp, #28]
90010c2a:	9307      	strlt	r3, [sp, #28]
90010c2c:	bfb8      	it	lt
90010c2e:	9204      	strlt	r2, [sp, #16]
90010c30:	7823      	ldrb	r3, [r4, #0]
90010c32:	2b2e      	cmp	r3, #46	; 0x2e
90010c34:	d10c      	bne.n	90010c50 <_svfiprintf_r+0x130>
90010c36:	7863      	ldrb	r3, [r4, #1]
90010c38:	2b2a      	cmp	r3, #42	; 0x2a
90010c3a:	d135      	bne.n	90010ca8 <_svfiprintf_r+0x188>
90010c3c:	9b03      	ldr	r3, [sp, #12]
90010c3e:	1d1a      	adds	r2, r3, #4
90010c40:	681b      	ldr	r3, [r3, #0]
90010c42:	9203      	str	r2, [sp, #12]
90010c44:	2b00      	cmp	r3, #0
90010c46:	bfb8      	it	lt
90010c48:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
90010c4c:	3402      	adds	r4, #2
90010c4e:	9305      	str	r3, [sp, #20]
90010c50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 90010d1c <_svfiprintf_r+0x1fc>
90010c54:	7821      	ldrb	r1, [r4, #0]
90010c56:	2203      	movs	r2, #3
90010c58:	4650      	mov	r0, sl
90010c5a:	f7ef faf1 	bl	90000240 <memchr>
90010c5e:	b140      	cbz	r0, 90010c72 <_svfiprintf_r+0x152>
90010c60:	2340      	movs	r3, #64	; 0x40
90010c62:	eba0 000a 	sub.w	r0, r0, sl
90010c66:	fa03 f000 	lsl.w	r0, r3, r0
90010c6a:	9b04      	ldr	r3, [sp, #16]
90010c6c:	4303      	orrs	r3, r0
90010c6e:	3401      	adds	r4, #1
90010c70:	9304      	str	r3, [sp, #16]
90010c72:	f814 1b01 	ldrb.w	r1, [r4], #1
90010c76:	4826      	ldr	r0, [pc, #152]	; (90010d10 <_svfiprintf_r+0x1f0>)
90010c78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
90010c7c:	2206      	movs	r2, #6
90010c7e:	f7ef fadf 	bl	90000240 <memchr>
90010c82:	2800      	cmp	r0, #0
90010c84:	d038      	beq.n	90010cf8 <_svfiprintf_r+0x1d8>
90010c86:	4b23      	ldr	r3, [pc, #140]	; (90010d14 <_svfiprintf_r+0x1f4>)
90010c88:	bb1b      	cbnz	r3, 90010cd2 <_svfiprintf_r+0x1b2>
90010c8a:	9b03      	ldr	r3, [sp, #12]
90010c8c:	3307      	adds	r3, #7
90010c8e:	f023 0307 	bic.w	r3, r3, #7
90010c92:	3308      	adds	r3, #8
90010c94:	9303      	str	r3, [sp, #12]
90010c96:	9b09      	ldr	r3, [sp, #36]	; 0x24
90010c98:	4433      	add	r3, r6
90010c9a:	9309      	str	r3, [sp, #36]	; 0x24
90010c9c:	e767      	b.n	90010b6e <_svfiprintf_r+0x4e>
90010c9e:	fb0c 3202 	mla	r2, ip, r2, r3
90010ca2:	460c      	mov	r4, r1
90010ca4:	2001      	movs	r0, #1
90010ca6:	e7a5      	b.n	90010bf4 <_svfiprintf_r+0xd4>
90010ca8:	2300      	movs	r3, #0
90010caa:	3401      	adds	r4, #1
90010cac:	9305      	str	r3, [sp, #20]
90010cae:	4619      	mov	r1, r3
90010cb0:	f04f 0c0a 	mov.w	ip, #10
90010cb4:	4620      	mov	r0, r4
90010cb6:	f810 2b01 	ldrb.w	r2, [r0], #1
90010cba:	3a30      	subs	r2, #48	; 0x30
90010cbc:	2a09      	cmp	r2, #9
90010cbe:	d903      	bls.n	90010cc8 <_svfiprintf_r+0x1a8>
90010cc0:	2b00      	cmp	r3, #0
90010cc2:	d0c5      	beq.n	90010c50 <_svfiprintf_r+0x130>
90010cc4:	9105      	str	r1, [sp, #20]
90010cc6:	e7c3      	b.n	90010c50 <_svfiprintf_r+0x130>
90010cc8:	fb0c 2101 	mla	r1, ip, r1, r2
90010ccc:	4604      	mov	r4, r0
90010cce:	2301      	movs	r3, #1
90010cd0:	e7f0      	b.n	90010cb4 <_svfiprintf_r+0x194>
90010cd2:	ab03      	add	r3, sp, #12
90010cd4:	9300      	str	r3, [sp, #0]
90010cd6:	462a      	mov	r2, r5
90010cd8:	4b0f      	ldr	r3, [pc, #60]	; (90010d18 <_svfiprintf_r+0x1f8>)
90010cda:	a904      	add	r1, sp, #16
90010cdc:	4638      	mov	r0, r7
90010cde:	f3af 8000 	nop.w
90010ce2:	1c42      	adds	r2, r0, #1
90010ce4:	4606      	mov	r6, r0
90010ce6:	d1d6      	bne.n	90010c96 <_svfiprintf_r+0x176>
90010ce8:	89ab      	ldrh	r3, [r5, #12]
90010cea:	065b      	lsls	r3, r3, #25
90010cec:	f53f af2c 	bmi.w	90010b48 <_svfiprintf_r+0x28>
90010cf0:	9809      	ldr	r0, [sp, #36]	; 0x24
90010cf2:	b01d      	add	sp, #116	; 0x74
90010cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90010cf8:	ab03      	add	r3, sp, #12
90010cfa:	9300      	str	r3, [sp, #0]
90010cfc:	462a      	mov	r2, r5
90010cfe:	4b06      	ldr	r3, [pc, #24]	; (90010d18 <_svfiprintf_r+0x1f8>)
90010d00:	a904      	add	r1, sp, #16
90010d02:	4638      	mov	r0, r7
90010d04:	f000 f9d4 	bl	900110b0 <_printf_i>
90010d08:	e7eb      	b.n	90010ce2 <_svfiprintf_r+0x1c2>
90010d0a:	bf00      	nop
90010d0c:	90015c50 	.word	0x90015c50
90010d10:	90015c5a 	.word	0x90015c5a
90010d14:	00000000 	.word	0x00000000
90010d18:	90010a69 	.word	0x90010a69
90010d1c:	90015c56 	.word	0x90015c56

90010d20 <__sfputc_r>:
90010d20:	6893      	ldr	r3, [r2, #8]
90010d22:	3b01      	subs	r3, #1
90010d24:	2b00      	cmp	r3, #0
90010d26:	b410      	push	{r4}
90010d28:	6093      	str	r3, [r2, #8]
90010d2a:	da08      	bge.n	90010d3e <__sfputc_r+0x1e>
90010d2c:	6994      	ldr	r4, [r2, #24]
90010d2e:	42a3      	cmp	r3, r4
90010d30:	db01      	blt.n	90010d36 <__sfputc_r+0x16>
90010d32:	290a      	cmp	r1, #10
90010d34:	d103      	bne.n	90010d3e <__sfputc_r+0x1e>
90010d36:	f85d 4b04 	ldr.w	r4, [sp], #4
90010d3a:	f000 bb33 	b.w	900113a4 <__swbuf_r>
90010d3e:	6813      	ldr	r3, [r2, #0]
90010d40:	1c58      	adds	r0, r3, #1
90010d42:	6010      	str	r0, [r2, #0]
90010d44:	7019      	strb	r1, [r3, #0]
90010d46:	4608      	mov	r0, r1
90010d48:	f85d 4b04 	ldr.w	r4, [sp], #4
90010d4c:	4770      	bx	lr

90010d4e <__sfputs_r>:
90010d4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90010d50:	4606      	mov	r6, r0
90010d52:	460f      	mov	r7, r1
90010d54:	4614      	mov	r4, r2
90010d56:	18d5      	adds	r5, r2, r3
90010d58:	42ac      	cmp	r4, r5
90010d5a:	d101      	bne.n	90010d60 <__sfputs_r+0x12>
90010d5c:	2000      	movs	r0, #0
90010d5e:	e007      	b.n	90010d70 <__sfputs_r+0x22>
90010d60:	f814 1b01 	ldrb.w	r1, [r4], #1
90010d64:	463a      	mov	r2, r7
90010d66:	4630      	mov	r0, r6
90010d68:	f7ff ffda 	bl	90010d20 <__sfputc_r>
90010d6c:	1c43      	adds	r3, r0, #1
90010d6e:	d1f3      	bne.n	90010d58 <__sfputs_r+0xa>
90010d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

90010d74 <_vfiprintf_r>:
90010d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90010d78:	460d      	mov	r5, r1
90010d7a:	b09d      	sub	sp, #116	; 0x74
90010d7c:	4614      	mov	r4, r2
90010d7e:	4698      	mov	r8, r3
90010d80:	4606      	mov	r6, r0
90010d82:	b118      	cbz	r0, 90010d8c <_vfiprintf_r+0x18>
90010d84:	6983      	ldr	r3, [r0, #24]
90010d86:	b90b      	cbnz	r3, 90010d8c <_vfiprintf_r+0x18>
90010d88:	f7ff fcd4 	bl	90010734 <__sinit>
90010d8c:	4b89      	ldr	r3, [pc, #548]	; (90010fb4 <_vfiprintf_r+0x240>)
90010d8e:	429d      	cmp	r5, r3
90010d90:	d11b      	bne.n	90010dca <_vfiprintf_r+0x56>
90010d92:	6875      	ldr	r5, [r6, #4]
90010d94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
90010d96:	07d9      	lsls	r1, r3, #31
90010d98:	d405      	bmi.n	90010da6 <_vfiprintf_r+0x32>
90010d9a:	89ab      	ldrh	r3, [r5, #12]
90010d9c:	059a      	lsls	r2, r3, #22
90010d9e:	d402      	bmi.n	90010da6 <_vfiprintf_r+0x32>
90010da0:	6da8      	ldr	r0, [r5, #88]	; 0x58
90010da2:	f7ff fd77 	bl	90010894 <__retarget_lock_acquire_recursive>
90010da6:	89ab      	ldrh	r3, [r5, #12]
90010da8:	071b      	lsls	r3, r3, #28
90010daa:	d501      	bpl.n	90010db0 <_vfiprintf_r+0x3c>
90010dac:	692b      	ldr	r3, [r5, #16]
90010dae:	b9eb      	cbnz	r3, 90010dec <_vfiprintf_r+0x78>
90010db0:	4629      	mov	r1, r5
90010db2:	4630      	mov	r0, r6
90010db4:	f000 fb5a 	bl	9001146c <__swsetup_r>
90010db8:	b1c0      	cbz	r0, 90010dec <_vfiprintf_r+0x78>
90010dba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
90010dbc:	07dc      	lsls	r4, r3, #31
90010dbe:	d50e      	bpl.n	90010dde <_vfiprintf_r+0x6a>
90010dc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
90010dc4:	b01d      	add	sp, #116	; 0x74
90010dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90010dca:	4b7b      	ldr	r3, [pc, #492]	; (90010fb8 <_vfiprintf_r+0x244>)
90010dcc:	429d      	cmp	r5, r3
90010dce:	d101      	bne.n	90010dd4 <_vfiprintf_r+0x60>
90010dd0:	68b5      	ldr	r5, [r6, #8]
90010dd2:	e7df      	b.n	90010d94 <_vfiprintf_r+0x20>
90010dd4:	4b79      	ldr	r3, [pc, #484]	; (90010fbc <_vfiprintf_r+0x248>)
90010dd6:	429d      	cmp	r5, r3
90010dd8:	bf08      	it	eq
90010dda:	68f5      	ldreq	r5, [r6, #12]
90010ddc:	e7da      	b.n	90010d94 <_vfiprintf_r+0x20>
90010dde:	89ab      	ldrh	r3, [r5, #12]
90010de0:	0598      	lsls	r0, r3, #22
90010de2:	d4ed      	bmi.n	90010dc0 <_vfiprintf_r+0x4c>
90010de4:	6da8      	ldr	r0, [r5, #88]	; 0x58
90010de6:	f7ff fd56 	bl	90010896 <__retarget_lock_release_recursive>
90010dea:	e7e9      	b.n	90010dc0 <_vfiprintf_r+0x4c>
90010dec:	2300      	movs	r3, #0
90010dee:	9309      	str	r3, [sp, #36]	; 0x24
90010df0:	2320      	movs	r3, #32
90010df2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
90010df6:	f8cd 800c 	str.w	r8, [sp, #12]
90010dfa:	2330      	movs	r3, #48	; 0x30
90010dfc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 90010fc0 <_vfiprintf_r+0x24c>
90010e00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
90010e04:	f04f 0901 	mov.w	r9, #1
90010e08:	4623      	mov	r3, r4
90010e0a:	469a      	mov	sl, r3
90010e0c:	f813 2b01 	ldrb.w	r2, [r3], #1
90010e10:	b10a      	cbz	r2, 90010e16 <_vfiprintf_r+0xa2>
90010e12:	2a25      	cmp	r2, #37	; 0x25
90010e14:	d1f9      	bne.n	90010e0a <_vfiprintf_r+0x96>
90010e16:	ebba 0b04 	subs.w	fp, sl, r4
90010e1a:	d00b      	beq.n	90010e34 <_vfiprintf_r+0xc0>
90010e1c:	465b      	mov	r3, fp
90010e1e:	4622      	mov	r2, r4
90010e20:	4629      	mov	r1, r5
90010e22:	4630      	mov	r0, r6
90010e24:	f7ff ff93 	bl	90010d4e <__sfputs_r>
90010e28:	3001      	adds	r0, #1
90010e2a:	f000 80aa 	beq.w	90010f82 <_vfiprintf_r+0x20e>
90010e2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
90010e30:	445a      	add	r2, fp
90010e32:	9209      	str	r2, [sp, #36]	; 0x24
90010e34:	f89a 3000 	ldrb.w	r3, [sl]
90010e38:	2b00      	cmp	r3, #0
90010e3a:	f000 80a2 	beq.w	90010f82 <_vfiprintf_r+0x20e>
90010e3e:	2300      	movs	r3, #0
90010e40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
90010e44:	e9cd 2305 	strd	r2, r3, [sp, #20]
90010e48:	f10a 0a01 	add.w	sl, sl, #1
90010e4c:	9304      	str	r3, [sp, #16]
90010e4e:	9307      	str	r3, [sp, #28]
90010e50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
90010e54:	931a      	str	r3, [sp, #104]	; 0x68
90010e56:	4654      	mov	r4, sl
90010e58:	2205      	movs	r2, #5
90010e5a:	f814 1b01 	ldrb.w	r1, [r4], #1
90010e5e:	4858      	ldr	r0, [pc, #352]	; (90010fc0 <_vfiprintf_r+0x24c>)
90010e60:	f7ef f9ee 	bl	90000240 <memchr>
90010e64:	9a04      	ldr	r2, [sp, #16]
90010e66:	b9d8      	cbnz	r0, 90010ea0 <_vfiprintf_r+0x12c>
90010e68:	06d1      	lsls	r1, r2, #27
90010e6a:	bf44      	itt	mi
90010e6c:	2320      	movmi	r3, #32
90010e6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
90010e72:	0713      	lsls	r3, r2, #28
90010e74:	bf44      	itt	mi
90010e76:	232b      	movmi	r3, #43	; 0x2b
90010e78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
90010e7c:	f89a 3000 	ldrb.w	r3, [sl]
90010e80:	2b2a      	cmp	r3, #42	; 0x2a
90010e82:	d015      	beq.n	90010eb0 <_vfiprintf_r+0x13c>
90010e84:	9a07      	ldr	r2, [sp, #28]
90010e86:	4654      	mov	r4, sl
90010e88:	2000      	movs	r0, #0
90010e8a:	f04f 0c0a 	mov.w	ip, #10
90010e8e:	4621      	mov	r1, r4
90010e90:	f811 3b01 	ldrb.w	r3, [r1], #1
90010e94:	3b30      	subs	r3, #48	; 0x30
90010e96:	2b09      	cmp	r3, #9
90010e98:	d94e      	bls.n	90010f38 <_vfiprintf_r+0x1c4>
90010e9a:	b1b0      	cbz	r0, 90010eca <_vfiprintf_r+0x156>
90010e9c:	9207      	str	r2, [sp, #28]
90010e9e:	e014      	b.n	90010eca <_vfiprintf_r+0x156>
90010ea0:	eba0 0308 	sub.w	r3, r0, r8
90010ea4:	fa09 f303 	lsl.w	r3, r9, r3
90010ea8:	4313      	orrs	r3, r2
90010eaa:	9304      	str	r3, [sp, #16]
90010eac:	46a2      	mov	sl, r4
90010eae:	e7d2      	b.n	90010e56 <_vfiprintf_r+0xe2>
90010eb0:	9b03      	ldr	r3, [sp, #12]
90010eb2:	1d19      	adds	r1, r3, #4
90010eb4:	681b      	ldr	r3, [r3, #0]
90010eb6:	9103      	str	r1, [sp, #12]
90010eb8:	2b00      	cmp	r3, #0
90010eba:	bfbb      	ittet	lt
90010ebc:	425b      	neglt	r3, r3
90010ebe:	f042 0202 	orrlt.w	r2, r2, #2
90010ec2:	9307      	strge	r3, [sp, #28]
90010ec4:	9307      	strlt	r3, [sp, #28]
90010ec6:	bfb8      	it	lt
90010ec8:	9204      	strlt	r2, [sp, #16]
90010eca:	7823      	ldrb	r3, [r4, #0]
90010ecc:	2b2e      	cmp	r3, #46	; 0x2e
90010ece:	d10c      	bne.n	90010eea <_vfiprintf_r+0x176>
90010ed0:	7863      	ldrb	r3, [r4, #1]
90010ed2:	2b2a      	cmp	r3, #42	; 0x2a
90010ed4:	d135      	bne.n	90010f42 <_vfiprintf_r+0x1ce>
90010ed6:	9b03      	ldr	r3, [sp, #12]
90010ed8:	1d1a      	adds	r2, r3, #4
90010eda:	681b      	ldr	r3, [r3, #0]
90010edc:	9203      	str	r2, [sp, #12]
90010ede:	2b00      	cmp	r3, #0
90010ee0:	bfb8      	it	lt
90010ee2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
90010ee6:	3402      	adds	r4, #2
90010ee8:	9305      	str	r3, [sp, #20]
90010eea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 90010fd0 <_vfiprintf_r+0x25c>
90010eee:	7821      	ldrb	r1, [r4, #0]
90010ef0:	2203      	movs	r2, #3
90010ef2:	4650      	mov	r0, sl
90010ef4:	f7ef f9a4 	bl	90000240 <memchr>
90010ef8:	b140      	cbz	r0, 90010f0c <_vfiprintf_r+0x198>
90010efa:	2340      	movs	r3, #64	; 0x40
90010efc:	eba0 000a 	sub.w	r0, r0, sl
90010f00:	fa03 f000 	lsl.w	r0, r3, r0
90010f04:	9b04      	ldr	r3, [sp, #16]
90010f06:	4303      	orrs	r3, r0
90010f08:	3401      	adds	r4, #1
90010f0a:	9304      	str	r3, [sp, #16]
90010f0c:	f814 1b01 	ldrb.w	r1, [r4], #1
90010f10:	482c      	ldr	r0, [pc, #176]	; (90010fc4 <_vfiprintf_r+0x250>)
90010f12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
90010f16:	2206      	movs	r2, #6
90010f18:	f7ef f992 	bl	90000240 <memchr>
90010f1c:	2800      	cmp	r0, #0
90010f1e:	d03f      	beq.n	90010fa0 <_vfiprintf_r+0x22c>
90010f20:	4b29      	ldr	r3, [pc, #164]	; (90010fc8 <_vfiprintf_r+0x254>)
90010f22:	bb1b      	cbnz	r3, 90010f6c <_vfiprintf_r+0x1f8>
90010f24:	9b03      	ldr	r3, [sp, #12]
90010f26:	3307      	adds	r3, #7
90010f28:	f023 0307 	bic.w	r3, r3, #7
90010f2c:	3308      	adds	r3, #8
90010f2e:	9303      	str	r3, [sp, #12]
90010f30:	9b09      	ldr	r3, [sp, #36]	; 0x24
90010f32:	443b      	add	r3, r7
90010f34:	9309      	str	r3, [sp, #36]	; 0x24
90010f36:	e767      	b.n	90010e08 <_vfiprintf_r+0x94>
90010f38:	fb0c 3202 	mla	r2, ip, r2, r3
90010f3c:	460c      	mov	r4, r1
90010f3e:	2001      	movs	r0, #1
90010f40:	e7a5      	b.n	90010e8e <_vfiprintf_r+0x11a>
90010f42:	2300      	movs	r3, #0
90010f44:	3401      	adds	r4, #1
90010f46:	9305      	str	r3, [sp, #20]
90010f48:	4619      	mov	r1, r3
90010f4a:	f04f 0c0a 	mov.w	ip, #10
90010f4e:	4620      	mov	r0, r4
90010f50:	f810 2b01 	ldrb.w	r2, [r0], #1
90010f54:	3a30      	subs	r2, #48	; 0x30
90010f56:	2a09      	cmp	r2, #9
90010f58:	d903      	bls.n	90010f62 <_vfiprintf_r+0x1ee>
90010f5a:	2b00      	cmp	r3, #0
90010f5c:	d0c5      	beq.n	90010eea <_vfiprintf_r+0x176>
90010f5e:	9105      	str	r1, [sp, #20]
90010f60:	e7c3      	b.n	90010eea <_vfiprintf_r+0x176>
90010f62:	fb0c 2101 	mla	r1, ip, r1, r2
90010f66:	4604      	mov	r4, r0
90010f68:	2301      	movs	r3, #1
90010f6a:	e7f0      	b.n	90010f4e <_vfiprintf_r+0x1da>
90010f6c:	ab03      	add	r3, sp, #12
90010f6e:	9300      	str	r3, [sp, #0]
90010f70:	462a      	mov	r2, r5
90010f72:	4b16      	ldr	r3, [pc, #88]	; (90010fcc <_vfiprintf_r+0x258>)
90010f74:	a904      	add	r1, sp, #16
90010f76:	4630      	mov	r0, r6
90010f78:	f3af 8000 	nop.w
90010f7c:	4607      	mov	r7, r0
90010f7e:	1c78      	adds	r0, r7, #1
90010f80:	d1d6      	bne.n	90010f30 <_vfiprintf_r+0x1bc>
90010f82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
90010f84:	07d9      	lsls	r1, r3, #31
90010f86:	d405      	bmi.n	90010f94 <_vfiprintf_r+0x220>
90010f88:	89ab      	ldrh	r3, [r5, #12]
90010f8a:	059a      	lsls	r2, r3, #22
90010f8c:	d402      	bmi.n	90010f94 <_vfiprintf_r+0x220>
90010f8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
90010f90:	f7ff fc81 	bl	90010896 <__retarget_lock_release_recursive>
90010f94:	89ab      	ldrh	r3, [r5, #12]
90010f96:	065b      	lsls	r3, r3, #25
90010f98:	f53f af12 	bmi.w	90010dc0 <_vfiprintf_r+0x4c>
90010f9c:	9809      	ldr	r0, [sp, #36]	; 0x24
90010f9e:	e711      	b.n	90010dc4 <_vfiprintf_r+0x50>
90010fa0:	ab03      	add	r3, sp, #12
90010fa2:	9300      	str	r3, [sp, #0]
90010fa4:	462a      	mov	r2, r5
90010fa6:	4b09      	ldr	r3, [pc, #36]	; (90010fcc <_vfiprintf_r+0x258>)
90010fa8:	a904      	add	r1, sp, #16
90010faa:	4630      	mov	r0, r6
90010fac:	f000 f880 	bl	900110b0 <_printf_i>
90010fb0:	e7e4      	b.n	90010f7c <_vfiprintf_r+0x208>
90010fb2:	bf00      	nop
90010fb4:	90015c10 	.word	0x90015c10
90010fb8:	90015c30 	.word	0x90015c30
90010fbc:	90015bf0 	.word	0x90015bf0
90010fc0:	90015c50 	.word	0x90015c50
90010fc4:	90015c5a 	.word	0x90015c5a
90010fc8:	00000000 	.word	0x00000000
90010fcc:	90010d4f 	.word	0x90010d4f
90010fd0:	90015c56 	.word	0x90015c56

90010fd4 <_printf_common>:
90010fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90010fd8:	4616      	mov	r6, r2
90010fda:	4699      	mov	r9, r3
90010fdc:	688a      	ldr	r2, [r1, #8]
90010fde:	690b      	ldr	r3, [r1, #16]
90010fe0:	f8dd 8020 	ldr.w	r8, [sp, #32]
90010fe4:	4293      	cmp	r3, r2
90010fe6:	bfb8      	it	lt
90010fe8:	4613      	movlt	r3, r2
90010fea:	6033      	str	r3, [r6, #0]
90010fec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
90010ff0:	4607      	mov	r7, r0
90010ff2:	460c      	mov	r4, r1
90010ff4:	b10a      	cbz	r2, 90010ffa <_printf_common+0x26>
90010ff6:	3301      	adds	r3, #1
90010ff8:	6033      	str	r3, [r6, #0]
90010ffa:	6823      	ldr	r3, [r4, #0]
90010ffc:	0699      	lsls	r1, r3, #26
90010ffe:	bf42      	ittt	mi
90011000:	6833      	ldrmi	r3, [r6, #0]
90011002:	3302      	addmi	r3, #2
90011004:	6033      	strmi	r3, [r6, #0]
90011006:	6825      	ldr	r5, [r4, #0]
90011008:	f015 0506 	ands.w	r5, r5, #6
9001100c:	d106      	bne.n	9001101c <_printf_common+0x48>
9001100e:	f104 0a19 	add.w	sl, r4, #25
90011012:	68e3      	ldr	r3, [r4, #12]
90011014:	6832      	ldr	r2, [r6, #0]
90011016:	1a9b      	subs	r3, r3, r2
90011018:	42ab      	cmp	r3, r5
9001101a:	dc26      	bgt.n	9001106a <_printf_common+0x96>
9001101c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
90011020:	1e13      	subs	r3, r2, #0
90011022:	6822      	ldr	r2, [r4, #0]
90011024:	bf18      	it	ne
90011026:	2301      	movne	r3, #1
90011028:	0692      	lsls	r2, r2, #26
9001102a:	d42b      	bmi.n	90011084 <_printf_common+0xb0>
9001102c:	f104 0243 	add.w	r2, r4, #67	; 0x43
90011030:	4649      	mov	r1, r9
90011032:	4638      	mov	r0, r7
90011034:	47c0      	blx	r8
90011036:	3001      	adds	r0, #1
90011038:	d01e      	beq.n	90011078 <_printf_common+0xa4>
9001103a:	6823      	ldr	r3, [r4, #0]
9001103c:	68e5      	ldr	r5, [r4, #12]
9001103e:	6832      	ldr	r2, [r6, #0]
90011040:	f003 0306 	and.w	r3, r3, #6
90011044:	2b04      	cmp	r3, #4
90011046:	bf08      	it	eq
90011048:	1aad      	subeq	r5, r5, r2
9001104a:	68a3      	ldr	r3, [r4, #8]
9001104c:	6922      	ldr	r2, [r4, #16]
9001104e:	bf0c      	ite	eq
90011050:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
90011054:	2500      	movne	r5, #0
90011056:	4293      	cmp	r3, r2
90011058:	bfc4      	itt	gt
9001105a:	1a9b      	subgt	r3, r3, r2
9001105c:	18ed      	addgt	r5, r5, r3
9001105e:	2600      	movs	r6, #0
90011060:	341a      	adds	r4, #26
90011062:	42b5      	cmp	r5, r6
90011064:	d11a      	bne.n	9001109c <_printf_common+0xc8>
90011066:	2000      	movs	r0, #0
90011068:	e008      	b.n	9001107c <_printf_common+0xa8>
9001106a:	2301      	movs	r3, #1
9001106c:	4652      	mov	r2, sl
9001106e:	4649      	mov	r1, r9
90011070:	4638      	mov	r0, r7
90011072:	47c0      	blx	r8
90011074:	3001      	adds	r0, #1
90011076:	d103      	bne.n	90011080 <_printf_common+0xac>
90011078:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
9001107c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90011080:	3501      	adds	r5, #1
90011082:	e7c6      	b.n	90011012 <_printf_common+0x3e>
90011084:	18e1      	adds	r1, r4, r3
90011086:	1c5a      	adds	r2, r3, #1
90011088:	2030      	movs	r0, #48	; 0x30
9001108a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
9001108e:	4422      	add	r2, r4
90011090:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
90011094:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
90011098:	3302      	adds	r3, #2
9001109a:	e7c7      	b.n	9001102c <_printf_common+0x58>
9001109c:	2301      	movs	r3, #1
9001109e:	4622      	mov	r2, r4
900110a0:	4649      	mov	r1, r9
900110a2:	4638      	mov	r0, r7
900110a4:	47c0      	blx	r8
900110a6:	3001      	adds	r0, #1
900110a8:	d0e6      	beq.n	90011078 <_printf_common+0xa4>
900110aa:	3601      	adds	r6, #1
900110ac:	e7d9      	b.n	90011062 <_printf_common+0x8e>
	...

900110b0 <_printf_i>:
900110b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
900110b4:	7e0f      	ldrb	r7, [r1, #24]
900110b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
900110b8:	2f78      	cmp	r7, #120	; 0x78
900110ba:	4691      	mov	r9, r2
900110bc:	4680      	mov	r8, r0
900110be:	460c      	mov	r4, r1
900110c0:	469a      	mov	sl, r3
900110c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
900110c6:	d807      	bhi.n	900110d8 <_printf_i+0x28>
900110c8:	2f62      	cmp	r7, #98	; 0x62
900110ca:	d80a      	bhi.n	900110e2 <_printf_i+0x32>
900110cc:	2f00      	cmp	r7, #0
900110ce:	f000 80d8 	beq.w	90011282 <_printf_i+0x1d2>
900110d2:	2f58      	cmp	r7, #88	; 0x58
900110d4:	f000 80a3 	beq.w	9001121e <_printf_i+0x16e>
900110d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
900110dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
900110e0:	e03a      	b.n	90011158 <_printf_i+0xa8>
900110e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
900110e6:	2b15      	cmp	r3, #21
900110e8:	d8f6      	bhi.n	900110d8 <_printf_i+0x28>
900110ea:	a101      	add	r1, pc, #4	; (adr r1, 900110f0 <_printf_i+0x40>)
900110ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
900110f0:	90011149 	.word	0x90011149
900110f4:	9001115d 	.word	0x9001115d
900110f8:	900110d9 	.word	0x900110d9
900110fc:	900110d9 	.word	0x900110d9
90011100:	900110d9 	.word	0x900110d9
90011104:	900110d9 	.word	0x900110d9
90011108:	9001115d 	.word	0x9001115d
9001110c:	900110d9 	.word	0x900110d9
90011110:	900110d9 	.word	0x900110d9
90011114:	900110d9 	.word	0x900110d9
90011118:	900110d9 	.word	0x900110d9
9001111c:	90011269 	.word	0x90011269
90011120:	9001118d 	.word	0x9001118d
90011124:	9001124b 	.word	0x9001124b
90011128:	900110d9 	.word	0x900110d9
9001112c:	900110d9 	.word	0x900110d9
90011130:	9001128b 	.word	0x9001128b
90011134:	900110d9 	.word	0x900110d9
90011138:	9001118d 	.word	0x9001118d
9001113c:	900110d9 	.word	0x900110d9
90011140:	900110d9 	.word	0x900110d9
90011144:	90011253 	.word	0x90011253
90011148:	682b      	ldr	r3, [r5, #0]
9001114a:	1d1a      	adds	r2, r3, #4
9001114c:	681b      	ldr	r3, [r3, #0]
9001114e:	602a      	str	r2, [r5, #0]
90011150:	f104 0542 	add.w	r5, r4, #66	; 0x42
90011154:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
90011158:	2301      	movs	r3, #1
9001115a:	e0a3      	b.n	900112a4 <_printf_i+0x1f4>
9001115c:	6820      	ldr	r0, [r4, #0]
9001115e:	6829      	ldr	r1, [r5, #0]
90011160:	0606      	lsls	r6, r0, #24
90011162:	f101 0304 	add.w	r3, r1, #4
90011166:	d50a      	bpl.n	9001117e <_printf_i+0xce>
90011168:	680e      	ldr	r6, [r1, #0]
9001116a:	602b      	str	r3, [r5, #0]
9001116c:	2e00      	cmp	r6, #0
9001116e:	da03      	bge.n	90011178 <_printf_i+0xc8>
90011170:	232d      	movs	r3, #45	; 0x2d
90011172:	4276      	negs	r6, r6
90011174:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
90011178:	485e      	ldr	r0, [pc, #376]	; (900112f4 <_printf_i+0x244>)
9001117a:	230a      	movs	r3, #10
9001117c:	e019      	b.n	900111b2 <_printf_i+0x102>
9001117e:	680e      	ldr	r6, [r1, #0]
90011180:	602b      	str	r3, [r5, #0]
90011182:	f010 0f40 	tst.w	r0, #64	; 0x40
90011186:	bf18      	it	ne
90011188:	b236      	sxthne	r6, r6
9001118a:	e7ef      	b.n	9001116c <_printf_i+0xbc>
9001118c:	682b      	ldr	r3, [r5, #0]
9001118e:	6820      	ldr	r0, [r4, #0]
90011190:	1d19      	adds	r1, r3, #4
90011192:	6029      	str	r1, [r5, #0]
90011194:	0601      	lsls	r1, r0, #24
90011196:	d501      	bpl.n	9001119c <_printf_i+0xec>
90011198:	681e      	ldr	r6, [r3, #0]
9001119a:	e002      	b.n	900111a2 <_printf_i+0xf2>
9001119c:	0646      	lsls	r6, r0, #25
9001119e:	d5fb      	bpl.n	90011198 <_printf_i+0xe8>
900111a0:	881e      	ldrh	r6, [r3, #0]
900111a2:	4854      	ldr	r0, [pc, #336]	; (900112f4 <_printf_i+0x244>)
900111a4:	2f6f      	cmp	r7, #111	; 0x6f
900111a6:	bf0c      	ite	eq
900111a8:	2308      	moveq	r3, #8
900111aa:	230a      	movne	r3, #10
900111ac:	2100      	movs	r1, #0
900111ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
900111b2:	6865      	ldr	r5, [r4, #4]
900111b4:	60a5      	str	r5, [r4, #8]
900111b6:	2d00      	cmp	r5, #0
900111b8:	bfa2      	ittt	ge
900111ba:	6821      	ldrge	r1, [r4, #0]
900111bc:	f021 0104 	bicge.w	r1, r1, #4
900111c0:	6021      	strge	r1, [r4, #0]
900111c2:	b90e      	cbnz	r6, 900111c8 <_printf_i+0x118>
900111c4:	2d00      	cmp	r5, #0
900111c6:	d04d      	beq.n	90011264 <_printf_i+0x1b4>
900111c8:	4615      	mov	r5, r2
900111ca:	fbb6 f1f3 	udiv	r1, r6, r3
900111ce:	fb03 6711 	mls	r7, r3, r1, r6
900111d2:	5dc7      	ldrb	r7, [r0, r7]
900111d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
900111d8:	4637      	mov	r7, r6
900111da:	42bb      	cmp	r3, r7
900111dc:	460e      	mov	r6, r1
900111de:	d9f4      	bls.n	900111ca <_printf_i+0x11a>
900111e0:	2b08      	cmp	r3, #8
900111e2:	d10b      	bne.n	900111fc <_printf_i+0x14c>
900111e4:	6823      	ldr	r3, [r4, #0]
900111e6:	07de      	lsls	r6, r3, #31
900111e8:	d508      	bpl.n	900111fc <_printf_i+0x14c>
900111ea:	6923      	ldr	r3, [r4, #16]
900111ec:	6861      	ldr	r1, [r4, #4]
900111ee:	4299      	cmp	r1, r3
900111f0:	bfde      	ittt	le
900111f2:	2330      	movle	r3, #48	; 0x30
900111f4:	f805 3c01 	strble.w	r3, [r5, #-1]
900111f8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
900111fc:	1b52      	subs	r2, r2, r5
900111fe:	6122      	str	r2, [r4, #16]
90011200:	f8cd a000 	str.w	sl, [sp]
90011204:	464b      	mov	r3, r9
90011206:	aa03      	add	r2, sp, #12
90011208:	4621      	mov	r1, r4
9001120a:	4640      	mov	r0, r8
9001120c:	f7ff fee2 	bl	90010fd4 <_printf_common>
90011210:	3001      	adds	r0, #1
90011212:	d14c      	bne.n	900112ae <_printf_i+0x1fe>
90011214:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
90011218:	b004      	add	sp, #16
9001121a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9001121e:	4835      	ldr	r0, [pc, #212]	; (900112f4 <_printf_i+0x244>)
90011220:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
90011224:	6829      	ldr	r1, [r5, #0]
90011226:	6823      	ldr	r3, [r4, #0]
90011228:	f851 6b04 	ldr.w	r6, [r1], #4
9001122c:	6029      	str	r1, [r5, #0]
9001122e:	061d      	lsls	r5, r3, #24
90011230:	d514      	bpl.n	9001125c <_printf_i+0x1ac>
90011232:	07df      	lsls	r7, r3, #31
90011234:	bf44      	itt	mi
90011236:	f043 0320 	orrmi.w	r3, r3, #32
9001123a:	6023      	strmi	r3, [r4, #0]
9001123c:	b91e      	cbnz	r6, 90011246 <_printf_i+0x196>
9001123e:	6823      	ldr	r3, [r4, #0]
90011240:	f023 0320 	bic.w	r3, r3, #32
90011244:	6023      	str	r3, [r4, #0]
90011246:	2310      	movs	r3, #16
90011248:	e7b0      	b.n	900111ac <_printf_i+0xfc>
9001124a:	6823      	ldr	r3, [r4, #0]
9001124c:	f043 0320 	orr.w	r3, r3, #32
90011250:	6023      	str	r3, [r4, #0]
90011252:	2378      	movs	r3, #120	; 0x78
90011254:	4828      	ldr	r0, [pc, #160]	; (900112f8 <_printf_i+0x248>)
90011256:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
9001125a:	e7e3      	b.n	90011224 <_printf_i+0x174>
9001125c:	0659      	lsls	r1, r3, #25
9001125e:	bf48      	it	mi
90011260:	b2b6      	uxthmi	r6, r6
90011262:	e7e6      	b.n	90011232 <_printf_i+0x182>
90011264:	4615      	mov	r5, r2
90011266:	e7bb      	b.n	900111e0 <_printf_i+0x130>
90011268:	682b      	ldr	r3, [r5, #0]
9001126a:	6826      	ldr	r6, [r4, #0]
9001126c:	6961      	ldr	r1, [r4, #20]
9001126e:	1d18      	adds	r0, r3, #4
90011270:	6028      	str	r0, [r5, #0]
90011272:	0635      	lsls	r5, r6, #24
90011274:	681b      	ldr	r3, [r3, #0]
90011276:	d501      	bpl.n	9001127c <_printf_i+0x1cc>
90011278:	6019      	str	r1, [r3, #0]
9001127a:	e002      	b.n	90011282 <_printf_i+0x1d2>
9001127c:	0670      	lsls	r0, r6, #25
9001127e:	d5fb      	bpl.n	90011278 <_printf_i+0x1c8>
90011280:	8019      	strh	r1, [r3, #0]
90011282:	2300      	movs	r3, #0
90011284:	6123      	str	r3, [r4, #16]
90011286:	4615      	mov	r5, r2
90011288:	e7ba      	b.n	90011200 <_printf_i+0x150>
9001128a:	682b      	ldr	r3, [r5, #0]
9001128c:	1d1a      	adds	r2, r3, #4
9001128e:	602a      	str	r2, [r5, #0]
90011290:	681d      	ldr	r5, [r3, #0]
90011292:	6862      	ldr	r2, [r4, #4]
90011294:	2100      	movs	r1, #0
90011296:	4628      	mov	r0, r5
90011298:	f7ee ffd2 	bl	90000240 <memchr>
9001129c:	b108      	cbz	r0, 900112a2 <_printf_i+0x1f2>
9001129e:	1b40      	subs	r0, r0, r5
900112a0:	6060      	str	r0, [r4, #4]
900112a2:	6863      	ldr	r3, [r4, #4]
900112a4:	6123      	str	r3, [r4, #16]
900112a6:	2300      	movs	r3, #0
900112a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
900112ac:	e7a8      	b.n	90011200 <_printf_i+0x150>
900112ae:	6923      	ldr	r3, [r4, #16]
900112b0:	462a      	mov	r2, r5
900112b2:	4649      	mov	r1, r9
900112b4:	4640      	mov	r0, r8
900112b6:	47d0      	blx	sl
900112b8:	3001      	adds	r0, #1
900112ba:	d0ab      	beq.n	90011214 <_printf_i+0x164>
900112bc:	6823      	ldr	r3, [r4, #0]
900112be:	079b      	lsls	r3, r3, #30
900112c0:	d413      	bmi.n	900112ea <_printf_i+0x23a>
900112c2:	68e0      	ldr	r0, [r4, #12]
900112c4:	9b03      	ldr	r3, [sp, #12]
900112c6:	4298      	cmp	r0, r3
900112c8:	bfb8      	it	lt
900112ca:	4618      	movlt	r0, r3
900112cc:	e7a4      	b.n	90011218 <_printf_i+0x168>
900112ce:	2301      	movs	r3, #1
900112d0:	4632      	mov	r2, r6
900112d2:	4649      	mov	r1, r9
900112d4:	4640      	mov	r0, r8
900112d6:	47d0      	blx	sl
900112d8:	3001      	adds	r0, #1
900112da:	d09b      	beq.n	90011214 <_printf_i+0x164>
900112dc:	3501      	adds	r5, #1
900112de:	68e3      	ldr	r3, [r4, #12]
900112e0:	9903      	ldr	r1, [sp, #12]
900112e2:	1a5b      	subs	r3, r3, r1
900112e4:	42ab      	cmp	r3, r5
900112e6:	dcf2      	bgt.n	900112ce <_printf_i+0x21e>
900112e8:	e7eb      	b.n	900112c2 <_printf_i+0x212>
900112ea:	2500      	movs	r5, #0
900112ec:	f104 0619 	add.w	r6, r4, #25
900112f0:	e7f5      	b.n	900112de <_printf_i+0x22e>
900112f2:	bf00      	nop
900112f4:	90015c61 	.word	0x90015c61
900112f8:	90015c72 	.word	0x90015c72

900112fc <_sbrk_r>:
900112fc:	b538      	push	{r3, r4, r5, lr}
900112fe:	4d06      	ldr	r5, [pc, #24]	; (90011318 <_sbrk_r+0x1c>)
90011300:	2300      	movs	r3, #0
90011302:	4604      	mov	r4, r0
90011304:	4608      	mov	r0, r1
90011306:	602b      	str	r3, [r5, #0]
90011308:	f7f0 f8e2 	bl	900014d0 <_sbrk>
9001130c:	1c43      	adds	r3, r0, #1
9001130e:	d102      	bne.n	90011316 <_sbrk_r+0x1a>
90011310:	682b      	ldr	r3, [r5, #0]
90011312:	b103      	cbz	r3, 90011316 <_sbrk_r+0x1a>
90011314:	6023      	str	r3, [r4, #0]
90011316:	bd38      	pop	{r3, r4, r5, pc}
90011318:	2000a9fc 	.word	0x2000a9fc

9001131c <__sread>:
9001131c:	b510      	push	{r4, lr}
9001131e:	460c      	mov	r4, r1
90011320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90011324:	f000 fa9e 	bl	90011864 <_read_r>
90011328:	2800      	cmp	r0, #0
9001132a:	bfab      	itete	ge
9001132c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
9001132e:	89a3      	ldrhlt	r3, [r4, #12]
90011330:	181b      	addge	r3, r3, r0
90011332:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
90011336:	bfac      	ite	ge
90011338:	6563      	strge	r3, [r4, #84]	; 0x54
9001133a:	81a3      	strhlt	r3, [r4, #12]
9001133c:	bd10      	pop	{r4, pc}

9001133e <__swrite>:
9001133e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90011342:	461f      	mov	r7, r3
90011344:	898b      	ldrh	r3, [r1, #12]
90011346:	05db      	lsls	r3, r3, #23
90011348:	4605      	mov	r5, r0
9001134a:	460c      	mov	r4, r1
9001134c:	4616      	mov	r6, r2
9001134e:	d505      	bpl.n	9001135c <__swrite+0x1e>
90011350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90011354:	2302      	movs	r3, #2
90011356:	2200      	movs	r2, #0
90011358:	f000 f9d0 	bl	900116fc <_lseek_r>
9001135c:	89a3      	ldrh	r3, [r4, #12]
9001135e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
90011362:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
90011366:	81a3      	strh	r3, [r4, #12]
90011368:	4632      	mov	r2, r6
9001136a:	463b      	mov	r3, r7
9001136c:	4628      	mov	r0, r5
9001136e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
90011372:	f000 b869 	b.w	90011448 <_write_r>

90011376 <__sseek>:
90011376:	b510      	push	{r4, lr}
90011378:	460c      	mov	r4, r1
9001137a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9001137e:	f000 f9bd 	bl	900116fc <_lseek_r>
90011382:	1c43      	adds	r3, r0, #1
90011384:	89a3      	ldrh	r3, [r4, #12]
90011386:	bf15      	itete	ne
90011388:	6560      	strne	r0, [r4, #84]	; 0x54
9001138a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
9001138e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
90011392:	81a3      	strheq	r3, [r4, #12]
90011394:	bf18      	it	ne
90011396:	81a3      	strhne	r3, [r4, #12]
90011398:	bd10      	pop	{r4, pc}

9001139a <__sclose>:
9001139a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9001139e:	f000 b8db 	b.w	90011558 <_close_r>
	...

900113a4 <__swbuf_r>:
900113a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
900113a6:	460e      	mov	r6, r1
900113a8:	4614      	mov	r4, r2
900113aa:	4605      	mov	r5, r0
900113ac:	b118      	cbz	r0, 900113b6 <__swbuf_r+0x12>
900113ae:	6983      	ldr	r3, [r0, #24]
900113b0:	b90b      	cbnz	r3, 900113b6 <__swbuf_r+0x12>
900113b2:	f7ff f9bf 	bl	90010734 <__sinit>
900113b6:	4b21      	ldr	r3, [pc, #132]	; (9001143c <__swbuf_r+0x98>)
900113b8:	429c      	cmp	r4, r3
900113ba:	d12b      	bne.n	90011414 <__swbuf_r+0x70>
900113bc:	686c      	ldr	r4, [r5, #4]
900113be:	69a3      	ldr	r3, [r4, #24]
900113c0:	60a3      	str	r3, [r4, #8]
900113c2:	89a3      	ldrh	r3, [r4, #12]
900113c4:	071a      	lsls	r2, r3, #28
900113c6:	d52f      	bpl.n	90011428 <__swbuf_r+0x84>
900113c8:	6923      	ldr	r3, [r4, #16]
900113ca:	b36b      	cbz	r3, 90011428 <__swbuf_r+0x84>
900113cc:	6923      	ldr	r3, [r4, #16]
900113ce:	6820      	ldr	r0, [r4, #0]
900113d0:	1ac0      	subs	r0, r0, r3
900113d2:	6963      	ldr	r3, [r4, #20]
900113d4:	b2f6      	uxtb	r6, r6
900113d6:	4283      	cmp	r3, r0
900113d8:	4637      	mov	r7, r6
900113da:	dc04      	bgt.n	900113e6 <__swbuf_r+0x42>
900113dc:	4621      	mov	r1, r4
900113de:	4628      	mov	r0, r5
900113e0:	f000 f950 	bl	90011684 <_fflush_r>
900113e4:	bb30      	cbnz	r0, 90011434 <__swbuf_r+0x90>
900113e6:	68a3      	ldr	r3, [r4, #8]
900113e8:	3b01      	subs	r3, #1
900113ea:	60a3      	str	r3, [r4, #8]
900113ec:	6823      	ldr	r3, [r4, #0]
900113ee:	1c5a      	adds	r2, r3, #1
900113f0:	6022      	str	r2, [r4, #0]
900113f2:	701e      	strb	r6, [r3, #0]
900113f4:	6963      	ldr	r3, [r4, #20]
900113f6:	3001      	adds	r0, #1
900113f8:	4283      	cmp	r3, r0
900113fa:	d004      	beq.n	90011406 <__swbuf_r+0x62>
900113fc:	89a3      	ldrh	r3, [r4, #12]
900113fe:	07db      	lsls	r3, r3, #31
90011400:	d506      	bpl.n	90011410 <__swbuf_r+0x6c>
90011402:	2e0a      	cmp	r6, #10
90011404:	d104      	bne.n	90011410 <__swbuf_r+0x6c>
90011406:	4621      	mov	r1, r4
90011408:	4628      	mov	r0, r5
9001140a:	f000 f93b 	bl	90011684 <_fflush_r>
9001140e:	b988      	cbnz	r0, 90011434 <__swbuf_r+0x90>
90011410:	4638      	mov	r0, r7
90011412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90011414:	4b0a      	ldr	r3, [pc, #40]	; (90011440 <__swbuf_r+0x9c>)
90011416:	429c      	cmp	r4, r3
90011418:	d101      	bne.n	9001141e <__swbuf_r+0x7a>
9001141a:	68ac      	ldr	r4, [r5, #8]
9001141c:	e7cf      	b.n	900113be <__swbuf_r+0x1a>
9001141e:	4b09      	ldr	r3, [pc, #36]	; (90011444 <__swbuf_r+0xa0>)
90011420:	429c      	cmp	r4, r3
90011422:	bf08      	it	eq
90011424:	68ec      	ldreq	r4, [r5, #12]
90011426:	e7ca      	b.n	900113be <__swbuf_r+0x1a>
90011428:	4621      	mov	r1, r4
9001142a:	4628      	mov	r0, r5
9001142c:	f000 f81e 	bl	9001146c <__swsetup_r>
90011430:	2800      	cmp	r0, #0
90011432:	d0cb      	beq.n	900113cc <__swbuf_r+0x28>
90011434:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
90011438:	e7ea      	b.n	90011410 <__swbuf_r+0x6c>
9001143a:	bf00      	nop
9001143c:	90015c10 	.word	0x90015c10
90011440:	90015c30 	.word	0x90015c30
90011444:	90015bf0 	.word	0x90015bf0

90011448 <_write_r>:
90011448:	b538      	push	{r3, r4, r5, lr}
9001144a:	4d07      	ldr	r5, [pc, #28]	; (90011468 <_write_r+0x20>)
9001144c:	4604      	mov	r4, r0
9001144e:	4608      	mov	r0, r1
90011450:	4611      	mov	r1, r2
90011452:	2200      	movs	r2, #0
90011454:	602a      	str	r2, [r5, #0]
90011456:	461a      	mov	r2, r3
90011458:	f7ef ffe9 	bl	9000142e <_write>
9001145c:	1c43      	adds	r3, r0, #1
9001145e:	d102      	bne.n	90011466 <_write_r+0x1e>
90011460:	682b      	ldr	r3, [r5, #0]
90011462:	b103      	cbz	r3, 90011466 <_write_r+0x1e>
90011464:	6023      	str	r3, [r4, #0]
90011466:	bd38      	pop	{r3, r4, r5, pc}
90011468:	2000a9fc 	.word	0x2000a9fc

9001146c <__swsetup_r>:
9001146c:	4b32      	ldr	r3, [pc, #200]	; (90011538 <__swsetup_r+0xcc>)
9001146e:	b570      	push	{r4, r5, r6, lr}
90011470:	681d      	ldr	r5, [r3, #0]
90011472:	4606      	mov	r6, r0
90011474:	460c      	mov	r4, r1
90011476:	b125      	cbz	r5, 90011482 <__swsetup_r+0x16>
90011478:	69ab      	ldr	r3, [r5, #24]
9001147a:	b913      	cbnz	r3, 90011482 <__swsetup_r+0x16>
9001147c:	4628      	mov	r0, r5
9001147e:	f7ff f959 	bl	90010734 <__sinit>
90011482:	4b2e      	ldr	r3, [pc, #184]	; (9001153c <__swsetup_r+0xd0>)
90011484:	429c      	cmp	r4, r3
90011486:	d10f      	bne.n	900114a8 <__swsetup_r+0x3c>
90011488:	686c      	ldr	r4, [r5, #4]
9001148a:	89a3      	ldrh	r3, [r4, #12]
9001148c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
90011490:	0719      	lsls	r1, r3, #28
90011492:	d42c      	bmi.n	900114ee <__swsetup_r+0x82>
90011494:	06dd      	lsls	r5, r3, #27
90011496:	d411      	bmi.n	900114bc <__swsetup_r+0x50>
90011498:	2309      	movs	r3, #9
9001149a:	6033      	str	r3, [r6, #0]
9001149c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
900114a0:	81a3      	strh	r3, [r4, #12]
900114a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
900114a6:	e03e      	b.n	90011526 <__swsetup_r+0xba>
900114a8:	4b25      	ldr	r3, [pc, #148]	; (90011540 <__swsetup_r+0xd4>)
900114aa:	429c      	cmp	r4, r3
900114ac:	d101      	bne.n	900114b2 <__swsetup_r+0x46>
900114ae:	68ac      	ldr	r4, [r5, #8]
900114b0:	e7eb      	b.n	9001148a <__swsetup_r+0x1e>
900114b2:	4b24      	ldr	r3, [pc, #144]	; (90011544 <__swsetup_r+0xd8>)
900114b4:	429c      	cmp	r4, r3
900114b6:	bf08      	it	eq
900114b8:	68ec      	ldreq	r4, [r5, #12]
900114ba:	e7e6      	b.n	9001148a <__swsetup_r+0x1e>
900114bc:	0758      	lsls	r0, r3, #29
900114be:	d512      	bpl.n	900114e6 <__swsetup_r+0x7a>
900114c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
900114c2:	b141      	cbz	r1, 900114d6 <__swsetup_r+0x6a>
900114c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
900114c8:	4299      	cmp	r1, r3
900114ca:	d002      	beq.n	900114d2 <__swsetup_r+0x66>
900114cc:	4630      	mov	r0, r6
900114ce:	f7ff f9eb 	bl	900108a8 <_free_r>
900114d2:	2300      	movs	r3, #0
900114d4:	6363      	str	r3, [r4, #52]	; 0x34
900114d6:	89a3      	ldrh	r3, [r4, #12]
900114d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
900114dc:	81a3      	strh	r3, [r4, #12]
900114de:	2300      	movs	r3, #0
900114e0:	6063      	str	r3, [r4, #4]
900114e2:	6923      	ldr	r3, [r4, #16]
900114e4:	6023      	str	r3, [r4, #0]
900114e6:	89a3      	ldrh	r3, [r4, #12]
900114e8:	f043 0308 	orr.w	r3, r3, #8
900114ec:	81a3      	strh	r3, [r4, #12]
900114ee:	6923      	ldr	r3, [r4, #16]
900114f0:	b94b      	cbnz	r3, 90011506 <__swsetup_r+0x9a>
900114f2:	89a3      	ldrh	r3, [r4, #12]
900114f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
900114f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
900114fc:	d003      	beq.n	90011506 <__swsetup_r+0x9a>
900114fe:	4621      	mov	r1, r4
90011500:	4630      	mov	r0, r6
90011502:	f000 f933 	bl	9001176c <__smakebuf_r>
90011506:	89a0      	ldrh	r0, [r4, #12]
90011508:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
9001150c:	f010 0301 	ands.w	r3, r0, #1
90011510:	d00a      	beq.n	90011528 <__swsetup_r+0xbc>
90011512:	2300      	movs	r3, #0
90011514:	60a3      	str	r3, [r4, #8]
90011516:	6963      	ldr	r3, [r4, #20]
90011518:	425b      	negs	r3, r3
9001151a:	61a3      	str	r3, [r4, #24]
9001151c:	6923      	ldr	r3, [r4, #16]
9001151e:	b943      	cbnz	r3, 90011532 <__swsetup_r+0xc6>
90011520:	f010 0080 	ands.w	r0, r0, #128	; 0x80
90011524:	d1ba      	bne.n	9001149c <__swsetup_r+0x30>
90011526:	bd70      	pop	{r4, r5, r6, pc}
90011528:	0781      	lsls	r1, r0, #30
9001152a:	bf58      	it	pl
9001152c:	6963      	ldrpl	r3, [r4, #20]
9001152e:	60a3      	str	r3, [r4, #8]
90011530:	e7f4      	b.n	9001151c <__swsetup_r+0xb0>
90011532:	2000      	movs	r0, #0
90011534:	e7f7      	b.n	90011526 <__swsetup_r+0xba>
90011536:	bf00      	nop
90011538:	2000003c 	.word	0x2000003c
9001153c:	90015c10 	.word	0x90015c10
90011540:	90015c30 	.word	0x90015c30
90011544:	90015bf0 	.word	0x90015bf0

90011548 <abort>:
90011548:	b508      	push	{r3, lr}
9001154a:	2006      	movs	r0, #6
9001154c:	f000 f9c4 	bl	900118d8 <raise>
90011550:	2001      	movs	r0, #1
90011552:	f7ef ff45 	bl	900013e0 <_exit>
	...

90011558 <_close_r>:
90011558:	b538      	push	{r3, r4, r5, lr}
9001155a:	4d06      	ldr	r5, [pc, #24]	; (90011574 <_close_r+0x1c>)
9001155c:	2300      	movs	r3, #0
9001155e:	4604      	mov	r4, r0
90011560:	4608      	mov	r0, r1
90011562:	602b      	str	r3, [r5, #0]
90011564:	f7ef ff7f 	bl	90001466 <_close>
90011568:	1c43      	adds	r3, r0, #1
9001156a:	d102      	bne.n	90011572 <_close_r+0x1a>
9001156c:	682b      	ldr	r3, [r5, #0]
9001156e:	b103      	cbz	r3, 90011572 <_close_r+0x1a>
90011570:	6023      	str	r3, [r4, #0]
90011572:	bd38      	pop	{r3, r4, r5, pc}
90011574:	2000a9fc 	.word	0x2000a9fc

90011578 <__sflush_r>:
90011578:	898a      	ldrh	r2, [r1, #12]
9001157a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9001157e:	4605      	mov	r5, r0
90011580:	0710      	lsls	r0, r2, #28
90011582:	460c      	mov	r4, r1
90011584:	d458      	bmi.n	90011638 <__sflush_r+0xc0>
90011586:	684b      	ldr	r3, [r1, #4]
90011588:	2b00      	cmp	r3, #0
9001158a:	dc05      	bgt.n	90011598 <__sflush_r+0x20>
9001158c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
9001158e:	2b00      	cmp	r3, #0
90011590:	dc02      	bgt.n	90011598 <__sflush_r+0x20>
90011592:	2000      	movs	r0, #0
90011594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90011598:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
9001159a:	2e00      	cmp	r6, #0
9001159c:	d0f9      	beq.n	90011592 <__sflush_r+0x1a>
9001159e:	2300      	movs	r3, #0
900115a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
900115a4:	682f      	ldr	r7, [r5, #0]
900115a6:	602b      	str	r3, [r5, #0]
900115a8:	d032      	beq.n	90011610 <__sflush_r+0x98>
900115aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
900115ac:	89a3      	ldrh	r3, [r4, #12]
900115ae:	075a      	lsls	r2, r3, #29
900115b0:	d505      	bpl.n	900115be <__sflush_r+0x46>
900115b2:	6863      	ldr	r3, [r4, #4]
900115b4:	1ac0      	subs	r0, r0, r3
900115b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
900115b8:	b10b      	cbz	r3, 900115be <__sflush_r+0x46>
900115ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
900115bc:	1ac0      	subs	r0, r0, r3
900115be:	2300      	movs	r3, #0
900115c0:	4602      	mov	r2, r0
900115c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
900115c4:	6a21      	ldr	r1, [r4, #32]
900115c6:	4628      	mov	r0, r5
900115c8:	47b0      	blx	r6
900115ca:	1c43      	adds	r3, r0, #1
900115cc:	89a3      	ldrh	r3, [r4, #12]
900115ce:	d106      	bne.n	900115de <__sflush_r+0x66>
900115d0:	6829      	ldr	r1, [r5, #0]
900115d2:	291d      	cmp	r1, #29
900115d4:	d82c      	bhi.n	90011630 <__sflush_r+0xb8>
900115d6:	4a2a      	ldr	r2, [pc, #168]	; (90011680 <__sflush_r+0x108>)
900115d8:	40ca      	lsrs	r2, r1
900115da:	07d6      	lsls	r6, r2, #31
900115dc:	d528      	bpl.n	90011630 <__sflush_r+0xb8>
900115de:	2200      	movs	r2, #0
900115e0:	6062      	str	r2, [r4, #4]
900115e2:	04d9      	lsls	r1, r3, #19
900115e4:	6922      	ldr	r2, [r4, #16]
900115e6:	6022      	str	r2, [r4, #0]
900115e8:	d504      	bpl.n	900115f4 <__sflush_r+0x7c>
900115ea:	1c42      	adds	r2, r0, #1
900115ec:	d101      	bne.n	900115f2 <__sflush_r+0x7a>
900115ee:	682b      	ldr	r3, [r5, #0]
900115f0:	b903      	cbnz	r3, 900115f4 <__sflush_r+0x7c>
900115f2:	6560      	str	r0, [r4, #84]	; 0x54
900115f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
900115f6:	602f      	str	r7, [r5, #0]
900115f8:	2900      	cmp	r1, #0
900115fa:	d0ca      	beq.n	90011592 <__sflush_r+0x1a>
900115fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
90011600:	4299      	cmp	r1, r3
90011602:	d002      	beq.n	9001160a <__sflush_r+0x92>
90011604:	4628      	mov	r0, r5
90011606:	f7ff f94f 	bl	900108a8 <_free_r>
9001160a:	2000      	movs	r0, #0
9001160c:	6360      	str	r0, [r4, #52]	; 0x34
9001160e:	e7c1      	b.n	90011594 <__sflush_r+0x1c>
90011610:	6a21      	ldr	r1, [r4, #32]
90011612:	2301      	movs	r3, #1
90011614:	4628      	mov	r0, r5
90011616:	47b0      	blx	r6
90011618:	1c41      	adds	r1, r0, #1
9001161a:	d1c7      	bne.n	900115ac <__sflush_r+0x34>
9001161c:	682b      	ldr	r3, [r5, #0]
9001161e:	2b00      	cmp	r3, #0
90011620:	d0c4      	beq.n	900115ac <__sflush_r+0x34>
90011622:	2b1d      	cmp	r3, #29
90011624:	d001      	beq.n	9001162a <__sflush_r+0xb2>
90011626:	2b16      	cmp	r3, #22
90011628:	d101      	bne.n	9001162e <__sflush_r+0xb6>
9001162a:	602f      	str	r7, [r5, #0]
9001162c:	e7b1      	b.n	90011592 <__sflush_r+0x1a>
9001162e:	89a3      	ldrh	r3, [r4, #12]
90011630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90011634:	81a3      	strh	r3, [r4, #12]
90011636:	e7ad      	b.n	90011594 <__sflush_r+0x1c>
90011638:	690f      	ldr	r7, [r1, #16]
9001163a:	2f00      	cmp	r7, #0
9001163c:	d0a9      	beq.n	90011592 <__sflush_r+0x1a>
9001163e:	0793      	lsls	r3, r2, #30
90011640:	680e      	ldr	r6, [r1, #0]
90011642:	bf08      	it	eq
90011644:	694b      	ldreq	r3, [r1, #20]
90011646:	600f      	str	r7, [r1, #0]
90011648:	bf18      	it	ne
9001164a:	2300      	movne	r3, #0
9001164c:	eba6 0807 	sub.w	r8, r6, r7
90011650:	608b      	str	r3, [r1, #8]
90011652:	f1b8 0f00 	cmp.w	r8, #0
90011656:	dd9c      	ble.n	90011592 <__sflush_r+0x1a>
90011658:	6a21      	ldr	r1, [r4, #32]
9001165a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
9001165c:	4643      	mov	r3, r8
9001165e:	463a      	mov	r2, r7
90011660:	4628      	mov	r0, r5
90011662:	47b0      	blx	r6
90011664:	2800      	cmp	r0, #0
90011666:	dc06      	bgt.n	90011676 <__sflush_r+0xfe>
90011668:	89a3      	ldrh	r3, [r4, #12]
9001166a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
9001166e:	81a3      	strh	r3, [r4, #12]
90011670:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
90011674:	e78e      	b.n	90011594 <__sflush_r+0x1c>
90011676:	4407      	add	r7, r0
90011678:	eba8 0800 	sub.w	r8, r8, r0
9001167c:	e7e9      	b.n	90011652 <__sflush_r+0xda>
9001167e:	bf00      	nop
90011680:	20400001 	.word	0x20400001

90011684 <_fflush_r>:
90011684:	b538      	push	{r3, r4, r5, lr}
90011686:	690b      	ldr	r3, [r1, #16]
90011688:	4605      	mov	r5, r0
9001168a:	460c      	mov	r4, r1
9001168c:	b913      	cbnz	r3, 90011694 <_fflush_r+0x10>
9001168e:	2500      	movs	r5, #0
90011690:	4628      	mov	r0, r5
90011692:	bd38      	pop	{r3, r4, r5, pc}
90011694:	b118      	cbz	r0, 9001169e <_fflush_r+0x1a>
90011696:	6983      	ldr	r3, [r0, #24]
90011698:	b90b      	cbnz	r3, 9001169e <_fflush_r+0x1a>
9001169a:	f7ff f84b 	bl	90010734 <__sinit>
9001169e:	4b14      	ldr	r3, [pc, #80]	; (900116f0 <_fflush_r+0x6c>)
900116a0:	429c      	cmp	r4, r3
900116a2:	d11b      	bne.n	900116dc <_fflush_r+0x58>
900116a4:	686c      	ldr	r4, [r5, #4]
900116a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
900116aa:	2b00      	cmp	r3, #0
900116ac:	d0ef      	beq.n	9001168e <_fflush_r+0xa>
900116ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
900116b0:	07d0      	lsls	r0, r2, #31
900116b2:	d404      	bmi.n	900116be <_fflush_r+0x3a>
900116b4:	0599      	lsls	r1, r3, #22
900116b6:	d402      	bmi.n	900116be <_fflush_r+0x3a>
900116b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
900116ba:	f7ff f8eb 	bl	90010894 <__retarget_lock_acquire_recursive>
900116be:	4628      	mov	r0, r5
900116c0:	4621      	mov	r1, r4
900116c2:	f7ff ff59 	bl	90011578 <__sflush_r>
900116c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
900116c8:	07da      	lsls	r2, r3, #31
900116ca:	4605      	mov	r5, r0
900116cc:	d4e0      	bmi.n	90011690 <_fflush_r+0xc>
900116ce:	89a3      	ldrh	r3, [r4, #12]
900116d0:	059b      	lsls	r3, r3, #22
900116d2:	d4dd      	bmi.n	90011690 <_fflush_r+0xc>
900116d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
900116d6:	f7ff f8de 	bl	90010896 <__retarget_lock_release_recursive>
900116da:	e7d9      	b.n	90011690 <_fflush_r+0xc>
900116dc:	4b05      	ldr	r3, [pc, #20]	; (900116f4 <_fflush_r+0x70>)
900116de:	429c      	cmp	r4, r3
900116e0:	d101      	bne.n	900116e6 <_fflush_r+0x62>
900116e2:	68ac      	ldr	r4, [r5, #8]
900116e4:	e7df      	b.n	900116a6 <_fflush_r+0x22>
900116e6:	4b04      	ldr	r3, [pc, #16]	; (900116f8 <_fflush_r+0x74>)
900116e8:	429c      	cmp	r4, r3
900116ea:	bf08      	it	eq
900116ec:	68ec      	ldreq	r4, [r5, #12]
900116ee:	e7da      	b.n	900116a6 <_fflush_r+0x22>
900116f0:	90015c10 	.word	0x90015c10
900116f4:	90015c30 	.word	0x90015c30
900116f8:	90015bf0 	.word	0x90015bf0

900116fc <_lseek_r>:
900116fc:	b538      	push	{r3, r4, r5, lr}
900116fe:	4d07      	ldr	r5, [pc, #28]	; (9001171c <_lseek_r+0x20>)
90011700:	4604      	mov	r4, r0
90011702:	4608      	mov	r0, r1
90011704:	4611      	mov	r1, r2
90011706:	2200      	movs	r2, #0
90011708:	602a      	str	r2, [r5, #0]
9001170a:	461a      	mov	r2, r3
9001170c:	f7ef fed2 	bl	900014b4 <_lseek>
90011710:	1c43      	adds	r3, r0, #1
90011712:	d102      	bne.n	9001171a <_lseek_r+0x1e>
90011714:	682b      	ldr	r3, [r5, #0]
90011716:	b103      	cbz	r3, 9001171a <_lseek_r+0x1e>
90011718:	6023      	str	r3, [r4, #0]
9001171a:	bd38      	pop	{r3, r4, r5, pc}
9001171c:	2000a9fc 	.word	0x2000a9fc

90011720 <__swhatbuf_r>:
90011720:	b570      	push	{r4, r5, r6, lr}
90011722:	460e      	mov	r6, r1
90011724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90011728:	2900      	cmp	r1, #0
9001172a:	b096      	sub	sp, #88	; 0x58
9001172c:	4614      	mov	r4, r2
9001172e:	461d      	mov	r5, r3
90011730:	da08      	bge.n	90011744 <__swhatbuf_r+0x24>
90011732:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
90011736:	2200      	movs	r2, #0
90011738:	602a      	str	r2, [r5, #0]
9001173a:	061a      	lsls	r2, r3, #24
9001173c:	d410      	bmi.n	90011760 <__swhatbuf_r+0x40>
9001173e:	f44f 6380 	mov.w	r3, #1024	; 0x400
90011742:	e00e      	b.n	90011762 <__swhatbuf_r+0x42>
90011744:	466a      	mov	r2, sp
90011746:	f000 f8e3 	bl	90011910 <_fstat_r>
9001174a:	2800      	cmp	r0, #0
9001174c:	dbf1      	blt.n	90011732 <__swhatbuf_r+0x12>
9001174e:	9a01      	ldr	r2, [sp, #4]
90011750:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
90011754:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
90011758:	425a      	negs	r2, r3
9001175a:	415a      	adcs	r2, r3
9001175c:	602a      	str	r2, [r5, #0]
9001175e:	e7ee      	b.n	9001173e <__swhatbuf_r+0x1e>
90011760:	2340      	movs	r3, #64	; 0x40
90011762:	2000      	movs	r0, #0
90011764:	6023      	str	r3, [r4, #0]
90011766:	b016      	add	sp, #88	; 0x58
90011768:	bd70      	pop	{r4, r5, r6, pc}
	...

9001176c <__smakebuf_r>:
9001176c:	898b      	ldrh	r3, [r1, #12]
9001176e:	b573      	push	{r0, r1, r4, r5, r6, lr}
90011770:	079d      	lsls	r5, r3, #30
90011772:	4606      	mov	r6, r0
90011774:	460c      	mov	r4, r1
90011776:	d507      	bpl.n	90011788 <__smakebuf_r+0x1c>
90011778:	f104 0347 	add.w	r3, r4, #71	; 0x47
9001177c:	6023      	str	r3, [r4, #0]
9001177e:	6123      	str	r3, [r4, #16]
90011780:	2301      	movs	r3, #1
90011782:	6163      	str	r3, [r4, #20]
90011784:	b002      	add	sp, #8
90011786:	bd70      	pop	{r4, r5, r6, pc}
90011788:	ab01      	add	r3, sp, #4
9001178a:	466a      	mov	r2, sp
9001178c:	f7ff ffc8 	bl	90011720 <__swhatbuf_r>
90011790:	9900      	ldr	r1, [sp, #0]
90011792:	4605      	mov	r5, r0
90011794:	4630      	mov	r0, r6
90011796:	f7ff f8f3 	bl	90010980 <_malloc_r>
9001179a:	b948      	cbnz	r0, 900117b0 <__smakebuf_r+0x44>
9001179c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
900117a0:	059a      	lsls	r2, r3, #22
900117a2:	d4ef      	bmi.n	90011784 <__smakebuf_r+0x18>
900117a4:	f023 0303 	bic.w	r3, r3, #3
900117a8:	f043 0302 	orr.w	r3, r3, #2
900117ac:	81a3      	strh	r3, [r4, #12]
900117ae:	e7e3      	b.n	90011778 <__smakebuf_r+0xc>
900117b0:	4b0d      	ldr	r3, [pc, #52]	; (900117e8 <__smakebuf_r+0x7c>)
900117b2:	62b3      	str	r3, [r6, #40]	; 0x28
900117b4:	89a3      	ldrh	r3, [r4, #12]
900117b6:	6020      	str	r0, [r4, #0]
900117b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
900117bc:	81a3      	strh	r3, [r4, #12]
900117be:	9b00      	ldr	r3, [sp, #0]
900117c0:	6163      	str	r3, [r4, #20]
900117c2:	9b01      	ldr	r3, [sp, #4]
900117c4:	6120      	str	r0, [r4, #16]
900117c6:	b15b      	cbz	r3, 900117e0 <__smakebuf_r+0x74>
900117c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
900117cc:	4630      	mov	r0, r6
900117ce:	f000 f8b1 	bl	90011934 <_isatty_r>
900117d2:	b128      	cbz	r0, 900117e0 <__smakebuf_r+0x74>
900117d4:	89a3      	ldrh	r3, [r4, #12]
900117d6:	f023 0303 	bic.w	r3, r3, #3
900117da:	f043 0301 	orr.w	r3, r3, #1
900117de:	81a3      	strh	r3, [r4, #12]
900117e0:	89a0      	ldrh	r0, [r4, #12]
900117e2:	4305      	orrs	r5, r0
900117e4:	81a5      	strh	r5, [r4, #12]
900117e6:	e7cd      	b.n	90011784 <__smakebuf_r+0x18>
900117e8:	900106cd 	.word	0x900106cd

900117ec <__malloc_lock>:
900117ec:	4801      	ldr	r0, [pc, #4]	; (900117f4 <__malloc_lock+0x8>)
900117ee:	f7ff b851 	b.w	90010894 <__retarget_lock_acquire_recursive>
900117f2:	bf00      	nop
900117f4:	2000aa00 	.word	0x2000aa00

900117f8 <__malloc_unlock>:
900117f8:	4801      	ldr	r0, [pc, #4]	; (90011800 <__malloc_unlock+0x8>)
900117fa:	f7ff b84c 	b.w	90010896 <__retarget_lock_release_recursive>
900117fe:	bf00      	nop
90011800:	2000aa00 	.word	0x2000aa00

90011804 <_realloc_r>:
90011804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90011808:	4680      	mov	r8, r0
9001180a:	4614      	mov	r4, r2
9001180c:	460e      	mov	r6, r1
9001180e:	b921      	cbnz	r1, 9001181a <_realloc_r+0x16>
90011810:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
90011814:	4611      	mov	r1, r2
90011816:	f7ff b8b3 	b.w	90010980 <_malloc_r>
9001181a:	b92a      	cbnz	r2, 90011828 <_realloc_r+0x24>
9001181c:	f7ff f844 	bl	900108a8 <_free_r>
90011820:	4625      	mov	r5, r4
90011822:	4628      	mov	r0, r5
90011824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90011828:	f000 f894 	bl	90011954 <_malloc_usable_size_r>
9001182c:	4284      	cmp	r4, r0
9001182e:	4607      	mov	r7, r0
90011830:	d802      	bhi.n	90011838 <_realloc_r+0x34>
90011832:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
90011836:	d812      	bhi.n	9001185e <_realloc_r+0x5a>
90011838:	4621      	mov	r1, r4
9001183a:	4640      	mov	r0, r8
9001183c:	f7ff f8a0 	bl	90010980 <_malloc_r>
90011840:	4605      	mov	r5, r0
90011842:	2800      	cmp	r0, #0
90011844:	d0ed      	beq.n	90011822 <_realloc_r+0x1e>
90011846:	42bc      	cmp	r4, r7
90011848:	4622      	mov	r2, r4
9001184a:	4631      	mov	r1, r6
9001184c:	bf28      	it	cs
9001184e:	463a      	movcs	r2, r7
90011850:	f7fe fe1c 	bl	9001048c <memcpy>
90011854:	4631      	mov	r1, r6
90011856:	4640      	mov	r0, r8
90011858:	f7ff f826 	bl	900108a8 <_free_r>
9001185c:	e7e1      	b.n	90011822 <_realloc_r+0x1e>
9001185e:	4635      	mov	r5, r6
90011860:	e7df      	b.n	90011822 <_realloc_r+0x1e>
	...

90011864 <_read_r>:
90011864:	b538      	push	{r3, r4, r5, lr}
90011866:	4d07      	ldr	r5, [pc, #28]	; (90011884 <_read_r+0x20>)
90011868:	4604      	mov	r4, r0
9001186a:	4608      	mov	r0, r1
9001186c:	4611      	mov	r1, r2
9001186e:	2200      	movs	r2, #0
90011870:	602a      	str	r2, [r5, #0]
90011872:	461a      	mov	r2, r3
90011874:	f7ef fdbe 	bl	900013f4 <_read>
90011878:	1c43      	adds	r3, r0, #1
9001187a:	d102      	bne.n	90011882 <_read_r+0x1e>
9001187c:	682b      	ldr	r3, [r5, #0]
9001187e:	b103      	cbz	r3, 90011882 <_read_r+0x1e>
90011880:	6023      	str	r3, [r4, #0]
90011882:	bd38      	pop	{r3, r4, r5, pc}
90011884:	2000a9fc 	.word	0x2000a9fc

90011888 <_raise_r>:
90011888:	291f      	cmp	r1, #31
9001188a:	b538      	push	{r3, r4, r5, lr}
9001188c:	4604      	mov	r4, r0
9001188e:	460d      	mov	r5, r1
90011890:	d904      	bls.n	9001189c <_raise_r+0x14>
90011892:	2316      	movs	r3, #22
90011894:	6003      	str	r3, [r0, #0]
90011896:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
9001189a:	bd38      	pop	{r3, r4, r5, pc}
9001189c:	6c42      	ldr	r2, [r0, #68]	; 0x44
9001189e:	b112      	cbz	r2, 900118a6 <_raise_r+0x1e>
900118a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
900118a4:	b94b      	cbnz	r3, 900118ba <_raise_r+0x32>
900118a6:	4620      	mov	r0, r4
900118a8:	f000 f830 	bl	9001190c <_getpid_r>
900118ac:	462a      	mov	r2, r5
900118ae:	4601      	mov	r1, r0
900118b0:	4620      	mov	r0, r4
900118b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
900118b6:	f000 b817 	b.w	900118e8 <_kill_r>
900118ba:	2b01      	cmp	r3, #1
900118bc:	d00a      	beq.n	900118d4 <_raise_r+0x4c>
900118be:	1c59      	adds	r1, r3, #1
900118c0:	d103      	bne.n	900118ca <_raise_r+0x42>
900118c2:	2316      	movs	r3, #22
900118c4:	6003      	str	r3, [r0, #0]
900118c6:	2001      	movs	r0, #1
900118c8:	e7e7      	b.n	9001189a <_raise_r+0x12>
900118ca:	2400      	movs	r4, #0
900118cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
900118d0:	4628      	mov	r0, r5
900118d2:	4798      	blx	r3
900118d4:	2000      	movs	r0, #0
900118d6:	e7e0      	b.n	9001189a <_raise_r+0x12>

900118d8 <raise>:
900118d8:	4b02      	ldr	r3, [pc, #8]	; (900118e4 <raise+0xc>)
900118da:	4601      	mov	r1, r0
900118dc:	6818      	ldr	r0, [r3, #0]
900118de:	f7ff bfd3 	b.w	90011888 <_raise_r>
900118e2:	bf00      	nop
900118e4:	2000003c 	.word	0x2000003c

900118e8 <_kill_r>:
900118e8:	b538      	push	{r3, r4, r5, lr}
900118ea:	4d07      	ldr	r5, [pc, #28]	; (90011908 <_kill_r+0x20>)
900118ec:	2300      	movs	r3, #0
900118ee:	4604      	mov	r4, r0
900118f0:	4608      	mov	r0, r1
900118f2:	4611      	mov	r1, r2
900118f4:	602b      	str	r3, [r5, #0]
900118f6:	f7ef fd61 	bl	900013bc <_kill>
900118fa:	1c43      	adds	r3, r0, #1
900118fc:	d102      	bne.n	90011904 <_kill_r+0x1c>
900118fe:	682b      	ldr	r3, [r5, #0]
90011900:	b103      	cbz	r3, 90011904 <_kill_r+0x1c>
90011902:	6023      	str	r3, [r4, #0]
90011904:	bd38      	pop	{r3, r4, r5, pc}
90011906:	bf00      	nop
90011908:	2000a9fc 	.word	0x2000a9fc

9001190c <_getpid_r>:
9001190c:	f7ef bd4e 	b.w	900013ac <_getpid>

90011910 <_fstat_r>:
90011910:	b538      	push	{r3, r4, r5, lr}
90011912:	4d07      	ldr	r5, [pc, #28]	; (90011930 <_fstat_r+0x20>)
90011914:	2300      	movs	r3, #0
90011916:	4604      	mov	r4, r0
90011918:	4608      	mov	r0, r1
9001191a:	4611      	mov	r1, r2
9001191c:	602b      	str	r3, [r5, #0]
9001191e:	f7ef fdae 	bl	9000147e <_fstat>
90011922:	1c43      	adds	r3, r0, #1
90011924:	d102      	bne.n	9001192c <_fstat_r+0x1c>
90011926:	682b      	ldr	r3, [r5, #0]
90011928:	b103      	cbz	r3, 9001192c <_fstat_r+0x1c>
9001192a:	6023      	str	r3, [r4, #0]
9001192c:	bd38      	pop	{r3, r4, r5, pc}
9001192e:	bf00      	nop
90011930:	2000a9fc 	.word	0x2000a9fc

90011934 <_isatty_r>:
90011934:	b538      	push	{r3, r4, r5, lr}
90011936:	4d06      	ldr	r5, [pc, #24]	; (90011950 <_isatty_r+0x1c>)
90011938:	2300      	movs	r3, #0
9001193a:	4604      	mov	r4, r0
9001193c:	4608      	mov	r0, r1
9001193e:	602b      	str	r3, [r5, #0]
90011940:	f7ef fdad 	bl	9000149e <_isatty>
90011944:	1c43      	adds	r3, r0, #1
90011946:	d102      	bne.n	9001194e <_isatty_r+0x1a>
90011948:	682b      	ldr	r3, [r5, #0]
9001194a:	b103      	cbz	r3, 9001194e <_isatty_r+0x1a>
9001194c:	6023      	str	r3, [r4, #0]
9001194e:	bd38      	pop	{r3, r4, r5, pc}
90011950:	2000a9fc 	.word	0x2000a9fc

90011954 <_malloc_usable_size_r>:
90011954:	f851 3c04 	ldr.w	r3, [r1, #-4]
90011958:	1f18      	subs	r0, r3, #4
9001195a:	2b00      	cmp	r3, #0
9001195c:	bfbc      	itt	lt
9001195e:	580b      	ldrlt	r3, [r1, r0]
90011960:	18c0      	addlt	r0, r0, r3
90011962:	4770      	bx	lr

90011964 <_init>:
90011964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90011966:	bf00      	nop
90011968:	bcf8      	pop	{r3, r4, r5, r6, r7}
9001196a:	bc08      	pop	{r3}
9001196c:	469e      	mov	lr, r3
9001196e:	4770      	bx	lr

90011970 <_fini>:
90011970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90011972:	bf00      	nop
90011974:	bcf8      	pop	{r3, r4, r5, r6, r7}
90011976:	bc08      	pop	{r3}
90011978:	469e      	mov	lr, r3
9001197a:	4770      	bx	lr
